@page "/publishers"
@page "/publishers/{page}"

@using Microsoft.AspNetCore.Components;
@using Microsoft.Azure.IIoT.App.Services
@using Microsoft.Azure.IIoT.App.Components.Pager
@using Microsoft.Azure.IIoT.App.Components.ErrorMessage
@using Microsoft.Azure.IIoT.App.Data
@using Microsoft.Azure.IIoT.OpcUa.Api.Registry.Models;
@using Microsoft.Azure.IIoT.OpcUa.Api.Registry;
@using Microsoft.Azure.IIoT.App.Common

@inject NavigationManager NavigationManager
@inject Registry RegistryHelper
@inject RegistryServiceEvents RegistryServiceEvents
@inject UICommon CommonHelper

@implements IDisposable

<h1>Publishers</h1>

<table class="table @_tableView">
    <thead>
        <tr>
            <th>Id</th>
            <th>Configuration</th>
            <th>Site Id</th>
            <th>Sync Status</th>
            <th>Connection Status</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var publisher in _pagedPublisherList.Results)
        {
            <tr>
                <td>@publisher.Id</td>
                <td>
                    @{ string Capabilities = CommonHelper.None; }
                    @{ string HeartbeatInterval = CommonHelper.None;}
                    @{ string JobCheckInterval = CommonHelper.None;}
                    @{ string JobOrchestratorUrl = CommonHelper.None;}
                    @{ string MaxWorkers = CommonHelper.None;}
                    @if (publisher.Configuration != null)
                    {
                        Capabilities = publisher.Configuration.Capabilities == null ? CommonHelper.None : publisher.Configuration.Capabilities.ToString();
                        HeartbeatInterval = publisher.Configuration.HeartbeatInterval == null ? CommonHelper.None : publisher.Configuration.HeartbeatInterval.ToString();
                        JobCheckInterval = publisher.Configuration.JobCheckInterval == null ? CommonHelper.None : publisher.Configuration.JobCheckInterval.ToString();
                        JobOrchestratorUrl = publisher.Configuration.JobOrchestratorUrl == null ? CommonHelper.None : publisher.Configuration.JobOrchestratorUrl.ToString();
                        MaxWorkers = publisher.Configuration.MaxWorkers == null ? CommonHelper.None : publisher.Configuration.MaxWorkers.ToString();
                    }
                    Capabilities: @Capabilities<br />
                    HeartbeatInterval: @HeartbeatInterval<br />
                    JobCheckInterval: @JobCheckInterval<br />
                    JobOrchestratorUrl: @JobOrchestratorUrl<br />
                    MaxWorkers: @MaxWorkers
                </td>
                @{string SiteId = publisher.SiteId == null ? CommonHelper.None : publisher.SiteId;}
                <td>@SiteId</td>
                @{string OutOfSync = publisher.OutOfSync == null ? CommonHelper.None : publisher.OutOfSync == true ? "Out Of Sync" : "Synced";}
                <td>@OutOfSync</td>
                @{string ConnectStatus = publisher.Connected == null ? CommonHelper.None : publisher.Connected == true ? "Connected" : "Disconnected";}
                <td>@ConnectStatus</td>
            </tr>
        }
    </tbody>
</table>
<div class="loader-pos @CommonHelper.Spinner"></div>

<ErrorMessage PageError="@_pagedPublisherList.Error" Status="@null"></ErrorMessage>

<Pager Result=@_publisherList PageChanged=@((Page) => PagerPageChanged(Page)) />

@code {

    [Parameter]
    public string Page { get; set; } = "1";

    private PagedResult<PublisherApiModel> _publisherList = new PagedResult<PublisherApiModel>();
    private PagedResult<PublisherApiModel> _pagedPublisherList = new PagedResult<PublisherApiModel>();
    private IAsyncDisposable _publisherEvent { get; set; }
    private string _tableView { get; set; } = "visible";

    /// <summary>
    /// Notify page change
    /// </summary>
    /// <param name="page"></param>
    public void PagerPageChanged(int page)
    {
        _pagedPublisherList = _publisherList.GetPaged(page, CommonHelper.PageLength, null);
        NavigationManager.NavigateTo("/publishers/" + page);
    }

    /// <summary>
    /// OnInitialized
    /// </summary>
    protected override void OnInitialized()
    {
        CommonHelper.Spinner = "loader-big";
    }

    /// <summary>
    /// OnAfterRenderAsync
    /// </summary>
    /// <param name="firstRender"></param>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _publisherList = await RegistryHelper.GetPublisherListAsync();
            Page = "1";
            _pagedPublisherList = _publisherList.GetPaged(Int32.Parse(Page), CommonHelper.PageLength, _publisherList.Error);
            CommonHelper.Spinner = string.Empty;
            if (_pagedPublisherList.Error != null)
            {
                _tableView = "hidden";
            }
            StateHasChanged();

            _publisherEvent = await RegistryServiceEvents.SubscribePublisherEventsAsync(
                ev => InvokeAsync(() => PublisherEvent(ev)));
        }
    }

    private Task PublisherEvent(PublisherEventApiModel ev)
    {
        _publisherList.Results.Update(ev);
        StateHasChanged();
        return Task.CompletedTask;
    }

    public async void Dispose()
    {
        if (_publisherEvent != null)
        {
            await _publisherEvent.DisposeAsync();
        }
    }
}

