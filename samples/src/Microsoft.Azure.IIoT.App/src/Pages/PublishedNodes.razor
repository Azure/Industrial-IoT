@*------------------------------------------------------------
     Copyright (c) Microsoft Corporation.  All rights reserved.
     Licensed under the MIT License (MIT). See License.txt in the repo root for license information.
    ------------------------------------------------------------*@

@page "/PublishedNodes/{page}/{endpointId}"
@page "/PublishedNodes/{page}/{endpointId}/{discovererId}/{applicationId}/{supervisorId}"

@using Microsoft.AspNetCore.Components;
@using Microsoft.Azure.IIoT.App.Services
@using Microsoft.Azure.IIoT.App.Components.Pager
@using Microsoft.Azure.IIoT.App.Components.ErrorMessage
@using Microsoft.Azure.IIoT.App.Common


@inject NavigationManager NavigationManager
@inject Publisher PublisherHelper
@inject UICommon CommonHelper
@inject Registry RegistryHelper

<h1>Published Nodes</h1>

<table class="table @_tableView">
    <thead>
        <tr>
            <th class="width-large">Node Id</th>
            <th class="width-large">Display Name</th>
            <th class="width-small">Publishing Interval</th>
            <th class="width-small">Sampling Interval</th>
            <th class="width-small">Heartbeat Interval</th>
            @if (IsIdGiven(DiscovererId) && IsIdGiven(ApplicationId) && IsIdGiven(SupervisorId))
            {
                <th class="width-xsmall">
                    <a href="/endpoints/1/@DiscovererId/@ApplicationId/@SupervisorId"><span class="oi oi-arrow-left"></span></a>
                </th>
            }
            else
            {
                <th class="width-xsmall">
                    <a href="/endpoints/1"><span class="oi oi-arrow-left"></span></a>
                </th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var node in PagedNodeList.Results)
        {
            <tr>
                <td class="hover-text width-large">
                    <div>
                        @{ string NodeId = CommonHelper.None;
                            NodeId = string.IsNullOrEmpty(node.NodeId) ? CommonHelper.None : node.NodeId;
                        } @NodeId
                    </div>
                </td>
                <td class="hover-text width-large">
                    <div>
                        @{ string DisplayName = CommonHelper.None;
                            DisplayName = string.IsNullOrEmpty(node.DisplayName) ? CommonHelper.None : node.DisplayName;
                        } @DisplayName
                    </div>
                </td>
                <td class="hover-text width-small">
                    <div>
                        @{ string PublishingInterval = CommonHelper.None;
                            PublishingInterval = node.PublishingInterval == null ? CommonHelper.None : node.PublishingInterval.ToString();
                        } @PublishingInterval
                    </div>
                </td>
                <td class="hover-text width-small">
                    <div>
                        @{ string SamplingInterval = CommonHelper.None;
                            SamplingInterval = node.SamplingInterval == null ? CommonHelper.None : node.SamplingInterval.ToString();
                        } @SamplingInterval
                    </div>
                </td>
                <td class="hover-text width-small">
                    <div>
                        @{ string HeartbeatInterval = CommonHelper.None;
                            HeartbeatInterval = node.HeartbeatInterval == null ? CommonHelper.None : node.HeartbeatInterval.ToString();
                        } @HeartbeatInterval
                    </div>
                </td>
                <td></td>
            </tr>
        }
    </tbody>
</table>
<div class="@_tableEmpty center">No published nodes found for this endpoint.</div>

<ErrorMessage PageError="@PagedNodeList.Error" Status="@Status"></ErrorMessage>

<Pager Result=@NodeList PageChanged=@(async(Page) => await PagerPageChangedAsync(Page)) />

<div class="loader-pos @CommonHelper.Spinner"></div>