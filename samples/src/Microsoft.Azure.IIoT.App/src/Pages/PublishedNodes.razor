@*------------------------------------------------------------
     Copyright (c) Microsoft Corporation.  All rights reserved.
     Licensed under the MIT License (MIT). See License.txt in the repo root for license information.
    ------------------------------------------------------------*@

@page "/PublishedNodes/{page}/{endpointId}"
@page "/PublishedNodes/{page}/{endpointId}/{discovererId}/{applicationId}/{supervisorId}"

@using Microsoft.AspNetCore.Components;
@using Microsoft.Azure.IIoT.App.Services
@using Microsoft.Azure.IIoT.App.Components.Pager
@using Microsoft.Azure.IIoT.App.Components.ErrorMessage
@using Microsoft.Azure.IIoT.App.Data
@using Microsoft.Azure.IIoT.OpcUa.Api.Publisher.Models;
@using Microsoft.Azure.IIoT.App.Common
@using Microsoft.Azure.IIoT.OpcUa.Api.Publisher
@using Microsoft.Azure.IIoT.App.Models


@inject NavigationManager NavigationManager
@inject Publisher PublisherHelper
@inject UICommon CommonHelper
@inject Registry RegistryHelper
@inject PublisherServiceEvents PublisherServiceEvents

@implements IDisposable

<h1>Published Nodes</h1>

<table class="table @_tableView">
    <thead>
        <tr>
            <th class="width-large">Node Id</th>
            <th class="width-medium-large">Display Name</th>
            <th class="width-small">Publishing Interval</th>
            <th class="width-small">Sampling Interval</th>
            <th class="width-small">Heartbeat Interval</th>
            <th class="width-medium-large">Value</th>
            @if (IsIdGiven(DiscovererId) && IsIdGiven(ApplicationId) && IsIdGiven(SupervisorId)) {
                <th class="width-xsmall">
                    <a href="/endpoints/1/@DiscovererId/@ApplicationId/@SupervisorId"><span class="oi oi-arrow-left"></span></a>
                </th>
            }
            else {
                <th class="width-xsmall">
                    <a href="/endpoints/1"><span class="oi oi-arrow-left"></span></a>
                </th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var node in _pagednodeList.Results) {
            <tr>
                <td class="hover-text width-large">
                    <div>
                        @{ string NodeId = CommonHelper.None;
                            NodeId = string.IsNullOrEmpty(node.PublishedItem.NodeId) ? CommonHelper.None : node.PublishedItem.NodeId;
                        } @NodeId
                    </div>
                </td>
                <td class="hover-text width-medium-large">
                    <div>
                        @{ string DisplayName = CommonHelper.None;
                            DisplayName = string.IsNullOrEmpty(node.PublishedItem.DisplayName) ? CommonHelper.None : node.PublishedItem.DisplayName;
                        } @DisplayName
                    </div>
                </td>
                <td class="hover-text width-small">
                    <div>
                        @{ string PublishingInterval = CommonHelper.None;
                            PublishingInterval = node.PublishedItem.PublishingInterval == null ? CommonHelper.None : node.PublishedItem.PublishingInterval.ToString();
                        } @PublishingInterval
                    </div>
                </td>
                <td class="hover-text width-small">
                    <div>
                        @{ string SamplingInterval = CommonHelper.None;
                            SamplingInterval = node.PublishedItem.SamplingInterval == null ? CommonHelper.None : node.PublishedItem.SamplingInterval.ToString();
                        } @SamplingInterval
                    </div>
                </td>
                <td class="hover-text width-small">
                    <div>
                        @{ string HeartbeatInterval = CommonHelper.None;
                            HeartbeatInterval = node.PublishedItem.HeartbeatInterval == null ? CommonHelper.None : node.PublishedItem.HeartbeatInterval.ToString();
                        } @HeartbeatInterval
                    </div>
                </td>
                <td class="width-medium-large">
                    <div class="value-scroll">
                        @*<a href="javascript: void(0)" @onclick="@(() => OpenDrawer(node, drawer.Action))">*@
                        @{string outputValue = $"{node.Value}";}
                        @{string outputType = $"({node.DataType})";}
                        @{string outputStatus = $"({node.Status} -";}
                        @{string outputTimestamp = $" {node.Timestamp})";}
                        <span>@outputValue</span>
                        <span>@outputType</span>
                        <span>@outputStatus</span>
                        <span>@outputTimestamp</span>
                        @*</a>*@
                    </div>
                </td>
                <td></td>
            </tr>
        }
    </tbody>
</table>
<div class="@_tableEmpty center">No published nodes found for this endpoint.</div>

<ErrorMessage PageError="@_pagednodeList.Error" Status="@Status"></ErrorMessage>

<Pager Result=@_nodeList PageChanged=@(async(Page) => await PagerPageChanged(Page)) />

<div class="loader-pos @CommonHelper.Spinner"></div>

@code {

    [Parameter]
    public string Page { get; set; } = "1";

    [Parameter]
    public string EndpointId { get; set; } = string.Empty;

    [Parameter]
    public string DiscovererId { get; set; } = string.Empty;

    [Parameter]
    public string ApplicationId { get; set; } = string.Empty;

    [Parameter]
    public string SupervisorId { get; set; } = string.Empty;

    public string Status { get; set; }
    private PagedResult<ListNode> _nodeList =
        new PagedResult<ListNode>();
    private PagedResult<ListNode> _pagednodeList =
        new PagedResult<ListNode>();
    private string _tableView = "visible";
    private string _tableEmpty = "displayNone";
    private IAsyncDisposable _endpointEvents { get; set; }
    private IAsyncDisposable _publishEvent { get; set; }

    /// <summary>
    /// Notify page change
    /// </summary>
    /// <param name="page"></param>
    public async Task PagerPageChanged(int page)
    {
        CommonHelper.Spinner = "loader-big";
        StateHasChanged();
        if (!string.IsNullOrEmpty(_nodeList.ContinuationToken) && page > _pagednodeList.PageCount)
        {
            _nodeList = await PublisherHelper.PublishedAsync(EndpointId, true);
        }
        _pagednodeList = _nodeList.GetPaged(page, CommonHelper.PageLength, null);
        NavigationManager.NavigateTo(NavigationManager.BaseUri + "PublishedNodes/" + page + "/" + EndpointId);
        CommonHelper.Spinner = string.Empty;
        StateHasChanged();
    }

    /// <summary>
    /// OnInitialized
    /// </summary>
    protected override void OnInitialized()
    {
        CommonHelper.Spinner = "loader-big";
    }

    /// <summary>
    /// OnAfterRenderAsync
    /// </summary>
    /// <param name="firstRender"></param>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _nodeList = await PublisherHelper.PublishedAsync(EndpointId, true);
            Page = "1";
            _pagednodeList = _nodeList.GetPaged(Int32.Parse(Page), CommonHelper.PageLength, _nodeList.Error);
            CommonHelper.Spinner = string.Empty;
            CommonHelper.CheckErrorOrEmpty<ListNode>(_pagednodeList, ref _tableView, ref _tableEmpty);
            StateHasChanged();
            _publishEvent = await PublisherServiceEvents.NodePublishSubscribeByEndpointAsync(EndpointId,
                samples => InvokeAsync(() => GetPublishedNodeData(samples)));
        }
    }

    private bool IsIdGiven(string id)
    {
        return !string.IsNullOrEmpty(id);
    }

    /// <summary>
    /// GetPublishedNodeData
    /// </summary>
    /// <param name="samples"></param>
    private Task GetPublishedNodeData(MonitoredItemMessageApiModel samples)
    {
        foreach (var node in _pagednodeList.Results)
        {
            if (node.PublishedItem.NodeId == samples.NodeId)
            {
                node.Value = samples.Value?.ToJson()?.TrimQuotes();
                node.Status = string.IsNullOrEmpty(samples.Status) ? "Good" : samples.Status;
                node.Timestamp = samples.Timestamp.Value.ToLocalTime().ToString();
                this.StateHasChanged();
            }
        }
        return Task.CompletedTask;
    }

    /// <summary>
    /// Dispose
    /// </summary>
    public async void Dispose()
    {
        if (_publishEvent != null)
        {
            await _publishEvent.DisposeAsync();
        }
    }

}
