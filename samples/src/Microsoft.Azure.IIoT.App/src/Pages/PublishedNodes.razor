@*------------------------------------------------------------
  Copyright (c) Microsoft Corporation.  All rights reserved.
  Licensed under the MIT License (MIT). See License.txt in the repo root for license information.
 ------------------------------------------------------------*@

@page "/PublishedNodes/{endpointId}"

@using Microsoft.AspNetCore.Components;
@using Microsoft.Azure.IIoT.App.Services
@using Microsoft.Azure.IIoT.App.Components.Pager
@using Microsoft.Azure.IIoT.App.Components.ErrorMessage
@using Microsoft.Azure.IIoT.App.Data
@using Microsoft.Azure.IIoT.OpcUa.Api.Publisher.Models;
@using Microsoft.Azure.IIoT.App.Common


@inject NavigationManager NavigationManager
@inject Publisher PublisherHelper
@inject UICommon CommonHelper

<h1>Published Nodes</h1>

<table class="table @_tableView">
    <thead>
        <tr>
            <th>Node Id</th>
            <th>Display Name</th>
            <th>Publishing Interval</th>
            <th>Sampling Interval</th>
            <th>Heartbeat Interval</th>
            <th>
                <a href="/endpoints"><span class="oi oi-arrow-left"></span></a>
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var node in _pagednodeList.Results)
        {
            <tr>
                <td>
                    @{ string NodeId = CommonHelper.None;
                        NodeId = string.IsNullOrEmpty(node.NodeId) ? CommonHelper.None : node.NodeId;
                    } @NodeId
                </td>
                <td>
                    @{ string DisplayName = CommonHelper.None;
                        DisplayName = string.IsNullOrEmpty(node.DisplayName) ? CommonHelper.None : node.DisplayName;
                    } @DisplayName
                </td>
                <td>
                    @{ string PublishingInterval = CommonHelper.None;
                        PublishingInterval = node.PublishingInterval == null ? CommonHelper.None : node.PublishingInterval.ToString();
                    } @PublishingInterval
                </td>
                <td>
                    @{ string SamplingInterval = CommonHelper.None;
                        SamplingInterval = node.SamplingInterval == null ? CommonHelper.None : node.SamplingInterval.ToString();
                    } @SamplingInterval
                </td>
                <td>
                    @{ string HeartbeatInterval = CommonHelper.None;
                        HeartbeatInterval = node.HeartbeatInterval == null ? CommonHelper.None : node.HeartbeatInterval.ToString();
                    } @HeartbeatInterval
                </td>
                <td></td>
            </tr>
        }
    </tbody>
</table>
<div class="@_tableEmpty center">No published nodes found for this endpoint.</div>

<ErrorMessage PageError="@_pagednodeList.Error" Status="@Status"></ErrorMessage>

<Pager Result=@_nodeList PageChanged=@(async(Page) => await PagerPageChanged(Page)) />

<div class="loader-pos @CommonHelper.Spinner"></div>

@code {

    [Parameter]
    public string Page { get; set; } = "1";

    [Parameter]
    public string EndpointId { get; set; } = string.Empty;

    public string Status { get; set; }
    private PagedResult<PublishedItemApiModel> _nodeList =
        new PagedResult<PublishedItemApiModel>();
    private PagedResult<PublishedItemApiModel> _pagednodeList =
        new PagedResult<PublishedItemApiModel>();
    private string _tableView = "visible";
    private string _tableEmpty = "displayNone";
    private IAsyncDisposable _endpointEvents { get; set; }

    /// <summary>
    /// Notify page change
    /// </summary>
    /// <param name="page"></param>
    public async Task PagerPageChanged(int page)
    {
        CommonHelper.Spinner = "loader-big";
        StateHasChanged();
        if (!string.IsNullOrEmpty(_nodeList.ContinuationToken) && page > _pagednodeList.PageCount)
        {
            _nodeList = await PublisherHelper.PublishedAsync(EndpointId);
        }
        _pagednodeList = _nodeList.GetPaged(page, CommonHelper.PageLength, null);
        CommonHelper.Spinner = string.Empty;
        StateHasChanged();
    }

    /// <summary>
    /// OnInitialized
    /// </summary>
    protected override void OnInitialized()
    {
        CommonHelper.Spinner = "loader-big";
    }

    /// <summary>
    /// OnAfterRenderAsync
    /// </summary>
    /// <param name="firstRender"></param>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _nodeList = await PublisherHelper.PublishedAsync(EndpointId);
            Page = "1";
            _pagednodeList = _nodeList.GetPaged(Int32.Parse(Page), CommonHelper.PageLength, _nodeList.Error);
            CommonHelper.Spinner = string.Empty;
            CommonHelper.CheckErrorOrEmpty<PublishedItemApiModel>(_pagednodeList, ref _tableView, ref _tableEmpty);
            StateHasChanged();
        }
    }
}
