@*------------------------------------------------------------
     Copyright (c) Microsoft Corporation.  All rights reserved.
     Licensed under the MIT License (MIT). See License.txt in the repo root for license information.
    ------------------------------------------------------------*@

@page "/endpoints"
@page "/endpoints/{discovererId}/{applicationId}"
@page "/endpoints/{discovererId}/{applicationId}/{supervisorId}"

@using Microsoft.AspNetCore.Components;
@using Microsoft.Azure.IIoT.App.Services
@using Microsoft.Azure.IIoT.App.Components.Pager
@using Microsoft.Azure.IIoT.App.Components.ErrorMessage
@using Microsoft.Azure.IIoT.App.Data
@using Microsoft.Azure.IIoT.OpcUa.Api.Registry.Models;
@using Microsoft.Azure.IIoT.OpcUa.Api.Registry;
@using Microsoft.Azure.IIoT.App.Models;
@using Microsoft.Azure.IIoT.App.Common

@inject NavigationManager NavigationManager
@inject IRegistryServiceApi RegistryService
@inject RegistryServiceEvents RegistryServiceEvents
@inject Registry RegistryHelper
@inject UICommon CommonHelper

@implements IDisposable

<h1>Endpoints</h1>

<div>
    @{ string discover = DiscovererId == RegistryHelper.PathAll ? string.Empty : DiscovererId; }
</div>

<table class="table @_tableView">
    <thead>
        <tr>
            <th>Endpoint Url</th>
            <th>Security Mode</th>
            <th>Security Policy</th>
            <th>Security Level</th>
            <th>Endpoint State</th>
            <th>Toggle Endpoint</th>
            <th>Activation Status</th>
            <th> </th>
            <th>
                @if ((DiscovererId != null) && (DiscovererId != @RegistryHelper.PathAll))
                {
                    <a href="/discoverers/">
                        <span class="oi oi-arrow-left"></span>
                    </a>
                }
                else if ((ApplicationId != null) && (ApplicationId != @RegistryHelper.PathAll))
                {
                    <a href="/applications/">
                        <span class="oi oi-arrow-left"></span>
                    </a>
                }
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var endpoint in _pagedendpointList.Results)
        {
            <tr class="@GetEndpointVisibilityString(endpoint)">
                @if (endpoint.EndpointModel.EndpointState == EndpointConnectivityState.Ready ||
                    endpoint.EndpointModel.EndpointState == EndpointConnectivityState.Unauthorized)
                {
                    <td>
                        @{ discover = DiscovererId == null ? RegistryHelper.PathAll : DiscovererId; }
                        @{ string application = ApplicationId == null ? RegistryHelper.PathAll : ApplicationId; }
                        @{ string supervisor = SupervisorId == null ? RegistryHelper.PathAll : SupervisorId; }
                        <a href='browser/@discover/@application/@supervisor/@endpoint.EndpointModel.Registration.Id'>
                            @endpoint.EndpointModel.Registration.Endpoint.Url
                        </a>
                    </td>
                }
                else
                {
                    <td>@endpoint.EndpointModel.Registration.Endpoint.Url</td>
                }
                <td>@endpoint.EndpointModel.Registration.Endpoint.SecurityMode</td>
                @{ var securityPolicy = endpoint.EndpointModel.Registration.Endpoint.SecurityPolicy[(endpoint.EndpointModel.Registration.Endpoint.SecurityPolicy.LastIndexOf("#") + 1)..endpoint.EndpointModel.Registration.Endpoint.SecurityPolicy.Length];}
                <td>@securityPolicy</td>
                <td class="center">@endpoint.EndpointModel.Registration.SecurityLevel</td>
                <td>@(endpoint.EndpointModel.EndpointState?.ToString() ?? "Disconnected")</td>
                <td>
                    @if (IsEndpointActivated(endpoint))
                    {
                        @if (!IsEndpointSeen(endpoint))
                        {
                            <input type="checkbox" checked disabled />
                        }
                        else
                        {
                            <input type="checkbox" checked
                                   @onchange="async eventArgs => { await SetActivation(endpoint.EndpointModel.Registration.Id, eventArgs.Value); }" />
                        }
                        <label>Active</label>
                    }
                    else
                    {
                        @if (!IsEndpointSeen(endpoint))
                        {
                            <input type="checkbox" disabled />
                        }
                        else
                        {
                            <input type="checkbox"
                                   @onchange="async eventArgs => { await SetActivation(endpoint.EndpointModel.Registration.Id, eventArgs.Value); }" />
                        }
                        <label></label>
                    }
                </td>
                <td>@endpoint.EndpointModel.ActivationState.ToString()</td>
                @if (IsEndpointSeen(endpoint) && IsEndpointActivated(endpoint))
                {
                    <td>
                        <a class="ellipsis-space" href='publishedNodes/@endpoint.EndpointModel.Registration.Id'>Published Nodes</a>
                    </td>
                }
                <td></td>
            </tr>
        }
    </tbody>
</table>
<div class="@_tableEmpty center">No Endpoints found.</div>

<ErrorMessage PageError="@_pagedendpointList.Error" Status="@Status"></ErrorMessage>

<Pager Result=@_endpointList PageChanged=@(async(Page) => await PagerPageChanged(Page)) />

<div class="loader-pos @CommonHelper.Spinner"></div>

@code {

    [Parameter]
    public string Page { get; set; } = "1";

    [Parameter]
    public string DiscovererId { get; set; } = string.Empty;

    [Parameter]
    public string ApplicationId { get; set; } = string.Empty;

    [Parameter]
    public string SupervisorId { get; set; } = string.Empty;

    public string Status { get; set; }
    private PagedResult<EndpointInfo> _endpointList =
        new PagedResult<EndpointInfo>();
    private PagedResult<EndpointInfo> _pagedendpointList =
        new PagedResult<EndpointInfo>();
    private string _tableView = "visible";
    private string _tableEmpty = "displayNone";
    private IAsyncDisposable _endpointEvents { get; set; }

    /// <summary>
    /// Notify page change
    /// </summary>
    /// <param name="page"></param>
    public async Task PagerPageChanged(int page)
    {
        CommonHelper.Spinner = "loader-big";
        StateHasChanged();
        if (!string.IsNullOrEmpty(_endpointList.ContinuationToken) && page > _pagedendpointList.PageCount)
        {
            _endpointList = await RegistryHelper.GetEndpointListAsync(DiscovererId, ApplicationId, SupervisorId, _endpointList);
        }
        _pagedendpointList = _endpointList.GetPaged(page, CommonHelper.PageLength, null);
        CommonHelper.Spinner = string.Empty;
        StateHasChanged();
    }

    /// <summary>
    /// OnInitialized
    /// </summary>
    protected override void OnInitialized()
    {
        CommonHelper.Spinner = "loader-big";
    }

    /// <summary>
    /// OnAfterRenderAsync
    /// </summary>
    /// <param name="firstRender"></param>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _endpointList = await RegistryHelper.GetEndpointListAsync(DiscovererId, ApplicationId, SupervisorId);
            Page = "1";
            _pagedendpointList = _endpointList.GetPaged(Int32.Parse(Page), CommonHelper.PageLength, _endpointList.Error);
            CommonHelper.Spinner = string.Empty;
            CommonHelper.CheckErrorOrEmpty<EndpointInfo>(_pagedendpointList, ref _tableView, ref _tableEmpty);
            StateHasChanged();

            _endpointEvents = await RegistryServiceEvents.SubscribeEndpointEventsAsync(
                ev => InvokeAsync(() => EndpointEvent(ev)));
        }
    }

    private Task EndpointEvent(EndpointEventApiModel ev)
    {
        _endpointList.Results.Update(ev);
        _pagedendpointList = _endpointList.GetPaged(Int32.Parse(Page), CommonHelper.PageLength, _endpointList.Error);
        StateHasChanged();
        return Task.CompletedTask;
    }

    public async void Dispose()
    {
        if (_endpointEvents != null)
        {
            await _endpointEvents.DisposeAsync();
        }
    }

    private bool IsEndpointSeen(EndpointInfo endpoint)
    {
        return endpoint.EndpointModel?.NotSeenSince == null;
    }

    /// <summary>
    /// Checks whether the endpoint is activated
    /// </summary>
    /// <param name="endpoint">The endpoint info</param>
    /// <returns>True if the endpoint is activated, false otherwise</returns>
    private bool IsEndpointActivated(EndpointInfo endpoint)
    {
        return endpoint.EndpointModel.ActivationState == EndpointActivationState.Activated ||
             endpoint.EndpointModel.ActivationState == EndpointActivationState.ActivatedAndConnected;
    }

    /// <summary>
    /// Creates a css string for an endpoint row based on activity and availability of the endpoint
    /// </summary>
    /// <param name="endpoint">The endpoint info</param>
    /// <returns>The css string</returns>
    private string GetEndpointVisibilityString(EndpointInfo endpoint)
    {
        if (!this.IsEndpointSeen(endpoint))
        {
            return "enabled-false";
        }
        else if (this.IsEndpointActivated(endpoint))
        {
            return "enabled-true activated-true";
        }
        else
        {
            return "enabled-true";
        }
    }

    /// <summary>
    /// Activate or deactivate an endpoint
    /// </summary>
    /// <param name="endpointId"></param>
    /// <param name="checkedValue"></param>
    /// <returns></returns>
    private async Task SetActivation(string endpointId, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            try
            {
                await RegistryService.ActivateEndpointAsync(endpointId);
            }
            catch (Exception e)
            {
                Status = e.Message;
            }
        }
        else
        {
            try
            {
                await RegistryService.DeactivateEndpointAsync(endpointId);
            }
            catch (Exception e)
            {
                Status = e.Message;
            }
        }
    }
}
