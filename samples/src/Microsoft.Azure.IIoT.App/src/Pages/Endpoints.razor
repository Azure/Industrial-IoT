@page "/endpoints"
@page "/endpoints/{page}"
@page "/endpoints/{discovererId}/{applicationId}"
@page "/endpoints/{discovererId}/{applicationId}/{page}"

@using Microsoft.AspNetCore.Components;
@using Microsoft.Azure.IIoT.App.Services
@using Microsoft.Azure.IIoT.App.Components.Pager
@using Microsoft.Azure.IIoT.App.Data
@using Microsoft.Azure.IIoT.OpcUa.Api.Registry.Models;
@using Microsoft.Azure.IIoT.OpcUa.Api.Registry;
@using Microsoft.Azure.IIoT.App.Models;

@inject NavigationManager NavigationManager
@inject IRegistryServiceApi RegistryService
@inject RegistryServiceEvents RegistryServiceEvents
@inject Registry RegistryHelper

<h1>Endpoints</h1>

<div>
    @{ string discover = DiscovererId == RegistryHelper.PathAll ? string.Empty : DiscovererId; }
    @discover
</div>

<table class="table">
    <thead>
        <tr>
            <th>Endpoint Url</th>
            <th>Security Mode</th>
            <th>Security Policy</th>
            <th>Security Level</th>
            <th>Endpoint State</th>
            <th>Activation Status</th>
            <th>
                @if ((DiscovererId != null) && (DiscovererId != @RegistryHelper.PathAll)) {
                    <a href="/discoverers/">
                        <span class="oi oi-arrow-left"></span>
                    </a>
                }
                else if ((ApplicationId != null) && (ApplicationId != @RegistryHelper.PathAll)) {
                    <a href="/applications/">
                        <span class="oi oi-arrow-left"></span>
                    </a>
                }
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var endpoint in _pagedendpointList.Results) {
        <tr>
            @if (endpoint.EndpointModel.EndpointState == EndpointConnectivityState.Ready) {
                <td>
                    @{ discover = DiscovererId == null ? RegistryHelper.PathAll : DiscovererId; }
                    @{ string application = ApplicationId == null ? RegistryHelper.PathAll : ApplicationId; }
                    <a href='browser/@discover/@application/@endpoint.EndpointModel.Registration.Id'>
                        @endpoint.EndpointModel.Registration.Endpoint.Url
                    </a>
                </td>
            }
            else {
                <td>@endpoint.EndpointModel.Registration.Endpoint.Url</td>
            }
            <td>@endpoint.EndpointModel.Registration.Endpoint.SecurityMode</td>
            <td>@endpoint.EndpointModel.Registration.Endpoint.SecurityPolicy</td>
            <td>@endpoint.EndpointModel.Registration.SecurityLevel</td>
            <td>@(endpoint.EndpointModel.EndpointState?.ToString() ?? "Disconnected")</td>
            <td>
                @if (endpoint.EndpointModel.ActivationState == EndpointActivationState.ActivatedAndConnected ||
                endpoint.EndpointModel.ActivationState == EndpointActivationState.Activated) {
                    <input type="checkbox" checked
                           @onchange="async eventArgs => { await SetActivation(endpoint.EndpointModel.Registration.Id, eventArgs.Value); }" />
                    @endpoint.EndpointModel.ActivationState.ToString()
                }
                else {
                    <input type="checkbox"
                           @onchange="async eventArgs => { await SetActivation(endpoint.EndpointModel.Registration.Id, eventArgs.Value); }" />
                    @endpoint.EndpointModel.ActivationState.ToString()
                }

            </td>
            <td></td>
        </tr>
        }
    </tbody>
</table>
<div class="loader-pos @_spinner"></div>

<Pager Result=@_endpointList PageChanged=@((Page) => PagerPageChanged(Page)) />

@code {

    [Parameter]
    public string Page { get; set; } = "1";

    [Parameter]
    public string DiscovererId { get; set; } = string.Empty;

    [Parameter]
    public string ApplicationId { get; set; } = string.Empty;

    private IAsyncDisposable _endpointEvents { get; set; }
    public const int PageLength = 10;
    private PagedResult<EndpointInfo> _endpointList =
        new PagedResult<EndpointInfo>();
    private PagedResult<EndpointInfo> _pagedendpointList =
        new PagedResult<EndpointInfo>();
    private string _spinner { get; set; }

    /// <summary>
    /// Notify page change
    /// </summary>
    /// <param name="page"></param>
    public void PagerPageChanged(int page) {
        _pagedendpointList = _endpointList.GetPaged(page, PageLength);
        NavigationManager.NavigateTo("/endpoints/" + page);
    }

    /// <summary>
    /// OnInitialized
    /// </summary>
    protected override void OnInitialized() {
        _spinner = "loader-big";
    }

    /// <summary>
    /// OnAfterRenderAsync
    /// </summary>
    /// <param name="firstRender"></param>
    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            _endpointList = await RegistryHelper.GetEndpointListAsync(DiscovererId, ApplicationId);
            Page = "1";
            _pagedendpointList = _endpointList.GetPaged(Int32.Parse(Page), PageLength);
            _spinner = "";
            StateHasChanged();

            _endpointEvents = await RegistryServiceEvents.SubscribeEndpointEventsAsync(null,
                ev => InvokeAsync(() => EndpointEvent(ev)));
        }
    }

    private Task EndpointEvent(EndpointEventApiModel ev)
    {
        _endpointList.Results.Update(ev);
        StateHasChanged();
        return Task.CompletedTask;
    }

    public async void Dispose()
    {
        if (_endpointEvents != null)
        {
            await _endpointEvents.DisposeAsync();
        }
    }

    /// <summary>
    /// Activate or deactivate an endpoint
    /// </summary>
    /// <param name="endpointId"></param>
    /// <param name="checkedValue"></param>
    /// <returns></returns>
    private async Task SetActivation(string endpointId, object checkedValue) {
        if ((bool)checkedValue) {
            await RegistryService.ActivateEndpointAsync(endpointId);
        }
        else {
            await RegistryService.DeactivateEndpointAsync(endpointId);
        }
    }
}
