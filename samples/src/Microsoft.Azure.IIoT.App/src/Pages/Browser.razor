@page "/browser/{applicationId}/{endpointId}/{applicationUri}"
@page "/browser/{discovererId}/{applicationId}/{supervisorId}/{endpointId}/{applicationUri}"
@page "/browser/{discovererId}/{applicationId}/{supervisorId}/{endpointId}/{applicationUri}/{page}"


@using Microsoft.Azure.IIoT.App.Services
@using Microsoft.Azure.IIoT.App.Components.Pager
@using Microsoft.Azure.IIoT.App.Components.Drawer
@using Microsoft.Azure.IIoT.App.Components.ErrorMessage
@using Microsoft.Azure.IIoT.App.Data
@using Microsoft.AspNetCore.Components
@using Microsoft.Azure.IIoT.OpcUa.Api.Twin.Models
@using Microsoft.Azure.IIoT.OpcUa.Api.Core.Models
@using Microsoft.Azure.IIoT.OpcUa.Api.Publisher
@using Microsoft.Azure.IIoT.OpcUa.Api.Publisher.Models
@using Microsoft.Azure.IIoT.App.Common
@using System.Collections.Generic

@inject NavigationManager NavigationManager
@inject Services.Browser BrowseManager
@inject Services.Publisher Publisher
@inject PublisherServiceEvents PublisherServiceEvents
@inject Registry RegistryHelper
@inject UICommon CommonHelper

@implements IDisposable

<h1>Endpoint Control</h1>

<div>
    @if (DiscovererId != string.Empty && DiscovererId != RegistryHelper.PathAll)
    {
        <a href="/discoverers/">/ @DiscovererId</a>
    }
    @if (ApplicationUri != string.Empty && ApplicationUri != RegistryHelper.PathAll)
    {
        <a href="/applications/">/ @ApplicationUri</a>
    }
    @if (SupervisorId != string.Empty && SupervisorId != RegistryHelper.PathAll)
    {
        <a href="/supervisors/">/ @SupervisorId</a>
    }

    @if (BrowseManager.Path != null)
    {
        var index = 0;
        foreach (var item in BrowseManager.Path)
        {
            int i = ++index;
            if (item.Equals(BrowseManager.Path.Last()))
            {
                <span>/ @item.ToString()</span>
            }
            else
            {
                <a href="javascript: void(0)" @onclick="@(() => GetTreeBackAsync(PagedNodeList.Results[0].NextParentId, PagedNodeList.Results[0].ParentIdList, i))">
                    / @item.ToString()
                </a>
            }
        }
    }
</div>

<table class="table @_tableView">
    <thead>
        <tr>
            <th>Name</th>
            <th>Node Id</th>
            <th>Node Type</th>
            <th>Value</th>
            <th>Publishing</th>
            <th>
                @if (PagedNodeList.Results.Count > 0)
                {
                    if (PagedNodeList.Results[0].ParentName != "Root")
                    {
                        <a href="javascript: void(0)" @onclick="@(() => GetTreeBackAsync(PagedNodeList.Results[0].NextParentId, PagedNodeList.Results[0].ParentIdList, PagedNodeList.Results[0].ParentIdList.Count - 1))">
                            <span class="oi oi-arrow-left"></span>
                        </a>
                    }
                    else
                    {
                        if (PagedNodeList.Results[0].DiscovererId != null)
                        {
                            <a href='endpoints/@PagedNodeList.Results[0].DiscovererId/@ApplicationId/@SupervisorId'>
                                <span class="oi oi-arrow-left"></span>
                            </a>
                        }
                    }
                }
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var node in PagedNodeList.Results)
        {
            <tr>
                <td>@node.NodeName</td>
                <td>@node.Id</td>
                @if (node.Children && (node.NodeClass != NodeClass.Method))
                {
                    <td>
                        <a href="javascript: void(0)" @onclick="@(() => GetTreeAsync(node.Id, node.ParentIdList))">
                            @node.NodeClass
                        </a>
                    </td>
                }
                else if (node.NodeClass == NodeClass.Method)
                {
                    <td>
                        <a href="javascript: void(0)" @onclick="@(() => OpenDrawer(node))">
                            @node.NodeClass
                        </a>
                    </td>
                }
                else
                {
                    <td>@node.NodeClass</td>
                }
                @if (node.NodeClass == NodeClass.Variable && (((node.AccessLevel & NodeAccessLevel.CurrentRead) == NodeAccessLevel.CurrentRead) ||
                      ((node.AccessLevel & NodeAccessLevel.CurrentWrite) == NodeAccessLevel.CurrentWrite)))
                {
                    <td>
                        <div class="td-fixed">
                            <a href="javascript: void(0)" @onclick="@(() => OpenDrawer(node))">
                                @{string outputValue = $"{node.Value}";}
                                @{string outputType = $"({node.DataType})";}
                                <span>@outputValue</span>
                                <span>@outputType</span>
                            </a>
                        </div>
                    </td>
                }
                else
                {
                    <td>N/A</td>
                }

                @if (node.NodeClass == NodeClass.Variable)
                {
                    <td>
                        <input type="checkbox" checked=@node.Publishing @onchange="@((EventArgs) => SetPublishing(EndpointId, node, EventArgs))" />
                        <a href="javascript: void(0)" @onclick="@(() => OpenDrawer(node))">
                            @{string output = (node.Publishing == true && node.PublishedItem != null) ? $"On, sampling {node.PublishedItem?.SamplingInterval.Value.TotalMilliseconds} ms" : "Off";}
                            @output
                        </a>
                    </td>
                }
                else
                {
                    <td>N/A</td>
                }
            </tr>
        }
    </tbody>
</table>
<div class="loader-pos @CommonHelper.Spinner"></div>

<ErrorMessage PageError="@PagedNodeList.Error" Status="@null"></ErrorMessage>

<Drawer HeaderText="Select Action" ObjectData="@NodeData" IsOpened="@IsOpened" CloseDrawer="@(() => CloseDrawer())">
    <_DrawerActionContent nodeData="@NodeData" endpointId="@EndpointId" pagedNodeList="@PagedNodeList"></_DrawerActionContent>
</Drawer>

<Pager Result=@NodeList PageChanged=@(async(Page) => PagerPageChanged(Page)) />


@code {

    [Parameter]
    public string DiscovererId { get; set; } = string.Empty;

    [Parameter]
    public string EndpointId { get; set; } = string.Empty;

    [Parameter]
    public string ApplicationId { get; set; } = string.Empty;

    [Parameter]
    public string SupervisorId { get; set; } = string.Empty;

    [Parameter]
    public string ApplicationUri { get; set; } = string.Empty;

    [Parameter]
    public string Page { get; set; } = "1";

    public PagedResult<ListNode> NodeList = new PagedResult<ListNode>();
    public PagedResult<ListNode> PagedNodeList = new PagedResult<ListNode>();
    public bool IsOpened { get; set; } = false;
    public ListNode NodeData { get; set; }
    private IAsyncDisposable _publishEvent { get; set; }
    private string _tableView { get; set; } = "visible";


    /// <summary>
    /// Notify page change
    /// </summary>
    /// <param name="page"></param>
    public async void PagerPageChanged(int page)
    {
        PagedNodeList = NodeList.GetPaged(page, CommonHelper.PageLength, null);
        foreach (var node in PagedNodeList.Results)
        {
            // fetch the actual value
            if (node.NodeClass == NodeClass.Variable)
            {
                node.Value = await BrowseManager.ReadValueAsync(EndpointId, node.Id);
            }
        }
        NavigationManager.NavigateTo("/browser/" + DiscovererId + "/" + ApplicationId + "/" + SupervisorId + "/" + EndpointId + "/" + page);
    }

    /// <summary>
    /// OnInitialized
    /// </summary>
    protected override void OnInitialized()
    {
        CommonHelper.Spinner = "loader-big";
    }

    /// <summary>
    /// OnAfterRenderAsync
    /// </summary>
    /// <param name="firstRender"></param>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await BrowseTreeAsync(string.Empty, new List<string>(), BrowseDirection.Forward, 0);
            CommonHelper.Spinner = string.Empty;
            if (PagedNodeList.Error != null)
            {
                _tableView = "hidden";
            }
            StateHasChanged();
            _publishEvent = await PublisherServiceEvents.NodePublishSubscribeByEndpointAsync(EndpointId, PublishEvent);
        }
    }

    /// <summary>
    /// Browse forward the tree nodes
    /// </summary>
    /// <param name="id"></param>
    /// <param name="parentId"></param>
    private async Task GetTreeAsync(string id, List<string> parentId)
    {
        await BrowseTreeAsync(id, parentId, BrowseDirection.Forward, 0);
    }

    /// <summary>
    /// Browse backward the tree nodes
    /// </summary>
    /// <param name="id"></param>
    /// <param name="parentId"></param>
    private async Task GetTreeBackAsync(string id, List<string> parentId, int index)
    {
        await BrowseTreeAsync(id, parentId, BrowseDirection.Backward, index);
        NavigationManager.NavigateTo("/browser/" + DiscovererId + "/" + ApplicationId + "/" + SupervisorId + "/" + EndpointId + "/" + ApplicationUri); 
    }

    /// <summary>
    /// Browse the tree nodes
    /// </summary>
    /// <param name="id"></param>
    /// <param name="parentId"></param>
    /// <param name="direction"></param>
    private async Task BrowseTreeAsync(String id, List<string> parentId, BrowseDirection direction, int index)
    {
        CommonHelper.Spinner = "loader-big";
        NodeList = await BrowseManager.GetTreeAsync(EndpointId, id, parentId, DiscovererId, direction, index);
        var publishedNodes = await Publisher.PublishedAsync(EndpointId);

        foreach (var node in NodeList.Results)
        {
            if (node.NodeClass == NodeClass.Variable)
            {
                // check if publishing enabled
                foreach (var publishedItem in publishedNodes.Results)
                {
                    if (node.Id == publishedItem.NodeId)
                    {
                        node.PublishedItem = publishedItem;
                        node.Publishing = true;
                        break;
                    }
                }
            }
        }

        Page = "1";
        PagedNodeList = NodeList.GetPaged(Int32.Parse(Page), CommonHelper.PageLength, NodeList.Error);
        CommonHelper.Spinner = "";
    }

    /// <summary>
    /// Publish a node
    /// </summary>
    /// <param name="endpointId"></param>
    /// <param name="node"></param>
    private async Task SetPublishing(string endpointId, ListNode node, ChangeEventArgs ev)
    {
        if ((bool)ev.Value)
        {
            var result = await Publisher.StartPublishingAsync(endpointId, node.Id, node.NodeName, 1000, 1000);
            if (result)
            {
                node.PublishedItem = new OpcUa.Api.Publisher.Models.PublishedItemApiModel()
                {
                    NodeId = node.Id,
                    DisplayName = node.NodeName,
                    PublishingInterval = TimeSpan.FromMilliseconds(1000),
                    SamplingInterval = TimeSpan.FromMilliseconds(1000)
                };
                node.Publishing = true;
            }
            else
            {
                node.PublishedItem = null;
                node.Publishing = false;
            }
        }
        else
        {
            var result = await Publisher.StopPublishingAsync(endpointId, node.Id);
            if (result)
            {
                node.PublishedItem = null;
                node.Publishing = false;
            }
        }
    }

    /// <summary>
    /// Open the Drawer
    /// </summary>
    /// <param name="node"></param>
    private void OpenDrawer(ListNode node)
    {
        IsOpened = true;
        NodeData = node;
    }

    /// <summary>
    /// Close the Drawer
    /// </summary>
    private void CloseDrawer()
    {
        IsOpened = false;
        BrowseManager.MethodCallResponse = null;
        this.StateHasChanged();
    }

    private Task PublishEvent(MonitoredItemMessageApiModel samples)
    {
        foreach (var node in PagedNodeList.Results)
        {
            if (node.Id == samples.NodeId)
            {
                node.Value = $"{samples.Value?.ToJson()} ({samples.Status}/{samples.Timestamp})";
                this.StateHasChanged();
            }
        }
        return Task.CompletedTask;
    }

    public async void Dispose()
    {
        if (_publishEvent != null)
        {
            await _publishEvent.DisposeAsync();
        }
    }
}