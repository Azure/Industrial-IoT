@page "/"
@page "/discoverers"

@using Microsoft.Azure.IIoT.App.Services
@using Microsoft.Azure.IIoT.App.Components.Pager
@using Microsoft.Azure.IIoT.App.Components.Drawer
@using Microsoft.Azure.IIoT.App.Components.ErrorMessage
@using Microsoft.Azure.IIoT.App.Data
@using Microsoft.AspNetCore.Components
@using Microsoft.Azure.IIoT.OpcUa.Api.Registry
@using Microsoft.Azure.IIoT.OpcUa.Api.Registry.Models
@using Microsoft.Azure.IIoT.App.Common

@inject NavigationManager NavigationManager
@inject Registry RegistryHelper
@inject RegistryServiceEvents RegistryServiceEvents
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UICommon CommonHelper

@implements IDisposable

<h1>Asset Discovery</h1>

<table class="table @_tableView">
    <thead>
        <tr>
            <th>Discovery Module Id</th>
            <th>Connection Status</th>
            <th>Enable scanning</th>
            <th>Effective Configuration</th>
        </tr>
    </thead>
    <tbody>
        @{string connectStatus = "Disconnected"; }
        @foreach (var discoverer in _pagedDiscovererList.Results)
        {
            <tr>
                @if (discoverer.HasApplication == true)
                {
                    <td>
                        <a href='endpoints/@discoverer.DiscovererModel.Id/@RegistryHelper.PathAll/@RegistryHelper.PathAll/@RegistryHelper.PathAll'>
                            @discoverer.DiscovererModel.Id
                        </a>
                    </td>
                }
                else
                {
                    <td>@discoverer.DiscovererModel.Id</td>
                }
                @{connectStatus = discoverer.DiscovererModel.Connected == true ? "Connected" : "Disconnected";}
                <td>
                    @connectStatus
                </td>
                <td>
                    @if (discoverer.DiscovererModel.Connected == true)
                    {
                        <input type="checkbox" enabled @bind="@discoverer.ScanStatus" @onclick="@(async() => await SetScanAsync(discoverer))" />
                    }
                    else
                    {
                        <input type="checkbox" disabled @bind="@discoverer.ScanStatus" />
                    }

                    @{string output = discoverer.ScanStatus == true ? "On" : "Off";}
                    @output
                    @if (discoverer.IsSearching)
                    {
                        <div class=" pos-right loader"></div>
                    }
                    else
                    {
                        <div class=" pos-right"></div>
                    }
                </td>
                <td>
                    Scan Mask: <a href="javascript: void(0)" @onclick="@(() => OpenDrawer(discoverer))">
                        @(discoverer.EffectiveAddressRangesToScan ?? "Default")<br />
                    </a>
                    Port Range: <a href="javascript: void(0)" @onclick="@(() => OpenDrawer(discoverer))">
                        @(discoverer.EffectivePortRangesToScan ?? "Default")<br />
                    </a>
                    Max Network Probes: <a href="javascript: void(0)" @onclick="@(() => OpenDrawer(discoverer))">
                        @(discoverer.EffectiveMaxNetworkProbes ?? "Default")<br />
                    </a>
                    Max Port Probes: <a href="javascript: void(0)" @onclick="@(() => OpenDrawer(discoverer))">
                        @(discoverer.EffectiveMaxPortProbes ?? "Default")<br />
                    </a>
                    Network Probe Timeout (hh:mm.ss): <a href="javascript: void(0)" @onclick="@(() => OpenDrawer(discoverer))">
                        @(discoverer.EffectiveNetworkProbeTimeout ?? "Default")<br />
                    </a>
                    Port Probe Timeout (hh:mm.ss): <a href="javascript: void(0)" @onclick="@(() => OpenDrawer(discoverer))">
                        @(discoverer.EffectivePortProbeTimeout ?? "Default")<br />
                    </a>
                    Idle Time Between Scans (hh:mm.ss): <a href="javascript: void(0)" @onclick="@(() => OpenDrawer(discoverer))">
                        @(discoverer.EffectiveIdleTimeBetweenScans ?? "Default")<br />
                    </a>
                    Discovery Urls:
                    @if (discoverer.EffectiveDiscoveryUrls.Count == 0)
                    {
                        <a href="javascript: void(0)" @onclick="@(() => OpenDrawer(discoverer))">
                            (None)
                        </a>
                    }
                    else
                    {
                        @foreach (var url in discoverer.EffectiveDiscoveryUrls)
                        {
                            <a href="javascript: void(0)" @onclick="@(() => OpenDrawer(discoverer))">
                                @url<br />
                            </a>
                        }
                    }
                </td>
            </tr>
        }
    </tbody>
</table>
<div class="results @_scanResult">
    Scan Results:
    <div class="events">
        @_eventResult
    </div>
</div>

<ErrorMessage PageError="@_pagedDiscovererList.Error" Status="@Status"></ErrorMessage>

<Drawer HeaderText="Discovery Scan Config" ObjectData="@DiscovererData" IsOpened="@IsOpened" CloseDrawer="@(() => CloseDrawer())">
    <div class="drawer-content list-group">
        <div class="list-group-item text-justify list-group-item-heading">
            <b>Enter configuration parameters for scan.</b>
            <br><b>To apply default config leave the input field blank and click on apply</b>
        </div>
        <hr />
        <div class="list-group-item text-left">
            <form>
                <div class="form-group">
                    <label>Mask address range (CIDR notation)</label>
                    <input @bind="@DiscovererData.RequestedAddressRangesToScan" aria-label="addressRange" id="ipAddressMask" type="text" class="form-control" placeholder="@(DiscovererData.EffectiveAddressRangesToScan ?? "IP-address/netmask")" />
                </div>
                <div class="form-group">
                    <label>Port range</label>
                    <input @bind="@DiscovererData.RequestedPortRangesToScan" aria-label="portRange" id="PortRange" type="text" class="form-control" placeholder="@(DiscovererData.EffectivePortRangesToScan ?? "StartPort-EndPort")" />
                </div>
                <div class="form-group">
                    <label>Max Network Probes</label>
                    <input @bind="@DiscovererData.RequestedMaxNetworkProbes" aria-label="maxNetworkProbes" id="MaxNetworkProbes" type="text" class="form-control" placeholder="@(DiscovererData.EffectiveMaxNetworkProbes ?? "Max Network Probes")" />
                </div>
                <div class="form-group">
                    <label>Network Probe Timeout</label>
                    <input @bind="@DiscovererData.RequestedNetworkProbeTimeout" aria-label="networkProbeTimeout" id="NetworkProbeTimeout" type="text" class="form-control" placeholder="@(DiscovererData.EffectiveNetworkProbeTimeout ?? "Network Probe Timeout")" />
                </div>
                <div class="form-group">
                    <label>Max Port Probes</label>
                    <input @bind="@DiscovererData.RequestedMaxPortProbes" aria-label="maxPortProbes" id="MaxPortProbes" type="text" class="form-control" placeholder="@(DiscovererData.EffectiveMaxPortProbes ?? "Max Port Probes")" />
                </div>
                <div class="form-group">
                    <label>Port Probe Timeout</label>
                    <input @bind="@DiscovererData.RequestedPortProbeTimeout" aria-label="portProbeTimeout" id="PortProbeTimeout" type="text" class="form-control" placeholder="@(DiscovererData.EffectivePortProbeTimeout ?? "Port Probe Timeout")" />
                </div>
                <div class="form-group">
                    <label>Idle TimeBetween Scans</label>
                    <input @bind="@DiscovererData.RequestedIdleTimeBetweenScans" aria-label="IdleTimeBetweenScans" id="IdleTimeBetweenScans" type="text" class="form-control" placeholder="@(DiscovererData.EffectiveIdleTimeBetweenScans ?? "Idle Time Between Scans")" />
                </div>
                <label>Discovery Urls</label>
                <div class="flex">
                    <input @bind="@_discoveryUrl" aria-label="DiscoveryUrls" id="DiscoveryUrls" type="text" class="form-control" placeholder="Discovery Url" />
                    <button @onclick="@(() => DiscovererData.AddDiscoveryUrl(_discoveryUrl))" type="button" class="btn btn-primary shadow-none margin-right">Add</button>
                    <button @onclick="@(() => DiscovererData.RemoveDiscoveryUrl(_discoveryUrl))" type="button" class="btn btn-primary shadow-none">Clear</button>
                </div>
                <div class="form-group margin-top">
                    <select class="form-control">
                        @if (DiscovererData.RequestedDiscoveryUrls.Count == 0)
                        {
                            <option>(None)</option>
                        }
                        else
                        {
                            foreach (var discoveryUrl in DiscovererData.RequestedDiscoveryUrls)
                            {
                                <option value="@discoveryUrl">@discoveryUrl</option>
                            }
                        }
                    </select>
                </div>
                <hr />
                <div>
                    <button @onclick="@(async() => await UpdateDiscovererConfigAsync(DiscovererData))" type="button" class="btn btn-primary shadow-none">Apply</button>
                </div>
                <ErrorMessage PageError="@null" Status="@Status"></ErrorMessage>
            </form>
        </div>
    </div>
</Drawer>

<Pager Result=@_discovererList PageChanged=@((Page) => PagerPageChanged(Page)) />

<div class="loader-pos @CommonHelper.Spinner"></div>


@code {

    [Parameter]
    public string Page { get; set; } = "1";

    public bool IsSearching { get; set; } = false;
    public bool IsOpened { get; set; } = false;
    public DiscovererInfo DiscovererData { get; set; }
    public string Status { get; set; }

    private PagedResult<DiscovererInfo> _discovererList = new PagedResult<DiscovererInfo>();
    private PagedResult<DiscovererInfo> _pagedDiscovererList = new PagedResult<DiscovererInfo>();
    private string _eventResult { get; set; }
    private string _scanResult { get; set; } = "hidden";
    private string _tableView { get; set; } = "visible";
    private string _discoveryUrl { get; set; }

    private IAsyncDisposable _discovererEvent { get; set; }
    private IAsyncDisposable _discovery { get; set; }


    /// <summary>
    /// Notify page change
    /// </summary>
    /// <param name="page"></param>
    /// <returns></returns>
    public void PagerPageChanged(int page)
    {
        CommonHelper.Spinner = "loader-big";
        StateHasChanged();
        _discovererList = CommonHelper.UpdatePage(RegistryHelper.GetDiscovererListAsync, page, _discovererList, ref _pagedDiscovererList);
        CommonHelper.Spinner = string.Empty;
        StateHasChanged();
    }

    /// <summary>
    /// OnInitialized
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        CommonHelper.Spinner = "loader-big";
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User?.Identity.IsAuthenticated != true)
        {
            NavigationManager.NavigateTo("AzureAD/Account/SignIn", true);
        }
    }

    /// <summary>
    /// OnAfterRenderAsync
    /// </summary>
    /// <param name="firstRender"></param>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _discovererList = await RegistryHelper.GetDiscovererListAsync();
            Page = "1";
            _pagedDiscovererList = _discovererList.GetPaged(Int32.Parse(Page), CommonHelper.PageLengthSmall, _discovererList.Error);
            CommonHelper.Spinner = string.Empty;

            if (_pagedDiscovererList.Error != null)
            {
                _tableView = "hidden";
            }
            StateHasChanged();

            _discovererEvent = await RegistryServiceEvents.SubscribeDiscovererEventsAsync(
                ev => InvokeAsync(() => DiscovererEvent(ev)));
        }
    }

    /// <summary>
    /// Enable discoverer scan
    /// </summary>
    /// <param name="discoverer"></param>
    /// <param name="forceScan"></param>
    /// <param name="ipMask"></param>
    /// <param name="portRange"></param>
    private async Task SetScanAsync(DiscovererInfo discoverer)
    {
        _discovery = await RegistryServiceEvents.SubscribeDiscoveryProgressByDiscovererIdAsync(
            discoverer.DiscovererModel.Id, async data =>
            {
                await InvokeAsync(() => ScanProgress(data));
            });

        try
        {
            _eventResult = string.Empty;

            if (discoverer.ScanStatus == true)
            {
                discoverer.IsSearching = true;
                _scanResult = "visible";
                DiscovererData = discoverer;
            }
            else
            {
                discoverer.IsSearching = false;
                _scanResult = "hidden";
                await _discovery.DisposeAsync();
            }
            Status = await RegistryHelper.SetDiscoveryAsync(discoverer);
        }
        catch
        {
            await _discovery.DisposeAsync();
        }
    }

    private async Task UpdateDiscovererConfigAsync(DiscovererInfo discoverer)
    {
        Status = await RegistryHelper.UpdateDiscovererAsync(discoverer);
        CloseDrawer();
        await this.OnAfterRenderAsync(true);
    }

    /// <summary>
    /// Open then Drawer
    /// </summary>
    /// <param name="OpenDrawer"></param>
    private void OpenDrawer(DiscovererInfo discoverer)
    {
        IsOpened = true;
        DiscovererData = discoverer;
    }

    /// <summary>
    /// Close the Drawer
    /// </summary>
    private void CloseDrawer()
    {
        IsOpened = false;
        this.StateHasChanged();
    }

    /// <summary>
    /// display discoverers scan events
    /// </summary>
    /// <param name="ev"></param>
    private void ScanProgress(DiscoveryProgressApiModel ev)
    {
        switch (ev.EventType)
        {
            case DiscoveryProgressType.Pending:
                _eventResult += string.Format("{0}: {1} waiting...", ev.DiscovererId, ev.Total) + System.Environment.NewLine;
                break;
            case DiscoveryProgressType.Started:
                _eventResult += string.Format("{0}: Started.", ev.DiscovererId) + System.Environment.NewLine;
                break;
            case DiscoveryProgressType.NetworkScanStarted:
                _eventResult += string.Format("{0}: Scanning network...", ev.DiscovererId) + System.Environment.NewLine;
                break;
            case DiscoveryProgressType.NetworkScanResult:
                _eventResult += string.Format("{0}: {1}/{2}: {3} addresses found - NEW: {4}...", ev.DiscovererId, ev.Progress, ev.Total, ev.Discovered, ev.Result) + System.Environment.NewLine;
                break;
            case DiscoveryProgressType.NetworkScanProgress:
                _eventResult += string.Format("{0}: {1}/{2}: {3} addresses found", ev.DiscovererId, ev.Progress, ev.Total, ev.Discovered) + System.Environment.NewLine;
                break;
            case DiscoveryProgressType.NetworkScanFinished:
                _eventResult += string.Format("{0}: {1}/{2}: {3} addresses found - complete!", ev.DiscovererId, ev.Progress, ev.Total, ev.Discovered) + System.Environment.NewLine;
                break;
            case DiscoveryProgressType.PortScanStarted:
                _eventResult += string.Format("{0}: Scanning ports...", ev.DiscovererId) + System.Environment.NewLine;
                break;
            case DiscoveryProgressType.PortScanResult:
                _eventResult += string.Format("{0}: {1}/{2}: {3} ports found - NEW: {4}", ev.DiscovererId, ev.Progress, ev.Total, ev.Discovered, ev.Result) + System.Environment.NewLine;
                break;
            case DiscoveryProgressType.PortScanProgress:
                _eventResult += string.Format("{0}: {1}/{2}: {3} ports found", ev.DiscovererId, ev.Progress, ev.Total, ev.Discovered) + System.Environment.NewLine;
                break;
            case DiscoveryProgressType.PortScanFinished:
                _eventResult += string.Format("{0}: {1}/{2}: {3} ports found - complete!", ev.DiscovererId, ev.Progress, ev.Total, ev.Discovered) + System.Environment.NewLine;
                break;
            case DiscoveryProgressType.ServerDiscoveryStarted:
                _eventResult += "==========================================" + System.Environment.NewLine;
                _eventResult += string.Format("{0}: {1}/{2}: Finding servers...", ev.DiscovererId, ev.Progress, ev.Total) + System.Environment.NewLine;
                break;
            case DiscoveryProgressType.EndpointsDiscoveryStarted:
                _eventResult += string.Format("{0}: {1}/{2}: ... {3} servers found - find endpoints on {4}...", ev.DiscovererId, ev.Progress, ev.Total, ev.Discovered, ev.RequestDetails["url"]) + System.Environment.NewLine;
                break;
            case DiscoveryProgressType.EndpointsDiscoveryFinished:
                _eventResult += string.Format("{0}: {1}/{2}: ... {3} servers found - {4} endpoints found on {5}...", ev.DiscovererId, ev.Progress, ev.Total, ev.Discovered, ev.Result, ev.RequestDetails["url"]) + System.Environment.NewLine;
                break;
            case DiscoveryProgressType.ServerDiscoveryFinished:
                _eventResult += string.Format("{0}: {1}/{2}: ... {3} servers found.", ev.DiscovererId, ev.Progress, ev.Total, ev.Discovered) + System.Environment.NewLine;
                break;
            case DiscoveryProgressType.Cancelled:
                _eventResult += "==========================================" + System.Environment.NewLine;
                _eventResult += string.Format("{0}: Cancelled.", ev.DiscovererId) + System.Environment.NewLine;
                if (DiscovererData != null)
                {
                    DiscovererData.IsSearching = false;
                }
                break;
            case DiscoveryProgressType.Error:
                _eventResult += "==========================================" + System.Environment.NewLine;
                _eventResult += string.Format("{0}: Failure.", ev.DiscovererId) + System.Environment.NewLine;
                if (DiscovererData != null)
                {
                    DiscovererData.IsSearching = false;
                }
                break;
            case DiscoveryProgressType.Finished:
                _eventResult += "==========================================" + System.Environment.NewLine;
                _eventResult += string.Format("{0}: Completed.", ev.DiscovererId) + System.Environment.NewLine;
                if (DiscovererData != null)
                {
                    DiscovererData.IsSearching = false;
                }
                break;
        }
        StateHasChanged();
    }

    /// <summary>
    /// refresh UI on DiscovererEvent
    /// </summary>
    /// <param name="ev"></param>
    private Task DiscovererEvent(DiscovererEventApiModel ev)
    {
        _discovererList.Results.Update(ev);
        _pagedDiscovererList = _discovererList.GetPaged(Int32.Parse(Page), CommonHelper.PageLength, _discovererList.Error);
        StateHasChanged();
        return Task.CompletedTask;
    }

    public async void Dispose()
    {
        if (_discovererEvent != null)
        {
            await _discovererEvent.DisposeAsync();
        }
    }

}
