@*------------------------------------------------------------
     Copyright (c) Microsoft Corporation.  All rights reserved.
     Licensed under the MIT License (MIT). See License.txt in the repo root for license information.
    ------------------------------------------------------------*@

@page "/"
@page "/discoverers"
@page "/discoverers/{page}"

@using Microsoft.Azure.IIoT.App.Services
@using Microsoft.Azure.IIoT.App.Components.Pager
@using Microsoft.Azure.IIoT.App.Components.Drawer
@using Microsoft.Azure.IIoT.App.Components.ErrorMessage
@using Microsoft.Azure.IIoT.App.Data
@using Microsoft.AspNetCore.Components
@using Microsoft.Azure.IIoT.OpcUa.Api.Registry
@using Microsoft.Azure.IIoT.OpcUa.Api.Registry.Models
@using Microsoft.Azure.IIoT.App.Common

@inject NavigationManager NavigationManager
@inject Registry RegistryHelper
@inject RegistryServiceEvents RegistryServiceEvents
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UICommon CommonHelper

@implements IDisposable

<div class="flex">
    <h1>Asset Discovery</h1>
    <a class="adhocmargin" href="javascript: void(0)" @onclick="@(() => OpenDrawer(new DiscovererInfo {
                                                  DiscovererModel = new DiscovererApiModel(),
                                                  isAdHocDiscovery = true
                                              }))">
        Run ad-hoc discovery
    </a>
    @if (DiscovererData != null)
        {
        if (DiscovererData.IsSearching && DiscovererData.isAdHocDiscovery) 
        {
            <div class="spinnermargin loader"></div>
        }
        else
        {
            <div class="spinnermargin"></div>
        }
    }
</div>

<table class="table @_tableView">
    <thead>
        <tr>
            <th>Discovery Module Id</th>
            <th>Connection Status</th>
            <th>Enable scanning</th>
            <th>Effective Configuration</th>
        </tr>
    </thead>
    <tbody>
        @{string connectStatus = "Disconnected"; }
        @foreach (var discoverer in _pagedDiscovererList.Results) 
        {
            <tr>
                @if (discoverer.HasApplication == true)
                {
                    <td>
                        <a href='endpoints/1/@discoverer.DiscovererModel.Id/@RegistryHelper.PathAll/@RegistryHelper.PathAll'>
                            @discoverer.DiscovererModel.Id
                        </a>
                    </td>
                }
                else
                {
                    <td>@discoverer.DiscovererModel.Id</td>
                }
                @{connectStatus = discoverer.DiscovererModel.Connected == true ? "Connected" : "Disconnected";}
                <td>
                    @connectStatus
                </td>
                <td>
                    @if (discoverer.DiscovererModel.Connected == true)
                    {
                        <input type="checkbox" enabled @bind="@discoverer.ScanStatus" @onclick="@(async() => await SetScanAsync(discoverer))" />
                    }
                    else
                    {
                        <input type="checkbox" disabled @bind="@discoverer.ScanStatus" />
                    }

                    @{string output = discoverer.ScanStatus == true ? "On" : "Off";}
                    @output
                    @if (discoverer.IsSearching)
                    {
                        <div class=" pos-right loader"></div>
                    }
                    else
                    {
                        <div class=" pos-right"></div>
                    }
                </td>
                <td>
                    Mask address range: <a href="javascript: void(0)" @onclick="@(() => OpenDrawer(discoverer))">
                        @(discoverer.EffectiveAddressRangesToScan ?? "Default")<br />
                    </a>
                    Port Range: <a href="javascript: void(0)" @onclick="@(() => OpenDrawer(discoverer))">
                        @(discoverer.EffectivePortRangesToScan ?? "Default")<br />
                    </a>
                    Max Network Probes: <a href="javascript: void(0)" @onclick="@(() => OpenDrawer(discoverer))">
                        @(discoverer.EffectiveMaxNetworkProbes ?? "Default")<br />
                    </a>
                    Max Port Probes: <a href="javascript: void(0)" @onclick="@(() => OpenDrawer(discoverer))">
                        @(discoverer.EffectiveMaxPortProbes ?? "Default")<br />
                    </a>
                    Network Probe Timeout (hh:mm:ss): <a href="javascript: void(0)" @onclick="@(() => OpenDrawer(discoverer))">
                        @(discoverer.EffectiveNetworkProbeTimeout ?? "Default")<br />
                    </a>
                    Port Probe Timeout (hh:mm:ss): <a href="javascript: void(0)" @onclick="@(() => OpenDrawer(discoverer))">
                        @(discoverer.EffectivePortProbeTimeout ?? "Default")<br />
                    </a>
                    Idle Time Between Scans (hh:mm:ss): <a href="javascript: void(0)" @onclick="@(() => OpenDrawer(discoverer))">
                        @(discoverer.EffectiveIdleTimeBetweenScans ?? "Default")<br />
                    </a>
                    Discovery Urls:
                    @if (discoverer.EffectiveDiscoveryUrls.Count == 0)
                    {
                        <a href="javascript: void(0)" @onclick="@(() => OpenDrawer(discoverer))">
                            (None)
                        </a>
                    }
                    else
                    {
                        @foreach (var url in discoverer.EffectiveDiscoveryUrls)
                        {
                            <a href="javascript: void(0)" @onclick="@(() => OpenDrawer(discoverer))">
                                @url<br />
                            </a>
                        }
                    }
                </td>
            </tr>
        }
    </tbody>
</table>
<div class="@_tableEmpty center">No discoverers found.</div>
<div class="results @_scanResult">
    Scan Results:
    <div class="closediv">
        <a aria-label="closePanel" href="javascript: void(0)" @onclick="@(() => CloseScanResultView())" class="oi oi-x closebtn"></a>
    </div>
    <div class="events">
        @_eventResult
    </div>
</div>

<ErrorMessage PageError="@_pagedDiscovererList.Error" Status="@Status"></ErrorMessage>

<Drawer HeaderText="Discovery Scan Config" ObjectData="@DiscovererData" IsOpened="@IsOpened" CloseDrawer="@(() => CloseDrawer())">
    <_DrawerDiscoverer DiscovererData="@DiscovererData" Onclick="((DiscovererData) => ClickHandler((DiscovererInfo)DiscovererData))"></_DrawerDiscoverer>
</Drawer>

<Pager Result=@_discovererList PageChanged=@((Page) => PagerPageChanged(Page)) />

<div class="loader-pos @CommonHelper.Spinner"></div>


@code {

    [Parameter]
    public string Page { get; set; } = "1";

    public bool IsSearching { get; set; } = false;
    public bool IsOpened { get; set; } = false;
    public DiscovererInfo DiscovererData { get; set; }
    public string Status { get; set; }

    private PagedResult<DiscovererInfo> _discovererList = new PagedResult<DiscovererInfo>();
    private PagedResult<DiscovererInfo> _pagedDiscovererList = new PagedResult<DiscovererInfo>();
    private string _eventResult { get; set; }
    private string _scanResult { get; set; } = "hidden";
    private string _tableView = "visible";
    private string _tableEmpty = "displayNone";

    private IAsyncDisposable _discovererEvent { get; set; }
    private IAsyncDisposable _discovery { get; set; }


    /// <summary>
    /// Notify page change
    /// </summary>
    /// <param name="page"></param>
    /// <returns></returns>
    public void PagerPageChanged(int page)
    {
        CommonHelper.Spinner = "loader-big";
        StateHasChanged();
        _discovererList = CommonHelper.UpdatePage(RegistryHelper.GetDiscovererListAsync, page, _discovererList, ref _pagedDiscovererList, CommonHelper.PageLengthSmall);
        NavigationManager.NavigateTo(NavigationManager.BaseUri + "discoverers/" + page);
        CommonHelper.Spinner = string.Empty;
        StateHasChanged();
    }

    /// <summary>
    /// OnInitialized
    /// </summary>
    protected override Task OnInitializedAsync()
    {
        CommonHelper.Spinner = "loader-big";
        return base.OnInitializedAsync();
    }

    /// <summary>
    /// OnAfterRenderAsync
    /// </summary>
    /// <param name="firstRender"></param>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _discovererList = await RegistryHelper.GetDiscovererListAsync();
            Page = "1";
            _pagedDiscovererList = _discovererList.GetPaged(Int32.Parse(Page), CommonHelper.PageLengthSmall, _discovererList.Error);
            CommonHelper.Spinner = string.Empty;
            CommonHelper.CheckErrorOrEmpty<DiscovererInfo>(_pagedDiscovererList, ref _tableView, ref _tableEmpty);
            StateHasChanged();

            _discovererEvent = await RegistryServiceEvents.SubscribeDiscovererEventsAsync(
                ev => InvokeAsync(() => DiscovererEvent(ev)));
        }
    }

    /// <summary>
    /// Enable discoverer scan
    /// </summary>
    /// <param name="discoverer"></param>
    private async Task SetScanAsync(DiscovererInfo discoverer)
    {
        _discovery = await RegistryServiceEvents.SubscribeDiscoveryProgressByDiscovererIdAsync(
            discoverer.DiscovererModel.Id, async data =>
            {
                await InvokeAsync(() => ScanProgress(data));
            });

        try
        {
            _eventResult = string.Empty;

            if (discoverer.ScanStatus == true)
            {
                discoverer.IsSearching = true;
                _scanResult = "visible";
                DiscovererData = discoverer;
            }
            else
            {
                discoverer.IsSearching = false;
                _scanResult = "hidden";
                await _discovery.DisposeAsync();
            }
            Status = await RegistryHelper.SetDiscoveryAsync(discoverer);
        }
        catch
        {
            await _discovery.DisposeAsync();
        }
    }

    /// <summary>
    /// Start ad-hoc scan
    /// </summary>
    /// <param name="discoverer"></param>
    private async Task SetAdHocScanAsync(DiscovererInfo discoverer)
    {
        discoverer.DiscoveryRequestId = Guid.NewGuid().ToString();
        _discovery = await RegistryServiceEvents.SubscribeDiscoveryProgressByRequestIdAsync(
        discoverer.DiscoveryRequestId, async data =>
        {
            await InvokeAsync(() => ScanProgress(data));
        });

        try
        {
            _eventResult = string.Empty;

            discoverer.IsSearching = true;
            _scanResult = "visible";
            DiscovererData = discoverer;
            Status = await RegistryHelper.DiscoverServersAsync(discoverer);
        }
        catch
        {
            await _discovery.DisposeAsync();
        }
    }

    /// <summary>
    /// Open then Drawer
    /// </summary>
    /// <param name="OpenDrawer"></param>
    private void OpenDrawer(DiscovererInfo discoverer)
    {
        IsOpened = true;
        DiscovererData = discoverer;
    }

    /// <summary>
    /// Close the Drawer
    /// </summary>
    private void CloseDrawer()
    {
        IsOpened = false;
        this.StateHasChanged();
    }

    /// <summary>
    /// display discoverers scan events
    /// </summary>
    /// <param name="ev"></param>
    private void ScanProgress(DiscoveryProgressApiModel ev)
    {
        var ts = ev.TimeStamp.ToLocalTime();
        switch (ev.EventType)
        {
            case DiscoveryProgressType.Pending:
                _eventResult += $"[{ts}] {ev.DiscovererId}: {ev.Total} waiting..." + System.Environment.NewLine;
                break;
            case DiscoveryProgressType.Started:
                _eventResult += $"[{ts}] {ev.DiscovererId}: Started." + System.Environment.NewLine;
                break;
            case DiscoveryProgressType.NetworkScanStarted:
                _eventResult += $"[{ts}] {ev.DiscovererId}: Scanning network..." + System.Environment.NewLine;
                break;
            case DiscoveryProgressType.NetworkScanResult:
                _eventResult += $"[{ts}] {ev.DiscovererId}: {ev.Progress}/{ev.Total}: {ev.Discovered} addresses found - NEW: {ev.Result}..." + System.Environment.NewLine;
                break;
            case DiscoveryProgressType.NetworkScanProgress:
                _eventResult += $"[{ts}] {ev.DiscovererId}: {ev.Progress}/{ev.Total}: {ev.Discovered} addresses found" + System.Environment.NewLine;
                break;
            case DiscoveryProgressType.NetworkScanFinished:
                _eventResult += $"[{ts}] {ev.DiscovererId}: {ev.Progress}/{ev.Total}: {ev.Discovered} addresses found - complete!" + System.Environment.NewLine;
                break;
            case DiscoveryProgressType.PortScanStarted:
                _eventResult += $"[{ts}] {ev.DiscovererId}: Scanning ports..." + System.Environment.NewLine;
                break;
            case DiscoveryProgressType.PortScanResult:
                _eventResult += $"[{ts}] {ev.DiscovererId}: {ev.Progress}/{ev.Total}: {ev.Discovered} ports found - NEW: {ev.Result}" + System.Environment.NewLine;
                break;
            case DiscoveryProgressType.PortScanProgress:
                _eventResult += $"[{ts}] {ev.DiscovererId}: {ev.Progress}/{ev.Total}: {ev.Discovered} ports found" + System.Environment.NewLine;
                break;
            case DiscoveryProgressType.PortScanFinished:
                _eventResult += $"[{ts}] {ev.DiscovererId}: {ev.Progress}/{ev.Total}: {ev.Discovered} ports found - complete!" + System.Environment.NewLine;
                break;
            case DiscoveryProgressType.ServerDiscoveryStarted:
                _eventResult += "==========================================" + System.Environment.NewLine;
                _eventResult += $"[{ts}] {ev.DiscovererId}: {ev.Progress}/{ev.Total}: Finding servers..." + System.Environment.NewLine;
                break;
            case DiscoveryProgressType.EndpointsDiscoveryStarted:
                _eventResult += $"[{ts}] {ev.DiscovererId}: {ev.Progress}/{ev.Total}: ... {ev.Discovered} servers found - find endpoints on {ev.RequestDetails["url"]}..." + System.Environment.NewLine;
                break;
            case DiscoveryProgressType.EndpointsDiscoveryFinished:
                _eventResult += $"[{ts}] {ev.DiscovererId}: {ev.Progress}/{ev.Total}: ... {ev.Discovered} servers found - {ev.Result} endpoints found on {ev.RequestDetails["url"]}..." + System.Environment.NewLine;
                break;
            case DiscoveryProgressType.ServerDiscoveryFinished:
                _eventResult += $"[{ts}] {ev.DiscovererId}: {ev.Progress}/{ev.Total}: ... {ev.Discovered} servers found." + System.Environment.NewLine;
                break;
            case DiscoveryProgressType.Cancelled:
                _eventResult += "==========================================" + System.Environment.NewLine;
                _eventResult += $"[{ts}] {ev.DiscovererId}: Cancelled." + System.Environment.NewLine;
                if (DiscovererData != null)
                {
                    DiscovererData.IsSearching = false;
                }
                break;
            case DiscoveryProgressType.Error:
                _eventResult += "==========================================" + System.Environment.NewLine;
                _eventResult += $"[{ts}] {ev.DiscovererId}: Failure." + System.Environment.NewLine;
                if (DiscovererData != null)
                {
                    DiscovererData.IsSearching = false;
                }
                break;
            case DiscoveryProgressType.Finished:
                _eventResult += "==========================================" + System.Environment.NewLine;
                _eventResult += $"[{ts}] {ev.DiscovererId}: Completed." + System.Environment.NewLine;
                if (DiscovererData != null)
                {
                    DiscovererData.IsSearching = false;
                }
                break;
        }
        StateHasChanged();
    }

    /// <summary>
    /// ClickHandler
    /// </summary>
    async Task ClickHandler(DiscovererInfo discoverer)
    {
        CloseDrawer();
        if (discoverer.isAdHocDiscovery)
        {
            await SetAdHocScanAsync(discoverer);
        }
        else
        {
            await this.OnAfterRenderAsync(true);
        }
    }

    /// <summary>
    /// refresh UI on DiscovererEvent
    /// </summary>
    /// <param name="ev"></param>
    private Task DiscovererEvent(DiscovererEventApiModel ev)
    {
        _discovererList.Results.Update(ev);
        _pagedDiscovererList = _discovererList.GetPaged(Int32.Parse(Page), CommonHelper.PageLength, _discovererList.Error);
        StateHasChanged();
        return Task.CompletedTask;
    }

    /// <summary>
    /// Close the scan result view
    /// </summary>
    public void CloseScanResultView()
    {
        _scanResult = "hidden";
    }

    public async void Dispose()
    {
        if (_discovererEvent != null)
        {
            await _discovererEvent.DisposeAsync();
        }

        if (_discovery != null)
        {
            await _discovery.DisposeAsync();
        }
    }
}
