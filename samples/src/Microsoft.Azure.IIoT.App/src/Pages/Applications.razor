@page "/applications"
@page "/applications/{page}"

@using Microsoft.AspNetCore.Components;
@using Microsoft.Azure.IIoT.App.Services
@using Microsoft.Azure.IIoT.App.Components.Pager
@using Microsoft.Azure.IIoT.App.Data
@using Microsoft.Azure.IIoT.OpcUa.Api.Registry.Models;
@using Microsoft.Azure.IIoT.OpcUa.Api.Registry;

@inject NavigationManager NavigationManager
@inject Registry RegistryHelper

<h1>Assets</h1>

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Id</th>
            <th>Site</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var application in _pagedapplicationList.Results) {
        <tr>
            <td>
                <a href='endpoints/@RegistryHelper.PathAll/@application.ApplicationId'>
                    @application.ApplicationName
                </a>
            </td>
            <td>@application.ApplicationUri</td>
            <td>@application.SiteId</td>
        </tr>
        }
    </tbody>
</table>
<div class="loader-pos @_spinner"></div>

<Pager Result=@_applicationList PageChanged=@((Page) => PagerPageChanged(Page)) />

@code {

    [Parameter]
    public string Page { get; set; } = "1";

    public const int PageLength = 10;
    private PagedResult<ApplicationInfoApiModel> _applicationList =
        new PagedResult<ApplicationInfoApiModel>();
    private PagedResult<ApplicationInfoApiModel> _pagedapplicationList =
        new PagedResult<ApplicationInfoApiModel>();
    private string _spinner { get; set; }

    /// <summary>
    /// Notify page change
    /// </summary>
    /// <param name="page"></param>
    public void PagerPageChanged(int page) 
    {
        _pagedapplicationList = _applicationList.GetPaged(page, PageLength);
        NavigationManager.NavigateTo("/applications/" + page);
    }

    /// <summary>
    /// OnInitialized
    /// </summary>
    protected override void OnInitialized()
    {
        _spinner = "loader-big";
    }

    /// <summary>
    /// OnAfterRenderAsync
    /// </summary>
    /// <param name="firstRender"></param>
    protected override async Task OnAfterRenderAsync(bool firstRender) 
    {
        if (firstRender)
        {
            _applicationList = await RegistryHelper.GetApplicationListAsync();
            Page = "1";
            _pagedapplicationList = _applicationList.GetPaged(Int32.Parse(Page), PageLength);
            _spinner = "";
            StateHasChanged();
        }
    }
}
