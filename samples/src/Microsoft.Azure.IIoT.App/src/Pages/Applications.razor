@page "/applications"
@page "/applications/{page}"

@using Microsoft.AspNetCore.Components;
@using Microsoft.Azure.IIoT.App.Services
@using Microsoft.Azure.IIoT.App.Components.Pager
@using Microsoft.Azure.IIoT.App.Components.Drawer
@using Microsoft.Azure.IIoT.App.Components.ErrorMessage
@using Microsoft.Azure.IIoT.App.Data
@using Microsoft.Azure.IIoT.OpcUa.Api.Registry.Models;
@using Microsoft.Azure.IIoT.OpcUa.Api.Registry;

@inject NavigationManager NavigationManager
@inject RegistryServiceEvents RegistryServiceEvents
@inject Registry RegistryHelper
@inject RegistryServiceEvents RegistryServiceEvents

@implements IDisposable

<h1>Assets</h1>

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Id</th>
            <th>Site</th>
            <th>Type</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var application in _pagedapplicationList.Results)
        {
            <tr>
                <td>
                    <a href='endpoints/@RegistryHelper.PathAll/@application.ApplicationId'>
                        @application.ApplicationName
                    </a>
                </td>
                <td>@application.ApplicationUri</td>
                <td>@application.SiteId</td>
                <td>@application.ApplicationType</td>
                <td>
                    <a class="ellipsis-space" href="javascript: void(0)" @onclick="@(() => OpenDrawer(application))">...</a>
                </td>
                <td>
                    <button @onclick="@(() => UnregisterApplicationUIAsync(application.ApplicationId))" class="btn btn-primary">Unregister</button>
                </td>
            </tr>
        }
    </tbody>
</table>
<div class="loader-pos @_spinner"></div>

<Drawer HeaderText="Asset Info" ObjectData="@ApplicationData" IsOpened="@IsOpened" CloseDrawer="@(() => CloseDrawer())">
    <_DrawerAssetContent ApplicationData="@ApplicationData"></_DrawerAssetContent>
</Drawer>

<ErrorMessage PageError="@_pagedapplicationList.Error" Status="@null"></ErrorMessage>

<Pager Result=@_applicationList PageChanged=@((Page) => PagerPageChanged(Page)) />

@code {

    [Parameter]
    public string Page { get; set; } = "1";

    private IAsyncDisposable _applicationEvents { get; set; }
    public const int PageLength = 10;
    public string Status { get; set; }
    public bool IsOpened { get; set; } = false;
    public ApplicationInfoApiModel ApplicationData { get; set; }
    private PagedResult<ApplicationInfoApiModel> _applicationList =
        new PagedResult<ApplicationInfoApiModel>();
    private PagedResult<ApplicationInfoApiModel> _pagedapplicationList =
        new PagedResult<ApplicationInfoApiModel>();
    private string _spinner { get; set; }
    private IAsyncDisposable _applicationEvent { get; set; }

    /// <summary>
    /// Notify page change
    /// </summary>
    /// <param name="page"></param>
    public void PagerPageChanged(int page)
    {
        _pagedapplicationList = _applicationList.GetPaged(page, PageLength, null);
        NavigationManager.NavigateTo("/applications/" + page);
    }

    /// <summary>
    /// OnInitialized
    /// </summary>
    protected override void OnInitialized() {
        _spinner = "loader-big";
    }

    /// <summary>
    /// OnAfterRenderAsync
    /// </summary>
    /// <param name="firstRender"></param>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await UpdateApplicationAsync();
            StateHasChanged();

            _applicationEvent = await RegistryServiceEvents.SubscribeApplicationEventsAsync(
                null, async data =>
                {
                    await InvokeAsync(() => ApplicationEvent(data));
                });
        }
    }

    /// <summary>
    /// Unregister application and remove it from UI
    /// </summary>
    /// <param name="applicationId"></param>
    private async Task UnregisterApplicationUIAsync(string applicationId)
    {
        var index = _applicationList.Results.Select(t => t.ApplicationId).ToList().IndexOf(applicationId);
        _applicationList.Results.RemoveAt(index);
        Page = "1";
        _pagedapplicationList = _applicationList.GetPaged(Int32.Parse(Page), PageLength, _applicationList.Error);
        StateHasChanged();

        Status = await RegistryHelper.UnregisterApplicationAsync(applicationId);
    }

    // <summary>
    /// Open then Drawer
    /// </summary>
    /// <param name="OpenDrawer"></param>
    private void OpenDrawer(ApplicationInfoApiModel application)
    {
        IsOpened = true;
        ApplicationData = application;
    }

    /// <summary>
    /// Close the Drawer
    /// </summary>
    private void CloseDrawer()
    {
        IsOpened = false;
        this.StateHasChanged();
    }

    /// <summary>
    /// action on ApplicationEvent
    /// </summary>
    /// <param name="ev"></param>
    private Task ApplicationEvent(ApplicationEventApiModel ev) {
        _applicationList.Results.Update(ev);
        StateHasChanged();
        return Task.CompletedTask;
    }

    /// <summary>
    /// Update application list
    /// </summary>
    private async Task UpdateApplicationAsync()
    {
        _applicationList = await RegistryHelper.GetApplicationListAsync();
        Page = "1";
        _pagedapplicationList = _applicationList.GetPaged(Int32.Parse(Page), PageLength, _applicationList.Error);
        _spinner = "";
    }

    /// <summary>
    /// Dispose
    /// </summary>
    public async void Dispose()
    {
        if (_applicationEvent != null)
        {
            await _applicationEvent.DisposeAsync();
        }
    }
}
