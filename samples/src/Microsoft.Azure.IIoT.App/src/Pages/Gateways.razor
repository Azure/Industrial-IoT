@*------------------------------------------------------------
  Copyright (c) Microsoft Corporation.  All rights reserved.
  Licensed under the MIT License (MIT). See License.txt in the repo root for license information.
 ------------------------------------------------------------*@

@page "/gateways/{page}"

@using Microsoft.AspNetCore.Components;
@using Microsoft.Azure.IIoT.App.Services
@using Microsoft.Azure.IIoT.App.Components.Pager
@using Microsoft.Azure.IIoT.App.Components.ErrorMessage
@using Microsoft.Azure.IIoT.App.Data
@using Microsoft.Azure.IIoT.OpcUa.Api.Registry.Models;
@using Microsoft.Azure.IIoT.OpcUa.Api.Registry;
@using Microsoft.Azure.IIoT.App.Common

@inject NavigationManager NavigationManager
@inject Registry RegistryHelper
@inject RegistryServiceEvents RegistryServiceEvents
@inject UICommon CommonHelper

@implements IDisposable

<h1>Gateways</h1>

<table class="table @_tableView">
    <thead>
        <tr>
            <th>Id</th>
            <th>Site Id</th>
            <th>Connection Status</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var gateway in _pagedGatewayList.Results)
        {
            <tr>
                <td>@gateway.Id</td>
                @{ string siteId = gateway.SiteId == null ? CommonHelper.None : gateway.SiteId;}
                <td>@siteId</td>
                @{string connectStatus = gateway.Connected == null ? CommonHelper.None : gateway.Connected == true ? "Connected" : "Disconnected";}
                <td>@connectStatus</td>
            </tr>
        }
    </tbody>
</table>
<div class="@_tableEmpty center">No Gateways found.</div>

<ErrorMessage PageError="@_pagedGatewayList.Error" Status="@null"></ErrorMessage>

<Pager Result=@_gatewayList PageChanged=@((Page) => PagerPageChanged(Page)) />

<div class="loader-pos @CommonHelper.Spinner"></div>

@code {

    [Parameter]
    public string Page { get; set; } = "1";

    private PagedResult<GatewayApiModel> _gatewayList = new PagedResult<GatewayApiModel>();
    private PagedResult<GatewayApiModel> _pagedGatewayList = new PagedResult<GatewayApiModel>();
    private IAsyncDisposable _gatewayEvent { get; set; }
    private string _tableView = "visible";
    private string _tableEmpty = "displayNone";

    /// <summary>
    /// Notify page change
    /// </summary>
    /// <param name="page"></param>
    public void PagerPageChanged(int page)
    {
        CommonHelper.Spinner = "loader-big";
        StateHasChanged();
        _gatewayList = CommonHelper.UpdatePage(RegistryHelper.GetGatewayListAsync, page, _gatewayList, ref _pagedGatewayList, CommonHelper.PageLength);
        NavigationManager.NavigateTo(NavigationManager.BaseUri + "gateways/" + page);
        CommonHelper.Spinner = string.Empty;
        StateHasChanged();
    }

    /// <summary>
    /// OnInitialized
    /// </summary>
    protected override void OnInitialized()
    {
        CommonHelper.Spinner = "loader-big";
    }

    /// <summary>
    /// OnAfterRenderAsync
    /// </summary>
    /// <param name="firstRender"></param>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _gatewayList = await RegistryHelper.GetGatewayListAsync();
            Page = "1";
            _pagedGatewayList = _gatewayList.GetPaged(Int32.Parse(Page), CommonHelper.PageLength, _gatewayList.Error);
            CommonHelper.Spinner = string.Empty;
            CommonHelper.CheckErrorOrEmpty<GatewayApiModel>(_pagedGatewayList, ref _tableView, ref _tableEmpty);
            StateHasChanged();
            _gatewayEvent = await RegistryServiceEvents.SubscribeGatewayEventsAsync(
                ev => InvokeAsync(() => GatewayEvent(ev)));
        }
    }

    private Task GatewayEvent(GatewayEventApiModel ev)
    {
        _gatewayList.Results.Update(ev);
        _pagedGatewayList = _gatewayList.GetPaged(Int32.Parse(Page), CommonHelper.PageLength, _gatewayList.Error);
        StateHasChanged();
        return Task.CompletedTask;
    }

    public async void Dispose()
    {
        if (_gatewayEvent != null)
        {
            await _gatewayEvent.DisposeAsync();
        }
    }
}
