@*------------------------------------------------------------
  Copyright (c) Microsoft Corporation.  All rights reserved.
  Licensed under the MIT License (MIT). See License.txt in the repo root for license information.
 ------------------------------------------------------------*@

@using Microsoft.Azure.IIoT.App.Models
@using Microsoft.Azure.IIoT.App.Common
@using Microsoft.Azure.IIoT.App.Services.SecureData

@implements IDisposable

@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject UICommon CommonHelper
@inject SecureData secureData
@inject NavigationManager NavigationManager



<nav class="top-row pl-3 navbar navbar-dark ">
    @{ var releaseVersion = this.GetType().Assembly.GetReleaseVersion().ToString(3); }
    <a class="navbar-brand" href="">
        Azure IIoT Platform @releaseVersion
    </a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</nav>

<AuthorizeView>
    <Authorized>
        <div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
            <ul class="nav flex-column">
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="discoverers">
                        <span class="oi oi-list-rich" aria-hidden="true"></span> Discovery
                    </NavLink>
                </li>
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="applications">
                        <span class="oi oi-list-rich" aria-hidden="true"></span> Assets
                    </NavLink>
                </li>
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="endpoints">
                        <span class="oi oi-list-rich" aria-hidden="true"></span> Browse
                    </NavLink>
                </li>
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="javascript: void(0)" @onclick="@(() => SubMenu())">
                        <span class="oi @_subMenuIcon" aria-hidden="true"></span> More
                    </NavLink>
                </li>
                <li class="nav-item px-5 @_subMenuDisplay">
                    <NavLink class="nav-link" href="supervisors">
                        <span class="oi oi-list-rich" aria-hidden="true"></span> Twin Module
                    </NavLink>
                </li>
                <li class="nav-item px-5 @_subMenuDisplay">
                    <NavLink class="nav-link" href="gateways">
                        <span class="oi oi-list" aria-hidden="true"></span> Gateway
                    </NavLink>
                </li>
                <li class="nav-item px-5 @_subMenuDisplay">
                    <NavLink class="nav-link " href="publishers">
                        <span class="oi oi-list" aria-hidden="true"></span> Publisher
                    </NavLink>
                </li>
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="assetLogin">
                        <span class="oi oi-account-login" aria-hidden="true"></span>
                        @if (Credential?.Username != null)
                        {
                            <span>Asset LogOut</span>
                            <div>Hello, @Credential.Username</div>
                        }
                        else
                        {
                            <span>Asset LogIn</span>
                        }
                    </NavLink>
                </li>
            </ul>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    bool collapseNavMenu = true;

    string NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    public CredentialModel Credential = new CredentialModel();
    private string _subMenuDisplay = "displayNone";
    private string _subMenuIcon = "oi-expand-down";

    /// <summary>
    /// OnAfterRenderAsync
    /// </summary>
    /// <param name="firstRender"></param>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Credential = await GetSecureItemAsync<CredentialModel>(CommonHelper.CredentialKey);
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += HandleLocationChanged;
    }

    private async void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        Credential = await GetSecureItemAsync<CredentialModel>(CommonHelper.CredentialKey);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }

    void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task<T> GetSecureItemAsync<T>(string key)
    {
        try
        {
            var serializedProtectedData = await sessionStorage.GetItemAsync<string>(key);
            return secureData.UnprotectDeserialize<T>(serializedProtectedData);
        }
        catch
        {
            return default;
        }
    }

    private void SubMenu()
    {
        if (_subMenuDisplay == "displayNone")
        {
            _subMenuDisplay = "displayFlex";
            _subMenuIcon = "oi-collapse-up";
        }
        else
        {
            _subMenuDisplay = "displayNone";
            _subMenuIcon = "oi-expand-down";
        }
    }
}
