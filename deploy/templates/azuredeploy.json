{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "serviceAppId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Specifies the registered service application identifier (GUID) in your Azure Active Directory tenant."
            }
        },
        "serviceAppSecret": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "The registered service application secret used to authenticate the service principal."
            }
        },
        "clientAppId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "A client application identifier (GUID) in your Azure Active Directory tenant for confidential web applications."
            }
        },
        "clientAppSecret": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "The registered client application secret for confidential web applications."
            }
        },
        "publicClientAppId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "A client application identifier (GUID) in your Azure Active Directory tenant for public application such as CLI."
            }
        },
        "keyVaultPrincipalId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Specifies the object ID of a principal in your Azure Active Directory tenant to access keyvault."
            }
        },
        "authorityUri": {
            "type": "string",
            "defaultValue": "https://login.microsoftonline.com",
            "metadata": {
                "description": "Url of the Authority (example: https://login.microsoftonline.com)"
            }
        },
        "serviceAudience": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Audience value to validate the token audience field against."
            }
        },
        "trustedTokenIssuer": {
            "type": "string",
            "defaultValue": "[concat('https://sts.windows.net/', subscription().tenantId)]",
            "metadata": {
                "description": "Optional Issuer value to validate received tokens against."
            }
        },
        "siteName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "The name of the application to create. Leave empty for local or services only development."
            }
        },
        "branchName": {
            "type": "string",
            "defaultValue": "main",
            "metadata": {
                "description": "The branch from which to deploy deploy services and application.  Default to main."
            }
        },
        "templateUrl": {
            "type": "string",
            "defaultValue": "https://raw.githubusercontent.com/Azure/Industrial-IoT",
            "metadata": {
                "description": "The artifacts url from which to pull all linked templates.  Default is official repository."
            }
        },
        "simulationProfile": {
            "type": "string",
            "defaultValue": "default",
            "allowedValues": [
                "default",
                "testing"
            ],
            "metadata": {
                "description": "The simulation profile to use."
            }
        },
        "numberOfLinuxGateways": {
            "type": "int",
            "defaultValue": 0,
            "maxValue": 255,
            "minValue": 0,
            "metadata": {
                "description": "Number of OPC UA Linux simulation gateways to deploy."
            }
        },
        "numberOfWindowsGateways": {
            "type": "int",
            "defaultValue": 0,
            "maxValue": 255,
            "minValue": 0,
            "metadata": {
                "description": "Number of OPC UA Windows simulation gateways to deploy."
            }
        },
        "numberOfSimulations": {
            "type": "int",
            "defaultValue": 1,
            "maxValue": 255,
            "minValue": 0,
            "metadata": {
                "description": "Number of simulations to deploy into each gateway network."
            }
        },
        "edgeVmSize": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "The size of the gateway VM to provision."
            }
        },
        "simulationVmSize": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "The size of the simulation VM to provision."
            }
        },
        "edgeUserName": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "A name for the simulation vm administrator user."
            }
        },
        "edgePassword": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "The supplied password must be between 8-75 characters long and must satisfy at least 3 of password complexity requirements: 1) Contains an uppercase character 2) Contains a lowercase character 3) Contains a numeric digit 4) Contains a special character. Control characters are not allowed"
            }
        },
        "dockerServer": {
            "type": "string",
            "defaultValue": "mcr.microsoft.com",
            "metadata": {
                "description": "Specifies the endpoint of the Container Registry to pull workloads from."
            }
        },
        "dockerUser": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Specifies the user name to log into a private Container Registry."
            }
        },
        "dockerPassword": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "Specifies the password to use for a private Container Registry."
            }
        },
        "imagesNamespace": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Specifies the namespace prefix for all images in the Container Registry."
            }
        },
        "imagesTag": {
            "type": "string",
            "defaultValue": "latest",
            "metadata": {
                "description": "Specifies the image version tag to use for all container images."
            }
        },
        "authTenantId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Specifies an Azure Active Directory tenant for authentication that is different from the one tied to the subscription."
            }
        },
        "managedIdentityName": {
            "type": "string",
            "defaultValue": "[concat('msi', take(uniqueString(subscription().subscriptionId, resourceGroup().id), 5))]",
            "metadata": {
                "description": "The name of the managed identity to create. If client principal was omitted a default identity will be provisioned to access resources."
            }
        },
        "storageName": {
            "type": "string",
            "defaultValue": "[concat('storage', take(uniqueString(subscription().subscriptionId, resourceGroup().id), 6))]",
            "metadata": {
                "description": "The name of the storage account created as part of the deployment."
            }
        },
        "storageSkuName": {
            "type": "string",
            "defaultValue": "Standard_LRS",
            "allowedValues": [
                "Standard_LRS",
                "Standard_GRS",
                "Standard_RAGRS",
                "Standard_ZRS",
                "Premium_LRS"
            ],
            "metadata": {
                "description": "The storage SKU to use."
            }
        },
        "storageAccountKeyEnabled": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Whether to use storage account key instead of RBAC access via managed identity."
            }
        },
        "iotHubName": {
            "type": "string",
            "defaultValue": "[concat('iothub-', take(uniqueString(subscription().subscriptionId, resourceGroup().id), 6))]",
            "metadata": {
                "description": "The name of Azure IoT Hub created as part of the deployment."
            }
        },
        "iotHubSku": {
            "type": "string",
            "defaultValue": "S1",
            "allowedValues": [
                "F1",
                "S1",
                "S2",
                "S3"
            ],
            "metadata": {
                "description": "The Azure IoT Hub SKU to use."
            }
        },
        "iotHubCapacity": {
            "type": "int",
            "defaultValue": 1,
            "metadata": {
                "description": "The Azure IoT Hub SKU capacity to use."
            }
        },
        "iotHubTier": {
            "type": "string",
            "defaultValue": "Standard",
            "allowedValues": [
                "Free",
                "Standard"
            ],
            "metadata": {
                "description": "The Azure IoT Hub tier to use."
            }
        },
        "iotHubPartitionCount": {
            "type": "int",
            "defaultValue": 4,
            "metadata": {
                "description": "The Azure IoT Hub default endpoint partition count."
            }
        },
        "iotHubRetentionInDays": {
            "type": "int",
            "defaultValue": 2,
            "metadata": {
                "description": "The Azure IoT Hub default message retention in days."
            }
        },
        "ioTHubSharedAccessKeyEnabled": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Whether to use shared access key instead of RBAC access via managed identity."
            }
        },
        "dpsName": {
            "type": "string",
            "defaultValue": "[concat('dps', take(uniqueString(subscription().subscriptionId, resourceGroup().id), 6))]",
            "metadata": {
                "description": "The name of the Azure Device Provisioning service created as part of this deployment."
            }
        },
        "dpsSku": {
            "type": "string",
            "defaultValue": "S1",
            "allowedValues": [
                "S1"
            ],
            "metadata": {
                "description": "The Azure Device Provisioning service SKU to use."
            }
        },
        "dpsCapacity": {
            "type": "int",
            "defaultValue": 1,
            "minValue": 1,
            "maxValue": 3,
            "metadata": {
                "description": "The Azure Device Provisioning service capacity."
            }
        },
        "appInsightsName": {
            "type": "string",
            "defaultValue": "[concat('appinsights-', take(uniqueString(subscription().subscriptionId, resourceGroup().id), 6))]",
            "metadata": {
                "description": "Specifies the name of Azure Application Insights instance created as part of this deployment."
            }
        },
        "keyVaultName": {
            "type": "string",
            "defaultValue": "[concat('keyvault-', take(uniqueString(subscription().subscriptionId, resourceGroup().id), 6))]",
            "metadata": {
                "description": "The resource name of the KeyVault created as part of the deployment."
            }
        },
        "keyVaultSkuName": {
            "type": "string",
            "defaultValue": "Premium",
            "allowedValues": [
                "Standard",
                "Premium"
            ],
            "metadata": {
                "description": "The KeyVault SKU to use."
            }
        },
        "keyVaultSoftDeleteEnabled": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Whether to enable soft delete for the key vault."
            }
        },
        "keyVaultUseAccessPolicies": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Whether to use classic auth roles in key vault."
            }
        },
        "tags": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "Tags for Azure resources."
            }
        }
    },
    "variables": {
        "platformDeployment": "[not(empty(parameters('siteName')))]",
        "platformResourcName": "[concat(deployment().name, '.platform')]",
        "platformResourceId": "[resourceId('Microsoft.Resources/deployments', variables('platformResourcName'))]",
        "platformConfigurationResourceName": "[concat(deployment().name, '.platform.configuration')]",
        "simulationDeployment": "[not(and(equals(0, parameters('numberOfLinuxGateways')), equals(0, parameters('numberOfWindowsGateways'))))]",
        "simulationResourcName": "[concat(deployment().name, '.simulation')]",
        "simulationConfigurationResourceName": "[concat(deployment().name, '.simulation.configuration')]",
        "iotHubResourceId": "[resourceId('Microsoft.Devices/Iothubs', parameters('iotHubName'))]",
        "iotHubKeyName": "iothubowner",
        "iotHubContributorRoleId": "[resourceId('Microsoft.Authorization/roleAssignments', '4fc6c259-987e-4a07-842e-c321cc9d413f')]",
        "iotHubRoleAssignment": "[guid(parameters('iotHubName'), '.role')]",
        "iotHubRoleAssignmentResourceId": "[resourceId('Microsoft.Resources/deployments', variables('iotHubRoleAssignment'))]",
        "iotHubKeyResource": "[resourceId('Microsoft.Devices/Iothubs/Iothubkeys', parameters('iotHubName'), variables('iotHubKeyName'))]",
        "iothubTelemetryConsumerGroup": "telemetry",
        "iothubEventsConsumerGroup": "events",
        "identityResourceId": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]",
        "storageResourceId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageName'))]",
        "storageAccountContributorRoleId": "[resourceId('Microsoft.Authorization/roleAssignments', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
        "storageRoleAssignment": "[guid(parameters('storageName'), '.role')]",
        "storageRoleAssignmentResourceId": "[resourceId('Microsoft.Resources/deployments', variables('storageRoleAssignment'))]",
        "keyVaultResourceId": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
        "keyVaultSecretUserRoleId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'b86a8fe4-44ce-4948-aee5-eccb2c155cd7')]",
        "keyVaultRoleAssignment": "[guid(parameters('keyVaultName'), '.role')]",
        "keyVaultRoleAssignmentResourceId": "[resourceId('Microsoft.Resources/deployments', variables('keyVaultRoleAssignment'))]",
        "configurationResourceName": "[concat(deployment().name, '.configuration')]",
        "configurationResourceId": "[resourceId('Microsoft.Resources/deployments', variables('configurationResourceName'))]",
        "dpsResourceId": "[resourceId('Microsoft.Devices/provisioningServices', parameters('dpsName'))]",
        "templateBaseUrl": "[if(empty(parameters('templateUrl')), deployment().properties.templateLink.uri, concat(parameters('templateUrl'), '/', parameters('branchName'), '/deploy/templates/'))]"
    },
    "resources": [
        {
            "comments": "Managed identity to access keyvault.",
            "name": "[parameters('managedIdentityName')]",
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
            "apiVersion": "2023-01-31",
            "location": "[resourceGroup().location]",
            "tags": "[parameters('tags')]"
        },
        {
            "comments": "KeyVault for secrets and certificate store.",
            "type": "Microsoft.KeyVault/vaults",
            "name": "[parameters('keyVaultName')]",
            "apiVersion": "2023-07-01",
            "location": "[resourceGroup().location]",
            "tags": "[parameters('tags')]",
            "properties": {
                "enabledForDeployment": false,
                "enabledForTemplateDeployment": false,
                "enabledForVolumeEncryption": false,
                "enableSoftDelete": "[parameters('keyVaultSoftDeleteEnabled')]",
                "enableRbacAuthorization": "[not(parameters('keyVaultUseAccessPolicies'))]",
                "tenantId": "[reference(variables('identityResourceId'), '2018-11-30').tenantId]",
                "sku": {
                    "name": "[parameters('keyVaultSkuName')]",
                    "family": "A"
                }
            },
            "dependsOn": [
                "[variables('identityResourceId')]"
            ]
        },
        {
            "comments": "KeyVault access permissions for managed identity.",
            "condition": "[parameters('keyVaultUseAccessPolicies')]",
            "type": "Microsoft.KeyVault/vaults/accessPolicies",
            "name": "[concat(parameters('keyVaultName'), '/managed')]",
            "apiVersion": "2023-07-01",
            "tags": "[parameters('tags')]",
            "properties": {
                "accessPolicies": [
                    {
                        "tenantId": "[reference(variables('identityResourceId'), '2018-11-30').tenantId]",
                        "objectId": "[reference(variables('identityResourceId'), '2018-11-30').principalId]",
                        "permissions": {
                            "keys": [
                                "get",
                                "list",
                                "sign",
                                "unwrapKey",
                                "wrapKey",
                                "create"
                            ],
                            "secrets": [
                                "get",
                                "list",
                                "set",
                                "delete"
                            ],
                            "certificates": [
                                "get",
                                "list",
                                "update",
                                "create",
                                "import"
                            ]
                        }
                    }
                ]
            },
            "dependsOn": [
                "[variables('keyVaultResourceId')]",
                "[variables('identityResourceId')]"
            ]
        },
        {
            "comments": "Optional KeyVault principal access permissions for configuration secrets.",
            "condition": "[and(parameters('keyVaultUseAccessPolicies'), not(empty(parameters('keyVaultPrincipalId'))))]",
            "type": "Microsoft.KeyVault/vaults/accessPolicies",
            "name": "[concat(parameters('keyVaultName'), '/add')]",
            "apiVersion": "2023-07-01",
            "tags": "[parameters('tags')]",
            "properties": {
                "accessPolicies": [
                    {
                        "tenantId": "[subscription().tenantId]",
                        "objectId": "[parameters('keyVaultPrincipalId')]",
                        "permissions": {
                            "keys": [
                                "get",
                                "list",
                                "sign",
                                "unwrapKey",
                                "wrapKey",
                                "create"
                            ],
                            "secrets": [
                                "get",
                                "list",
                                "set",
                                "delete"
                            ]
                        }
                    }
                ]
            },
            "dependsOn": [
                "[variables('keyVaultResourceId')]"
            ]
        },
        {
            "comments": "Assign access to key vault to our managed identity",
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2022-04-01",
            "name": "[variables('keyVaultRoleAssignment')]",
            "condition": "[not(parameters('keyVaultUseAccessPolicies'))]",
            "scope": "[variables('keyVaultResourceId')]",
            "properties": {
                "roleDefinitionId": "[variables('keyVaultSecretUserRoleId')]",
                "principalId": "[reference(variables('identityResourceId'), '2018-11-30').principalId]"
            },
            "dependsOn": [
                "[variables('identityResourceId')]",
                "[variables('keyVaultResourceId')]"
            ]
        },
        {
            "comments": "Azure IoT Hub",
            "apiVersion": "2023-06-30",
            "type": "Microsoft.Devices/Iothubs",
            "name": "[parameters('iotHubName')]",
            "location": "[resourceGroup().location]",
            "identity": {
                "type": "SystemAssigned"
            },
            "tags": "[parameters('tags')]",
            "sku": {
                "name": "[parameters('iotHubSku')]",
                "tier": "[parameters('iotHubTier')]",
                "capacity": "[parameters('iotHubCapacity')]"
            },
            "properties": {
                "location": "[resourceGroup().location]",
                "ipFilterRules": [],
                "disableLocalAuth": false,
                "eventHubEndpoints": {
                    "events": {
                        "retentionTimeInDays": "[parameters('iotHubRetentionInDays')]",
                        "partitionCount": "[parameters('iotHubPartitionCount')]"
                    }
                },
                "routing": {
                    "endpoints": {
                        "serviceBusQueues": [],
                        "serviceBusTopics": [],
                        "eventHubs": [],
                        "storageContainers": []
                    },
                    "routes": [
                        {
                            "name": "TwinChanges",
                            "source": "TwinChangeEvents",
                            "condition": "true",
                            "endpointNames": [
                                "events"
                            ],
                            "isEnabled": true
                        },
                        {
                            "name": "DeviceLifecycle",
                            "source": "DeviceLifecycleEvents",
                            "condition": "true",
                            "endpointNames": [
                                "events"
                            ],
                            "isEnabled": true
                        }
                    ],
                    "fallbackRoute": {
                        "name": "$fallback",
                        "source": "DeviceMessages",
                        "condition": "true",
                        "endpointNames": [
                            "events"
                        ],
                        "isEnabled": true
                    }
                },
                "messagingEndpoints": {
                    "fileNotifications": {
                        "lockDurationAsIso8601": "PT1M",
                        "ttlAsIso8601": "PT1H",
                        "maxDeliveryCount": 10
                    }
                },
                "cloudToDevice": {
                    "maxDeliveryCount": 10,
                    "defaultTtlAsIso8601": "PT1H",
                    "feedback": {
                        "lockDurationAsIso8601": "PT1M",
                        "ttlAsIso8601": "PT1H",
                        "maxDeliveryCount": 10
                    }
                },
                "features": "None"
            },
            "dependsOn": [
                "[variables('storageResourceId')]"
            ]
        },
        {
            "comments": "Assign access to IoT Hub to our managed identity",
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2022-04-01",
            "condition": "[not(parameters('ioTHubSharedAccessKeyEnabled'))]",
            "name": "[variables('iotHubRoleAssignment')]",
            "scope": "[variables('iotHubResourceId')]",
            "properties": {
                "roleDefinitionId": "[variables('iotHubContributorRoleId')]",
                "principalId": "[reference(variables('identityResourceId'), '2018-11-30').principalId]"
            },
            "dependsOn": [
                "[variables('identityResourceId')]",
                "[variables('iotHubResourceId')]"
            ]
        },
        {
            "comments": "Telemetry Consumer Group in IoT Hub",
            "apiVersion": "2019-03-22",
            "name": "[concat(parameters('iotHubName'), '/events/', variables('iothubTelemetryConsumerGroup'))]",
            "type": "Microsoft.Devices/Iothubs/eventhubEndpoints/ConsumerGroups",
            "tags": "[parameters('tags')]",
            "dependsOn": [
                "[variables('iotHubResourceId')]"
            ]
        },
        {
            "comments": "Edge Events Consumer Group in IoT Hub",
            "apiVersion": "2019-03-22",
            "name": "[concat(parameters('iotHubName'), '/events/', variables('iothubEventsConsumerGroup'))]",
            "type": "Microsoft.Devices/Iothubs/eventhubEndpoints/ConsumerGroups",
            "tags": "[parameters('tags')]",
            "dependsOn": [
                "[variables('iotHubResourceId')]"
            ]
        },
        {
            "comments": "Blob storage account",
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[parameters('storageName')]",
            "apiVersion": "2023-04-01",
            "location": "[resourceGroup().location]",
            "tags": "[parameters('tags')]",
            "kind": "StorageV2",
            "sku": {
                "name": "[parameters('storageSkuName')]"
            },
            "properties": {
                "networkAcls": {
                    "bypass": "AzureServices",
                    "virtualNetworkRules": [],
                    "ipRules": [],
                    "defaultAction": "Allow"
                },
                "defaultToOAuthAuthentication": "[not(parameters('storageAccountKeyEnabled'))]",
                "allowSharedKeyAccess": "[parameters('storageAccountKeyEnabled')]",
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                    "services": {
                        "file": {
                            "enabled": true
                        },
                        "blob": {
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                }
            }
        },
        {
            "comments": "Assign access to storage to our managed identity",
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2022-04-01",
            "condition": "[not(parameters('storageAccountKeyEnabled'))]",
            "name": "[variables('storageRoleAssignment')]",
            "scope": "[variables('storageResourceId')]",
            "properties": {
                "roleDefinitionId": "[variables('storageAccountContributorRoleId')]",
                "principalId": "[reference(variables('identityResourceId'), '2018-11-30').principalId]"
            },
            "dependsOn": [
                "[variables('identityResourceId')]",
                "[variables('storageResourceId')]"
            ]
        },
        {
            "comments": "Applications monitoring instance",
            "type": "Microsoft.Insights/components",
            "name": "[parameters('appInsightsName')]",
            "apiVersion": "2015-05-01",
            "location": "[resourceGroup().location]",
            "tags": "[parameters('tags')]",
            "kind": "web",
            "properties": {
                "Application_Type": "web",
                "ApplicationId": "[parameters('appInsightsName')]"
            }
        },
        {
            "comments": "Save configuration in keyVault.",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-08-01",
            "name": "[variables('configurationResourceName')]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "keyVaultName": {
                        "value": "[parameters('keyVaultName')]"
                    },
                    "configuration": {
                        "value": [
                            {
                                "key": "PCS_AUTH_TENANT",
                                "value": "[subscription().tenantId]"
                            },
                            {
                                "key": "PCS_AUTH_INSTANCE",
                                "value": "[parameters('authorityUri')]"
                            },
                            {
                                "key": "PCS_AUTH_CLIENT_APPID",
                                "value": "[parameters('clientAppId')]"
                            },
                            {
                                "key": "PCS_AUTH_CLIENT_SECRET",
                                "value": "[parameters('clientAppSecret')]"
                            },
                            {
                                "key": "PCS_AUTH_PUBLIC_CLIENT_APPID",
                                "value": "[parameters('publicClientAppId')]"
                            },
                            {
                                "key": "PCS_AUTH_SERVICE_APPID",
                                "value": "[parameters('serviceAppId')]"
                            },
                            {
                                "key": "PCS_AUTH_SERVICE_SECRET",
                                "value": "[parameters('serviceAppSecret')]"
                            },
                            {
                                "key": "PCS_AUTH_AUDIENCE",
                                "value": "[parameters('serviceAudience')]"
                            },
                            {
                                "key": "PCS_AUTH_ISSUER",
                                "value": "[parameters('trustedTokenIssuer')]"
                            },
                            {
                                "key": "PCS_DOCKER_SERVER",
                                "value": "[parameters('dockerServer')]"
                            },
                            {
                                "key": "PCS_DOCKER_USER",
                                "value": "[parameters('dockerUser')]"
                            },
                            {
                                "key": "PCS_DOCKER_PASSWORD",
                                "value": "[parameters('dockerPassword')]"
                            },
                            {
                                "key": "PCS_IMAGES_NAMESPACE",
                                "value": "[parameters('imagesNamespace')]"
                            },
                            {
                                "key": "PCS_IOTHUB_EVENTHUBENDPOINT",
                                "value": "[reference(variables('iotHubResourceId')).eventHubEndpoints.events.endpoint]"
                            },
                            {
                                "key": "PCS_IOTHUB_EVENTHUBCONSUMERGROUP",
                                "value": "[variables('iothubTelemetryConsumerGroup')]"
                            },
                            {
                                "key": "PCS_IOTHUB_EVENTHUBCONSUMERGROUP2",
                                "value": "[variables('iothubEventsConsumerGroup')]"
                            },
                            {
                                "key": "PCS_IOTHUB_CONNSTRING",
                                "value": "[concat('HostName=', reference(variables('iotHubResourceId')).hostName, if(parameters('ioTHubSharedAccessKeyEnabled'), concat(';SharedAccessKeyName=', variables('iotHubKeyName'), ';SharedAccessKey=', listkeys(variables('iotHubKeyResource'), '2018-04-01').primaryKey), ''))]"
                            },
                            {
                                "key": "PCS_STORAGE_CONNSTRING",
                                "value": "[concat('DefaultEndpointsProtocol=https', ';EndpointSuffix=', environment().suffixes.storage, ';AccountName=', parameters('storageName'), if(parameters('storageAccountKeyEnabled'), concat(';AccountKey=', listKeys(variables('storageResourceId'), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value), ''))]"
                            },
                            {
                                "key": "PCS_KEYVAULT_URL",
                                "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))).vaultUri]"
                            },
                            {
                                "key": "PCS_SUBSCRIPTION_ID",
                                "value": "[subscription().subscriptionId]"
                            },
                            {
                                "key": "PCS_RESOURCE_GROUP",
                                "value": "[resourceGroup().name]"
                            }
                        ]
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[concat(variables('templateBaseUrl'), 'azuredeploy.configuration.json')]"
                }
            },
            "dependsOn": [
                "[variables('iotHubResourceId')]",
                "[variables('storageResourceId')]",
                "[variables('keyVaultResourceId')]"
            ]
        },
        {
            "comments": "Deploy Azure Industrial IoT platform.",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-08-01",
            "name": "[variables('platformResourcName')]",
            "condition": "[variables('platformDeployment')]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "siteName": {
                        "value": "[parameters('siteName')]"
                    },
                    "keyVaultUri": {
                        "value": "[reference(variables('keyVaultResourceId')).vaultUri]"
                    },
                    "managedIdentityResourceId": {
                        "value": "[variables('identityResourceId')]"
                    },
                    "managedIdentityClientId": {
                        "value": "[reference(variables('identityResourceId'), '2018-11-30').clientId]"
                    },
                    "managedIdentityTenantId": {
                        "value": "[reference(variables('identityResourceId'), '2018-11-30').tenantId]"
                    },
                    "dockerServer": {
                        "value": "[parameters('dockerServer')]"
                    },
                    "dockerUser": {
                        "value": "[parameters('dockerUser')]"
                    },
                    "dockerPassword": {
                        "value": "[parameters('dockerPassword')]"
                    },
                    "imagesNamespace": {
                        "value": "[parameters('imagesNamespace')]"
                    },
                    "imagesTag": {
                        "value": "[parameters('imagesTag')]"
                    },
                    "authTenantId": {
                        "value": "[parameters('authTenantId')]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[concat(variables('templateBaseUrl'), 'azuredeploy.platform.json')]"
                }
            },
            "dependsOn": [
                "[variables('configurationResourceId')]",
                "[variables('iotHubRoleAssignmentResourceId')]",
                "[variables('keyVaultRoleAssignmentResourceId')]",
                "[variables('storageRoleAssignmentResourceId')]"
            ]
        },
        {
            "comments": "Save platform configuration in KeyVault.",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-08-01",
            "name": "[variables('platformConfigurationResourceName')]",
            "condition": "[variables('platformDeployment')]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "keyVaultName": {
                        "value": "[parameters('keyVaultName')]"
                    },
                    "configuration": {
                        "value": [
                            {
                                "key": "PCS_SERVICE_URL",
                                "value":  "[if (variables('platformDeployment'), reference(variables('platformResourceId'), '2017-05-10').outputs.serviceUrl.value, '')]"
                            }
                        ]
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[concat(variables('templateBaseUrl'), 'azuredeploy.configuration.json')]"
                }
            },
            "dependsOn": [
                "[variables('platformResourceId')]"
            ]
        },
        {
            "comments": "Azure Device Provisioning service.",
            "type": "Microsoft.Devices/provisioningServices",
            "name": "[parameters('dpsName')]",
            "condition": "[variables('simulationDeployment')]",
            "apiVersion": "2022-12-12",
            "location": "[resourceGroup().location]",
            "tags": "[parameters('tags')]",
            "sku": {
                "name": "[parameters('dpsSku')]",
                "capacity": "[parameters('dpsCapacity')]"
            },
            "properties": {
                "iotHubs": [
                    {
                        "connectionString": "[concat('HostName=', reference(variables('iotHubResourceId')).hostName, ';SharedAccessKeyName=', variables('iotHubKeyName'), ';SharedAccessKey=', listkeys(variables('iotHubKeyResource'), '2018-04-01').primaryKey)]",
                        "location": "[resourceGroup().location]",
                        "name": "[reference(variables('iotHubResourceId')).hostName]"
                    }
                ]
            },
            "dependsOn": [
                "[variables('iotHubResourceId')]"
            ]
        },
        {
            "comments": "Deploy Azure Industrial IoT Edge simulation.",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-08-01",
            "name": "[variables('simulationResourcName')]",
            "condition": "[variables('simulationDeployment')]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "simulationProfile": {
                        "value": "[parameters('simulationProfile')]"
                    },
                    "numberOfLinuxGateways": {
                        "value": "[parameters('numberOfLinuxGateways')]"
                    },
                    "numberOfSimulations": {
                        "value": "[parameters('numberOfSimulations')]"
                    },
                    "numberOfWindowsGateways": {
                        "value": "[parameters('numberOfWindowsGateways')]"
                    },
                    "dpsIdScope": {
                        "value": "[if(variables('simulationDeployment'), reference(variables('dpsResourceId'), '2018-01-22').idScope, '')]"
                    },
                    "dpsConnString": {
                        "value": "[if(variables('simulationDeployment'), concat('HostName=', reference(variables('dpsResourceId'), '2018-01-22'). serviceOperationsHostName, ';SharedAccessKeyName=', listkeys(variables('dpsResourceId'), '2018-01-22').value[0].keyName, ';SharedAccessKey=', listkeys(variables('dpsResourceId'), '2018-01-22').value[0].primaryKey), '')]"
                    },
                    "edgeVmSize": {
                        "value": "[parameters('edgeVmSize')]"
                    },
                    "simulationVmSize": {
                        "value": "[parameters('simulationVmSize')]"  
                    },
                    "edgeUserName": {
                        "value": "[parameters('edgeUserName')]"
                    },
                    "edgePassword": {
                        "value": "[parameters('edgePassword')]"
                    },
                    "branchName": {
                        "value": "[parameters('branchName')]"
                    },
                    "templateUrl": {
                        "value": "[parameters('templateUrl')]"
                    },
                    "managedIdentityResourceId": {
                        "value": "[variables('identityResourceId')]"
                    },
                    "dockerServer": {
                        "value": "[parameters('dockerServer')]"
                    },
                    "dockerUser": {
                        "value": "[parameters('dockerUser')]"
                    },
                    "dockerPassword": {
                        "value": "[parameters('dockerPassword')]"
                    },
                    "imagesNamespace": {
                        "value": "[parameters('imagesNamespace')]"
                    },
                    "imagesTag": {
                        "value": "[parameters('imagesTag')]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[concat(variables('templateBaseUrl'), 'azuredeploy.simulation.json')]"
                }
            },
            "dependsOn": [
                "[variables('dpsResourceId')]",
                "[variables('identityResourceId')]"
            ]
        },
        {
            "comments": "Save simulation configuration in keyVault.",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-08-01",
            "name": "[variables('simulationConfigurationResourceName')]",
            "condition": "[variables('simulationDeployment')]",
            "properties": {
                "mode": "Incremental",
                "parameters": {
                    "keyVaultName": {
                        "value": "[parameters('keyVaultName')]"
                    },
                    "configuration": {
                        "value": [
                            {
                                "key": "PCS_SIMULATION_USER",
                                "value": "[parameters('edgeUserName')]"
                            },
                            {
                                "key": "PCS_SIMULATION_PASSWORD",
                                "value": "[parameters('edgePassword')]"
                            },
                            {
                                "key": "PCS_DPS_CONNSTRING",
                                "value": "[if(variables('simulationDeployment'), concat('HostName=', reference(variables('dpsResourceId'), '2018-01-22'). serviceOperationsHostName, ';SharedAccessKeyName=', listkeys(variables('dpsResourceId'), '2018-01-22').value[0].keyName, ';SharedAccessKey=', listkeys(variables('dpsResourceId'), '2018-01-22').value[0].primaryKey), '')]"
                            },
                            {
                                "key": "PCS_DPS_IDSCOPE",
                                "value": "[if(variables('simulationDeployment'), reference(variables('dpsResourceId'), '2018-01-22').idScope, '')]"
                            },
                            {
                                "key": "PCS_DPS_ENDPOINT",
                                "value": "[if(variables('simulationDeployment'), reference(variables('dpsResourceId'), '2018-01-22').deviceProvisioningHostName, '')]"
                            }
                        ]
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[concat(variables('templateBaseUrl'), 'azuredeploy.configuration.json')]"
                }
            },
            "dependsOn": [
                "[variables('dpsResourceId')]"
            ]
        }
    ],
    "outputs": {
        "keyVaultUri": {
            "type": "string",
            "value": "[reference(variables('keyVaultResourceId')).vaultUri]"
        },
        "tenantId": {
            "type": "string",
            "value": "[subscription().tenantId]"
        },
        "serviceUrl": {
            "type": "string",
            "value": "[if (variables('platformDeployment'), reference(variables('platformResourceId'), '2017-05-10').outputs.serviceUrl.value, '')]"
        }
    }
}
