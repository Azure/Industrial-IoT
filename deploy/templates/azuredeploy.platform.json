{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "siteName": {
            "type": "string",
            "defaultValue": "[if(not(empty(parameters('siteName'))), concat('svc', take(uniqueString(subscription().subscriptionId, resourceGroup().id), 5)), '')]",
            "metadata": {
                "description": "The name of the application to create."
            }
        },
        "keyVaultUri": {
            "type": "string",
            "metadata": {
                "description": "The endpoint of the keyvault."
            }
        },
        "managedIdentityResourceId": {
            "type": "string",
            "metadata": {
                "description": "A user created managed identity to use for service to service access."
            }
        },
        "managedIdentityClientId": {
            "type": "string",
            "metadata": {
                "description": "Specifies the registered managed identity client application id."
            }
        },
        "managedIdentityTenantId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "The tenant the managed identity was registered in."
            }
        },
        "authTenantId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Specifies an Azure Active Directory tenant for authentication that is different from the one tied to the subscription."
            }
        },
        "dockerServer": {
            "type": "string",
            "defaultValue": "mcr.microsoft.com",
            "metadata": {
                "description": "Specifies the endpoint of the Container Registry."
            }
        },
        "dockerUser": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Specifies the user name to log into a private Container Registry."
            }
        },
        "dockerPassword": {
            "type": "secureString",
            "defaultValue": "",
            "metadata": {
                "description": "Specifies the password to use for a private Container Registry."
            }
        },
        "imagesNamespace": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Specifies the namespace prefix for the images in the Container Registry."
            }
        },
        "imagesTag": {
            "type": "string",
            "defaultValue": "latest",
            "metadata": {
                "description": "Specifies the image version tag to use for all images."
            }
        },
        "hostingPlanName": {
            "type": "string",
            "defaultValue": "[concat('appservices-', take(uniqueString(subscription().subscriptionId, resourceGroup().id), 6))]",
            "metadata": {
                "description": "Specifies the name of App Service Hosting Plan."
            }
        },
        "hostingPlanSku": {
            "type": "string",
            "defaultValue": "B1",
            "allowedValues": [
                "B1",
                "B2",
                "B3",
                "S1",
                "S2",
                "S3",
                "P1v2",
                "P2v2",
                "P3v2",
                "P0v3",
                "P1v3",
                "P2v3",
                "P3v3"
            ],
            "metadata": {
                "description": "The pricing sku for the hosting plan."
            }
        },
        "tags": {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "Tags for Azure resources."
            }
        }
    },
    "variables": {
        "serviceSiteResourceName": "[if(empty(parameters('siteName')), concat('svc', take(uniqueString(subscription().subscriptionId, resourceGroup().id), 5)), parameters('siteName'))]",
        "serviceSiteResourceId": "[resourceId('Microsoft.Web/sites', variables('serviceSiteResourceName'))]",
        "serviceContainerImageTag": "[if(empty(parameters('imagesTag')), 'latest', parameters('imagesTag'))]",
        "serviceContainerImageName": "[concat(if(empty(parameters('imagesNamespace')), '', concat(parameters('imagesNamespace'), '/')), 'iot/industrial-iot-services-all', ':', variables('serviceContainerImageTag'))]"
    },
    "resources": [
        {
            "comments": "Hosting plan to host platform services.",
            "type": "Microsoft.Web/serverfarms",
            "apiVersion": "2018-02-01",
            "kind": "linux",
            "name": "[parameters('hostingPlanName')]",
            "location": "[resourceGroup().location]",
            "tags": "[parameters('tags')]",
            "sku": {
                "name": "[parameters('hostingPlanSku')]",
                "capacity": "[if(empty(parameters('siteName')), '0', '1')]"
            },
            "properties": {
                "name": "[parameters('hostingPlanName')]",
                "reserved": true
            },
            "dependsOn": [
            ]
        },
        {
            "comments": "Deploy services web app.",
            "type": "Microsoft.Web/sites",
            "kind": "app,linux,container",
            "name": "[variables('serviceSiteResourceName')]",
            "apiVersion": "2018-11-01",
            "location": "[resourceGroup().location]",
            "tags": "[parameters('tags')]",
            "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                   "[parameters('managedIdentityResourceId')]": {}
                }
            },
            "condition": "[not(empty(parameters('siteName')))]",
            "properties": {
                "enabled": true,
                "clientAffinityEnabled": true,
                "serverFarmId": "[parameters('hostingPlanName')]",
                "httpsOnly": true,
                "siteConfig": {
                    "numberOfWorkers": 1,
                    "linuxFxVersion": "[concat('DOCKER|', parameters('dockerServer'), '/', variables('serviceContainerImageName'))]",
                    "managedPipelineMode": "Integrated",
                    "requestTracingEnabled": true,
                    "httpLoggingEnabled": true,
                    "detailedErrorLoggingEnabled": true,
                    "alwaysOn": true,
                    "minTlsVersion": "1.2",
                    "http20Enabled": true,
                    "xManagedServiceIdentityId": "[parameters('managedIdentityResourceId')]",
                    "webSocketsEnabled": true,
                    "appSettings": [
                        {
                            "name": "DOCKER_REGISTRY_SERVER_URL",
                            "value": "[concat('https://', parameters('dockerServer'))]"
                        },
                        {
                            "name": "DOCKER_REGISTRY_SERVER_USERNAME",
                            "value": "[parameters('dockerUser')]"
                        },
                        {
                            "name": "DOCKER_REGISTRY_SERVER_PASSWORD",
                            "value": "[parameters('dockerPassword')]"
                        },
                        {
                            "name": "WEBSITES_PORT",
                            "value": "9080"
                        },
                        {
                            "name": "PCS_KEYVAULT_URL",
                            "value": "[parameters('keyVaultUri')]"
                        },
                        {
                            "name": "AZURE_CLIENT_ID",
                            "value": "[parameters('managedIdentityClientId')]"
                        },
                        {
                            "name": "AZURE_TENANT_ID",
                            "value": "[parameters('managedIdentityTenantId')]"
                        },
                        {
                            "name": "PCS_AUTH_TENANT",
                            "value": "[if(not(empty(parameters('authTenantId'))), parameters('authTenantId'), parameters('managedIdentityTenantId'))]"
                        },
                        {
                            "name": "PCS_SERVICE_URL",
                            "value": "[if(empty(parameters('siteName')), '', concat('https://', variables('serviceSiteResourceName'), '.azurewebsites.net'))]"
                        },
                        {
                            "name": "PCS_IMAGES_TAG",
                            "value": "[parameters('imagesTag')]"
                        }
                    ]
                }
            },
            "resources": [
                {
                    "comments": "Configuration for services web app.",
                    "condition": "[not(empty(parameters('siteName')))]",
                    "type": "config",
                    "name": "appsettings",
                    "apiVersion": "2018-11-01",
                    "properties": {
                        "PCS_SERVICE_URL": "[if(empty(parameters('siteName')), '', concat('https://', reference(variables('serviceSiteResourceId'), '2018-11-01').hostNames[0]))]",
                        "PCS_KEYVAULT_URL": "[parameters('keyVaultUri')]",
                        "AZURE_CLIENT_ID": "[parameters('managedIdentityClientId')]",
                        "AZURE_TENANT_ID": "[parameters('managedIdentityTenantId')]",
                        "PCS_AUTH_TENANT": "[if(not(empty(parameters('authTenantId'))), parameters('authTenantId'), parameters('managedIdentityTenantId'))]",
                        "DOCKER_REGISTRY_SERVER_URL": "[concat('https://', parameters('dockerServer'))]",
                        "DOCKER_REGISTRY_SERVER_USERNAME": "[parameters('dockerUser')]",
                        "DOCKER_REGISTRY_SERVER_PASSWORD": "[parameters('dockerPassword')]",
                        "WEBSITES_PORT": "9080",
                        "PCS_IMAGES_TAG": "[parameters('imagesTag')]"
                    },
                    "dependsOn": [
                        "[variables('serviceSiteResourceId')]"
                    ]
                }
            ],
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', parameters('hostingPlanName'))]"
            ]
        }
    ],
    "outputs": {
        "serviceUrl": {
            "type": "string",
            "value": "[if(empty(parameters('siteName')), '', concat('https://', reference(variables('serviceSiteResourceId'), '2018-11-01').hostNames[0]))]"
        }
    }
}
