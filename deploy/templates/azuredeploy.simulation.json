{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "edgeName": {
            "type": "string",
            "metadata": {
                "description": "Name of the IoT Edge virtual machine."
            }
        },
        "dpsIdScope": {
            "type": "string",
            "metadata": {
                "description": "Device provisioning service id scope."
            }
        },
        "dpsConnString": {
            "type": "secureString",
            "metadata": {
                "description": "Azure Device Provisioning service connection string."
            }
        },
        "edgeOs": {
            "type": "string",
            "allowedValues": [
                "linux",
                "windows"
            ],
            "defaultValue": "linux",
            "metadata": {
                "description": "Operating system to use for the virtual edge."
            }
        },
        "edgeUsername": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Username for the IoT Edge virtual machine."
            }
        },
        "edgePassword": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "Password for the IoT Edge virtual machine."
            }
        },
        "numberOfServers": {
            "type": "int",
            "defaultValue": 1,
            "maxValue": 255,
            "minValue": 0,
            "metadata": {
                "description": "Number of OPC UA servers to deploy into the edge sandbox."
            }
        },
        "dockerServer": {
            "type": "string",
            "defaultValue": "mcr.microsoft.com",
            "metadata": {
                "description": "Specifies the endpoint of the Container Registry."
            }
        },
        "dockerUser": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Specifies the user to log into the Container Registry."
            }
        },
        "dockerPassword": {
            "type": "secureString",
            "defaultValue": "",
            "metadata": {
                "description": "Specifies the password to the Container Registry."
            }
        },
        "imageNamespace": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Specifies the namespace prefix for the images in the Container Registry."
            }
        },
        "imageVersion": {
            "type": "string",
            "defaultValue": "latest",
            "metadata": {
                "description": "Specifies the image version tag to use for all images."
            }
        },
        "templateUrl": {
            "type": "string",
            "defaultValue": "https://raw.githubusercontent.com/Azure/Industrial-IoT",
            "metadata": {
                "description": "The artifacts url from which to pull all linked templates.  Default is official repository."
            }
        },
        "branchName": {
            "type": "string",
            "defaultValue": "master",
            "metadata": {
                "description": "The branch from which to deploy deploy services and application.  Default to master."
            }
        },
        "managedIdentityResourceId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "A user created managed identity to use for keyvault access.  If not provided, above secret will be used to gain access to keyvault."
            }
        }
    },
    "variables": {
        "instanceId": "[take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('edgeName'), parameters('edgeOs')), 7)]",
        "vmPrefix": "[if(equals(parameters('edgeOs'), 'windows'), take(parameters('edgeName'), 6), parameters('edgeName'))]",
        "vmName": "[tolower(concat(variables('vmPrefix'), '-', variables('instanceId')))]",
        "vmResourceId": "[resourceId('Microsoft.Compute/virtualMachines', variables('vmName'))]",
        "nicResourceName": "[concat(variables('vmName'), '-nic')]",
        "nicResourceId": "[resourceId(resourceGroup().name,'Microsoft.Network/networkInterfaces', variables('nicResourceName'))]",
        "vnetResourceName": "[concat(variables('vmName'), '-vnet')]",
        "vnetResourceId": "[resourceId(resourceGroup().name,'Microsoft.Network/virtualNetworks', variables('vnetResourceName'))]",
        "networkProfileResourceName": "[concat(variables('vmName'), '-nprofile')]",
        "networkProfileResourceId": "[resourceId('Microsoft.Network/networkProfiles', variables('networkProfileResourceName'))]",
        "dockerCredentials": [
            {
                "server": "[parameters('dockerServer')]",
                "username": "[parameters('dockerUser')]",
                "password": "[parameters('dockerPassword')]"
            }
        ],
        "opcservers": "[tolower(replace(concat(variables('vmName'), 'opcservers'), '-', ''))]",
        "identity": {
            "type": "UserAssigned",
            "userAssignedIdentities": {
                "[parameters('managedIdentityResourceId')]": {
                }
            }
        },
        "windowsOsProfile": {
            "computerName": "[variables('vmName')]",
            "adminUsername": "[parameters('edgeUsername')]",
            "adminPassword": "[if(not(empty(parameters('edgePassword'))), parameters('edgePassword'), json('null'))]",
            "windowsConfiguration": {
                "enableAutomaticUpdates": true,
                "provisionVmAgent": true
            }
        },
        "windowsVmExtension": {
            "publisher": "Microsoft.Compute",
            "type": "CustomScriptExtension",
            "typeHandlerVersion": "1.9",
            "autoUpgradeMinorVersion": true,
            "settings": {
                "fileUris": [
                    "[concat(parameters('templateUrl'), '/', parameters('branchName'), '/deploy/scripts/vm-enroll.ps1')]",
                    "[concat(parameters('templateUrl'), '/', parameters('branchName'), '/deploy/scripts/vm-setup.ps1')]"
                ]
            },
            "protectedSettings": {
                "commandToExecute": "[concat('powershell -ExecutionPolicy Unrestricted -File ./vm-setup.ps1 -idScope \"', parameters('dpsIdScope'), '\" -dpsConnString \"', parameters('dpsConnString'), '\"')]"
            }
        },
        "windowsImage": {
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "2019-Datacenter-Core-with-Containers",
            "version": "latest"
        },
        "linuxImage": {
            "publisher": "Canonical",
            "offer": "UbuntuServer",
            "sku": "16.04.0-LTS",
            "version": "latest"
        },
        "linuxOsProfile": {
            "computerName": "[variables('vmName')]",
            "adminUsername": "[parameters('edgeUsername')]",
            "adminPassword": "[if(not(empty(parameters('edgePassword'))), parameters('edgePassword'), json('null'))]"
        },
        "linuxVmExtension": {
            "publisher": "Microsoft.Azure.Extensions",
            "type": "CustomScript",
            "typeHandlerVersion": "2.0",
            "autoUpgradeMinorVersion": true,
            "settings": {
                "fileUris": [
                    "[concat(parameters('templateUrl'), '/', parameters('branchName'), '/deploy/scripts/vm-enroll.ps1')]",
                    "[concat(parameters('templateUrl'), '/', parameters('branchName'), '/deploy/scripts/vm-setup.ps1')]",
                    "[concat(parameters('templateUrl'), '/', parameters('branchName'), '/deploy/scripts/vm-setup.sh')]"
                ]
            },
            "protectedSettings": {
                "commandToExecute": "[concat('sudo bash vm-setup.sh --idScope \"', parameters('dpsIdScope'), '\" --dpsConnString \"', parameters('dpsConnString'), '\"')]"
            }
        }
    },
    "resources": [
        {
            "comments": "Virtual edge network.",
            "name": "[variables('vnetResourceName')]",
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2019-09-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "10.1.8.0/22"
                    ]
                },
                "subnets": [
                    {
                        "name": "vm-subnet",
                        "properties": {
                            "addressPrefix": "10.1.8.0/24"
                        }
                    },
                    {
                        "name": "aci-subnet",
                        "properties": {
                            "addressPrefix": "10.1.9.0/24",
                            "delegations": [
                                {
                                    "name": "DelegationService",
                                    "properties": {
                                        "serviceName": "Microsoft.ContainerInstance/containerGroups"
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            "dependsOn": [
            ]
        },
        {
            "comments": "Network interface for edge virtual machine to use.",
            "name": "[variables('nicResourceName')]",
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2019-09-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "subnet": {
                                "id": "[concat(variables('vnetResourceId'), '/subnets/', 'vm-subnet')]"
                            },
                            "privateIPAllocationMethod": "Dynamic"
                        }
                    }
                ]
            },
            "dependsOn": [
                "[variables('vnetResourceId')]"
            ]
        },
        {
            "comments": "Virtual machine hosting the IoT Edge installation.",
            "name": "[variables('vmName')]",
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2019-03-01",
            "location": "[resourceGroup().location]",
            "identity": "[if(not(empty(parameters('managedIdentityResourceId'))), variables('identity'), '')]",
            "properties": {
                "hardwareProfile": {
                    "vmSize": "Standard_B2s"
                },
                "osProfile": "[if(equals(parameters('edgeOs'), 'linux'), variables('linuxOsProfile'), variables('windowsOsProfile'))]",
                "storageProfile": {
                    "imageReference": "[if(equals(parameters('edgeOs'), 'linux'), variables('linuxImage'), variables('windowsImage'))]",
                    "osDisk": {
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[variables('nicResourceId')]"
                        }
                    ]
                }
            },
            "dependsOn": [
                "[variables('nicResourceId')]"
            ]
        },
        {
            "comments": "One time script execution to install and onboard IoT Edge and deploy workloads",
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('vmName'), '/', 'scriptextensions')]",
            "apiVersion": "2019-03-01",
            "location": "[resourceGroup().location]",
            "properties": "[if (equals(parameters('edgeOs'), 'linux'), variables('linuxVmExtension'), variables('windowsVmExtension'))]",
            "dependsOn": [
                "[variables('vmResourceId')]"
            ]
        },
        {
            "comments": "Network profile for test server containering.",
            "name": "[variables('networkProfileResourceName')]",
            "type": "Microsoft.Network/networkProfiles",
            "apiVersion": "2019-09-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "containerNetworkInterfaceConfigurations": [
                    {
                        "name": "vm-container-network-interface",
                        "properties": {
                            "ipConfigurations": [
                                {
                                    "name": "vm-container-ipconfiguration",
                                    "properties": {
                                        "subnet": {
                                            "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetResourceName'), 'aci-subnet')]"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            },
            "dependsOn": [
                "[variables('vnetResourceId')]"
            ]
        },
        {
            "comments": "OPC Test server containers hosted as container group.",
            "type": "Microsoft.ContainerInstance/containerGroups",
            "condition": "[not(equals(parameters('numberOfServers'), 0))]",
            "name": "[variables('opcservers')]",
            "apiVersion": "2018-10-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "copy": [
                    {
                        "name": "containers",
                        "count": "[if(not(equals(0, parameters('numberOfServers'))), parameters('numberOfServers'), 1)]",
                        "input": {
                            "name": "[concat('opc-ua-test-server-container', copyIndex('containers'))]",
                            "properties": {
                                "image": "[concat(parameters('dockerServer'), '/', if(empty(parameters('imageNamespace')), '', concat(parameters('imageNamespace'), '/')), 'iot/opc-ua-test-server', ':', parameters('imageVersion'))]",
                                "environmentVariables": [
                                    {
                                        "name": "SERVER_PORT",
                                        "value": "[add(50000, copyIndex('containers'))]"
                                    }
                                ],
                                "ports": [
                                    {
                                        "protocol": "TCP",
                                        "port": "[add(50000, copyIndex('containers'))]"
                                    }
                                ],
                                "resources": {
                                    "requests": {
                                        "memoryInGB": 1,
                                        "cpu": 1
                                    }
                                }
                            }
                        }
                    }
                ],
                "imageRegistryCredentials": "[if(not(empty(parameters('dockerPassword'))), variables('dockerCredentials'), json('null'))]",
                "restartPolicy": "Always",
                "networkProfile": {
                    "Id": "[variables('networkProfileResourceId')]"
                },
                "osType": "linux"
            },
            "dependsOn": [
                "[variables('networkProfileResourceId')]"
            ]
        }
    ],
    "outputs": {
        "edgeUsername": {
            "type": "string",
            "value": "[parameters('edgeUsername')]"
        },
        "edgeVMName": {
            "type": "string",
            "value": "[variables('vmName')]"
        }
    }
}