{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Event configuration model",
  "description": "Event resource additional configuration model.",
  "type": "object",
  "properties": {
    "QueueSize": {
      "type": ["integer", "null"],
      "minimum": 1,
      "maximum": 65536,
      "examples": [1, 100, 1000],
      "description": "Size of the server-side queue for this monitored item. Larger queues consume more memory but provide better buffering.",
      "errorMessage": {
        "type": "Must be an integer or omitted",
        "minimum": "Must be at least 1",
        "maximum": "Must not exceed maximum queue size (65536)"
      }
    },
    "publishingInterval": {
      "type": ["integer", "null"],
      "minimum": 0,
      "maximum": 4294967295,
      "examples": [100, 1000, 5000],
      "description": "The publishing interval in milliseconds for this dataset writer. Controls how frequently data is published.",
      "errorMessage": {
        "type": "Must be an integer in milliseconds or omitted",
        "minimum": "Must be non-negative",
        "maximum": "Must not exceed maximum supported interval (4294967295ms)"
      }
    },
    "DiscardNew": {
      "type": ["boolean", "null"],
      "default": false,
      "examples": [true, false],
      "description": "Controls queue overflow behavior for monitored items. If true, new values are discarded when queue is full. If false, oldest values are discarded."
    },
    "EventFilter": {
      "$ref": "#/definitions/EventFilterModel",
      "description": "Event Filter to apply. When specified the node is assumed to be an event notifier node to subscribe to."
    },
    "ConditionHandling": {
      "$ref": "#/definitions/ConditionHandlingOptionsModel",
      "description": "Settings for pending condition handling."
    },
    "SkipFirst": {
      "type": ["boolean", "null"],
      "default": false,
      "examples": [true, false],
      "description": "Controls handling of initial value notification. If true, skips the first value after subscription creation to avoid initial value spikes.",
      "errorMessage": {
        "type": "Must be a boolean or omitted"
      }
    },
    "MessageEncoding": {
      "type": ["string", "null"],
      "enum": ["Json", "Avro"],
      "default": "Json",
      "examples": ["Json", "Avro"],
      "description": "The encoding format to use for messages. Json (human-readable), Avro (raw format).",
      "errorMessage": {
        "enum": "Must be one of: Json, Uadp, Binary"
      }
    },
    "Priority": {
      "type": ["integer", "null"],
      "minimum": 0,
      "maximum": 255,
      "examples": [0, 100, 255],
      "description": "Priority of the writer subscription (0-255). Higher values indicate higher priority for resource allocation and processing.",
      "errorMessage": {
        "type": "Must be an integer or omitted",
        "minimum": "Must be non-negative",
        "maximum": "Must not exceed 255"
      }
    },
    "DataSetClassId": {
      "type": ["string", "null"],
      "format": "uuid",
      "description": "The optional dataset class id as it shall appear in dataset messages and dataset metadata."
    },
    "DataSetDescription": {
      "type": ["string", "null"],
      "description": "The optional description of the dataset."
    },
    "SendKeepAliveDataSetMessages": {
      "type": "boolean",
      "default": false,
      "examples": [true, false],
      "description": "Controls whether to send keep alive messages for this dataset. Enable to maintain connection health monitoring.",
      "errorMessage": {
        "type": "Must be a boolean value"
      }
    },
    "MaxKeepAliveCount": {
      "type": ["integer", "null"],
      "minimum": 0,
      "maximum": 1000,
      "examples": [3, 10, 20],
      "description": "Defines how many publishing timer expirations to wait before sending a keep-alive message. Larger values reduce traffic but increase detection time.",
      "errorMessage": {
        "type": "Must be an integer or omitted",
        "minimum": "Must be non-negative",
        "maximum": "Must not exceed 1000"
      }
    },
    "DataSetWriterWatchdogBehavior": {
      "type": ["string", "null"],
      "enum": ["Restart", "Halt", "Continue"],
      "default": "Restart",
      "examples": ["Restart", "Halt", "Continue"],
      "description": "Defines what action to take when the watchdog timer triggers. Restart (reinitialize writer), Halt (stop publishing), or Continue (keep running).",
      "errorMessage": {
        "enum": "Must be one of: Restart, Halt, Continue"
      }
    },
    "OpcNodeWatchdogCondition": {
      "type": ["string", "null"],
      "enum": ["NoData", "Error", "Any"],
      "default": "NoData",
      "examples": ["NoData", "Error", "Any"],
      "description": "Specifies the condition that triggers the watchdog behavior. NoData (no updates received), Error (error occurs), or Any (either condition).",
      "errorMessage": {
        "enum": "Must be one of: NoData, Error, Any"
      }
    },
    "DisableSubscriptionTransfer": {
      "type": ["boolean", "null"],
      "default": false,
      "examples": [true, false],
      "description": "Controls whether subscription transfer is disabled during reconnect. Enable to prevent subscription state transfer.",
      "errorMessage": {
        "type": "Must be a boolean or omitted"
      }
    },
    "RepublishAfterTransfer": {
      "type": ["boolean", "null"],
      "default": true,
      "examples": [true, false],
      "description": "Controls whether to republish missed values after a subscription is transferred during reconnect handling. Enable to ensure data consistency.",
      "errorMessage": {
        "type": "Must be a boolean or omitted"
      }
    }
  },
  "additionalProperties": true,
  "definitions": {
    "EventFilterModel": {
      "type": "object",
      "description": "Event filter for OPC UA event monitoring.",
      "properties": {
        "whereClause": {
          "$ref": "#/definitions/ContentFilterModel",
          "description": "Where clause for event filtering."
        },
        "typeDefinitionId": {
          "type": ["string", "null"],
          "description": "Simple event Type definition node id."
        }
      },
      "additionalProperties": false
    },
    "ContentFilterModel": {
      "type": "object",
      "description": "Content filter for event filtering (structure not detailed in provided context).",
      "properties": {},
      "additionalProperties": true
    },
    "ConditionHandlingOptionsModel": {
      "type": "object",
      "description": "Condition handling options model.",
      "properties": {
        "updateInterval": {
          "type": ["integer", "null"],
          "minimum": 0,
          "description": "Time interval for sending pending interval updates in seconds."
        },
        "snapshotInterval": {
          "type": ["integer", "null"],
          "minimum": 0,
          "description": "Time interval for sending pending interval snapshot in seconds."
        }
      },
      "additionalProperties": false
    }
  }
}
