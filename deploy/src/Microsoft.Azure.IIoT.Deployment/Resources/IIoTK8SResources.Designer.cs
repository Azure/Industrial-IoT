//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Azure.IIoT.Deployment.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class IIoTK8SResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal IIoTK8SResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Microsoft.Azure.IIoT.Deployment.Resources.IIoTK8SResources", typeof(IIoTK8SResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to apiVersion: v1
        ///kind: ConfigMap
        ///metadata:
        ///  name: container-azm-ms-agentconfig
        ///  namespace: kube-system
        ///data:
        ///  schema-version:
        ///    v1
        ///  config-version:
        ///    ver1
        ///  log-data-collection-settings: |-
        ///    # Log data collection settings
        ///    [log_collection_settings]
        ///       [log_collection_settings.stdout]
        ///          # In the absense of this configmap, default value for enabled is true
        ///          enabled = true
        ///          # exclude_namespaces setting holds good only if enabled is set to true
        ///          # kube-system l [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string _04_oms_agent_configmap {
            get {
                return ResourceManager.GetString("_04_oms_agent_configmap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to apiVersion: cert-manager.io/v1
        ///kind: ClusterIssuer
        ///metadata:
        ///  name: letsencrypt-prod
        ///spec:
        ///  acme:
        ///    # The ACME server URL
        ///    server: https://acme-v02.api.letsencrypt.org/directory
        ///    # Email address used for ACME registration
        ///    # email:
        ///    # Name of a secret used to store the ACME account private key
        ///    privateKeySecretRef:
        ///      name: letsencrypt-prod
        ///    # Enable the HTTP-01 challenge provider
        ///    solvers:
        ///    - http01:
        ///        ingress:
        ///          class: nginx
        ///.
        /// </summary>
        internal static string _90_letsencrypt_cluster_issuer {
            get {
                return ResourceManager.GetString("_90_letsencrypt_cluster_issuer", resourceCulture);
            }
        }
    }
}
