jobs:
#
# Build everything on all platforms
#
- job: buildall
  displayName: Build
  strategy:
    matrix:
      linux:
        poolName: "Hosted Ubuntu 1604"
      mac:
        poolName: "Hosted macOS"
      windows:
        poolName: "Hosted Windows 2019 with VS2019"
  pool:
    name: $(poolName)
  steps:
  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      command: build
      projects: 'Industrial-IoT.sln'
      arguments: '--configuration Release'
  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      command: build
      projects: 'Industrial-IoT.sln'
      arguments: '--configuration Debug'

#
# Test all components on multiple platforms
#
- job: testprep
  displayName: Prepare Test Jobs
  pool:
    name: Hosted Windows 2019 with VS2019
  steps:
  - task: PowerShell@2
    name: jobmatrix
    displayName: Prepare Tests
    inputs:
      targetType: filePath
      filePath: ./tools/jobmatrix.ps1
- job: testall
  displayName: Run Tests for
  dependsOn: testprep
  strategy:
    matrix: $[ dependencies.testprep.outputs['jobmatrix.jobMatrix'] ]
  pool:
    name: $(poolName)
  steps:
  - task: DotNetCoreCLI@2
    displayName: Test
    inputs:
      command: test
      projects: '$(folder)/**/tests/*.csproj'
      arguments: '--configuration Release'

#
# Run Sdl tools
#
- job: sdl
  displayName: SDL Tasks
  pool:
    name: Hosted Windows 2019 with VS2019
    demands:
    - msbuild
    - npm
  steps:
  - task: DotNetCoreCLI@2
    displayName: Restore
    inputs:
      command: restore
      projects: 'Industrial-IoT.sln'
  - task: MSBuild@1
    displayName: Build
    inputs:
      solution: 'Industrial-IoT.sln'
      configuration: Release
  - task: AntiMalware@3
    displayName: 'Run Virus scan'
    inputs:
      InputType: 'Basic'
      ScanType: 'CustomScan'
      FileDirPath: '$(Build.StagingDirectory)'
      EnableServices: true
      SupportLogOnError: false
      TreatSignatureUpdateFailureAs: 'Warning'
      SignatureFreshness: 'UpToDate'
      TreatStaleSignatureAs: 'Error'
  - task: securedevelopmentteam.vss-secure-development-tools.build-task-credscan.CredScan@2
    displayName: 'Credential Scanner'
    inputs:
      debugMode: false
    continueOnError: true
  - task: TSLint@1
    displayName: 'Run TSLint'
    inputs:
      Files: '**\*.ts;**\*.js'
      ExcludeFiles: 'api\**'
    continueOnError: true
  - task: RoslynAnalyzers@2
    displayName: 'Run Roslyn Analyzers'
    continueOnError: true
  - task: BinSkim@3
    displayName: 'BinSkim '
    inputs:
      InputType: Basic
      AnalyzeTarget: '*.IIoT.*.dll;*.exe'
    continueOnError: true
  - task: AutoApplicability@1
    displayName: 'Auto Applicability'
    inputs:
      ExternalRelease: true
      InternalRelease: true
      IsService: true
    continueOnError: true
  - task: VulnerabilityAssessment@0
    displayName: 'Run Vulnerability Assessment'
    continueOnError: true
    condition: succeededOrFailed()
  - task: PoliCheck@1
    displayName: PoliCheck
    inputs:
      targetType: F
      termTypeT: 0001aCustom
      termTypeTCustom: '9,1031'
      toolVersion: 5.8.2.1
    continueOnError: true
    timeoutInMinutes: 15
  - task: SdtReport@1
    displayName: 'Create Security Analysis Report'
    inputs:
      BinSkim: true
      CredScan: true
      PoliCheck: true
      RoslynAnalyzers: true
    continueOnError: true
    condition: succeededOrFailed()
  - task: PostAnalysis@1
    displayName: 'Post Analysis'
    inputs:
      BinSkim: true
      CredScan: true
      RoslynAnalyzers: true
  - script: |
      if not "%BUILD_SOURCEBRANCHNAME%" == "master" echo ##vso[task.setvariable variable=MY_BRANCH;]develop
          if "%BUILD_SOURCEBRANCHNAME%" == "master" echo ##vso[task.setvariable variable=MY_BRANCH;]master
  - task: TSAUpload@1
    displayName: 'Upload to Stamp'
    inputs:
      tsaVersion: TsaV2
      tsaEnvironment: 'PROD'
      serviceTreeID: 'sdfgsdfgsdfgsdfg'
      codebase: NewOrUpdate
      codeBaseName: 'Industrial_IoT_$(MY_BRANCH)'
      notificationAlias: 'azureiiot@microsoft.com'
      codeBaseAdmins: 'redmond\mschier;redmond\erichb'
      instanceUrlForTsaV2: MSAZURE
      projectNameMSAZURE: One
      areaPath: 'One\IoT\Industrial\Components'
      iterationPath: 'One\IoT\Backlog'
      uploadAPIScan: true
      uploadBinSkim: true
      uploadCredScan: true
      uploadFortifySCA: false
      uploadFxCop: false
      uploadModernCop: false
      uploadPoliCheck: true
      uploadPREfast: false
      uploadRoslyn: false
      uploadTSLint: false
      uploadAsync: true
    continueOnError: true

#
# Pack developer nugets for consumption
#
- job: devpack
  displayName: Pack and Push Developer Packages
  dependsOn:
    - sdl
    - buildall
    - testall
  pool:
    name: Hosted Windows 2019 with VS2019
  steps:
  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      projects: 'Industrial-IoT.sln'
      arguments: '--configuration Release'
  - task: DotNetCoreCLI@2
    displayName: Pack
    inputs:
      command: pack
      packagesToPack: 'Industrial-IoT.sln'
      configuration: Release
      nobuild: true
  - task: NuGetCommand@2
    displayName: Push
    inputs:
      command: push
      packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.snupkg'
      nuGetFeedType: external
      publishFeedCredentials: azureiiot-dev

#
# Build developer or release images
#
- job: imagesprep
  displayName: Prepare Image Jobs
  pool:
    name: Hosted Windows 2019 with VS2019
  dependsOn:
    - devpack
  steps:
  - task: PowerShell@2
    name: acrmatrix
    displayName: Prepare Builds
    inputs:
      targetType: filePath
      filePath: ./tools/acrmatrix.ps1
- job: imagesall
  displayName: Build Images for
  pool:
    name: Hosted Windows 2019 with VS2019
  dependsOn: imagesprep
  strategy:
    matrix: $[ dependencies.imagesprep.outputs['acrmatrix.acrMatrix'] ]
  steps:
  - task: AzureCLI@1
    name: acrbuild
    displayName: Build Image
    inputs:
      azureSubscription: azureiiot
      scriptLocation: inlineScript
      inlineScript: powershell ./tools/acrbuild.ps1 $(dockerFolder)
      
