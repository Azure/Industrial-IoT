pr:
  autoCancel: 'true'
  drafts: 'true'
  branches:
    include:
    - '*'
trigger:
  batch: 'true'
  branches:
    include:
    - main
    - release/*
parameters:
- name: onebranch
  displayName: 'One Branch to use'
  type: string
  default: 'main'
  values:
    - 'main'
    - 'test'
jobs:
- job: OneBranchTrigger
  pool:
    vmImage: 'ubuntu-latest'
  displayName: Trigger Governed Pipeline
  steps:
  - task: PowerShell@2
    displayName: 'Determine pipeline and parameters'
    inputs:
      targetType: 'inline'
      pwsh: true
      script: |
        $message = '$(Build.SourceVersionMessage)'
        if ([string]::IsNullOrWhiteSpace($message)) {
          $message = 'No message'
        }
        $message = $message -replace "[^a-zA-Z0-9\s]", ""
        $message = $message.Trim()
        $message = $message.substring(0, [System.Math]::Min(100, $message.Length))
        $branchName = '$(Build.SourceBranch)'
        $branchName = $branchName -replace "refs/heads/", ""
        if ('$(Build.Reason)' -eq 'PullRequest')
        {
          $pipelineDefinition = 'Industrial-IoT-PullRequest'
          $templateParameters = "ref: $(Build.SourceBranch), buildInfo: '$message'"
          Write-Host "Triggering Pull Request build for $(Build.SourceBranch)..."
        }
        elseif ('$(Build.SourceBranch)' -like 'refs/heads/release/*')
        {
          $pipelineDefinition = 'Industrial-IoT-Official'
          $templateParameters = "branch: $branchName, buildInfo: '$message'"
          Write-Host "Triggering official build for branch $branchName..."
        }
        else
        {
          $pipelineDefinition = 'Industrial-IoT-Buddy'
          $templateParameters = "branch: $branchName, buildInfo: '$message'"
          Write-Host "Triggering buddy build for branch $branchName ..."
        }
        Write-Host "$(Build.Reason): Trigger $pipelineDefinition with '$templateParameters'..."
        Write-Host "##vso[task.setvariable variable=pipelineDefinition]$pipelineDefinition"
        Write-Host "##vso[task.setvariable variable=templateParameters]$templateParameters"
  - task: TriggerBuild@4
    displayName: 'Trigger Build'
    inputs:
      definitionIsInCurrentTeamProject: true
      buildDefinition: $(pipelineDefinition)
      queueBuildForUserThatTriggeredBuild: false
      ignoreSslCertificateErrors: false
      useSameSourceVersion: false
      useCustomSourceVersion: false
      useSameBranch: false
      branchToUse: '${{ parameters.onebranch }}'
      storeInEnvironmentVariable: true
      authenticationMethod: 'OAuth Token'
      password: $(System.AccessToken)
      enableBuildInQueueCondition: true
      dependentOnSuccessfulBuildCondition: false
      dependentOnFailedBuildCondition: false
      checkbuildsoncurrentbranch: false
      failTaskIfConditionsAreNotFulfilled: false
      templateParameters: '$(templateParameters)'
  - task: PowerShell@2
    displayName: 'Update build number and tags'
    inputs:
      targetType: 'inline'
      pwsh: true
      script: |
        $buildId = $(TriggeredBuildIds)
        $buildUrl = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$buildId"
        Write-Host "Triggered build $buildUrl ..."
        Write-Host "##vso[build.addbuildtag]$(pipelineDefinition) build $buildId"
        Write-Host "##vso[task.logissue type=warning]$buildUrl"
        Write-Host "##vso[build.updatebuildnumber]$buildId"
  - task: WaitForBuildToFinish@3
    displayName: 'Wait for build to finish'
    inputs:
      definitionIsInCurrentTeamProject: true
      ignoreSslCertificateErrors: false
      waitForQueuedBuildsToFinishRefreshTime: '90'
      failTaskIfBuildsNotSuccessful: true
      cancelBuildsIfAnyFails: false
      treatPartiallySucceededBuildAsSuccessful: false
      downloadBuildArtifacts: true
      clearVariable: true
      authenticationMethod: 'OAuth Token'
      password: $(System.AccessToken)