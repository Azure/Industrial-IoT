{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "aadTenantId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "The AAD tenant identifier (GUID)"
            }
        },
        "aadInstance": {
            "type": "string",
            "defaultValue": "https://login.microsoftonline.com/",
            "metadata": {
                "description": "Url of the AAD login page (example: https://login.microsoftonline.com/)"
            }
        },
        "aadServiceId": {
            "type": "string",
            "metadata": {
                "description": "AAD service application identifier (GUID)"
            }
        },
        "aadServicePrincipalId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "AAD service application principal id (GUID)"
            }
        },
        "aadServiceSecret": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "AAD service application secret."
            }
        },
        "aadClientId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "AAD client application identifier (GUID)"
            }
        },
        "aadClientSecret": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "AAD client application secret."
            }
        },
        "authAudience": {
            "type": "string",
            "defaultValue": "[parameters('aadServiceId')]",
            "metadata": {
                "description": "Audience to validate token audience against."
            }
        },
        "aadTrustedIssuer": {
            "type": "string",
            "defaultValue": "[concat('https://sts.windows.net/', parameters('aadTenantId'))]",
            "metadata": {
                "description": "Audience to validate token audience against."
            }
        },
        "aadUserPrincipalId": {
            "type": "string",
            "metadata": {
                "description": "The user principal id managing the vault. (GUID)"
            }
        },
        "solutionName": {
            "type": "string",
            "defaultValue": "iiotservices",
            "metadata": {
                "description": "The name of the solution"
            }
        },
        "storageName": {
            "type": "string",
            "defaultValue": "[concat('storage', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]",
            "metadata": {
                "description": "The name of the storageAccount"
            }
        },
        "storageGen2Name": {
            "type": "string",
            "defaultValue": "[concat('storageg2', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]",
            "metadata": {
                "description": "The name of the storage Gen2 account created as part of the deployment."
            }
        },
        "storageSkuName": {
            "type": "string",
            "defaultValue": "Standard_LRS",
            "allowedValues": [
                "Standard_LRS", "Standard_GRS", "Standard_RAGRS", "Standard_ZRS", "Premium_LRS"
            ],
            "metadata": {
                "description": "The storage SKU name"
            }
        },
        "storageEndpointSuffix": {
            "type": "string",
            "defaultValue": "core.windows.net",
            "allowedValues": [
                "core.windows.net",
                "core.chinacloudapi.cn",
                "core.cloudapi.de"
            ],
            "metadata": {
                "description": "Suffix added to Azure Storage hostname"
            }
        },
        "documentDBName": {
            "type": "string",
            "defaultValue": "[concat('documentdb-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]",
            "metadata": {
                "description": "The name of the documentDB"
            }
        },
        "docDBConsistencyLevel": {
            "type": "string",
            "allowedValues": [
                "Strong",
                "BoundedStaleness",
                "Session",
                "ConsistentPrefix",
                "Eventual"
            ],
            "defaultValue": "Session",
            "metadata": {
                "description": "The documentDB default consistency level for this account."
            }
        },
        "docDBMaxStalenessPrefix": {
            "type": "int",
            "minValue": 10,
            "maxValue": 1000,
            "defaultValue": 100,
            "metadata": {
                "description": "When documentDB consistencyLevel is set to BoundedStaleness, then this value is required, else it can be ignored."
            }
        },
        "docDBMaxIntervalInSeconds": {
            "type": "int",
            "minValue": 5,
            "maxValue": 600,
            "defaultValue": 5,
            "metadata": {
                "description": "When documentDB consistencyLevel is set to BoundedStaleness, then this value is required, else it can be ignored."
            }
        },
        "serviceBusNamespaceName": {
            "type": "string",
            "defaultValue": "[concat('sb-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]", 
            "metadata": {
                "description": "The name of the Service Bus"
            }
        },
        "serviceBusSkuTier": {
            "type": "string",
            "defaultValue": "Standard",
            "allowedValues": [
                "Basic", "Standard"
            ],
            "metadata": {
                "description": "The Azure Service Bus SKU Tier"
            }
        },
        "eventHubName": {
            "type": "string",
            "defaultValue": "[concat('eventhub-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]",
            "metadata": {
                "description": "The name of the Event Hub"
            }
        },
        "eventHubRetentionInDays": {
            "type": "int",
            "defaultValue": 1,
            "metadata": {
                "description": "The event hub message retention in days"
            }
        },
        "eventHubPartitionCount": {
            "type": "int",
            "defaultValue": 2,
            "metadata": {
                "description": "The event hub partition count"
            }
        },
        "eventHubNamespaceName": {
            "type": "string",
            "defaultValue": "[concat('eventhubnamespace-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]",
            "metadata": {
                "description": "The name of the Event Hub"
            }
        },
        "eventHubSkuTier": {
            "type": "string",
            "defaultValue": "Basic",
            "allowedValues": [
                "Basic", "Standard"
            ],
            "metadata": {
                "description": "The Azure Event Hub SKU Tier"
            }
        },
        "eventHubSkuCapacity": {
            "type": "int",
            "defaultValue": 1,
            "metadata": {
                "description": "The Azure Event Hub SKU Capacity"
            }
        },
        "eventHubAuthorizationName": {
            "type": "string",
            "defaultValue": "[concat('iothubroutes-', parameters('iotHubName'))]",
            "metadata": {
                "description": "Authorization Rule Name for Event Hub endpoint in Iot Hub"
            }
        },
        "serviceBusEndpointSuffix": {
            "type": "string",
            "defaultValue": "servicebus.windows.net",
            "allowedValues": [
                "servicebus.windows.net",
                "servicebus.chinacloudapi.cn"
            ],
            "metadata": {
                "description": "Suffix added to Service Bus endpoint"
            }
        },
        "signalRName": {
            "type": "string",
            "defaultValue": "[concat('hub', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]",
            "metadata": {
                "description": "The name of the signalR endpoint"
            }
        },
        "signalRSkuName": {
            "type": "string",
            "defaultValue": "Standard_S1",
            "allowedValues": [
                "Free_F1", "Standard_S1"
            ],
            "metadata": {
                "description": "The Azure SignalR Service SKU Name"
            }
        },
        "signalRSkuTier": {
            "type": "string",
            "defaultValue": "Standard",
            "allowedValues": [
                "Free", "Standard", "Premium"
            ],
            "metadata": {
                "description": "The Azure SignalR Service SKU Tier"
            }
        },
        "signalRSkuCapacity": {
            "type": "int",
            "defaultValue": 1,
            "allowedValues": [
                1, 2, 5, 10, 20, 50, 100
            ],
            "metadata": {
                "description": "The Azure SignalR SKU Capacity"
            }
        },
        "iotHubName": {
            "type": "string",
            "defaultValue": "[concat('iothub-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]",
            "metadata": {
                "description": "The name of Azure IoT Hub"
            }
        },
        "iotHubSku": {
            "type": "string",
            "defaultValue": "S1",
            "allowedValues": [
                "S1", "S2", "S3"
            ],
            "metadata": {
                "description": "The Azure IoT Hub SKU"
            }
        },
        "iotHubPartitionCount": {
            "type": "int",
            "defaultValue": 4,
            "metadata": {
                "description": "The iot hub endpoint partition count"
            }
        },
        "iotHubTier": {
            "type": "string",
            "defaultValue": "Standard",
            "allowedValues": [
                "Free", "Standard"
            ],
            "metadata": {
                "description": "The Azure IoT Hub tier"
            }
        },
        "keyVaultName": {
            "type": "string",
            "defaultValue": "[concat('keyvault-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]",
            "metadata": {
                "description": "The resource name of the KeyVault"
            }
        },
        "keyVaultSkuName": {
            "type": "string",
            "defaultValue": "Premium",
            "allowedValues": [
                "Standard", "Premium"
            ],
            "metadata": {
                "description": "The KeyVault SKU to use."
            }
        },
        "vmName": {
            "type": "string",
            "defaultValue": "[concat('vm-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]",
            "metadata": {
                "description": "The name of the Linux Virtual Machine"
            }
        },
        "vmSize": {
            "type": "string",
            "defaultValue": "Standard_D1_v2",
            "allowedValues": [
                    "Standard_A0", "Standard_A1", "Standard_A2", "Standard_A3", "Standard_A4", "Standard_A5",
                    "Standard_A6", "Standard_A7", "Standard_A8", "Standard_A9", "Standard_A10", "Standard_A11",
                    "Standard_D1", "Standard_D2", "Standard_D3", "Standard_D4",
                    "Standard_D11", "Standard_D12", "Standard_D13", "Standard_D14",
                    "Standard_D1_v2", "Standard_D2_v2", "Standard_D3_v2", "Standard_D4_v2", "Standard_D5_v2",
                    "Standard_D11_v2", "Standard_D12_v2", "Standard_D13_v2", "Standard_D14_v2",
                    "Standard_G1", "Standard_G2", "Standard_G3", "Standard_G4", "Standard_G5",
                    "Standard_DS1", "Standard_DS2", "Standard_DS3", "Standard_DS4",
                    "Standard_DS11", "Standard_DS12", "Standard_DS13", "Standard_DS14",
                    "Standard_GS1", "Standard_GS2", "Standard_GS3", "Standard_GS4", "Standard_GS5"
            ],
            "metadata": {
                "description": "The size of the Virtual Machine."
            }
        },
        "ubuntuOSVersion": {
            "type": "string",
            "defaultValue": "16.04.0-LTS",
            "allowedValues": [
                "12.04.5-LTS",
                "14.04.5-LTS",
                "15.10",
                "16.04.0-LTS"
            ],
            "metadata": {
                "description": "The Ubuntu version for the Virtual Machine."
            }
        },
        "branchName": {
            "type": "string",
            "defaultValue": "master",
            "metadata": {
                "description": "The branch from which to procure scripts during VM initialization."
            }
        },
        "adminUsername": {
            "type": "string",
            "defaultValue": "azureuser",
            "metadata": {
                "description": "User name for the Linux Virtual Machine."
            }
        },
        "adminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "User password for the Linux Virtual Machines, must between 12 and 72 characters long and have 3 of the following: 1 uppercase character, 1 lowercase character, 1 number and 1 special character that is not slash (\\) or dash (-)"
            }
        },
        "vmFQDNSuffix": {
            "type": "string",
            "defaultValue": "cloudapp.azure.com",
            "allowedValues": [
                "cloudapp.azure.com",
                "cloudapp.chinacloudapi.cn",
                "cloudapp.azure.de"
            ]
        },
        "azureWebsiteName": {
            "type": "string",
            "defaultValue": "[concat(parameters('solutionName'), take(uniqueString(subscription().subscriptionId, resourceGroup().id), 5))]",
            "metadata": {
                "description": "The name of the azure website that you want to create. It will be of format {azureWebsiteName}.azurewebsites.net"
            }
        },
        "containerRegistryPrefix": {
            "type": "string",
            "metadata": {
                "description": "An optional prefix defining the registry and path of the micro services and modules that should be deployed."
            },
            "defaultValue": ""
        },
        "remoteEndpointSSLThumbprint": {
            "type": "securestring",
            "metadata": {
                "description": "This is the thumbprint of the HTTPS SSL Certificate"
            },
            "defaultValue": ""
        },
        "remoteEndpointCertificate": {
            "type": "securestring",
            "metadata": {
                "description": "The certficate that needs to be updated to the VM"
            },
            "defaultValue": ""
        },
        "workspaceName": {
            "type": "string",
            "defaultValue": "[concat('workspace-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]",
            "metadata": {
                "description": "Specifies the name of the workspace."
            }
        },
        "workspaceSku": {
            "type": "string",
            "allowedValues": [
                "Standalone",
                "PerNode",
                "PerGB2018"
            ],
            "defaultValue": "PerGB2018",
            "metadata": {
                "description": "Specifies the service tier of the workspace: Standalone, PerNode, Per-GB"
            }
        },
        "workspaceLocation": {
            "type": "string",
            "allowedValues": [
                "eastus",
                "westus",
                "southeastasia"
            ],
            "defaultValue": "southeastasia",
            "metadata": {
                "description": "Specifies the location in which to create the workspace."
            }
        },
        "appInsightsName": {
            "type": "string",
            "defaultValue": "[concat('appinsights-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]",
            "metadata": {
                "description": "Specifies the name of application insights."
            }
        },
        "appInsightsPriceCode": {
            "type": "int",
            "defaultValue": 1,
            "allowedValues": [
                1,
                2
            ],
            "metadata": {
                "description": "1 = Per GB (Basic), 2 = Per Node (Enterprise)"
            }
        },
        "appInsightsDailyQuota": {
            "type": "int",
            "defaultValue": 100,
            "minValue": 1,
            "metadata": {
                "description": "Specifies daily quota in GB."
            }
        },
        "appInsightsDailyQuotaResetTime": {
            "type": "int",
            "defaultValue": 24,
            "metadata": {
                "description": "Specifies daily quota reset hour in UTC (0 to 23). Values outside the range will get a random reset hour."
            }
        },
        "appInsightsWarningThreshold": {
            "type": "int",
            "defaultValue": 90,
            "minValue": 1,
            "maxValue": 100,
            "metadata": {
                "description": "Specifies the % value of daily quota after which warning mail to be sent. "
            }
        }
    },
    "variables": {
        "tenantId": "[subscription().tenantId]",
        "location": "[resourceGroup().location]",
        "keyVaultApiVersion": "2018-02-14",
        "documentDBApiVersion": "2016-03-19",
        "documentDBResourceId": "[resourceId('Microsoft.DocumentDb/databaseAccounts', parameters('documentDBName'))]",
        "serviceBusApiVersion": "2017-04-01",
        "serviceBusKeyName": "RootManageSharedAccessKey",
        "serviceBusKeyResourceId": "[resourceId('Microsoft.ServiceBus/namespaces/authorizationRules', parameters('serviceBusNamespaceName'), variables('serviceBusKeyName'))]",
        "eventHubApiVersion": "2017-04-01",
        "eventHubKeyName": "RootManageSharedAccessKey",
        "eventHubKeyResourceId": "[resourceId('Microsoft.EventHub/namespaces/AuthorizationRules', parameters('eventHubNamespaceName'), variables('eventHubKeyName'))]",
        "eventHubNamespaceResourceId": "[resourceId('Microsoft.EventHub/namespaces', parameters('eventHubNamespaceName'))]",
        "eventHubResourceId": "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('eventHubNamespaceName'), parameters('eventHubName'))]",
        "eventHubRouteKeyResourceId": "[resourceId('Microsoft.EventHub/namespaces/eventhubs/AuthorizationRules', parameters('eventHubNamespaceName'), parameters('eventHubName'), parameters('eventHubAuthorizationName'))]",
        "signalRApiVersion": "2018-10-01",
        "iotHubApiVersion": "2018-04-01",
        "iotHubResourceId": "[resourceId('Microsoft.Devices/Iothubs', parameters('iotHubName'))]",
        "iotHubKeyName": "iothubowner",
        "iotHubContainerName": "[parameters('iotHubName')]",
        "iotHubKeyResource": "[resourceId('Microsoft.Devices/Iothubs/Iothubkeys', parameters('iotHubName'), variables('iotHubKeyName'))]",
        "iotHubDefaultEndpoint": "events",
        "deviceNotificationRouteName": "DeviceNotifications",
        "onboardingConsumerGroupName": "onboarding",
        "storageApiVersion": "2017-06-01",
        "storageGen2ApiVersion": "2018-02-01",
        "storageResourceId": "[resourceId('Microsoft.Storage/storageAccounts/',  parameters('storageName'))]",
        "storageGen2ResourceId": "[resourceId('Microsoft.Storage/storageAccounts/',  parameters('storageGen2Name'))]",	
        "computeApiVersion": "2017-03-30",
        "vmFQDN": "[concat(parameters('vmName'), '.', variables('location'), '.', parameters('vmFQDNSuffix'))]",
        "imagePublisher": "Canonical",
        "imageOffer": "UbuntuServer",
        "vmStorageAccountContainerName": "vhds",
        "osDiskName": "[concat(parameters('solutionName'), '-osdisk')]",
        "networkApiVersion": "2017-06-01",
        "vnetName": "[concat(parameters('solutionName'), '-vnet')]",
        "vnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks',variables('vnetName'))]",
        "vnetAddressPrefix": "10.0.0.0/16",
        "networkSecurityGroupName": "[concat(parameters('solutionName'), '-nsg')]",
        "subnetName": "default",
        "subnetPrefix": "10.0.0.0/24",
        "subnetResourceId": "[concat(variables('vnetResourceId'),'/subnets/',variables('subnetName'))]",
        "publicIPName": "[concat(parameters('solutionName'), '-public-ip')]",
        "nicName": "[concat(parameters('solutionName'), '-nic')]",
        "servicesBranch": "[parameters('branchName')]",
        "servicesRepoUrl": "https://raw.githubusercontent.com/Azure/Industrial-IoT/",
        "proxyBranch": "master",
        "hostingPlanName": "[parameters('azureWebsiteName')]",
        "appServiceVersion": "2018-02-01",
        "appServicePlanVersion": "2018-02-01",
        "appServiceSku": "S1",
        "appServiceWorkerSize": "0",
        "appInsightsPriceArray": [
            "Basic",
            "Application Insights Enterprise"
        ],
        "appInsightsPricePlan": "[take(variables('appInsightsPriceArray'),parameters('appInsightsPriceCode'))]",
        "appInsightsBillingPlan": "[concat(parameters('appInsightsName'),'/', variables('appInsightsPricePlan')[0])]",
        "appInsightsVersion": "2014-04-01"
    },
    "resources": [
        {
            "comments": "KeyVault Premium Sku for secrets and certificate store.",
            "type": "Microsoft.KeyVault/vaults",
            "name": "[parameters('keyVaultName')]",
            "apiVersion": "[variables('keyVaultApiVersion')]",
            "location": "[variables('location')]",
            "properties": {
                "enabledForDeployment": false,
                "enabledForTemplateDeployment": false,
                "enabledForVolumeEncryption": false,
                "tenantId": "[variables('tenantId')]",
                "sku": {
                    "name": "[parameters('keyVaultSkuName')]",
                    "family": "A"
                },
                "accessPolicies": []
            }
        },
        {
            "comments": "KeyVault service principal permissions.",
            "type": "Microsoft.KeyVault/vaults/accessPolicies",
            "name": "[concat(parameters('keyVaultName'), '/replace')]",
            "apiVersion": "[variables('keyVaultApiVersion')]",
            "dependsOn": [
                "[concat('Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
            ],
            "properties": {
                "accessPolicies": [
                    {
                        "tenantId": "[parameters('aadTenantId')]",
                        "objectId": "[parameters('aadServicePrincipalId')]",
                        "permissions": {
                            "secrets": [ 
                                "get" 
                            ],
                            "certificates": [ 
                                "get",
                                "list" 
                            ]
                        }
                    },
                    {
                        "tenantId": "[parameters('aadTenantId')]",
                        "objectId": "[parameters('aadUserPrincipalId')]",
                        "permissions": {
                            "keys": [ 
                                "get", 
                                "list", 
                                "sign" 
                            ],
                            "secrets": [ 
                                "get", 
                                "list", 
                                "set", 
                                "delete" 
                            ],
                            "certificates": [ 
                                "get", 
                                "list", 
                                "update", 
                                "create", 
                                "import"
                            ]
                        }
                    }
                ]
            }
        },
        {
            "comments": "Azure IoT Hub",
            "apiVersion": "[variables('iotHubApiVersion')]",
            "type": "Microsoft.Devices/Iothubs",
            "name": "[parameters('iotHubName')]",
            "location": "[variables('location')]",
            "sku": {
                "name": "[parameters('iotHubSku')]",
                "tier": "[parameters('iotHubTier')]",
                "capacity": 1
            },
            "properties": {
                "location": "[variables('location')]",
                "ipFilterRules": [],
                "eventHubEndpoints": {
                    "events": {
                        "retentionTimeInDays": 1,
                        "partitionCount": "[parameters('iotHubPartitionCount')]"
                    },
                    "operationsMonitoringEvents": {
                        "retentionTimeInDays": 1,
                        "partitionCount": 4
                    }
                },
                "routing": {
                    "endpoints": {
                        "serviceBusQueues": [],
                        "serviceBusTopics": [],
                        "eventHubs": [],
                        "storageContainers": []
                    },
                    "routes": [],
                    "fallbackRoute": {
                        "name": "$fallback",
                        "source": "DeviceMessages",
                        "condition": "true",
                        "endpointNames": [
                            "events"
                        ],
                        "isEnabled": true
                    }
                },
                "storageEndpoints": {
                    "$default": {
                        "sasTtlAsIso8601": "PT1H",
                        "connectionString": "[concat('DefaultEndpointsProtocol=https;EndpointSuffix=', parameters('storageEndpointSuffix'), ';AccountName=', parameters('storageName'), ';AccountKey=', listKeys(variables('storageResourceId'), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value)]",
                        "containerName": "[variables('iotHubContainerName')]"
                    }
                },
                "messagingEndpoints": {
                    "fileNotifications": {
                        "lockDurationAsIso8601": "PT1M",
                        "ttlAsIso8601": "PT1H",
                        "maxDeliveryCount": 10
                    }
                },
                "enableFileUploadNotifications": true,
                "cloudToDevice": {
                    "maxDeliveryCount": 10,
                    "defaultTtlAsIso8601": "PT1H",
                    "feedback": {
                        "lockDurationAsIso8601": "PT1M",
                        "ttlAsIso8601": "PT1H",
                        "maxDeliveryCount": 10
                    }
                },
                "features": "None"
            },
            "dependsOn": [
                "[variables('storageResourceId')]"
            ]
        },
        {
            "comments": "Consumer Group of IoT Hub",
            "apiVersion": "[variables('iotHubApiVersion')]",
            "name": "[concat(parameters('iotHubName'), '/events/', variables('onboardingConsumerGroupName'))]",
            "type": "Microsoft.Devices/Iothubs/eventhubEndpoints/ConsumerGroups",
            "dependsOn": [
                "[resourceId('Microsoft.Devices/Iothubs', parameters('iotHubName'))]"
            ]
        },
        {
            "comments": "Storage account",
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[parameters('storageName')]",
            "apiVersion": "[variables('storageApiVersion')]",
            "location": "[variables('location')]",
            "kind": "Storage",
            "sku": {
                "name": "[parameters('storageSkuName')]"
            },
            "properties": {
                "networkAcls": {
                    "bypass": "AzureServices",
                    "virtualNetworkRules": [],
                    "ipRules": [],
                    "defaultAction": "Allow"
                },
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                    "services": {
                        "file": {
                            "enabled": true
                        },
                        "blob": {
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                }
            },
            "dependsOn": []
        },
        {
            "comments": "Storage Gen2 account",
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[parameters('storageGen2Name')]",
            "apiVersion": "[variables('storageGen2ApiVersion')]",
            "location": "[variables('location')]",
            "kind": "StorageV2",
            "sku": {
                "name": "[parameters('storageSkuName')]"
            },
            "properties": {
                "isHnsEnabled": true,
                "networkAcls": {
                    "bypass": "AzureServices",
                    "virtualNetworkRules": [],
                    "ipRules": [],
                    "defaultAction": "Allow"
                },
                "supportsHttpsTrafficOnly": true,
                "encryption": {
                    "services": {
                        "file": {
                            "enabled": true
                        },
                        "blob": {
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                }
            },
            "dependsOn": []
        },
        {
            "type": "Microsoft.Storage/storageAccounts/providers/roleAssignments",
            "apiVersion": "2018-09-01-preview",
            "name": "[concat(parameters('storageGen2Name'), '/Microsoft.Authorization/', guid(uniqueString(parameters('storageGen2Name'))))]",
            "dependsOn": [
                "[parameters('storageGen2Name')]"
            ],
            "properties": {
                "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                "principalId": "[parameters('aadServicePrincipalId')]"
            }
        },
        {
            "comments": "Azure CosmosDb",
            "apiVersion": "[variables('documentDBApiVersion')]",
            "type": "Microsoft.DocumentDb/databaseAccounts",
            "name": "[parameters('documentDBName')]",
            "location": "[variables('location')]",
            "properties": {
                "name": "[parameters('documentDBName')]",
                "enableAutomaticFailover": false,
                "enableMultipleWriteLocations": false,
                "isVirtualNetworkFilterEnabled": false,
                "virtualNetworkRules": [],
                "databaseAccountOfferType": "Standard",
                "consistencyPolicy": {
                    "defaultConsistencyLevel": "[parameters('docDBConsistencyLevel')]",
                    "maxStalenessPrefix": "[parameters('docDBMaxStalenessPrefix')]",
                    "maxIntervalInSeconds": "[parameters('docDBMaxIntervalInSeconds')]"
                },
                "capabilities": []
            },
            "dependsOn": []
        },
        {
            "comments": "Azure Service Bus Namespace",
            "apiVersion": "[variables('serviceBusApiVersion')]",
            "type": "Microsoft.ServiceBus/namespaces",
            "name": "[parameters('serviceBusNamespaceName')]",
            "location": "[variables('location')]",
            "sku": {
                "name": "[parameters('serviceBusSkuTier')]"
            },
            "properties": { 
            },
            "dependsOn": []
        },
        {
            "comments": "Azure Event Hub Namespace",
            "apiVersion": "[variables('eventHubApiVersion')]",
            "type": "Microsoft.EventHub/namespaces",
            "name": "[parameters('eventHubNamespaceName')]",
            "location": "[variables('location')]",
            "sku": {
                "name": "[parameters('eventHubSkuTier')]",
                "tier": "[parameters('eventHubSkuTier')]",
                "capacity": "[parameters('eventHubSkuCapacity')]"
            },
            "properties": {
                "isAutoInflateEnabled": false,
                "maximumThroughputUnits": 0
            }
        },
        {
            "comments": "Azure Event Hub",
            "type": "Microsoft.EventHub/namespaces/eventhubs",
            "name": "[concat(parameters('eventHubNamespaceName'), '/', parameters('eventHubName'))]",
            "apiVersion": "[variables('eventHubApiVersion')]",
            "location": "[variables('location')]",
            "properties": {
                "messageRetentionInDays": "[parameters('eventHubRetentionInDays')]",
                "partitionCount": "[parameters('eventHubPartitionCount')]",
                "status": "Active"
            },
            "dependsOn": [
                "[variables('eventHubNamespaceResourceId')]"
            ]
        },
        {
            "comments": "Event Hub Authorization for Iot Hub",
            "type": "Microsoft.EventHub/namespaces/eventhubs/authorizationRules",
            "name": "[concat(parameters('eventHubNamespaceName'), '/', parameters('eventHubName'), '/', parameters('eventHubAuthorizationName'))]",
            "apiVersion": "[variables('eventHubApiVersion')]",
            "location": "[variables('location')]",
            "properties": {
                "rights": [
                    "Send"
                ]
            },
            "dependsOn": [
                "[variables('eventHubNamespaceResourceId')]",
                "[variables('eventHubResourceId')]"
            ]
        },
        {
            "type": "Microsoft.SignalRService/SignalR",
            "name": "[parameters('signalRName')]",
            "apiVersion": "[variables('signalRApiVersion')]",
            "location": "[variables('location')]",
            "properties": {
                "hostNamePrefix": "[parameters('signalRName')]",
                "features": [
                    {
                        "flag": "ServiceMode",
                        "value": "Default"
                    }
                ]
            },
            "sku": {
                "name": "[parameters('signalRSkuName')]",
                "tier": "[parameters('signalRSkuTier')]",
                "capacity": "[parameters('signalRSkuCapacity')]"
            },
            "dependsOn": []
        },
        {
            "type": "Microsoft.OperationalInsights/workspaces",
            "name": "[parameters('workspaceName')]",
            "apiVersion": "2015-11-01-preview",
            "location": "[parameters('workspaceLocation')]",
            "properties": {
                "sku": {
                    "Name": "[parameters('workspaceSku')]"
                },
                "features": {
                    "searchVersion": 1
                }
            }
        }, 
        {
            "type": "microsoft.insights/components",
            "name": "[parameters('appInsightsName')]",
            "apiVersion": "2014-04-01",
            "location": "[variables('location')]",
            "tags": {},
            "properties": {
                "ApplicationId": "[parameters('appInsightsName')]"
            },
            "dependsOn": []
        }, 
        {
            "name": "[variables('appInsightsBillingPlan')]",
            "type": "microsoft.insights/components/CurrentBillingFeatures",
            "location": "[variables('location')]",
            "apiVersion": "2015-05-01",
            "dependsOn": [
                "[resourceId('microsoft.insights/components', parameters('appInsightsName'))]"
            ],
            "properties": {
                "CurrentBillingFeatures": "[variables('appInsightsPricePlan')]",
                "DataVolumeCap": {
                    "Cap": "[parameters('appInsightsDailyQuota')]",
                    "WarningThreshold": "[parameters('appInsightsWarningThreshold')]",
                    "ResetTime": "[parameters('appInsightsDailyQuotaResetTime')]"
                }
            }
        },
        {
            "comments": "AppService plan to host the Application Gateway Web App",
            "type": "Microsoft.Web/serverfarms",
            "sku": {
                "name": "[variables('appServiceSku')]",
                "capacity": "[variables('appServiceWorkerSize')]"
            },
            "name": "[variables('hostingPlanName')]",
            "apiVersion": "[variables('appServicePlanVersion')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "name": "[variables('hostingPlanName')]"
            }
        },
        {
            "comments": "Application Gateway Web App",
            "type": "Microsoft.Web/sites",
            "name": "[parameters('azureWebsiteName')]",
            "apiVersion": "[variables('appServiceVersion')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "enabled": true,
                "clientAffinityEnabled": false,
                "serverFarmId": "[variables('hostingPlanName')]",
                "siteConfig": {
                    "appSettings": [
                        {
                            "name": "REMOTE_ENDPOINT",
                            "value": "[concat('https://', reference(variables('publicIPName')).dnsSettings.fqdn)]"
                        },
                        {
                            "name": "REMOTE_ENDPOINT_SSL_THUMBPRINT",
                            "value": "[parameters('remoteEndpointSSLThumbprint')]"
                        }
                    ]
                }
            },
            "resources": [
                {
                    "apiVersion": "[variables('appServiceVersion')]",
                    "name": "web",
                    "type": "sourcecontrols",
                    "properties": {
                        "RepoUrl": "https://github.com/Azure/reverse-proxy-dotnet.git",
                        "branch": "[variables('proxyBranch')]",
                        "IsManualIntegration": true
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/Sites', parameters('azureWebsiteName'))]"
                    ]
                },
                {
                    "apiVersion": "[variables('appServiceVersion')]",
                    "name": "web",
                    "type": "config",
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', parameters('azureWebsiteName'))]"
                    ],
                    "properties": {
                        "numberOfWorkers": 1,
                        "requestTracingEnabled": true,
                        "httpLoggingEnabled": true,
                        "detailedErrorLoggingEnabled": true,
                        "alwaysOn": true,
                        "minTlsVersion": "1.2"
                    }
                }
            ],
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]"
            ]
        },
        {
            "comments": "Security rules used for the VM network interface",
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('networkSecurityGroupName')]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "UASC",
                        "properties": {
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRange": "4840",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "HTTPS",
                        "properties": {
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRange": "443",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 101,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "SSH",
                        "properties": {
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 102,
                            "direction": "Inbound"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('vnetName')]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('vnetAddressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('subnetPrefix')]"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('publicIPName')]",
            "apiVersion": "2016-11-01",
            "location": "[variables('location')]",
            "properties": {
                "publicIPAllocationMethod": "Dynamic",
                "dnsSettings": {
                    "domainNameLabel": "[toLower(parameters('vmName'))]"
                },
                "idleTimeoutInMinutes": 4
            }
        },
        {
            "comments": "Network interface used by the VM",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('nicName')]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAddress": "10.0.0.4",
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPName'))]"
                            },
                            "subnet": {
                                "id": "[variables('subnetResourceId')]"
                            }
                        }
                    }
                ],
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
                }
            }
        },
        {
            "comments": "VM running the microservices",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[parameters('vmName')]",
            "apiVersion": "[variables('computeApiVersion')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/', parameters('storageName'))]",
                "[resourceId('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('vmSize')]"
                },
                "osProfile": {
                    "computerName": "[parameters('vmName')]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('imagePublisher')]",
                        "offer": "[variables('imageOffer')]",
                        "sku": "[parameters('ubuntuOSVersion')]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "osdisk1",
                        "vhd": {
                            "uri": "[concat('http://',parameters('storageName'),'.blob.',parameters('storageEndpointSuffix'),'/',variables('vmStorageAccountContainerName'),'/',variables('osDiskName'),'.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": "true",
                        "storageUri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', parameters('storageName')), '2016-01-01').primaryEndpoints.blob)]"
                    }
                }
            }
        },
        {
            "comments": "One time script execution to prepare the VM environment",
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(parameters('vmName'), '/', 'scriptextensions')]",
            "apiVersion": "[variables('computeApiVersion')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Devices/Iothubs/', parameters('iotHubName'))]",
                "[resourceId('Microsoft.DocumentDb/databaseAccounts/', parameters('documentDbName'))]",
                "[resourceId('Microsoft.ServiceBus/namespaces', parameters('serviceBusNamespaceName'))]",
                "[variables('eventHubNamespaceResourceId')]"
            ],
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "[concat(variables('servicesRepoUrl'), variables('servicesBranch'), '/services/deploy/vm/setup.sh')]",
                        "[concat(variables('servicesRepoUrl'), variables('servicesBranch'), '/services/deploy/vm/ctrl.sh')]",
                        "[concat(variables('servicesRepoUrl'), variables('servicesBranch'), '/services/deploy/vm/docker-compose.yml')]",
                        "[concat(variables('servicesRepoUrl'), variables('servicesBranch'), '/services/deploy/vm/nginx.conf')]"
                    ]
                },
                "protectedSettings": {
                    "commandToExecute": "[concat('sh setup.sh ', ' --unsafe false --admin ', concat('\"', parameters('adminUsername'), '\"'), ' --registry-prefix ', concat('\"', parameters('containerRegistryPrefix'), '\"'), ' --hostname ', concat('\"', variables('vmFQDN'), '\"'), ' --ssl-certificate-key ', concat('\"', parameters('adminPassword'), '\"'), ' --ssl-certificate ', concat('\"', parameters('remoteEndpointCertificate'), '\"'), ' --auth-type aad ', ' --auth-audience ', concat('\"', parameters('authAudience'), '\"'), ' --aad-appid ', concat('\"', parameters('aadClientId'), '\"'), ' --aad-tenant ', concat('\"', parameters('aadTenantId'), '\"'), ' --workspace-name ', concat('\"', parameters('workspaceName'), '\"'), ' --appinsights-name ', concat('\"', parameters('appInsightsName'), '\"'), ' --appinsights-ikey ', concat('\"', reference(resourceId('Microsoft.Insights/components', parameters('appInsightsName')), variables('appInsightsVersion')).InstrumentationKey, '\"'), ' --aad-instance ', concat('\"', parameters('aadInstance'), '\"'), ' --iothub-connstring ', concat('\"', 'HostName=', reference(variables('iotHubResourceId')).hostName, ';SharedAccessKeyName=', variables('iotHubKeyName'), ';SharedAccessKey=', listkeys(variables('iotHubKeyResource'), variables('iotHubApiVersion')).primaryKey, '\"'), ' --docdb-connstring ', concat('\"', 'AccountEndpoint=', reference(variables('documentDBResourceId')).documentEndpoint, ';AccountKey=', listkeys(variables('documentDBResourceId'), variables('documentDBApiVersion')).primaryMasterKey, ';', '\"'), ' --iothub-name ', concat('\"', reference(variables('iotHubResourceId')).eventHubEndpoints.events.path, '\"'), ' --iothub-endpoint ', concat('\"', reference(variables('iotHubResourceId')).eventHubEndpoints.events.endpoint, '\"'), ' --azureblob-account ', concat('\"', parameters('storageName'), '\"'), ' --azureblob-key ', concat('\"', listKeys(variables('storageResourceId'), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value, '\"'), ' --azureblob-endpoint-suffix ',  concat('\"', parameters('storageEndpointSuffix'), '\"'), ' --release-version ', concat('\"', variables('servicesBranch'), '\"'), ' --iothub-consumer-group ', concat('\"', variables('onboardingConsumerGroupName'), '\"'), ' --sb-connstring ', concat('\"', listkeys(variables('serviceBusKeyResourceId'), variables('serviceBusApiVersion')).primaryConnectionString, '\"'), ' --signalr-connstring ', concat('\"', listkeys(parameters('signalRName'), variables('signalRApiVersion')).primaryConnectionString, '\"'), ' --eventhub-connstring ', concat('\"Endpoint=sb://', parameters('eventHubNamespaceName'), '.', parameters('serviceBusEndpointSuffix'), '/;SharedAccessKeyName=', variables('eventHubKeyName'), ';SharedAccessKey=', listkeys(variables('eventHubKeyResourceId'), variables('eventHubApiVersion')).primaryKey, '\"'), ' --eventhub-name ', parameters('eventHubName'))]"
                }
            }
        }
    ],
    "outputs": {
        "azureWebsite": {
            "type": "string",
            "value": "[concat('https://', reference(concat('Microsoft.Web/sites/', parameters('azureWebsiteName'))).hostNames[0])]"
        },
        "vmFQDN": {
            "type": "string",
            "value": "[reference(variables('publicIPName')).dnsSettings.fqdn]"
        },
        "adminUsername": {
            "type": "string",
            "value": "[parameters('adminUsername')]"
        },
        "iothub-connstring": {
            "type": "string",
            "value": "[concat('HostName=', reference(variables('iotHubResourceId')).hostName, ';SharedAccessKeyName=', variables('iotHubKeyName'), ';SharedAccessKey=', listkeys(variables('iotHubKeyResource'), variables('iotHubApiVersion')).primaryKey)]"
        },
        "docdb-connstring": {
            "type": "string",
            "value": "[concat('AccountEndpoint=', reference(variables('documentDBResourceId')).documentEndpoint, ';AccountKey=', listkeys(variables('documentDBResourceId'), variables('documentDBApiVersion')).primaryMasterKey, ';')]"
        },
        "eventhub-name": {
            "type": "string",
            "value": "[parameters('eventHubName')]"
        },
        "eventhub-connstring": {
            "type": "string",
            "value": "[concat('Endpoint=sb://', parameters('eventHubNamespaceName'), '.', parameters('serviceBusEndpointSuffix'), '/;SharedAccessKeyName=', variables('eventHubKeyName'), ';SharedAccessKey=', listkeys(variables('eventHubKeyResourceId'), variables('eventHubApiVersion')).primaryKey, ';')]"
        },
        "sb-connstring": {
            "type": "string",
            "value": "[listkeys(variables('serviceBusKeyResourceId'), variables('serviceBusApiVersion')).primaryConnectionString]"
        },
        "signalr-connstring": {
            "type": "string",
            "value": "[listkeys(parameters('signalRName'), variables('signalRApiVersion')).primaryConnectionString]"
        },
        "iothub-name": {
            "type": "string",
            "value": "[reference(variables('iotHubResourceId')).eventHubEndpoints.events.path]"
        },
        "iothub-endpoint": {
            "type": "string",
            "value": "[reference(variables('iotHubResourceId')).eventHubEndpoints.events.endpoint]"
        },
        "iothub-consumer-group": {
            "type": "string",
            "value": "[variables('onboardingConsumerGroupName')]"
        },
        "workspace-name": {
            "type": "string",
            "value": "[parameters('workspaceName')]"
        },
        "azureblob-account": {
            "type": "string",
            "value": "[parameters('storageName')]"
        },
        "azureblob-key": {
            "type": "string",
            "value": "[listKeys(variables('storageResourceId'), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value]"
        },
        "azureblob-endpoint-suffix": {
            "type": "string",
            "value": "[parameters('storageEndpointSuffix')]"
        },
        "keyvault-url": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))).vaultUri]"
        },
        "resourceGroup": {
            "type": "string",
            "value": "[resourceGroup().name]"
        },
        "appinsights-name": {
            "type": "string",
            "value": "[parameters('appInsightsName')]"
        },
        "appinsights-instrumentationkey": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.Insights/components', parameters('appInsightsName')), variables('appInsightsVersion')).InstrumentationKey]"
        },
        "adlsg2-account": {
            "type": "string",
            "value": "[parameters('storageGen2Name')]"
        }
    }
}