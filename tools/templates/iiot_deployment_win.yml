#
# Publish Microsoft.Azure.IIoT.Deployment Executables on Windows
#
parameters:
  sign: 'False'
  runtime: win-x64
  vmImage: windows-latest

jobs:
- job: iiot_deployment_win
  displayName: Generate Windows Executables
  pool:
    vmImage: ${{ parameters.vmImage }}
  steps:
  - task: UseDotNet@2
    displayName: 'Install .NET Core SDK for signing'
    condition: ${{ eq(parameters.sign, 'True') }}
    inputs:
      packageType: sdk
      version: 2.1.x
      includePreviewVersions: false
      installationPath: $(Agent.ToolsDirectory)/dotnet
  - template: build_iiot_deployment.yml
    parameters:
      runtime: ${{ parameters.runtime }}
  - task: AntiMalware@3
    displayName: 'Run Virus scan'
    inputs:
      InputType: 'Basic'
      ScanType: 'CustomScan'
      FileDirPath: '$(Build.ArtifactStagingDirectory)'
      EnableServices: true
      SupportLogOnError: false
      TreatSignatureUpdateFailureAs: 'Warning'
      SignatureFreshness: 'UpToDate'
      TreatStaleSignatureAs: 'Warning'
  - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
    displayName: 'Executable Signing'
    condition: and(succeeded(), eq('${{ parameters.sign }}', 'True'))
    inputs:
      ConnectedServiceName: 'Code Signing Certificate'
      FolderPath: '$(Build.ArtifactStagingDirectory)'
      Pattern: '**/Microsoft.Azure.IIoT.Deployment/Microsoft.Azure.IIoT.Deployment.exe'
      UseMinimatch: true
      signConfigType: inlineSignParams
      inlineOperation: |
        [{
            "keyCode": "CP-230012",
            "operationSetCode": "SigntoolSign",
            "parameters": [
            {
                "parameterName": "OpusName",
                "parameterValue": "Microsoft"
            },
            {
                "parameterName": "OpusInfo",
                "parameterValue": "http://www.microsoft.com"
            },
            {
                "parameterName": "FileDigest",
                "parameterValue": "/fd \"SHA256\""
            },
            {
                "parameterName": "PageHash",
                "parameterValue": "/NPH"
            },
            {
                "parameterName": "TimeStamp",
                "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
            }
            ],
            "toolName": "sign",
            "toolVersion": "1.0"
        },
        {
            "keyCode": "CP-230012",
            "operationSetCode": "SigntoolVerify",
            "parameters": [ ],
            "toolName": "sign",
            "toolVersion": "1.0"
        }]
      MaxConcurrency: 1
      MaxRetryAttempts: 50
      VerboseLogin: true
  - task: CmdLine@2
    displayName: 'Generate MD5 Checksum'
    inputs:
      script:  md5sum Microsoft.Azure.IIoT.Deployment.exe Microsoft.Azure.IIoT.Deployment.pdb > Microsoft.Azure.IIoT.Deployment.md5
      workingDirectory: $(Build.ArtifactStagingDirectory)/${{ parameters.runtime }}/Microsoft.Azure.IIoT.Deployment
  - task: ComponentGovernanceComponentDetection@0
    displayName: 'Component Detection'
  - task: PublishPipelineArtifact@1
    displayName: 'Publish Artifacts'
    inputs:
      path: $(Build.ArtifactStagingDirectory)/
      artifact: iiot_deployment_release_$(setVersionInfo.Version_Prefix)$(setVersionInfo.Version_Prerelease)_${{ parameters.runtime }}
  - task: AzureCLI@2
    displayName: 'Copy to Blob'
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/'))
    inputs:
      azureSubscription: '$(iaiStorageAccountSubscription)'
      scriptType: pscore
      workingDirectory: $(Build.ArtifactStagingDirectory)/${{ parameters.runtime }}/Microsoft.Azure.IIoT.Deployment
      scriptLocation: inlineScript
      inlineScript: |
        az storage blob upload --overwrite true --account-name $(iaiStorageAccount) --container-name binaries -f Microsoft.Azure.IIoT.Deployment.exe --name ${{ replace(variables['Build.SourceBranch'], 'refs/heads/', '') }}/$(setVersionInfo.Version_Prefix)$(setVersionInfo.Version_Prerelease)/${{ parameters.runtime }}/Microsoft.Azure.IIoT.Deployment.exe
        az storage blob upload --overwrite true --account-name $(iaiStorageAccount) --container-name binaries -f Microsoft.Azure.IIoT.Deployment.pdb --name ${{ replace(variables['Build.SourceBranch'], 'refs/heads/', '') }}/$(setVersionInfo.Version_Prefix)$(setVersionInfo.Version_Prerelease)/${{ parameters.runtime }}/Microsoft.Azure.IIoT.Deployment.pdb
        az storage blob upload --overwrite true --account-name $(iaiStorageAccount) --container-name binaries -f Microsoft.Azure.IIoT.Deployment.md5 --name ${{ replace(variables['Build.SourceBranch'], 'refs/heads/', '') }}/$(setVersionInfo.Version_Prefix)$(setVersionInfo.Version_Prerelease)/${{ parameters.runtime }}/Microsoft.Azure.IIoT.Deployment.md5
        az storage blob upload --overwrite true --account-name $(iaiStorageAccount) --container-name binaries -f Microsoft.Azure.IIoT.Deployment.exe --name ${{ replace(variables['Build.SourceBranch'], 'refs/heads/', '') }}/preview/${{ parameters.runtime }}/Microsoft.Azure.IIoT.Deployment.exe
        az storage blob upload --overwrite true --account-name $(iaiStorageAccount) --container-name binaries -f Microsoft.Azure.IIoT.Deployment.pdb --name ${{ replace(variables['Build.SourceBranch'], 'refs/heads/', '') }}/preview/${{ parameters.runtime }}/Microsoft.Azure.IIoT.Deployment.pdb
        az storage blob upload --overwrite true --account-name $(iaiStorageAccount) --container-name binaries -f Microsoft.Azure.IIoT.Deployment.md5 --name ${{ replace(variables['Build.SourceBranch'], 'refs/heads/', '') }}/preview/${{ parameters.runtime }}/Microsoft.Azure.IIoT.Deployment.md5
