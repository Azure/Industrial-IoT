#
# Build and test all on all platforms
#
jobs:
- job: buildprep
  displayName: Prepare Build Jobs
  pool:
    vmImage: 'windows-2019'
  variables:
    skipComponentGovernanceDetection: true
    DOTNET_CLI_TELEMETRY_OPTOUT: true
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  steps:
  - task: PowerShell@2
    name: buildmatrix
    displayName: Prepare Solutions
    inputs:
      targetType: filePath
      filePath: ./tools/scripts/get-matrix.ps1
      arguments: -FileName *.sln
- job: buildall
  displayName: Building
  dependsOn: buildprep
  strategy:
    matrix: $[dependencies.buildprep.outputs['buildmatrix.jobMatrix'] ]
  pool:
    vmImage: $(poolImage)
  steps:
  - task: UseDotNet@2
    displayName: 'Install .NET Core SDK'
    inputs:
      packageType: sdk
      version: 3.1.101
      includePreviewVersions: false
      installationPath: $(Agent.ToolsDirectory)/dotnet
  - task: PowerShell@2
    displayName: Versioning
    inputs:
      targetType: filePath
      filePath: ./tools/scripts/set-version.ps1
  - task: DotNetCoreCLI@2
    displayName: Release Build
    inputs:
      command: build
      projects: '$(file)'
      arguments: '--configuration Release'
  - task: DotNetCoreCLI@2
    displayName: Debug Build
    inputs:
      command: build
      projects: '$(file)'
      arguments: '--configuration Debug'
- job: testprep
  displayName: Prepare Test Jobs
  pool:
    vmImage: 'windows-2019'
  variables:
    skipComponentGovernanceDetection: true
    DOTNET_CLI_TELEMETRY_OPTOUT: true
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  steps:
  - task: PowerShell@2
    name: testmatrix
    displayName: Prepare Tests
    inputs:
      targetType: filePath
      filePath: ./tools/scripts/get-matrix.ps1
      # arguments: -FileName Directory.Build.props
      arguments: -FileName azure-pipelines.yml
- job: testall
  displayName: Run Tests for
  dependsOn: testprep
  strategy:
    matrix: $[dependencies.testprep.outputs['testmatrix.jobMatrix'] ]
  variables:
    skipComponentGovernanceDetection: true
    DOTNET_CLI_TELEMETRY_OPTOUT: true
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
    disable.coverage.autogenerate: true
    runCodesignValidationInjection: false
  pool:
    vmImage: $(poolImage)
  steps:
  - task: UseDotNet@2
    displayName: 'Install .NET Core SDK'
    inputs:
      packageType: sdk
      version: 3.1.101
      includePreviewVersions: false
      installationPath: $(Agent.ToolsDirectory)/dotnet
  - task: PowerShell@2
    displayName: Versioning
    inputs:
      targetType: filePath
      filePath: ./tools/scripts/set-version.ps1
  - task: DotNetCoreCLI@2
    displayName: Test
    timeoutInMinutes: 20
    inputs:
      command: test
      projects: '**/tests/*.csproj'
      arguments: '--configuration Release /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'
  - task: DotNetCoreCLI@2
    condition: eq(variables['agent'], 'linux')
    inputs:
      command: custom
      custom: tool
      arguments: install --tool-path tools dotnet-reportgenerator-globaltool 
    displayName: Install ReportGenerator tool
  - script: |
      tools/reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage "-reporttypes:Cobertura;HtmlSummary" "-title:.Net Standard Test Coverage" "-assemblyfilters:-*.Tests"
      mv $(Build.SourcesDirectory)/CodeCoverage/summary.htm $(Build.SourcesDirectory)/CodeCoverage/index.html 

    displayName: Create Code coverage report
    condition: eq(variables['agent'], 'linux')
    continueOnError: true
  - task: PublishCodeCoverageResults@1
    condition: eq(variables['agent'], 'linux')
    displayName: 'Publish code coverage'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
      reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'
