#
# Build and test all on all platforms
#
jobs:
- job: buildprep
  displayName: Prepare Build Jobs
  pool:
    vmImage: 'windows-latest'
  variables:
    runCodesignValidationInjection: false
    skipComponentGovernanceDetection: true
    DOTNET_CLI_TELEMETRY_OPTOUT: true
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  steps:
  - task: PowerShell@2
    name: buildmatrix
    displayName: Prepare Solutions
    inputs:
      targetType: filePath
      filePath: ./tools/scripts/get-matrix.ps1
      arguments: -FileName Industrial-IoT.sln
- job: buildall
  displayName: Building
  dependsOn: buildprep
  strategy:
    matrix: $[dependencies.buildprep.outputs['buildmatrix.jobMatrix'] ]
  pool:
    vmImage: $(poolImage)
  variables:
    skipComponentGovernanceDetection: true
    DOTNET_CLI_TELEMETRY_OPTOUT: true
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
    runCodesignValidationInjection: false
  steps:
  - task: UseDotNet@2
    displayName: 'Install .NET Core SDK'
    inputs:
      packageType: sdk
      version: 6.0.x
      includePreviewVersions: false
      installationPath: $(Agent.ToolsDirectory)/dotnet
  - task: PowerShell@2
    displayName: Versioning
    inputs:
      targetType: filePath
      filePath: ./tools/scripts/set-version.ps1
  - task: DotNetCoreCLI@2
    displayName: 'Build Release'
    inputs:
      command: build
      projects: '$(file)'
      arguments: '--configuration Release'
  - task: DotNetCoreCLI@2
    displayName: 'Publish Release'
    inputs:
      command: 'publish'
      arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)/$(agent)_Release'
  - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
    displayName: 'Software BOM'
    inputs:
      BuildDropPath: '$(System.ArtifactsDirectory)/$(agent)_Release'
      PackageName: '$(agent)_Release'
  - publish: $(System.ArtifactsDirectory)/$(agent)_Release
    displayName: 'Publish Release Artifact'
    artifact: $(agent)_Release
  - task: DotNetCoreCLI@2
    displayName: 'Build Debug'
    inputs:
      command: build
      projects: '$(file)'
      arguments: '--configuration Debug'
  - task: DotNetCoreCLI@2
    displayName: 'Publish Debug'
    inputs:
      command: 'publish'
      arguments: '--configuration Debug --output $(Build.ArtifactStagingDirectory)/$(agent)_Debug'
  - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
    displayName: 'Software BOM'
    inputs:
      BuildDropPath: '$(System.ArtifactsDirectory)/$(agent)_Debug'
      PackageName: '$(agent)_Debug'
  - publish: $(System.ArtifactsDirectory)/$(agent)_Debug
    displayName: 'Publish Debug Artifact'
    artifact: $(agent)_Debug
- job: testprep
  displayName: Prepare Test Jobs
  pool:
    vmImage: 'windows-latest'
  variables:
    runCodesignValidationInjection: false
    skipComponentGovernanceDetection: true
    DOTNET_CLI_TELEMETRY_OPTOUT: true
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  steps:
  - task: PowerShell@2
    name: testmatrix
    displayName: Prepare Tests
    inputs:
      targetType: filePath
      filePath: ./tools/scripts/get-matrix.ps1
      # arguments: -FileName Directory.Build.props
      arguments: -FileName azure-pipelines.yml
- job: testall
  displayName: Run Tests for
  dependsOn: testprep
  strategy:
    matrix: $[dependencies.testprep.outputs['testmatrix.jobMatrix'] ]
  variables:
    skipComponentGovernanceDetection: true
    DOTNET_CLI_TELEMETRY_OPTOUT: true
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
    runCodesignValidationInjection: false
  pool:
    vmImage: $(poolImage)
  steps:
  - task: UseDotNet@2
    displayName: 'Install .NET Core SDK'
    inputs:
      packageType: sdk
      version: 6.0.x
      includePreviewVersions: false
      installationPath: $(Agent.ToolsDirectory)/dotnet
  - task: PowerShell@2
    displayName: Versioning
    inputs:
      targetType: filePath
      filePath: ./tools/scripts/set-version.ps1
  - task: DotNetCoreCLI@2
    displayName: Test
    timeoutInMinutes: 30
    inputs:
      command: test
      # projects: '$(folder)/**/tests/*.csproj'
      projects: '**/tests/*.csproj'
      arguments: '--configuration Release'
