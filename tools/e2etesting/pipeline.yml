name: $(Date:yyyyMMdd)$(Rev:rr)

trigger: none
pr: none

variables:
  BasePath: $(System.DefaultWorkingDirectory)\tools\e2etesting
  ClientCredentialsKeyVaultName: automatedtesting
  AzureSubscription: IOT-OPC-WALLS-SP # Use Services-Connection with Service-Principal-Authentication as subscription 
  AgentPool: Azure-IoT-Manufacturing
  IAILocalFilename: Microsoft.Azure.IIoT.Deployment.exe
  TestPath: $(System.DefaultWorkingDirectory)\e2e-tests\IIoTPlatform-E2E-Tests

jobs:
- job: buildiai
  condition: ne(variables['UseExisting'], true)
  displayName: 'Build IAI'
  pool:
    name: '$(AgentPool)'
  steps:
  - template: ../templates/build_iiot_deployment.yml
  - task: PublishPipelineArtifact@1
    displayName: 'Publish Artifacts'
    inputs:
      path: $(Build.ArtifactStagingDirectory)/
      artifact: iiot_deployment

- job: deploy
  condition: eq(dependencies.buildiai.result, 'Succeeded')
  dependsOn: buildiai
  displayName: 'Prepare and run IAI'
  pool:
    name: '$(AgentPool)'
  steps:
  - task: AzureCLI@2
    displayName: 'Set Service Principal Environment Variables'
    name: promoteserviceprincipal
    inputs:
      azureSubscription: '$(AzureSubscription)'
      azurePowerShellVersion: 'latestVersion'
      scriptLocation: 'InlineScript'
      scriptType: 'ps'
      addSpnToEnvironment: true
      inlineScript: |
        Write-Host "AAAA SERVICEPRINCIPALID-Env $($env:servicePrincipalId)"
        Write-Host "BBBB SERVICEPRINCIPALKEY-Env $($env:servicePrincipalKey)"
        Write-Host "CCCC TENANTID-Env $($env:tenantId)"
        Write-Host "##vso[task.setvariable variable=ARM_CLIENT_ID]$($env:servicePrincipalId)"
        Write-Host "##vso[task.setvariable variable=ARM_CLIENT_SECRET]$($env:servicePrincipalKey)"
        Write-Host "##vso[task.setvariable variable=ARM_TENANT_ID]$($env:tenantId)"

  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: 'iiot_deployment'
      path: $(BasePath)\iiot_deployment

  - task: CopyFiles@2
    inputs:
      sourceFolder: $(BasePath)\iiot_deployment
      targetFolder: $(BasePath)
      flattenFolders: true

  - task: AzurePowerShell@5
    displayName: "Replace parameters in appSettings.json (for IAI)"
    inputs:
      azureSubscription: '$(AzureSubscription)'
      azurePowerShellVersion: 'latestVersion'
      scriptType: filePath
      scriptPath: '$(BasePath)\ReplaceVariablesInAppSettings.ps1'
      scriptArguments: >
        -ClientId "$(ARM_CLIENT_ID)"
        -ClientSecret "$(ARM_CLIENT_SECRET)"
        -ApplicationName "$(ApplicationName)"
        -AppSettingsFilename "$(BasePath)\appsettings.json"
        -ResourceGroupName "$(ResourceGroupName)"
        -Region "$(Region)"

  - task: CmdLine@2
    displayName: 'Run deployment with IAI'
    inputs:
      script: '$(IAILocalFilename)'
      workingDirectory: '$(BasePath)'

  - task: AzurePowerShell@5
    displayName: 'Set KeyVaultName-Variable'
    inputs:
      azureSubscription: '$(AzureSubscription)'
      azurePowerShellVersion: 'latestVersion'
      scriptType: filePath
      scriptPath: '$(BasePath)\DetermineKeyVaultName.ps1'
      scriptArguments: >
        -ResourceGroupName "$(ResourceGroupName)"

  - task: AzurePowerShell@5
    displayName: "Add permissions to KeyVault"
    name: keyvaultpermissions
    inputs:
      azureSubscription: '$(AzureSubscription)'
      azurePowerShellVersion: 'latestVersion'
      scriptType: filePath
      scriptPath: '$(BasePath)\SetKeyVaultPermissions.ps1'
      scriptArguments: >
        -KeyVaultName "$(KeyVaultName)"
        -ResourceGroupName "$(ResourceGroupName)"
        -ObjectId "$(MSIObjectId)"

  - task: AzurePowerShell@5
    displayName: "Deploy IIoT edge and sim VMs"
    name: deployedgevm
    inputs:
      azureSubscription: '$(AzureSubscription)'
      azurePowerShellVersion: 'latestVersion'
      scriptType: filePath
      scriptPath: '$(BasePath)\DeploySimulation.ps1'
      scriptArguments: >
        -keyVaultName "$(KeyVaultName)"
        -resourceGroupName "$(ResourceGroupName)"
        -branchName "$(Build.SourceBranch)"
        -region "$(Region)"
        -client_id "$(ARM_CLIENT_ID)"
        -client_secret "$(ARM_CLIENT_SECRET)"
        -tenantId "$(ARM_TENANT_ID)"

- job: e2etests
  displayName: 'Run End 2 End Tests'
  dependsOn: deploy
  condition: or(eq(dependencies.deploy.result, 'Skipped'), eq(dependencies.deploy.result, 'Succeeded'))
  pool:
    name: '$(AgentPool)'
  steps:
  - task: AzurePowerShell@5
    displayName: 'Set KeyVaultName-Variable'
    inputs:
      azureSubscription: '$(AzureSubscription)'
      azurePowerShellVersion: 'latestVersion'
      scriptType: filePath
      scriptPath: '$(BasePath)\DetermineKeyVaultName.ps1'
      scriptArguments: >
        -ResourceGroupName '$(ResourceGroupName)'

  - task: AzureKeyVault@1
    displayName: 'Retrieve KeyVault secrets from existing deployment'
    inputs:
      azureSubscription: '$(AzureSubscription)'
      KeyVaultName: '$(KeyVaultName)'
      SecretsFilter: 'PCS-SERVICE-URL,PCS-AUTH-TENANT,PCS-AUTH-CLIENT-APPID,PCS-AUTH-CLIENT-SECRET,PLC-SIMULATION-URLS,PCS-SIMULATION-USER,PCS-SIMULATION-PASSWORD,IOT-EDGE-DEVICE-ID,IOT-EDGE-DEVICE-DNS-NAME'

  - task: DotNetCoreCLI@2
    displayName: 'Executing tests'
    inputs:  
      command: test  
      projects: '$(TestPath)\IIoTPlatform-E2E-Tests.csproj'  
      arguments: '--configuration Release'  
    env:
      PCS_SERVICE_URL: $(pcs-service-url)
      PCS_AUTH_TENANT: $(pcs-auth-tenant)
      PCS_AUTH_CLIENT_APPID: $(pcs-auth-client-appid)
      PCS_AUTH_CLIENT_SECRET: $(pcs-auth-client-secret)
      ApplicationName: $(ApplicationName)
      PLC_SIMULATION_URLS: $(plc-simulation-urls)
      IOT_EDGE_DEVICE_ID: $(iot-edge-device-id)
      IOT_EDGE_DEVICE_DNS_NAME: $(iot-edge-device-dns-name)
      PCS_SIMULATION_USER: $(pcs-simulation-user)
      PCS_SIMULATION_PASSWORD: $(pcs-simulation-password)

  - task: PublishTestResults@2
    displayName: 'Upload testing results'
    inputs:
      testResultsFormat: xUnit
      testResultsFiles: '**/*.trx'
      failTaskOnFailedTests: true
      searchFolder: $(Agent.TempDirectory)

- job: cleanup
  displayName: Cleanup
  dependsOn: e2etests
  condition: and(always(), eq(variables['Cleanup'], true))
  pool:
    name: '$(AgentPool)'
  steps:
  - task: AzurePowerShell@5
    displayName: "Delete Resource Group"
    inputs:
      azureSubscription: '$(AzureSubscription)'
      azurePowerShellVersion: 'latestVersion'
      scriptType: 'InlineScript'
      inline: |
        Write-Host "Deleting Resource group '$(ResourceGroupName)'..."
        Get-AzResourceGroup -Name "$(ResourceGroupName)" | Remove-AzResourceGroup -Force
