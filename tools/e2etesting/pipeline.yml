name: $(Date:yyyyMMdd)$(Rev:rr)

trigger: none
pr: none

variables:
  BasePath: $(System.DefaultWorkingDirectory)\tools\e2etesting
  ClientCredentialsKeyVaultName: automatedtesting
  AzureSubscription: IOT-OPC-WALLS-MSI
  AgentPool: Azure-IoT-Manufacturing
  IAILocalFilename: Microsoft.Azure.IIoT.Deployment.exe

jobs:
- job: buildiai
  displayName: 'Build IAI'
  pool:
    name: '$(AgentPool)'
  steps:
  - template: ../templates/build_iiot_deployment.yml
  - task: PublishPipelineArtifact@1
    displayName: 'Publish Artifacts'
    inputs:
      path: $(Build.ArtifactStagingDirectory)/
      artifact: iiot_deployment

- job: deploy
  condition: ne(variables['UseExisting'], true)
  dependsOn: buildiai
  displayName: 'Prepare and run IAI'
  pool:
    name: '$(AgentPool)'
  steps:
  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: 'iiot_deployment'
      path: $(BasePath)\iiot_deployment

  - task: CopyFiles@2
    inputs:
      sourceFolder: $(BasePath)\iiot_deployment
      targetFolder: $(BasePath)
      flattenFolders: true

  - task: AzureKeyVault@1
    displayName: 'Retrieve KeyVault secrets'
    inputs:
      azureSubscription: '$(AzureSubscription)'
      KeyVaultName: '$(ClientCredentialsKeyVaultName)'
      SecretsFilter: 'IAIClientId,IAIClientSecret'

  - task: AzurePowerShell@5
    displayName: "Replace parameters in appSettings.json (for IAI)"
    inputs:
      azureSubscription: '$(AzureSubscription)'
      azurePowerShellVersion: 'latestVersion'
      scriptType: filePath
      scriptPath: '$(BasePath)\ReplaceVariablesInAppSettings.ps1'
      scriptArguments: >
        -ClientId "$(IAIClientId)"
        -ClientSecret "$(IAIClientSecret)"
        -ApplicationName "$(ApplicationName)"
        -AppSettingsFilename "$(BasePath)\appsettings.json"
        -ResourceGroupName "$(ResourceGroupName)"
        -Region "$(Region)"

  - task: CmdLine@2
    displayName: 'Run deployment with IAI'
    inputs:
      script: '$(IAILocalFilename)'
      workingDirectory: '$(BasePath)'

  - task: AzurePowerShell@5
    displayName: 'Set KeyVaultName-Variable'
    inputs:
      azureSubscription: '$(AzureSubscription)'
      azurePowerShellVersion: 'latestVersion'
      scriptType: filePath
      scriptPath: '$(BasePath)\DetermineKeyVaultName.ps1'
      scriptArguments: >
        -ResourceGroupName "$(ResourceGroupName)"

  - task: AzurePowerShell@5
    displayName: "Add permissions to KeyVault"
    name: keyvaultpermissions
    inputs:
      azureSubscription: '$(AzureSubscription)'
      azurePowerShellVersion: 'latestVersion'
      scriptType: filePath
      scriptPath: '$(BasePath)\SetKeyVaultPermissions.ps1'
      scriptArguments: >
        -KeyVaultName "$(KeyVaultName)"
        -ResourceGroupName "$(ResourceGroupName)"
        -ObjectId "$(MSIObjectId)"

  - task: AzurePowerShell@5
    displayName: "Deploy IIoT edge and sim VMs"
    name: deployedgevm
    inputs:
      azureSubscription: '$(AzureSubscription)'
      azurePowerShellVersion: 'latestVersion'
      scriptType: filePath
      scriptPath: '$(BasePath)\DeploySimulation.ps1'
      scriptArguments: >
        -keyVaultName "$(KeyVaultName)"
        -resourceGroupName "$(ResourceGroupName)"
        -branchName "$(Build.SourceBranch)"

# - job: prepnewman
#   displayName: "Prepare Postman-Tests"
#   dependsOn: deploy
#   condition: or(eq(dependencies.deploy.result, 'Skipped'), eq(dependencies.deploy.result, 'Succeeded'))
#   pool:
#     name: '$(AgentPool)'
#   steps:
#   - task: PowerShell@2
#     name: postmanJobGeneration
#     displayName: "Generate Postman-Jobs"
#     inputs:
#       targetType: 'filePath'
#       pwsh: true
#       filePath: $(BasePath)\GenerateNewmanMatrix.ps1

# - job: runnewman
#   displayName: Run Newman
#   dependsOn: prepnewman
#   condition: eq(dependencies.prepnewman.result, 'Succeeded')
#   pool:
#     name: '$(AgentPool)'
#   strategy:
#     matrix: $[ dependencies.prepnewman.outputs['postmanJobGeneration.postmanJobsMatrix'] ]
#   steps:
#   - task: AzurePowerShell@5
#     displayName: 'Set KeyVaultName-Variable'
#     inputs:
#       azureSubscription: '$(AzureSubscription)'
#       azurePowerShellVersion: 'latestVersion'
#       scriptType: filePath
#       scriptPath: '$(BasePath)\DetermineKeyVaultName.ps1'
#       scriptArguments: >
#         -ResourceGroupName "$(ResourceGroupName)"

#   - task: AzureKeyVault@1
#     displayName: 'Retrieve KeyVault secrets from existing deployment'
#     inputs:
#       azureSubscription: '$(AzureSubscription)'
#       KeyVaultName: '$(KeyVaultName)'
#       SecretsFilter: 'PCS-SERVICE-URL,PCS-AUTH-TENANT,PCS-AUTH-CLIENT-APPID,PCS-AUTH-CLIENT-SECRET'

#   - task: CmdLine@2
#     displayName: 'Run Newman for $(collectionFile)'
#     inputs:
#       script: newman run "$(collectionFile)" --env-var ServiceUrl="$(pcs-service-url)" --env-var TenantId="$(pcs-auth-tenant)" --env-var ClientId="$(pcs-auth-client-appid)" --env-var ClientSecret="$(pcs-auth-client-secret)" --env-var ApplicationName="$(ApplicationName)"


- job: e2etests
  displayName: 'Run End 2 End Tests'
  dependsOn: deploy
  condition: eq(dependencies.deploy.result, 'Succeeded')
  pool:
    name: '$(AgentPool)'
  # strategy:
  #   matrix: $[ dependencies.prepnewman.outputs['postmanJobGeneration.postmanJobsMatrix'] ]
  steps:
  - task: AzurePowerShell@5
    displayName: 'Set KeyVaultName-Variable'
    inputs:
      azureSubscription: '$(AzureSubscription)'
      azurePowerShellVersion: 'latestVersion'
      scriptType: filePath
      scriptPath: '$(BasePath)\DetermineKeyVaultName.ps1'
      scriptArguments: >
        -ResourceGroupName "$(ResourceGroupName)"

  - task: AzureKeyVault@1
    displayName: 'Retrieve KeyVault secrets from existing deployment'
    inputs:
      azureSubscription: '$(AzureSubscription)'
      KeyVaultName: '$(KeyVaultName)'
      SecretsFilter: 'PCS-SERVICE-URL,PCS-AUTH-TENANT,PCS-AUTH-CLIENT-APPID,PCS-AUTH-CLIENT-SECRET'

  - task: AzurePowerShell@5
    displayName: 'Set Secrets for tests execution as environment variables'
    inputs:
      azureSubscription: '$(AzureSubscription)'
      azurePowerShellVersion: 'latestVersion'
      scriptType: 'InlineScript'
      inline: |
        Write-Host "Making the PCS-SERVICE-URL available as an environment variable."
        Write-Host "##vso[task.setvariable variable=PCS-SERVICE-URL;]$(pcs-service-url)"
        Write-Host "Making the PCS-AUTH-TENANT available as an environment variable."
        Write-Host "##vso[task.setvariable variable=PCS-AUTH-TENANT;]$(pcs-auth-tenant)"
        Write-Host "Making the PCS-AUTH-CLIENT-APPID available as an environment variable."
        Write-Host "##vso[task.setvariable variable=PCS-AUTH-CLIENT-APPID;]$(pcs-auth-client-appid)"
        Write-Host "Making the PCS-AUTH-CLIENT-SECRET available as an environment variable."
        Write-Host "##vso[task.setvariable variable=PCS-AUTH-CLIENT-SECRET;]$(pcs-auth-client-secret)"
        Write-Host "Making the ApplicationName available as an environment variable."
        Write-Host "##vso[task.setvariable variable=ApplicationName;]$(ApplicationName)"

  - task: DotNetCoreCLI@2
    displayName: 'Executing tests'
    inputs:  
      command: test  
      projects: '**/e2etesting/*.csproj'  
      arguments: '--configuration $(buildConfiguration)'  
  
  # - task: CmdLine@2
  #   displayName: 'Run Newman for $(collectionFile)'
  #   inputs:
  #     script: newman run "$(collectionFile)" --env-var ServiceUrl="$(pcs-service-url)" --env-var TenantId="$(pcs-auth-tenant)" --env-var ClientId="$(pcs-auth-client-appid)" --env-var ClientSecret="$(pcs-auth-client-secret)" --env-var ApplicationName="$(ApplicationName)"

# - job: cleanup
#   displayName: Cleanup
#   dependsOn: runnewman
#   condition: and(always(), eq(variables['Cleanup'], true))
#   pool:
#     name: '$(AgentPool)'
#   steps:
#   - task: AzurePowerShell@5
#     displayName: "Delete Resource Group"
#     inputs:
#       azureSubscription: '$(AzureSubscription)'
#       azurePowerShellVersion: 'latestVersion'
#       scriptType: 'InlineScript'
#       inline: |
#         Write-Host "Deleting Resource group '$(ResourceGroupName)'..."
#         Get-AzResourceGroup -Name "$(ResourceGroupName)" | Remove-AzResourceGroup -Force

- job: cleanup
  displayName: Cleanup
  dependsOn: e2etests
  condition: and(always(), eq(variables['Cleanup'], true))
  pool:
    name: '$(AgentPool)'
  steps:
  - task: AzurePowerShell@5
    displayName: "Delete Resource Group"
    inputs:
      azureSubscription: '$(AzureSubscription)'
      azurePowerShellVersion: 'latestVersion'
      scriptType: 'InlineScript'
      inline: |
        Write-Host "Deleting Resource group '$(ResourceGroupName)'..."
        Get-AzResourceGroup -Name "$(ResourceGroupName)" | Remove-AzResourceGroup -Force
