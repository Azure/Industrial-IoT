name: $(Date:yyyyMMdd)$(Rev:rr)

variables:
- name: 'ResourceGroupName'
  value: 'deployment$(Build.BuildNumber)'
- name: 'ApplicationName'
  value: 'deployment$(Build.BuildNumber)'
- name: 'BasePath'
  value: '$(System.DefaultWorkingDirectory)\tools\e2etesting'

jobs:
- job: prepiai
  displayName: 'Prepare IAI for deployment'
  pool:
    name: 'Azure-IoT-Manufacturing'
  variables:
  - name: 'IAIStorageAccountName'
    value: 'azureiiot'
  - name: 'IAIStorageAccountContainerName'
    value: 'binaries'
  steps:
  - task: PowerShell@2
    displayName: "IAI preparation"
    inputs:
      targetType: 'filePath'
      pwsh: true
      filePath: $(BasePath)\DownloadIAIBinaries.ps1
      workingDirectory: 
      arguments: >
        -IAIStorageAccountName "$(IAIStorageAccountName)"
        -IAIStorageAccountContainerName "$(IAIStorageAccountContainerName)"
        -IAIVersion "$(IAIVersion)"

  - task: AzureKeyVault@1
    displayName: 'Retrieve KeyVault secrets'
    inputs:
      azureSubscription: 'IOT-OPC-WALLS-MSI'
      KeyVaultName: 'automatedtesting'
      SecretsFilter: '*'

  - task: AzurePowerShell@4
    displayName: "Replace parameters in appSettings.json (for IAI)"
    inputs:
      azureSubscription: 'IOT-OPC-WALLS-MSI'
      azurePowerShellVersion: 'latestVersion'
      scriptType: filePath
      scriptPath: '$(BasePath)\ReplaceVariablesInAppSettings.ps1'
      scriptArguments: >
        -ClientId "$(IAIClientId)"
        -ClientSecret "$(IAIClientSecret)"
        -ApplicationName "$(ApplicationName)"
        -AppSettingsFilename "$(BasePath)\appsettings.json"
        -ResourceGroupName "$(ResourceGroupName)"
        -Region "$(Region)"


- job: runiai
  displayName: "Run deployment with IAI"
  dependsOn: prepiai
  pool:
    name: 'Azure-IoT-Manufacturing'
  steps:
  - task: CmdLine@2
    displayName: 'Run deployment with IAI'
    inputs:
      script: '$(IAILocalFilename)'
      workingDirectory: '$(BasePath)'
  - task: PowerShell@2
    displayName: "Parse .env file"
    inputs:
      targetType: 'filePath'
      pwsh: true
      filePath: $(BasePath)\ParseEnvFile.ps1


- job: prepnewman
  displayName: "Prepare Postman-Tests"
  dependsOn: runiai
  pool:
    name: 'Azure-IoT-Manufacturing'
  steps:
  - task: PowerShell@2
    displayName: "Replace parameters in Postman environment files"
    inputs:
      targetType: 'filePath'
      pwsh: true
      filePath: $(BasePath)\ReplaceVariablesInPostmanEnvironments.ps1
      arguments: >
        -ServiceUrl '$(PCS_SERVICE_URL)'
        -TenantId '$(PCS_AUTH_TENANT)'
        -ClientId '$(PCS_AUTH_CLIENT_APPID)'
        -ClientSecret '$(PCS_AUTH_CLIENT_SECRET)'
        -ApplicationName '$(ApplicationName)'
  - task: PowerShell@2
    name: postmanJobGeneration
    displayName: "Generate Postman-Jobs"
    inputs:
      targetType: 'filePath'
      pwsh: true
      filePath: $(BasePath)\GenerateNewmanMatrix.ps1
      arguments: >
        -ServiceUrl '$(PCS_SERVICE_URL)'
        -TenantId '$(PCS_AUTH_TENANT)'
        -ClientId '$(PCS_AUTH_CLIENT_APPID)'
        -ClientSecret '$(PCS_AUTH_CLIENT_SECRET)'
        -ApplicationName '$(ApplicationName)'


- job: runnewman
  displayName: Run Newman
  dependsOn: prepnewman
  strategy:
    matrix: $[ dependencies.prepnewman.outputs['postmanJobGeneration.postmanJobsMatrix'] ]
  steps:
    - task: CmdLine@2
      displayName: 'Run Newman for $(collectionFile)'
      inputs:
        script: newman run '$(collectionFile)' -e $(environmentFile)
        workingDirectory: '$(BasePath)'




