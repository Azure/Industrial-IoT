steps:
- task: UseDotNet@2
  displayName: 'Install .NET Core SDK for building'
  inputs:
    packageType: sdk
    version: 8.0.x
    includePreviewVersions: false
    installationPath: $(Agent.ToolsDirectory)/dotnet

- task: AzureCLI@2
  displayName: 'Get Service Principal Access Token'
  name: ServicePrincipalAccessToken
  inputs:
    azureSubscription: '$(AzureSubscription)'
    scriptLocation: 'InlineScript'
    scriptType: 'ps'
    addSpnToEnvironment: true
    inlineScript: |
      $accessToken = az account get-access-token | ConvertFrom-Json
      Write-Host "Got token for $($accessToken.subscription) which expires $($accessToken.expiresOn)"
      Write-Host "##vso[task.setvariable variable=ServicePrincipalId]$($env:servicePrincipalId)"
      Write-Host "##vso[task.setvariable variable=ServicePrincipalKey]$($env:servicePrincipalKey)"
      Write-Host "##vso[task.setvariable variable=ServicePrincipalIdToken]$($env:idToken)"
      Write-Host "##vso[task.setvariable variable=ServicePrincipalAccessToken]$($accessToken.accessToken)"
      Write-Host "##vso[task.setvariable variable=ServicePrincipalTenantId]$($env:tenantId)"

- task: AzurePowerShell@5
  displayName: 'Select Image to test'
  inputs:
    azureSubscription: '$(AzureSubscription)'
    azurePowerShellVersion: 'latestVersion'
    workingDirectory: '$(BasePath)'
    scriptType: filePath
    scriptPath: '$(BasePath)\tools\e2etesting\SetVariables.ps1'
    scriptArguments: >
      -BranchName "$(BranchName)"
      -Region "$(Region)"
      -ImageTag "$(PlatformVersion)"
      -ContainerRegistryServer "$(ContainerRegistryServer)"

- task: AzurePowerShell@5
  displayName: "Run deployment script"
  inputs:
    azureSubscription: '$(AzureSubscription)'
    azurePowerShellVersion: 'latestVersion'
    workingDirectory: '$(BasePath)'
    scriptType: 'InlineScript'
    inline: |
      $secureContainerRegistryPassword = "$(ContainerRegistryPassword)" `
        | ConvertTo-SecureString -AsPlainText -Force
      $secureAccessToken = "$(ServicePrincipalAccessToken)" `
        | ConvertTo-SecureString -AsPlainText -Force
      Write-Host "Deploying to '$(ResourceGroupName)'..."
      . $(BasePath)/deploy/scripts/deploy.ps1 `
          -type services `
          -BranchName "$(BranchName)" `
          -ImageNamespace "$(ImageNamespace)" `
          -version "$(PlatformVersion)" `
          -applicationName "$(ApplicationName)" `
          -resourceGroupName "$(ResourceGroupName)" `
          -resourceGroupLocation "$(Region)" `
          -containerRegistryServer "$(ContainerRegistryServer)" `
          -containerRegistryUsername "$(ContainerRegistryUsername)" `
          -containerRegistryPassword $secureContainerRegistryPassword `
          -accessToken $secureAccessToken `
          -context $(Get-AzContext)
      Write-Host "Finished deployment to '$(ResourceGroupName)'."

- task: AzurePowerShell@5
  displayName: "Add permissions to KeyVault"
  name: keyvaultpermissions
  inputs:
    azureSubscription: '$(AzureSubscription)'
    azurePowerShellVersion: 'latestVersion'
    workingDirectory: '$(BasePath)'
    scriptType: filePath
    scriptPath: '$(BasePath)\tools\e2etesting\SetKeyVaultPermissions.ps1'
    scriptArguments: >
      -ResourceGroupName "$(ResourceGroupName)"
      -ServicePrincipalName "$(ServicePrincipalId)"
- task: AzurePowerShell@5
  displayName: 'Set KeyVaultName-Variable'
  inputs:
    azureSubscription: '$(AzureSubscription)'
    azurePowerShellVersion: 'latestVersion'
    workingDirectory: '$(BasePath)'
    scriptType: filePath
    scriptPath: '$(BasePath)\tools\e2etesting\DetermineKeyVaultName.ps1'
    scriptArguments: >
      -ResourceGroupName '$(ResourceGroupName)'
- task: AzureKeyVault@1
  displayName: 'Retrieve App identifier'
  inputs:
    azureSubscription: '$(AzureSubscription)'
    KeyVaultName: '$(KeyVaultName)'
    SecretsFilter: 'PCS-AUTH-CLIENT-APPID,PCS-AUTH-TENANT'
- task: AzureKeyVault@1
  displayName: 'Retrieve Admin credentials'
  inputs:
    azureSubscription: '$(AzureSubscription)'
    KeyVaultName: 'e2etestingsecrets'
    SecretsFilter: 'User,Password'
- task: AzureCLI@2
  displayName: 'Grant admin access to App'
  inputs:
    azureSubscription: '$(AzureSubscription)'
    scriptLocation: 'InlineScript'
    scriptType: 'bash'
    addSpnToEnvironment: true
    inlineScript: |
      az login -t $(pcs-auth-tenant) --allow-no-subscriptions -u $(User) -p "$(Password)"
      az ad app permission admin-consent --id $(pcs-auth-client-appid)

