parameters:
- name: ModeName
  type: string
- name: ModeValue
  type: string

steps:
- task: AzurePowerShell@5
  displayName: 'Set KeyVaultName-Variable'
  inputs:
    azureSubscription: '$(AzureSubscription)'
    azurePowerShellVersion: 'OtherVersion'
    preferredAzurePowerShellVersion: '$(AzurePsVersion)'
    workingDirectory: '$(BasePath)'
    scriptType: filePath
    scriptPath: '$(BasePath)\tools\e2etesting\DetermineKeyVaultName.ps1'
    scriptArguments: >
      -ResourceGroupName '$(ResourceGroupName)'

# Need to do this so we can update the permissions in key vault for this
# service principal in the next script
- task: AzureCLI@2
  displayName: 'Set Service Principal Environment Variables'
  name: SetServicePrincipalId
  inputs:
    azureSubscription: '$(AzureSubscription)'
    scriptLocation: 'InlineScript'
    scriptType: 'ps'
    addSpnToEnvironment: true
    inlineScript: |
      Write-Host "##vso[task.setvariable variable=ServicePrincipalId]$($env:servicePrincipalId)"
      Write-Host "##vso[task.setvariable variable=ServicePrincipalKey]$($env:servicePrincipalKey)"
      Write-Host "##vso[task.setvariable variable=ServicePrincipalTokenFile]$(Agent.TempDirectory)\$($env:servicePrincipalId)"
      Write-Host "##vso[task.setvariable variable=ServicePrincipalAccessToken]$($accessToken.accessToken)"
      Write-Host "##vso[task.setvariable variable=pcs-auth-tenant]$($env:tenantId)"
      $env:idToken | Out-File $(Agent.TempDirectory)\$($env:servicePrincipalId)
- task: AzurePowerShell@5
  displayName: "Add permissions to KeyVault"
  name: keyvaultpermissions
  inputs:
    azureSubscription: '$(AzureSubscription)'
    azurePowerShellVersion: 'OtherVersion'
    preferredAzurePowerShellVersion: '$(AzurePsVersion)'
    workingDirectory: '$(BasePath)'
    scriptType: filePath
    scriptPath: '$(BasePath)\tools\e2etesting\SetKeyVaultPermissions.ps1'
    scriptArguments: >
      -KeyVaultName "$(KeyVaultName)"
      -ResourceGroupName "$(ResourceGroupName)"
      -ServicePrincipalName "$(ServicePrincipalId)"

- task: AzureKeyVault@1
  displayName: 'Retrieve KeyVault secrets'
  inputs:
    azureSubscription: '$(AzureSubscription)'
    KeyVaultName: '$(KeyVaultName)'
    SecretsFilter: 'PCS-IOTHUB-CONNSTRING,plc-simulation-urls,iot-edge-vm-username,iot-edge-vm-publickey,iot-edge-vm-privatekey,iot-edge-device-id,iot-edge-device-dnsname,testeventprocessor-baseurl,testeventprocessor-username,testeventprocessor-password,iothub-eventhub-connectionstring,storageaccount-iothubcheckpoint-connectionstring,PCS-SUBSCRIPTION-ID'
- task: AzureKeyVault@1
  displayName: 'Retrieve KeyVault secrets for API tests'
  condition: notIn( '${{ parameters.ModeValue }}', 'standalone', 'AE')
  inputs:
    azureSubscription: '$(AzureSubscription)'
    KeyVaultName: '$(KeyVaultName)'
    SecretsFilter: 'PCS-SERVICE-URL,PCS-AUTH-TENANT,PCS-AUTH-CLIENT-APPID,PCS-AUTH-CLIENT-SECRET,PCS-AUTH-SERVICE-APPID'

- task: AzurePowerShell@5
  displayName: 'Auto-Set Variables'
  inputs:
    azureSubscription: '$(AzureSubscription)'
    azurePowerShellVersion: 'OtherVersion'
    preferredAzurePowerShellVersion: '$(AzurePsVersion)'
    workingDirectory: '$(BasePath)'
    scriptType: filePath
    scriptPath: '$(BasePath)\tools\e2etesting\SetVariables.ps1'
    scriptArguments: >
      -BranchName "$(BranchName)"
      -Region "$(Region)"
      -ImageTag "$(PlatformVersion)"
      -ContainerRegistryServer "$(ContainerRegistryServer)"
- task: UseDotNet@2
  displayName: 'Install .NET Core SDK'
  inputs:
    packageType: sdk
    version: 8.0.x
    includePreviewVersions: false
    installationPath: $(Agent.ToolsDirectory)/dotnet
- task: DotNetCoreCLI@2
  displayName: 'Restore xUnit tests'
  inputs:
    command: restore
    projects: '$(BasePath)\e2e-tests\IIoTPlatform-E2E-Tests.sln'
- task: DotNetCoreCLI@2
  displayName: 'Build xUnit tests'
  inputs:
    command: build
    projects: '$(BasePath)\e2e-tests\IIoTPlatform-E2E-Tests.sln'
    arguments: '--configuration Release'
- task: DotNetCoreCLI@2
  displayName: 'Executing xUnit tests (with ${{ parameters.ModeName }}=${{ parameters.ModeValue }})'
  timeoutInMinutes: 70
  retryCountOnTaskFailure: 1
  inputs:
    command: test
    publishTestResults: true
    projects: '$(BasePath)\e2e-tests\IIoTPlatform-E2E-Tests.sln'
    arguments: >-
      --configuration Release
      --filter ${{ parameters.ModeName }}=${{ parameters.ModeValue }}
  env:
    ApplicationName: '$(ApplicationName)'
    PCS_IMAGES_TAG: '$(ImageTag)'
    PCS_DOCKER_SERVER: "$(ContainerRegistryServer)"
    PCS_DOCKER_USER: "$(ContainerRegistryUsername)"
    PCS_DOCKER_PASSWORD: "$(ContainerRegistryPassword)"
    PCS_IMAGES_NAMESPACE: "$(ImageNamespace)"
    PCS_SUBSCRIPTION_ID: '$(PCS-SUBSCRIPTION-ID)'
    PCS_RESOURCE_GROUP: '$(ResourceGroupName)'
    PCS_SERVICE_URL: '$(pcs-service-url)'
    PCS_AUTH_TENANT: '$(pcs-auth-tenant)'
    PCS_AUTH_CLIENT_APPID: '$(pcs-auth-client-appid)'
    PCS_AUTH_CLIENT_SECRET: '$(pcs-auth-client-secret)'
    PCS_AUTH_SERVICE_APPID: '$(pcs-auth-service-appid)'
    PLC_SIMULATION_URLS: '$(plc-simulation-urls)'
    IOT_EDGE_VERSION: "$(EdgeVersion)"
    IOT_EDGE_DEVICE_ID: '$(iot-edge-device-id)'
    IOT_EDGE_DEVICE_DNSNAME: '$(iot-edge-device-dnsname)'
    IOT_EDGE_VM_USERNAME: '$(iot-edge-vm-username)'
    IOT_EDGE_VM_PUBLICKEY: '$(iot-edge-vm-publickey)'
    IOT_EDGE_VM_PRIVATEKEY: '$(iot-edge-vm-privatekey)'
    PCS_IOTHUB_CONNSTRING: '$(pcs-iothub-connstring)'
    IOTHUB_EVENTHUB_CONNECTIONSTRING: '$(iothub-eventhub-connectionstring)'
    STORAGEACCOUNT_IOTHUBCHECKPOINT_CONNECTIONSTRING: '$(storageaccount-iothubcheckpoint-connectionstring)'
    TESTEVENTPROCESSOR_BASEURL: '$(testeventprocessor-baseurl)'
    TESTEVENTPROCESSOR_USERNAME: '$(testeventprocessor-username)'
    TESTEVENTPROCESSOR_PASSWORD: '$(testeventprocessor-password)'
    AZURE_FEDERATED_TOKEN_FILE: '$(ServicePrincipalTokenFile)'
    AZURE_CLIENT_ID: "$(ServicePrincipalId)"
    AZURE_CLIENT_SECRET: "$(ServicePrincipalKey)"
    AZURE_TENANT_ID: "$(pcs-auth-tenant)"
- task: PublishTestResults@2
  displayName: 'Publish test results'
  condition: always()
  inputs:
    testResultsFormat: VSTest
    testResultsFiles: '$(Agent.TempDirectory)\**\*.trx'
