steps:
- task: AzureCLI@2
  displayName: 'Set Service Principal Environment Variables'
  name: promoteserviceprincipal
  inputs:
    azureSubscription: '$(AzureSubscription)'
    azurePowerShellVersion: 'latestVersion'
    scriptLocation: 'InlineScript'
    scriptType: 'pscore'
    addSpnToEnvironment: true
    inlineScript: |
      Write-Host "##vso[task.setvariable variable=ServicePrincipalId]$($env:servicePrincipalId)"

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: 'Install-Module -Name Az.ContainerRegistry -RequiredVersion 2.2.2 -Force'

# - task: AzureCLI@2
#   displayName: 'Load acr secrets'
#   name: loadacrsecrets
#   inputs:
#     azureSubscription: '$(AzureSubscription)'
#     azurePowerShellVersion: 'latestVersion'
#     scriptLocation: 'InlineScript'
#     scriptType: 'pscore'
#     inlineScript: |
#       $credentials = Get-AzContainerRegistryCredential -Name $(ContainerRegistryServer) -ResourceGroupName $(ContainerRegistryResourceGroup)
#       Write-Host "##vso[task.setvariable variable=ContainerRegistryUsername;]$credentials.Username"
#       Write-Host "##vso[task.setvariable variable=ContainerRegistryPassword;]$credentials.Password"


- task: AzurePowerShell@5
  displayName: "Deploy AKS"
  inputs:
    azureSubscription: '$(AzureSubscription)'
    azurePowerShellVersion: 'latestVersion'
    scriptType: filePath
    scriptPath: '$(System.DefaultWorkingDirectory)/tools/e2etesting/DeployAKS.ps1'
    scriptArguments: >
      -ResourceGroupName $(ResourceGroupName)
      -Region $(Region)
      -ServicePrincipalId '$(ServicePrincipalId)'
      -ContainerRegistryServer '$(ContainerRegistryServer)'
      -ContainerRegistryUsername '$(ContainerRegistryUsername)'
      -ContainerRegistryPassword '$(ContainerRegistryPassword)'
      -PublisherDeploymentFile '$(System.DefaultWorkingDirectory)/tools/e2etesting/K8s-Standalone/publisher/deployment.yaml'
      -PublisherImagePath '$(PublisherImagePath)'

- task: AzureCLI@2
  displayName: 'Resolve Verifier Public IP'
  name: resolveverifierip
  inputs:
    azureSubscription: '$(AzureSubscription)'
    azurePowerShellVersion: 'latestVersion'
    scriptLocation: 'InlineScript'
    scriptType: 'pscore'
    inlineScript: |
      $verifierIp = kubectl get services/verifier -n e2etesting -o jsonpath='{.status.loadBalancer.ingress[0].ip}'
      while(!$verifierIp){
        Write-Host "verifierIp not found. sleeping"
        Start-Sleep -Seconds 30
        $verifierIp = kubectl get services/verifier -n e2etesting -o jsonpath='{.status.loadBalancer.ingress[0].ip}'
      }
      Write-Host "resolved public verifier IP: $verifierIp"
      Write-Host "##vso[task.setvariable variable=VerifierIp;isOutput=true]$verifierIp"
