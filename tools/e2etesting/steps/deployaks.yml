steps:
- task: AzureCLI@2
  displayName: 'Set Service Principal Environment Variables'
  name: promoteserviceprincipal
  inputs:
    azureSubscription: '$(AzureSubscription)'
    azurePowerShellVersion: 'latestVersion'
    scriptLocation: 'InlineScript'
    scriptType: 'pscore'
    addSpnToEnvironment: true
    inlineScript: |
      Write-Host "##vso[task.setvariable variable=ServicePrincipalId]$($env:servicePrincipalId)"
      Write-Host "##vso[task.setvariable variable=ServicePrincipalKey]$($env:servicePrincipalKey)"

- task: AzurePowerShell@5
  displayName: 'Auto-Set Variables'
  inputs:
    azureSubscription: '$(AzureSubscription)'
    azurePowerShellVersion: 'latestVersion'
    scriptType: filePath
    scriptPath: '$(System.DefaultWorkingDirectory)/tools/e2etesting/SetVariables.ps1'
    scriptArguments: >
      -BranchName "$(BranchName)"
      -Region "$(Region)"
      -ImageTag "$(PlatformVersion)"
      -ImageNamespace "$(ImageNamespace)"
      -ContainerRegistryServer "$(ContainerRegistryServer)"

- task: AzurePowerShell@5
  displayName: "Deploy AKS"
  inputs:
    azureSubscription: '$(AzureSubscription)'
    preferredAzurePowerShellVersion: '7.5.0'
    scriptType: filePath
    scriptPath: '$(System.DefaultWorkingDirectory)/tools/e2etesting/DeployAKS.ps1'
    scriptArguments: >
      -ResourceGroupName $(ResourceGroupName)
      -Region $(Region)
      -ContainerRegistryServer '$(ContainerRegistryServer)'
      -ContainerRegistryUsername '$(ContainerRegistryUsername)'
      -ContainerRegistryPassword '$(ContainerRegistryPassword)'
      -PublisherDeploymentFile '$(System.DefaultWorkingDirectory)/tools/e2etesting/K8s-Standalone/publisher/deployment.yaml'
      -ImageNamespace '$(ImageNamespace)'
      -ImageTag '$(ImageTag)'

- task: AzureCLI@2
  displayName: 'Resolve Verifier Public IP'
  name: resolveverifierip
  inputs:
    azureSubscription: '$(AzureSubscription)'
    azurePowerShellVersion: 'latestVersion'
    scriptLocation: 'InlineScript'
    scriptType: 'pscore'
    inlineScript: |
      $verifierIp = kubectl get services/verifier -n e2etesting -o jsonpath='{.status.loadBalancer.ingress[0].ip}'
      while(!$verifierIp){
        Write-Host "verifierIp not found. sleeping"
        Start-Sleep -Seconds 30
        $verifierIp = kubectl get services/verifier -n e2etesting -o jsonpath='{.status.loadBalancer.ingress[0].ip}'
      }
      Write-Host "resolved public verifier IP: $verifierIp"
      Write-Host "##vso[task.setvariable variable=VerifierIp;isOutput=true]$verifierIp"
