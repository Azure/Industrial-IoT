/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { AzureOpcHistoryClientContext } from "./azureOpcHistoryClientContext";

class AzureOpcHistoryClient extends AzureOpcHistoryClientContext {
  /**
   * Initializes a new instance of the AzureOpcHistoryClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param [options] The parameter options
   */
  constructor(credentials: msRest.ServiceClientCredentials, options?: Models.AzureOpcHistoryClientOptions) {
    super(credentials, options);
  }

  /**
   * Delete value history using historic access. The endpoint must be activated and connected and the
   * module client and server must trust each other.
   * @summary Delete value history at specified times
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history update request
   * @param [options] The optional parameters
   * @returns Promise<Models.HistoryDeleteValuesAtTimesResponse>
   */
  historyDeleteValuesAtTimes(endpointId: string, body: Models.DeleteValuesAtTimesDetailsApiModelHistoryUpdateRequestApiModel, options?: msRest.RequestOptionsBase): Promise<Models.HistoryDeleteValuesAtTimesResponse>;
  /**
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history update request
   * @param callback The callback
   */
  historyDeleteValuesAtTimes(endpointId: string, body: Models.DeleteValuesAtTimesDetailsApiModelHistoryUpdateRequestApiModel, callback: msRest.ServiceCallback<Models.HistoryUpdateResponseApiModel>): void;
  /**
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history update request
   * @param options The optional parameters
   * @param callback The callback
   */
  historyDeleteValuesAtTimes(endpointId: string, body: Models.DeleteValuesAtTimesDetailsApiModelHistoryUpdateRequestApiModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HistoryUpdateResponseApiModel>): void;
  historyDeleteValuesAtTimes(endpointId: string, body: Models.DeleteValuesAtTimesDetailsApiModelHistoryUpdateRequestApiModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HistoryUpdateResponseApiModel>, callback?: msRest.ServiceCallback<Models.HistoryUpdateResponseApiModel>): Promise<Models.HistoryDeleteValuesAtTimesResponse> {
    return this.sendOperationRequest(
      {
        endpointId,
        body,
        options
      },
      historyDeleteValuesAtTimesOperationSpec,
      callback) as Promise<Models.HistoryDeleteValuesAtTimesResponse>;
  }

  /**
   * Delete historic values using historic access. The endpoint must be activated and connected and
   * the module client and server must trust each other.
   * @summary Delete historic values
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history update request
   * @param [options] The optional parameters
   * @returns Promise<Models.HistoryDeleteValuesResponse>
   */
  historyDeleteValues(endpointId: string, body: Models.DeleteValuesDetailsApiModelHistoryUpdateRequestApiModel, options?: msRest.RequestOptionsBase): Promise<Models.HistoryDeleteValuesResponse>;
  /**
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history update request
   * @param callback The callback
   */
  historyDeleteValues(endpointId: string, body: Models.DeleteValuesDetailsApiModelHistoryUpdateRequestApiModel, callback: msRest.ServiceCallback<Models.HistoryUpdateResponseApiModel>): void;
  /**
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history update request
   * @param options The optional parameters
   * @param callback The callback
   */
  historyDeleteValues(endpointId: string, body: Models.DeleteValuesDetailsApiModelHistoryUpdateRequestApiModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HistoryUpdateResponseApiModel>): void;
  historyDeleteValues(endpointId: string, body: Models.DeleteValuesDetailsApiModelHistoryUpdateRequestApiModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HistoryUpdateResponseApiModel>, callback?: msRest.ServiceCallback<Models.HistoryUpdateResponseApiModel>): Promise<Models.HistoryDeleteValuesResponse> {
    return this.sendOperationRequest(
      {
        endpointId,
        body,
        options
      },
      historyDeleteValuesOperationSpec,
      callback) as Promise<Models.HistoryDeleteValuesResponse>;
  }

  /**
   * Delete historic values using historic access. The endpoint must be activated and connected and
   * the module client and server must trust each other.
   * @summary Delete historic values
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history update request
   * @param [options] The optional parameters
   * @returns Promise<Models.HistoryDeleteModifiedValuesResponse>
   */
  historyDeleteModifiedValues(endpointId: string, body: Models.DeleteModifiedValuesDetailsApiModelHistoryUpdateRequestApiModel, options?: msRest.RequestOptionsBase): Promise<Models.HistoryDeleteModifiedValuesResponse>;
  /**
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history update request
   * @param callback The callback
   */
  historyDeleteModifiedValues(endpointId: string, body: Models.DeleteModifiedValuesDetailsApiModelHistoryUpdateRequestApiModel, callback: msRest.ServiceCallback<Models.HistoryUpdateResponseApiModel>): void;
  /**
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history update request
   * @param options The optional parameters
   * @param callback The callback
   */
  historyDeleteModifiedValues(endpointId: string, body: Models.DeleteModifiedValuesDetailsApiModelHistoryUpdateRequestApiModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HistoryUpdateResponseApiModel>): void;
  historyDeleteModifiedValues(endpointId: string, body: Models.DeleteModifiedValuesDetailsApiModelHistoryUpdateRequestApiModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HistoryUpdateResponseApiModel>, callback?: msRest.ServiceCallback<Models.HistoryUpdateResponseApiModel>): Promise<Models.HistoryDeleteModifiedValuesResponse> {
    return this.sendOperationRequest(
      {
        endpointId,
        body,
        options
      },
      historyDeleteModifiedValuesOperationSpec,
      callback) as Promise<Models.HistoryDeleteModifiedValuesResponse>;
  }

  /**
   * Delete historic events using historic access. The endpoint must be activated and connected and
   * the module client and server must trust each other.
   * @summary Delete historic events
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history update request
   * @param [options] The optional parameters
   * @returns Promise<Models.HistoryDeleteEventsResponse>
   */
  historyDeleteEvents(endpointId: string, body: Models.DeleteEventsDetailsApiModelHistoryUpdateRequestApiModel, options?: msRest.RequestOptionsBase): Promise<Models.HistoryDeleteEventsResponse>;
  /**
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history update request
   * @param callback The callback
   */
  historyDeleteEvents(endpointId: string, body: Models.DeleteEventsDetailsApiModelHistoryUpdateRequestApiModel, callback: msRest.ServiceCallback<Models.HistoryUpdateResponseApiModel>): void;
  /**
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history update request
   * @param options The optional parameters
   * @param callback The callback
   */
  historyDeleteEvents(endpointId: string, body: Models.DeleteEventsDetailsApiModelHistoryUpdateRequestApiModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HistoryUpdateResponseApiModel>): void;
  historyDeleteEvents(endpointId: string, body: Models.DeleteEventsDetailsApiModelHistoryUpdateRequestApiModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HistoryUpdateResponseApiModel>, callback?: msRest.ServiceCallback<Models.HistoryUpdateResponseApiModel>): Promise<Models.HistoryDeleteEventsResponse> {
    return this.sendOperationRequest(
      {
        endpointId,
        body,
        options
      },
      historyDeleteEventsOperationSpec,
      callback) as Promise<Models.HistoryDeleteEventsResponse>;
  }

  /**
   * Read node history if available using historic access. The endpoint must be activated and
   * connected and the module client and server must trust each other.
   * @summary Read history using json details
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history read request
   * @param [options] The optional parameters
   * @returns Promise<Models.HistoryReadRawResponse>
   */
  historyReadRaw(endpointId: string, body: Models.JTokenHistoryReadRequestApiModel, options?: msRest.RequestOptionsBase): Promise<Models.HistoryReadRawResponse>;
  /**
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history read request
   * @param callback The callback
   */
  historyReadRaw(endpointId: string, body: Models.JTokenHistoryReadRequestApiModel, callback: msRest.ServiceCallback<Models.JTokenHistoryReadResponseApiModel>): void;
  /**
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history read request
   * @param options The optional parameters
   * @param callback The callback
   */
  historyReadRaw(endpointId: string, body: Models.JTokenHistoryReadRequestApiModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.JTokenHistoryReadResponseApiModel>): void;
  historyReadRaw(endpointId: string, body: Models.JTokenHistoryReadRequestApiModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.JTokenHistoryReadResponseApiModel>, callback?: msRest.ServiceCallback<Models.JTokenHistoryReadResponseApiModel>): Promise<Models.HistoryReadRawResponse> {
    return this.sendOperationRequest(
      {
        endpointId,
        body,
        options
      },
      historyReadRawOperationSpec,
      callback) as Promise<Models.HistoryReadRawResponse>;
  }

  /**
   * Read next batch of node history values using historic access. The endpoint must be activated and
   * connected and the module client and server must trust each other.
   * @summary Read next batch of history as json
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history read next request
   * @param [options] The optional parameters
   * @returns Promise<Models.HistoryReadRawNextResponse>
   */
  historyReadRawNext(endpointId: string, body: Models.HistoryReadNextRequestApiModel, options?: msRest.RequestOptionsBase): Promise<Models.HistoryReadRawNextResponse>;
  /**
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history read next request
   * @param callback The callback
   */
  historyReadRawNext(endpointId: string, body: Models.HistoryReadNextRequestApiModel, callback: msRest.ServiceCallback<Models.JTokenHistoryReadNextResponseApiModel>): void;
  /**
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history read next request
   * @param options The optional parameters
   * @param callback The callback
   */
  historyReadRawNext(endpointId: string, body: Models.HistoryReadNextRequestApiModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.JTokenHistoryReadNextResponseApiModel>): void;
  historyReadRawNext(endpointId: string, body: Models.HistoryReadNextRequestApiModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.JTokenHistoryReadNextResponseApiModel>, callback?: msRest.ServiceCallback<Models.JTokenHistoryReadNextResponseApiModel>): Promise<Models.HistoryReadRawNextResponse> {
    return this.sendOperationRequest(
      {
        endpointId,
        body,
        options
      },
      historyReadRawNextOperationSpec,
      callback) as Promise<Models.HistoryReadRawNextResponse>;
  }

  /**
   * Update node history using historic access. The endpoint must be activated and connected and the
   * module client and server must trust each other.
   * @summary Update node history using raw json
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history update request
   * @param [options] The optional parameters
   * @returns Promise<Models.HistoryUpdateRawResponse>
   */
  historyUpdateRaw(endpointId: string, body: Models.JTokenHistoryUpdateRequestApiModel, options?: msRest.RequestOptionsBase): Promise<Models.HistoryUpdateRawResponse>;
  /**
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history update request
   * @param callback The callback
   */
  historyUpdateRaw(endpointId: string, body: Models.JTokenHistoryUpdateRequestApiModel, callback: msRest.ServiceCallback<Models.HistoryUpdateResponseApiModel>): void;
  /**
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history update request
   * @param options The optional parameters
   * @param callback The callback
   */
  historyUpdateRaw(endpointId: string, body: Models.JTokenHistoryUpdateRequestApiModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HistoryUpdateResponseApiModel>): void;
  historyUpdateRaw(endpointId: string, body: Models.JTokenHistoryUpdateRequestApiModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HistoryUpdateResponseApiModel>, callback?: msRest.ServiceCallback<Models.HistoryUpdateResponseApiModel>): Promise<Models.HistoryUpdateRawResponse> {
    return this.sendOperationRequest(
      {
        endpointId,
        body,
        options
      },
      historyUpdateRawOperationSpec,
      callback) as Promise<Models.HistoryUpdateRawResponse>;
  }

  /**
   * Insert historic values using historic access. The endpoint must be activated and connected and
   * the module client and server must trust each other.
   * @summary Insert historic values
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history insert request
   * @param [options] The optional parameters
   * @returns Promise<Models.HistoryInsertValuesResponse>
   */
  historyInsertValues(endpointId: string, body: Models.InsertValuesDetailsApiModelHistoryUpdateRequestApiModel, options?: msRest.RequestOptionsBase): Promise<Models.HistoryInsertValuesResponse>;
  /**
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history insert request
   * @param callback The callback
   */
  historyInsertValues(endpointId: string, body: Models.InsertValuesDetailsApiModelHistoryUpdateRequestApiModel, callback: msRest.ServiceCallback<Models.HistoryUpdateResponseApiModel>): void;
  /**
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history insert request
   * @param options The optional parameters
   * @param callback The callback
   */
  historyInsertValues(endpointId: string, body: Models.InsertValuesDetailsApiModelHistoryUpdateRequestApiModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HistoryUpdateResponseApiModel>): void;
  historyInsertValues(endpointId: string, body: Models.InsertValuesDetailsApiModelHistoryUpdateRequestApiModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HistoryUpdateResponseApiModel>, callback?: msRest.ServiceCallback<Models.HistoryUpdateResponseApiModel>): Promise<Models.HistoryInsertValuesResponse> {
    return this.sendOperationRequest(
      {
        endpointId,
        body,
        options
      },
      historyInsertValuesOperationSpec,
      callback) as Promise<Models.HistoryInsertValuesResponse>;
  }

  /**
   * Insert historic events using historic access. The endpoint must be activated and connected and
   * the module client and server must trust each other.
   * @summary Insert historic events
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history insert request
   * @param [options] The optional parameters
   * @returns Promise<Models.HistoryInsertEventsResponse>
   */
  historyInsertEvents(endpointId: string, body: Models.InsertEventsDetailsApiModelHistoryUpdateRequestApiModel, options?: msRest.RequestOptionsBase): Promise<Models.HistoryInsertEventsResponse>;
  /**
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history insert request
   * @param callback The callback
   */
  historyInsertEvents(endpointId: string, body: Models.InsertEventsDetailsApiModelHistoryUpdateRequestApiModel, callback: msRest.ServiceCallback<Models.HistoryUpdateResponseApiModel>): void;
  /**
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history insert request
   * @param options The optional parameters
   * @param callback The callback
   */
  historyInsertEvents(endpointId: string, body: Models.InsertEventsDetailsApiModelHistoryUpdateRequestApiModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HistoryUpdateResponseApiModel>): void;
  historyInsertEvents(endpointId: string, body: Models.InsertEventsDetailsApiModelHistoryUpdateRequestApiModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HistoryUpdateResponseApiModel>, callback?: msRest.ServiceCallback<Models.HistoryUpdateResponseApiModel>): Promise<Models.HistoryInsertEventsResponse> {
    return this.sendOperationRequest(
      {
        endpointId,
        body,
        options
      },
      historyInsertEventsOperationSpec,
      callback) as Promise<Models.HistoryInsertEventsResponse>;
  }

  /**
   * Read historic events of a node if available using historic access. The endpoint must be
   * activated and connected and the module client and server must trust each other.
   * @summary Read historic events
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history read request
   * @param [options] The optional parameters
   * @returns Promise<Models.HistoryReadEventsResponse>
   */
  historyReadEvents(endpointId: string, body: Models.ReadEventsDetailsApiModelHistoryReadRequestApiModel, options?: msRest.RequestOptionsBase): Promise<Models.HistoryReadEventsResponse>;
  /**
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history read request
   * @param callback The callback
   */
  historyReadEvents(endpointId: string, body: Models.ReadEventsDetailsApiModelHistoryReadRequestApiModel, callback: msRest.ServiceCallback<Models.HistoricEventApiModelHistoryReadResponseApiModel>): void;
  /**
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history read request
   * @param options The optional parameters
   * @param callback The callback
   */
  historyReadEvents(endpointId: string, body: Models.ReadEventsDetailsApiModelHistoryReadRequestApiModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HistoricEventApiModelHistoryReadResponseApiModel>): void;
  historyReadEvents(endpointId: string, body: Models.ReadEventsDetailsApiModelHistoryReadRequestApiModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HistoricEventApiModelHistoryReadResponseApiModel>, callback?: msRest.ServiceCallback<Models.HistoricEventApiModelHistoryReadResponseApiModel>): Promise<Models.HistoryReadEventsResponse> {
    return this.sendOperationRequest(
      {
        endpointId,
        body,
        options
      },
      historyReadEventsOperationSpec,
      callback) as Promise<Models.HistoryReadEventsResponse>;
  }

  /**
   * Read next batch of historic events of a node using historic access. The endpoint must be
   * activated and connected and the module client and server must trust each other.
   * @summary Read next batch of historic events
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history read next request
   * @param [options] The optional parameters
   * @returns Promise<Models.HistoryReadEventsNextResponse>
   */
  historyReadEventsNext(endpointId: string, body: Models.HistoryReadNextRequestApiModel, options?: msRest.RequestOptionsBase): Promise<Models.HistoryReadEventsNextResponse>;
  /**
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history read next request
   * @param callback The callback
   */
  historyReadEventsNext(endpointId: string, body: Models.HistoryReadNextRequestApiModel, callback: msRest.ServiceCallback<Models.HistoricEventApiModelHistoryReadNextResponseApiModel>): void;
  /**
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history read next request
   * @param options The optional parameters
   * @param callback The callback
   */
  historyReadEventsNext(endpointId: string, body: Models.HistoryReadNextRequestApiModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HistoricEventApiModelHistoryReadNextResponseApiModel>): void;
  historyReadEventsNext(endpointId: string, body: Models.HistoryReadNextRequestApiModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HistoricEventApiModelHistoryReadNextResponseApiModel>, callback?: msRest.ServiceCallback<Models.HistoricEventApiModelHistoryReadNextResponseApiModel>): Promise<Models.HistoryReadEventsNextResponse> {
    return this.sendOperationRequest(
      {
        endpointId,
        body,
        options
      },
      historyReadEventsNextOperationSpec,
      callback) as Promise<Models.HistoryReadEventsNextResponse>;
  }

  /**
   * Read processed history values of a node if available using historic access. The endpoint must be
   * activated and connected and the module client and server must trust each other.
   * @summary Read historic processed values at specified times
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history read request
   * @param [options] The optional parameters
   * @returns Promise<Models.HistoryReadValuesResponse>
   */
  historyReadValues(endpointId: string, body: Models.ReadValuesDetailsApiModelHistoryReadRequestApiModel, options?: msRest.RequestOptionsBase): Promise<Models.HistoryReadValuesResponse>;
  /**
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history read request
   * @param callback The callback
   */
  historyReadValues(endpointId: string, body: Models.ReadValuesDetailsApiModelHistoryReadRequestApiModel, callback: msRest.ServiceCallback<Models.HistoricValueApiModelHistoryReadResponseApiModel>): void;
  /**
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history read request
   * @param options The optional parameters
   * @param callback The callback
   */
  historyReadValues(endpointId: string, body: Models.ReadValuesDetailsApiModelHistoryReadRequestApiModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HistoricValueApiModelHistoryReadResponseApiModel>): void;
  historyReadValues(endpointId: string, body: Models.ReadValuesDetailsApiModelHistoryReadRequestApiModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HistoricValueApiModelHistoryReadResponseApiModel>, callback?: msRest.ServiceCallback<Models.HistoricValueApiModelHistoryReadResponseApiModel>): Promise<Models.HistoryReadValuesResponse> {
    return this.sendOperationRequest(
      {
        endpointId,
        body,
        options
      },
      historyReadValuesOperationSpec,
      callback) as Promise<Models.HistoryReadValuesResponse>;
  }

  /**
   * Read historic values of a node if available using historic access. The endpoint must be
   * activated and connected and the module client and server must trust each other.
   * @summary Read historic values at specified times
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history read request
   * @param [options] The optional parameters
   * @returns Promise<Models.HistoryReadValuesAtTimesResponse>
   */
  historyReadValuesAtTimes(endpointId: string, body: Models.ReadValuesAtTimesDetailsApiModelHistoryReadRequestApiModel, options?: msRest.RequestOptionsBase): Promise<Models.HistoryReadValuesAtTimesResponse>;
  /**
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history read request
   * @param callback The callback
   */
  historyReadValuesAtTimes(endpointId: string, body: Models.ReadValuesAtTimesDetailsApiModelHistoryReadRequestApiModel, callback: msRest.ServiceCallback<Models.HistoricValueApiModelHistoryReadResponseApiModel>): void;
  /**
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history read request
   * @param options The optional parameters
   * @param callback The callback
   */
  historyReadValuesAtTimes(endpointId: string, body: Models.ReadValuesAtTimesDetailsApiModelHistoryReadRequestApiModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HistoricValueApiModelHistoryReadResponseApiModel>): void;
  historyReadValuesAtTimes(endpointId: string, body: Models.ReadValuesAtTimesDetailsApiModelHistoryReadRequestApiModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HistoricValueApiModelHistoryReadResponseApiModel>, callback?: msRest.ServiceCallback<Models.HistoricValueApiModelHistoryReadResponseApiModel>): Promise<Models.HistoryReadValuesAtTimesResponse> {
    return this.sendOperationRequest(
      {
        endpointId,
        body,
        options
      },
      historyReadValuesAtTimesOperationSpec,
      callback) as Promise<Models.HistoryReadValuesAtTimesResponse>;
  }

  /**
   * Read processed history values of a node if available using historic access. The endpoint must be
   * activated and connected and the module client and server must trust each other.
   * @summary Read historic processed values at specified times
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history read request
   * @param [options] The optional parameters
   * @returns Promise<Models.HistoryReadProcessedValuesResponse>
   */
  historyReadProcessedValues(endpointId: string, body: Models.ReadProcessedValuesDetailsApiModelHistoryReadRequestApiModel, options?: msRest.RequestOptionsBase): Promise<Models.HistoryReadProcessedValuesResponse>;
  /**
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history read request
   * @param callback The callback
   */
  historyReadProcessedValues(endpointId: string, body: Models.ReadProcessedValuesDetailsApiModelHistoryReadRequestApiModel, callback: msRest.ServiceCallback<Models.HistoricValueApiModelHistoryReadResponseApiModel>): void;
  /**
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history read request
   * @param options The optional parameters
   * @param callback The callback
   */
  historyReadProcessedValues(endpointId: string, body: Models.ReadProcessedValuesDetailsApiModelHistoryReadRequestApiModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HistoricValueApiModelHistoryReadResponseApiModel>): void;
  historyReadProcessedValues(endpointId: string, body: Models.ReadProcessedValuesDetailsApiModelHistoryReadRequestApiModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HistoricValueApiModelHistoryReadResponseApiModel>, callback?: msRest.ServiceCallback<Models.HistoricValueApiModelHistoryReadResponseApiModel>): Promise<Models.HistoryReadProcessedValuesResponse> {
    return this.sendOperationRequest(
      {
        endpointId,
        body,
        options
      },
      historyReadProcessedValuesOperationSpec,
      callback) as Promise<Models.HistoryReadProcessedValuesResponse>;
  }

  /**
   * Read processed history values of a node if available using historic access. The endpoint must be
   * activated and connected and the module client and server must trust each other.
   * @summary Read historic modified values at specified times
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history read request
   * @param [options] The optional parameters
   * @returns Promise<Models.HistoryReadModifiedValuesResponse>
   */
  historyReadModifiedValues(endpointId: string, body: Models.ReadModifiedValuesDetailsApiModelHistoryReadRequestApiModel, options?: msRest.RequestOptionsBase): Promise<Models.HistoryReadModifiedValuesResponse>;
  /**
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history read request
   * @param callback The callback
   */
  historyReadModifiedValues(endpointId: string, body: Models.ReadModifiedValuesDetailsApiModelHistoryReadRequestApiModel, callback: msRest.ServiceCallback<Models.HistoricValueApiModelHistoryReadResponseApiModel>): void;
  /**
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history read request
   * @param options The optional parameters
   * @param callback The callback
   */
  historyReadModifiedValues(endpointId: string, body: Models.ReadModifiedValuesDetailsApiModelHistoryReadRequestApiModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HistoricValueApiModelHistoryReadResponseApiModel>): void;
  historyReadModifiedValues(endpointId: string, body: Models.ReadModifiedValuesDetailsApiModelHistoryReadRequestApiModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HistoricValueApiModelHistoryReadResponseApiModel>, callback?: msRest.ServiceCallback<Models.HistoricValueApiModelHistoryReadResponseApiModel>): Promise<Models.HistoryReadModifiedValuesResponse> {
    return this.sendOperationRequest(
      {
        endpointId,
        body,
        options
      },
      historyReadModifiedValuesOperationSpec,
      callback) as Promise<Models.HistoryReadModifiedValuesResponse>;
  }

  /**
   * Read next batch of historic values of a node using historic access. The endpoint must be
   * activated and connected and the module client and server must trust each other.
   * @summary Read next batch of historic values
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history read next request
   * @param [options] The optional parameters
   * @returns Promise<Models.HistoryReadValueNextResponse>
   */
  historyReadValueNext(endpointId: string, body: Models.HistoryReadNextRequestApiModel, options?: msRest.RequestOptionsBase): Promise<Models.HistoryReadValueNextResponse>;
  /**
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history read next request
   * @param callback The callback
   */
  historyReadValueNext(endpointId: string, body: Models.HistoryReadNextRequestApiModel, callback: msRest.ServiceCallback<Models.HistoricValueApiModelHistoryReadNextResponseApiModel>): void;
  /**
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history read next request
   * @param options The optional parameters
   * @param callback The callback
   */
  historyReadValueNext(endpointId: string, body: Models.HistoryReadNextRequestApiModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HistoricValueApiModelHistoryReadNextResponseApiModel>): void;
  historyReadValueNext(endpointId: string, body: Models.HistoryReadNextRequestApiModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HistoricValueApiModelHistoryReadNextResponseApiModel>, callback?: msRest.ServiceCallback<Models.HistoricValueApiModelHistoryReadNextResponseApiModel>): Promise<Models.HistoryReadValueNextResponse> {
    return this.sendOperationRequest(
      {
        endpointId,
        body,
        options
      },
      historyReadValueNextOperationSpec,
      callback) as Promise<Models.HistoryReadValueNextResponse>;
  }

  /**
   * Replace historic values using historic access. The endpoint must be activated and connected and
   * the module client and server must trust each other.
   * @summary Replace historic values
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history replace request
   * @param [options] The optional parameters
   * @returns Promise<Models.HistoryReplaceValuesResponse>
   */
  historyReplaceValues(endpointId: string, body: Models.ReplaceValuesDetailsApiModelHistoryUpdateRequestApiModel, options?: msRest.RequestOptionsBase): Promise<Models.HistoryReplaceValuesResponse>;
  /**
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history replace request
   * @param callback The callback
   */
  historyReplaceValues(endpointId: string, body: Models.ReplaceValuesDetailsApiModelHistoryUpdateRequestApiModel, callback: msRest.ServiceCallback<Models.HistoryUpdateResponseApiModel>): void;
  /**
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history replace request
   * @param options The optional parameters
   * @param callback The callback
   */
  historyReplaceValues(endpointId: string, body: Models.ReplaceValuesDetailsApiModelHistoryUpdateRequestApiModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HistoryUpdateResponseApiModel>): void;
  historyReplaceValues(endpointId: string, body: Models.ReplaceValuesDetailsApiModelHistoryUpdateRequestApiModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HistoryUpdateResponseApiModel>, callback?: msRest.ServiceCallback<Models.HistoryUpdateResponseApiModel>): Promise<Models.HistoryReplaceValuesResponse> {
    return this.sendOperationRequest(
      {
        endpointId,
        body,
        options
      },
      historyReplaceValuesOperationSpec,
      callback) as Promise<Models.HistoryReplaceValuesResponse>;
  }

  /**
   * Replace historic events using historic access. The endpoint must be activated and connected and
   * the module client and server must trust each other.
   * @summary Replace historic events
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history replace request
   * @param [options] The optional parameters
   * @returns Promise<Models.HistoryReplaceEventsResponse>
   */
  historyReplaceEvents(endpointId: string, body: Models.ReplaceEventsDetailsApiModelHistoryUpdateRequestApiModel, options?: msRest.RequestOptionsBase): Promise<Models.HistoryReplaceEventsResponse>;
  /**
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history replace request
   * @param callback The callback
   */
  historyReplaceEvents(endpointId: string, body: Models.ReplaceEventsDetailsApiModelHistoryUpdateRequestApiModel, callback: msRest.ServiceCallback<Models.HistoryUpdateResponseApiModel>): void;
  /**
   * @param endpointId The identifier of the activated endpoint.
   * @param body The history replace request
   * @param options The optional parameters
   * @param callback The callback
   */
  historyReplaceEvents(endpointId: string, body: Models.ReplaceEventsDetailsApiModelHistoryUpdateRequestApiModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HistoryUpdateResponseApiModel>): void;
  historyReplaceEvents(endpointId: string, body: Models.ReplaceEventsDetailsApiModelHistoryUpdateRequestApiModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HistoryUpdateResponseApiModel>, callback?: msRest.ServiceCallback<Models.HistoryUpdateResponseApiModel>): Promise<Models.HistoryReplaceEventsResponse> {
    return this.sendOperationRequest(
      {
        endpointId,
        body,
        options
      },
      historyReplaceEventsOperationSpec,
      callback) as Promise<Models.HistoryReplaceEventsResponse>;
  }

  /**
   * @summary Return the service status in the form of the service status
   * api model.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetStatusResponse>
   */
  getStatus(options?: msRest.RequestOptionsBase): Promise<Models.GetStatusResponse>;
  /**
   * @param callback The callback
   */
  getStatus(callback: msRest.ServiceCallback<Models.StatusResponseApiModel>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getStatus(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StatusResponseApiModel>): void;
  getStatus(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StatusResponseApiModel>, callback?: msRest.ServiceCallback<Models.StatusResponseApiModel>): Promise<Models.GetStatusResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getStatusOperationSpec,
      callback) as Promise<Models.GetStatusResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const historyDeleteValuesAtTimesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/delete/{endpointId}/values/pick",
  urlParameters: [
    Parameters.endpointId
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.DeleteValuesAtTimesDetailsApiModelHistoryUpdateRequestApiModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.HistoryUpdateResponseApiModel
    },
    default: {}
  },
  serializer
};

const historyDeleteValuesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/delete/{endpointId}/values",
  urlParameters: [
    Parameters.endpointId
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.DeleteValuesDetailsApiModelHistoryUpdateRequestApiModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.HistoryUpdateResponseApiModel
    },
    default: {}
  },
  serializer
};

const historyDeleteModifiedValuesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/delete/{endpointId}/values/modified",
  urlParameters: [
    Parameters.endpointId
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.DeleteModifiedValuesDetailsApiModelHistoryUpdateRequestApiModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.HistoryUpdateResponseApiModel
    },
    default: {}
  },
  serializer
};

const historyDeleteEventsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/delete/{endpointId}/events",
  urlParameters: [
    Parameters.endpointId
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.DeleteEventsDetailsApiModelHistoryUpdateRequestApiModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.HistoryUpdateResponseApiModel
    },
    default: {}
  },
  serializer
};

const historyReadRawOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/history/read/{endpointId}",
  urlParameters: [
    Parameters.endpointId
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.JTokenHistoryReadRequestApiModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.JTokenHistoryReadResponseApiModel
    },
    default: {}
  },
  serializer
};

const historyReadRawNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/history/read/{endpointId}/next",
  urlParameters: [
    Parameters.endpointId
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.HistoryReadNextRequestApiModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.JTokenHistoryReadNextResponseApiModel
    },
    default: {}
  },
  serializer
};

const historyUpdateRawOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/history/update/{endpointId}",
  urlParameters: [
    Parameters.endpointId
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.JTokenHistoryUpdateRequestApiModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.HistoryUpdateResponseApiModel
    },
    default: {}
  },
  serializer
};

const historyInsertValuesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/insert/{endpointId}/values",
  urlParameters: [
    Parameters.endpointId
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.InsertValuesDetailsApiModelHistoryUpdateRequestApiModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.HistoryUpdateResponseApiModel
    },
    default: {}
  },
  serializer
};

const historyInsertEventsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/insert/{endpointId}/events",
  urlParameters: [
    Parameters.endpointId
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.InsertEventsDetailsApiModelHistoryUpdateRequestApiModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.HistoryUpdateResponseApiModel
    },
    default: {}
  },
  serializer
};

const historyReadEventsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/read/{endpointId}/events",
  urlParameters: [
    Parameters.endpointId
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.ReadEventsDetailsApiModelHistoryReadRequestApiModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.HistoricEventApiModelHistoryReadResponseApiModel
    },
    default: {}
  },
  serializer
};

const historyReadEventsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/read/{endpointId}/events/next",
  urlParameters: [
    Parameters.endpointId
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.HistoryReadNextRequestApiModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.HistoricEventApiModelHistoryReadNextResponseApiModel
    },
    default: {}
  },
  serializer
};

const historyReadValuesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/read/{endpointId}/values",
  urlParameters: [
    Parameters.endpointId
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.ReadValuesDetailsApiModelHistoryReadRequestApiModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.HistoricValueApiModelHistoryReadResponseApiModel
    },
    default: {}
  },
  serializer
};

const historyReadValuesAtTimesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/read/{endpointId}/values/pick",
  urlParameters: [
    Parameters.endpointId
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.ReadValuesAtTimesDetailsApiModelHistoryReadRequestApiModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.HistoricValueApiModelHistoryReadResponseApiModel
    },
    default: {}
  },
  serializer
};

const historyReadProcessedValuesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/read/{endpointId}/values/processed",
  urlParameters: [
    Parameters.endpointId
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.ReadProcessedValuesDetailsApiModelHistoryReadRequestApiModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.HistoricValueApiModelHistoryReadResponseApiModel
    },
    default: {}
  },
  serializer
};

const historyReadModifiedValuesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/read/{endpointId}/values/modified",
  urlParameters: [
    Parameters.endpointId
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.ReadModifiedValuesDetailsApiModelHistoryReadRequestApiModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.HistoricValueApiModelHistoryReadResponseApiModel
    },
    default: {}
  },
  serializer
};

const historyReadValueNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/read/{endpointId}/values/next",
  urlParameters: [
    Parameters.endpointId
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.HistoryReadNextRequestApiModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.HistoricValueApiModelHistoryReadNextResponseApiModel
    },
    default: {}
  },
  serializer
};

const historyReplaceValuesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/replace/{endpointId}/values",
  urlParameters: [
    Parameters.endpointId
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.ReplaceValuesDetailsApiModelHistoryUpdateRequestApiModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.HistoryUpdateResponseApiModel
    },
    default: {}
  },
  serializer
};

const historyReplaceEventsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/replace/{endpointId}/events",
  urlParameters: [
    Parameters.endpointId
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.ReplaceEventsDetailsApiModelHistoryUpdateRequestApiModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.HistoryUpdateResponseApiModel
    },
    default: {}
  },
  serializer
};

const getStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/status",
  contentType: "application/json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.StatusResponseApiModel
    },
    default: {}
  },
  serializer
};

export {
  AzureOpcHistoryClient,
  AzureOpcHistoryClientContext,
  Models as AzureOpcHistoryModels,
  Mappers as AzureOpcHistoryMappers
};
