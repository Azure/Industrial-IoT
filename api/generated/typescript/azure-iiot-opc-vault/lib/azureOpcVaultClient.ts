/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { AzureOpcVaultClientContext } from "./azureOpcVaultClientContext";

class AzureOpcVaultClient extends AzureOpcVaultClientContext {
  /**
   * Initializes a new instance of the AzureOpcVaultClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param [options] The parameter options
   */
  constructor(credentials: msRest.ServiceClientCredentials, options?: Models.AzureOpcVaultClientOptions) {
    super(credentials, options);
  }

  /**
   * @summary Get Issuer CA Certificate chain.
   * @param serialNumber the serial number of the
   * Issuer CA Certificate
   * @param [options] The optional parameters
   * @returns Promise<Models.GetIssuerCertificateChainResponse>
   */
  getIssuerCertificateChain(serialNumber: string, options?: msRest.RequestOptionsBase): Promise<Models.GetIssuerCertificateChainResponse>;
  /**
   * @param serialNumber the serial number of the
   * Issuer CA Certificate
   * @param callback The callback
   */
  getIssuerCertificateChain(serialNumber: string, callback: msRest.ServiceCallback<Models.X509CertificateChainApiModel>): void;
  /**
   * @param serialNumber the serial number of the
   * Issuer CA Certificate
   * @param options The optional parameters
   * @param callback The callback
   */
  getIssuerCertificateChain(serialNumber: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.X509CertificateChainApiModel>): void;
  getIssuerCertificateChain(serialNumber: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.X509CertificateChainApiModel>, callback?: msRest.ServiceCallback<Models.X509CertificateChainApiModel>): Promise<Models.GetIssuerCertificateChainResponse> {
    return this.sendOperationRequest(
      {
        serialNumber,
        options
      },
      getIssuerCertificateChainOperationSpec,
      callback) as Promise<Models.GetIssuerCertificateChainResponse>;
  }

  /**
   * @summary Get Issuer CA CRL chain.
   * @param serialNumber the serial number of the Issuer
   * CA Certificate
   * @param [options] The optional parameters
   * @returns Promise<Models.GetIssuerCrlChainResponse>
   */
  getIssuerCrlChain(serialNumber: string, options?: msRest.RequestOptionsBase): Promise<Models.GetIssuerCrlChainResponse>;
  /**
   * @param serialNumber the serial number of the Issuer
   * CA Certificate
   * @param callback The callback
   */
  getIssuerCrlChain(serialNumber: string, callback: msRest.ServiceCallback<Models.X509CrlChainApiModel>): void;
  /**
   * @param serialNumber the serial number of the Issuer
   * CA Certificate
   * @param options The optional parameters
   * @param callback The callback
   */
  getIssuerCrlChain(serialNumber: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.X509CrlChainApiModel>): void;
  getIssuerCrlChain(serialNumber: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.X509CrlChainApiModel>, callback?: msRest.ServiceCallback<Models.X509CrlChainApiModel>): Promise<Models.GetIssuerCrlChainResponse> {
    return this.sendOperationRequest(
      {
        serialNumber,
        options
      },
      getIssuerCrlChainOperationSpec,
      callback) as Promise<Models.GetIssuerCrlChainResponse>;
  }

  /**
   * @summary Get Issuer Certificate for Authority Information
   * Access endpoint.
   * @param serialNumber
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  getIssuerCertificateChain1(serialNumber: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param serialNumber
   * @param callback The callback
   */
  getIssuerCertificateChain1(serialNumber: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param serialNumber
   * @param options The optional parameters
   * @param callback The callback
   */
  getIssuerCertificateChain1(serialNumber: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  getIssuerCertificateChain1(serialNumber: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        serialNumber,
        options
      },
      getIssuerCertificateChain1OperationSpec,
      callback);
  }

  /**
   * @summary Get Issuer CRL in CRL Distribution Endpoint.
   * @param serialNumber
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  getIssuerCrlChain1(serialNumber: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param serialNumber
   * @param callback The callback
   */
  getIssuerCrlChain1(serialNumber: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param serialNumber
   * @param options The optional parameters
   * @param callback The callback
   */
  getIssuerCrlChain1(serialNumber: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  getIssuerCrlChain1(serialNumber: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        serialNumber,
        options
      },
      getIssuerCrlChain1OperationSpec,
      callback);
  }

  /**
   * The request is in the 'New' state after this call.
   * Requires Writer or Manager role.
   * @summary Create a certificate request with a certificate signing request (CSR).
   * @param signingRequest The signing request parameters
   * @param [options] The optional parameters
   * @returns Promise<Models.StartSigningRequestResponse>
   */
  startSigningRequest(signingRequest: Models.StartSigningRequestApiModel, options?: msRest.RequestOptionsBase): Promise<Models.StartSigningRequestResponse>;
  /**
   * @param signingRequest The signing request parameters
   * @param callback The callback
   */
  startSigningRequest(signingRequest: Models.StartSigningRequestApiModel, callback: msRest.ServiceCallback<Models.StartSigningRequestResponseApiModel>): void;
  /**
   * @param signingRequest The signing request parameters
   * @param options The optional parameters
   * @param callback The callback
   */
  startSigningRequest(signingRequest: Models.StartSigningRequestApiModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StartSigningRequestResponseApiModel>): void;
  startSigningRequest(signingRequest: Models.StartSigningRequestApiModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StartSigningRequestResponseApiModel>, callback?: msRest.ServiceCallback<Models.StartSigningRequestResponseApiModel>): Promise<Models.StartSigningRequestResponse> {
    return this.sendOperationRequest(
      {
        signingRequest,
        options
      },
      startSigningRequestOperationSpec,
      callback) as Promise<Models.StartSigningRequestResponse>;
  }

  /**
   * Can be called in any state.
   * After a successful fetch in 'Completed' state, the request is
   * moved into 'Accepted' state.
   * Requires Writer role.
   * @summary Fetch signing request results.
   * @param requestId
   * @param [options] The optional parameters
   * @returns Promise<Models.FinishSigningRequestResponse>
   */
  finishSigningRequest(requestId: string, options?: msRest.RequestOptionsBase): Promise<Models.FinishSigningRequestResponse>;
  /**
   * @param requestId
   * @param callback The callback
   */
  finishSigningRequest(requestId: string, callback: msRest.ServiceCallback<Models.FinishSigningRequestResponseApiModel>): void;
  /**
   * @param requestId
   * @param options The optional parameters
   * @param callback The callback
   */
  finishSigningRequest(requestId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FinishSigningRequestResponseApiModel>): void;
  finishSigningRequest(requestId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.FinishSigningRequestResponseApiModel>, callback?: msRest.ServiceCallback<Models.FinishSigningRequestResponseApiModel>): Promise<Models.FinishSigningRequestResponse> {
    return this.sendOperationRequest(
      {
        requestId,
        options
      },
      finishSigningRequestOperationSpec,
      callback) as Promise<Models.FinishSigningRequestResponse>;
  }

  /**
   * The request is in the 'New' state after this call.
   * Requires Writer or Manager role.
   * @summary Create a certificate request with a new key pair.
   * @param newKeyPairRequest The new key pair request parameters
   * @param [options] The optional parameters
   * @returns Promise<Models.StartNewKeyPairRequestResponse>
   */
  startNewKeyPairRequest(newKeyPairRequest: Models.StartNewKeyPairRequestApiModel, options?: msRest.RequestOptionsBase): Promise<Models.StartNewKeyPairRequestResponse>;
  /**
   * @param newKeyPairRequest The new key pair request parameters
   * @param callback The callback
   */
  startNewKeyPairRequest(newKeyPairRequest: Models.StartNewKeyPairRequestApiModel, callback: msRest.ServiceCallback<Models.StartNewKeyPairRequestResponseApiModel>): void;
  /**
   * @param newKeyPairRequest The new key pair request parameters
   * @param options The optional parameters
   * @param callback The callback
   */
  startNewKeyPairRequest(newKeyPairRequest: Models.StartNewKeyPairRequestApiModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StartNewKeyPairRequestResponseApiModel>): void;
  startNewKeyPairRequest(newKeyPairRequest: Models.StartNewKeyPairRequestApiModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StartNewKeyPairRequestResponseApiModel>, callback?: msRest.ServiceCallback<Models.StartNewKeyPairRequestResponseApiModel>): Promise<Models.StartNewKeyPairRequestResponse> {
    return this.sendOperationRequest(
      {
        newKeyPairRequest,
        options
      },
      startNewKeyPairRequestOperationSpec,
      callback) as Promise<Models.StartNewKeyPairRequestResponse>;
  }

  /**
   * Can be called in any state.
   * Fetches private key in 'Completed' state.
   * After a successful fetch in 'Completed' state, the request is
   * moved into 'Accepted' state.
   * Requires Writer role.
   * @summary Fetch certificate request result.
   * @param requestId
   * @param [options] The optional parameters
   * @returns Promise<Models.FinishNewKeyPairRequestResponse>
   */
  finishNewKeyPairRequest(requestId: string, options?: msRest.RequestOptionsBase): Promise<Models.FinishNewKeyPairRequestResponse>;
  /**
   * @param requestId
   * @param callback The callback
   */
  finishNewKeyPairRequest(requestId: string, callback: msRest.ServiceCallback<Models.FinishNewKeyPairRequestResponseApiModel>): void;
  /**
   * @param requestId
   * @param options The optional parameters
   * @param callback The callback
   */
  finishNewKeyPairRequest(requestId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FinishNewKeyPairRequestResponseApiModel>): void;
  finishNewKeyPairRequest(requestId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.FinishNewKeyPairRequestResponseApiModel>, callback?: msRest.ServiceCallback<Models.FinishNewKeyPairRequestResponseApiModel>): Promise<Models.FinishNewKeyPairRequestResponse> {
    return this.sendOperationRequest(
      {
        requestId,
        options
      },
      finishNewKeyPairRequestOperationSpec,
      callback) as Promise<Models.FinishNewKeyPairRequestResponse>;
  }

  /**
   * Validates the request with the application database.
   * - If Approved:
   * - New Key Pair request: Creates the new key pair
   * in the requested format, signs the certificate and stores the
   * private key for later securely in KeyVault.
   * - Cert Signing Request: Creates and signs the certificate.
   * Deletes the CSR from the database.
   * Stores the signed certificate for later use in the Database.
   * The request is in the 'Approved' or 'Rejected' state after this call.
   * Requires Approver role.
   * Approver needs signing rights in KeyVault.
   * @summary Approve the certificate request.
   * @param requestId The certificate request id
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  approveRequest(requestId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param requestId The certificate request id
   * @param callback The callback
   */
  approveRequest(requestId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param requestId The certificate request id
   * @param options The optional parameters
   * @param callback The callback
   */
  approveRequest(requestId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  approveRequest(requestId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        requestId,
        options
      },
      approveRequestOperationSpec,
      callback);
  }

  /**
   * The request is in the 'Rejected' state after this call.
   * Requires Approver role.
   * Approver needs signing rights in KeyVault.
   * @summary Reject the certificate request.
   * @param requestId The certificate request id
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  rejectRequest(requestId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param requestId The certificate request id
   * @param callback The callback
   */
  rejectRequest(requestId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param requestId The certificate request id
   * @param options The optional parameters
   * @param callback The callback
   */
  rejectRequest(requestId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  rejectRequest(requestId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        requestId,
        options
      },
      rejectRequestOperationSpec,
      callback);
  }

  /**
   * The request is in the 'Accepted' state after this call.
   * Requires Writer role.
   * @summary Cancel request
   * @param requestId The certificate request id
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  acceptRequest(requestId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param requestId The certificate request id
   * @param callback The callback
   */
  acceptRequest(requestId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param requestId The certificate request id
   * @param options The optional parameters
   * @param callback The callback
   */
  acceptRequest(requestId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  acceptRequest(requestId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        requestId,
        options
      },
      acceptRequestOperationSpec,
      callback);
  }

  /**
   * @summary Get a specific certificate request.
   * @param requestId The certificate request id
   * @param [options] The optional parameters
   * @returns Promise<Models.GetRequestResponse>
   */
  getRequest(requestId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetRequestResponse>;
  /**
   * @param requestId The certificate request id
   * @param callback The callback
   */
  getRequest(requestId: string, callback: msRest.ServiceCallback<Models.CertificateRequestRecordApiModel>): void;
  /**
   * @param requestId The certificate request id
   * @param options The optional parameters
   * @param callback The callback
   */
  getRequest(requestId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CertificateRequestRecordApiModel>): void;
  getRequest(requestId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CertificateRequestRecordApiModel>, callback?: msRest.ServiceCallback<Models.CertificateRequestRecordApiModel>): Promise<Models.GetRequestResponse> {
    return this.sendOperationRequest(
      {
        requestId,
        options
      },
      getRequestOperationSpec,
      callback) as Promise<Models.GetRequestResponse>;
  }

  /**
   * By purging the request it is actually physically deleted from the
   * database, including the public key and other information.
   * Requires Manager role.
   * @summary Delete request. Physically delete the request.
   * @param requestId The certificate request id
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteRequest(requestId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param requestId The certificate request id
   * @param callback The callback
   */
  deleteRequest(requestId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param requestId The certificate request id
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteRequest(requestId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteRequest(requestId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        requestId,
        options
      },
      deleteRequestOperationSpec,
      callback);
  }

  /**
   * Get all certificate requests in paged form.
   * The returned model can contain a link to the next page if more results are
   * available.  Use ListRequests to continue.
   * @summary Query for certificate requests.
   * @param [options] The optional parameters
   * @returns Promise<Models.QueryRequestsResponse>
   */
  queryRequests(options?: Models.AzureOpcVaultClientQueryRequestsOptionalParams): Promise<Models.QueryRequestsResponse>;
  /**
   * @param callback The callback
   */
  queryRequests(callback: msRest.ServiceCallback<Models.CertificateRequestQueryResponseApiModel>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  queryRequests(options: Models.AzureOpcVaultClientQueryRequestsOptionalParams, callback: msRest.ServiceCallback<Models.CertificateRequestQueryResponseApiModel>): void;
  queryRequests(options?: Models.AzureOpcVaultClientQueryRequestsOptionalParams | msRest.ServiceCallback<Models.CertificateRequestQueryResponseApiModel>, callback?: msRest.ServiceCallback<Models.CertificateRequestQueryResponseApiModel>): Promise<Models.QueryRequestsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      queryRequestsOperationSpec,
      callback) as Promise<Models.QueryRequestsResponse>;
  }

  /**
   * Get all certificate requests in paged form or continue a current listing or
   * query.
   * The returned model can contain a link to the next page if more results are
   * available.
   * @summary Lists certificate requests.
   * @param [options] The optional parameters
   * @returns Promise<Models.ListRequestsResponse>
   */
  listRequests(options?: Models.AzureOpcVaultClientListRequestsOptionalParams): Promise<Models.ListRequestsResponse>;
  /**
   * @param callback The callback
   */
  listRequests(callback: msRest.ServiceCallback<Models.CertificateRequestQueryResponseApiModel>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listRequests(options: Models.AzureOpcVaultClientListRequestsOptionalParams, callback: msRest.ServiceCallback<Models.CertificateRequestQueryResponseApiModel>): void;
  listRequests(options?: Models.AzureOpcVaultClientListRequestsOptionalParams | msRest.ServiceCallback<Models.CertificateRequestQueryResponseApiModel>, callback?: msRest.ServiceCallback<Models.CertificateRequestQueryResponseApiModel>): Promise<Models.ListRequestsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listRequestsOperationSpec,
      callback) as Promise<Models.ListRequestsResponse>;
  }

  /**
   * @summary Get the status.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetStatusResponse>
   */
  getStatus(options?: msRest.RequestOptionsBase): Promise<Models.GetStatusResponse>;
  /**
   * @param callback The callback
   */
  getStatus(callback: msRest.ServiceCallback<Models.StatusResponseApiModel>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getStatus(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StatusResponseApiModel>): void;
  getStatus(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StatusResponseApiModel>, callback?: msRest.ServiceCallback<Models.StatusResponseApiModel>): Promise<Models.GetStatusResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getStatusOperationSpec,
      callback) as Promise<Models.GetStatusResponse>;
  }

  /**
   * A trust group has a root certificate which issues certificates
   * to entities.  Entities can be part of a trust group and thus
   * trust the root certificate and all entities that the root has
   * issued certificates for.
   * @summary Get information about all groups.
   * @param [options] The optional parameters
   * @returns Promise<Models.ListGroupsResponse>
   */
  listGroups(options?: Models.AzureOpcVaultClientListGroupsOptionalParams): Promise<Models.ListGroupsResponse>;
  /**
   * @param callback The callback
   */
  listGroups(callback: msRest.ServiceCallback<Models.TrustGroupRegistrationListApiModel>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listGroups(options: Models.AzureOpcVaultClientListGroupsOptionalParams, callback: msRest.ServiceCallback<Models.TrustGroupRegistrationListApiModel>): void;
  listGroups(options?: Models.AzureOpcVaultClientListGroupsOptionalParams | msRest.ServiceCallback<Models.TrustGroupRegistrationListApiModel>, callback?: msRest.ServiceCallback<Models.TrustGroupRegistrationListApiModel>): Promise<Models.ListGroupsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listGroupsOperationSpec,
      callback) as Promise<Models.ListGroupsResponse>;
  }

  /**
   * Requires manager role.
   * @summary Create new sub-group of an existing group.
   * @param request The create request
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateGroupResponse>
   */
  createGroup(request: Models.TrustGroupRegistrationRequestApiModel, options?: msRest.RequestOptionsBase): Promise<Models.CreateGroupResponse>;
  /**
   * @param request The create request
   * @param callback The callback
   */
  createGroup(request: Models.TrustGroupRegistrationRequestApiModel, callback: msRest.ServiceCallback<Models.TrustGroupRegistrationResponseApiModel>): void;
  /**
   * @param request The create request
   * @param options The optional parameters
   * @param callback The callback
   */
  createGroup(request: Models.TrustGroupRegistrationRequestApiModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TrustGroupRegistrationResponseApiModel>): void;
  createGroup(request: Models.TrustGroupRegistrationRequestApiModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TrustGroupRegistrationResponseApiModel>, callback?: msRest.ServiceCallback<Models.TrustGroupRegistrationResponseApiModel>): Promise<Models.CreateGroupResponse> {
    return this.sendOperationRequest(
      {
        request,
        options
      },
      createGroupOperationSpec,
      callback) as Promise<Models.CreateGroupResponse>;
  }

  /**
   * A trust group has a root certificate which issues certificates
   * to entities.  Entities can be part of a trust group and thus
   * trust the root certificate and all entities that the root has
   * issued certificates for.
   * @summary Get group information.
   * @param groupId The group id
   * @param [options] The optional parameters
   * @returns Promise<Models.GetGroupResponse>
   */
  getGroup(groupId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetGroupResponse>;
  /**
   * @param groupId The group id
   * @param callback The callback
   */
  getGroup(groupId: string, callback: msRest.ServiceCallback<Models.TrustGroupRegistrationApiModel>): void;
  /**
   * @param groupId The group id
   * @param options The optional parameters
   * @param callback The callback
   */
  getGroup(groupId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TrustGroupRegistrationApiModel>): void;
  getGroup(groupId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TrustGroupRegistrationApiModel>, callback?: msRest.ServiceCallback<Models.TrustGroupRegistrationApiModel>): Promise<Models.GetGroupResponse> {
    return this.sendOperationRequest(
      {
        groupId,
        options
      },
      getGroupOperationSpec,
      callback) as Promise<Models.GetGroupResponse>;
  }

  /**
   * Use this function with care and only if you are aware of
   * the security implications.
   * Requires manager role.
   * @summary Update group registration.
   * @param groupId The group id
   * @param request The group configuration
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updateGroup(groupId: string, request: Models.TrustGroupUpdateRequestApiModel, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param groupId The group id
   * @param request The group configuration
   * @param callback The callback
   */
  updateGroup(groupId: string, request: Models.TrustGroupUpdateRequestApiModel, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param groupId The group id
   * @param request The group configuration
   * @param options The optional parameters
   * @param callback The callback
   */
  updateGroup(groupId: string, request: Models.TrustGroupUpdateRequestApiModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  updateGroup(groupId: string, request: Models.TrustGroupUpdateRequestApiModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        groupId,
        request,
        options
      },
      updateGroupOperationSpec,
      callback);
  }

  /**
   * After this operation the Issuer CA, CRLs and keys become inaccessible.
   * Use this function with extreme caution.
   * Requires manager role.
   * @summary Delete a group.
   * @param groupId The group id
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteGroup(groupId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param groupId The group id
   * @param callback The callback
   */
  deleteGroup(groupId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param groupId The group id
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteGroup(groupId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteGroup(groupId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        groupId,
        options
      },
      deleteGroupOperationSpec,
      callback);
  }

  /**
   * Requires manager role.
   * @summary Create new root group.
   * @param request The create request
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateRootResponse>
   */
  createRoot(request: Models.TrustGroupRootCreateRequestApiModel, options?: msRest.RequestOptionsBase): Promise<Models.CreateRootResponse>;
  /**
   * @param request The create request
   * @param callback The callback
   */
  createRoot(request: Models.TrustGroupRootCreateRequestApiModel, callback: msRest.ServiceCallback<Models.TrustGroupRegistrationResponseApiModel>): void;
  /**
   * @param request The create request
   * @param options The optional parameters
   * @param callback The callback
   */
  createRoot(request: Models.TrustGroupRootCreateRequestApiModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TrustGroupRegistrationResponseApiModel>): void;
  createRoot(request: Models.TrustGroupRootCreateRequestApiModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TrustGroupRegistrationResponseApiModel>, callback?: msRest.ServiceCallback<Models.TrustGroupRegistrationResponseApiModel>): Promise<Models.CreateRootResponse> {
    return this.sendOperationRequest(
      {
        request,
        options
      },
      createRootOperationSpec,
      callback) as Promise<Models.CreateRootResponse>;
  }

  /**
   * @summary Renew a group CA Certificate.
   * @param groupId
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  renewIssuerCertificate(groupId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param groupId
   * @param callback The callback
   */
  renewIssuerCertificate(groupId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param groupId
   * @param options The optional parameters
   * @param callback The callback
   */
  renewIssuerCertificate(groupId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  renewIssuerCertificate(groupId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        groupId,
        options
      },
      renewIssuerCertificateOperationSpec,
      callback);
  }

  /**
   * Define trust between two entities.  The entities are identifiers
   * of application, groups, or endpoints.
   * @summary Add trust relationship
   * @param entityId The entity identifier, e.g. group, etc.
   * @param trustedEntityId The trusted entity identifier
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  addTrustRelationship(entityId: string, trustedEntityId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param entityId The entity identifier, e.g. group, etc.
   * @param trustedEntityId The trusted entity identifier
   * @param callback The callback
   */
  addTrustRelationship(entityId: string, trustedEntityId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param entityId The entity identifier, e.g. group, etc.
   * @param trustedEntityId The trusted entity identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  addTrustRelationship(entityId: string, trustedEntityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  addTrustRelationship(entityId: string, trustedEntityId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        entityId,
        trustedEntityId,
        options
      },
      addTrustRelationshipOperationSpec,
      callback);
  }

  /**
   * Returns all certificates the entity should trust based on the
   * applied trust configuration.
   * @summary List trusted certificates
   * @param entityId
   * @param [options] The optional parameters
   * @returns Promise<Models.ListTrustedCertificatesResponse>
   */
  listTrustedCertificates(entityId: string, options?: Models.AzureOpcVaultClientListTrustedCertificatesOptionalParams): Promise<Models.ListTrustedCertificatesResponse>;
  /**
   * @param entityId
   * @param callback The callback
   */
  listTrustedCertificates(entityId: string, callback: msRest.ServiceCallback<Models.X509CertificateListApiModel>): void;
  /**
   * @param entityId
   * @param options The optional parameters
   * @param callback The callback
   */
  listTrustedCertificates(entityId: string, options: Models.AzureOpcVaultClientListTrustedCertificatesOptionalParams, callback: msRest.ServiceCallback<Models.X509CertificateListApiModel>): void;
  listTrustedCertificates(entityId: string, options?: Models.AzureOpcVaultClientListTrustedCertificatesOptionalParams | msRest.ServiceCallback<Models.X509CertificateListApiModel>, callback?: msRest.ServiceCallback<Models.X509CertificateListApiModel>): Promise<Models.ListTrustedCertificatesResponse> {
    return this.sendOperationRequest(
      {
        entityId,
        options
      },
      listTrustedCertificatesOperationSpec,
      callback) as Promise<Models.ListTrustedCertificatesResponse>;
  }

  /**
   * Removes trust between two entities.  The entities are identifiers
   * of application, groups, or endpoints.
   * @summary Remove a trust relationship
   * @param entityId The entity identifier, e.g. group, etc.
   * @param untrustedEntityId The trusted entity identifier
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  removeTrustRelationship(entityId: string, untrustedEntityId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param entityId The entity identifier, e.g. group, etc.
   * @param untrustedEntityId The trusted entity identifier
   * @param callback The callback
   */
  removeTrustRelationship(entityId: string, untrustedEntityId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param entityId The entity identifier, e.g. group, etc.
   * @param untrustedEntityId The trusted entity identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  removeTrustRelationship(entityId: string, untrustedEntityId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  removeTrustRelationship(entityId: string, untrustedEntityId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        entityId,
        untrustedEntityId,
        options
      },
      removeTrustRelationshipOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getIssuerCertificateChainOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/certificates/{serialNumber}",
  urlParameters: [
    Parameters.serialNumber
  ],
  responses: {
    200: {
      bodyMapper: Mappers.X509CertificateChainApiModel
    },
    default: {}
  },
  serializer
};

const getIssuerCrlChainOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/certificates/{serialNumber}/crl",
  urlParameters: [
    Parameters.serialNumber
  ],
  responses: {
    200: {
      bodyMapper: Mappers.X509CrlChainApiModel
    },
    default: {}
  },
  serializer
};

const getIssuerCertificateChain1OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/issuer/{serialNumber}",
  urlParameters: [
    Parameters.serialNumber
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const getIssuerCrlChain1OperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/crl/{serialNumber}",
  urlParameters: [
    Parameters.serialNumber
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const startSigningRequestOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "v2/requests/sign",
  requestBody: {
    parameterPath: "signingRequest",
    mapper: {
      ...Mappers.StartSigningRequestApiModel,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.StartSigningRequestResponseApiModel
    },
    default: {}
  },
  serializer
};

const finishSigningRequestOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/requests/sign/{requestId}",
  urlParameters: [
    Parameters.requestId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FinishSigningRequestResponseApiModel
    },
    default: {}
  },
  serializer
};

const startNewKeyPairRequestOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "v2/requests/keypair",
  requestBody: {
    parameterPath: "newKeyPairRequest",
    mapper: {
      ...Mappers.StartNewKeyPairRequestApiModel,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.StartNewKeyPairRequestResponseApiModel
    },
    default: {}
  },
  serializer
};

const finishNewKeyPairRequestOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/requests/keypair/{requestId}",
  urlParameters: [
    Parameters.requestId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FinishNewKeyPairRequestResponseApiModel
    },
    default: {}
  },
  serializer
};

const approveRequestOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/requests/{requestId}/approve",
  urlParameters: [
    Parameters.requestId
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const rejectRequestOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/requests/{requestId}/reject",
  urlParameters: [
    Parameters.requestId
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const acceptRequestOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/requests/{requestId}/accept",
  urlParameters: [
    Parameters.requestId
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const getRequestOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/requests/{requestId}",
  urlParameters: [
    Parameters.requestId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CertificateRequestRecordApiModel
    },
    default: {}
  },
  serializer
};

const deleteRequestOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v2/requests/{requestId}",
  urlParameters: [
    Parameters.requestId
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const queryRequestsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/requests/query",
  queryParameters: [
    Parameters.pageSize
  ],
  requestBody: {
    parameterPath: [
      "options",
      "query"
    ],
    mapper: Mappers.CertificateRequestQueryRequestApiModel
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.CertificateRequestQueryResponseApiModel
    },
    default: {}
  },
  serializer
};

const listRequestsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/requests",
  queryParameters: [
    Parameters.nextPageLink,
    Parameters.pageSize
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CertificateRequestQueryResponseApiModel
    },
    default: {}
  },
  serializer
};

const getStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/status",
  responses: {
    200: {
      bodyMapper: Mappers.StatusResponseApiModel
    },
    default: {}
  },
  serializer
};

const listGroupsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/groups",
  queryParameters: [
    Parameters.nextPageLink,
    Parameters.pageSize
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TrustGroupRegistrationListApiModel
    },
    default: {}
  },
  serializer
};

const createGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "v2/groups",
  requestBody: {
    parameterPath: "request",
    mapper: {
      ...Mappers.TrustGroupRegistrationRequestApiModel,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.TrustGroupRegistrationResponseApiModel
    },
    default: {}
  },
  serializer
};

const getGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/groups/{groupId}",
  urlParameters: [
    Parameters.groupId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TrustGroupRegistrationApiModel
    },
    default: {}
  },
  serializer
};

const updateGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/groups/{groupId}",
  urlParameters: [
    Parameters.groupId
  ],
  requestBody: {
    parameterPath: "request",
    mapper: {
      ...Mappers.TrustGroupUpdateRequestApiModel,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const deleteGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v2/groups/{groupId}",
  urlParameters: [
    Parameters.groupId
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const createRootOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "v2/groups/root",
  requestBody: {
    parameterPath: "request",
    mapper: {
      ...Mappers.TrustGroupRootCreateRequestApiModel,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.TrustGroupRegistrationResponseApiModel
    },
    default: {}
  },
  serializer
};

const renewIssuerCertificateOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/groups/{groupId}/renew",
  urlParameters: [
    Parameters.groupId
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const addTrustRelationshipOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "v2/trustlists/{entityId}/{trustedEntityId}",
  urlParameters: [
    Parameters.entityId,
    Parameters.trustedEntityId
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const listTrustedCertificatesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/trustlists/{entityId}",
  urlParameters: [
    Parameters.entityId
  ],
  queryParameters: [
    Parameters.nextPageLink,
    Parameters.pageSize
  ],
  responses: {
    200: {
      bodyMapper: Mappers.X509CertificateListApiModel
    },
    default: {}
  },
  serializer
};

const removeTrustRelationshipOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v2/trustlists/{entityId}/{untrustedEntityId}",
  urlParameters: [
    Parameters.entityId,
    Parameters.untrustedEntityId
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

export {
  AzureOpcVaultClient,
  AzureOpcVaultClientContext,
  Models as AzureOpcVaultModels,
  Mappers as AzureOpcVaultMappers
};
