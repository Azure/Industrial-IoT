/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { AzureOpcRegistryClientContext } from "./azureOpcRegistryClientContext";

class AzureOpcRegistryClient extends AzureOpcRegistryClientContext {
  /**
   * Initializes a new instance of the AzureOpcRegistryClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param [options] The parameter options
   */
  constructor(credentials: msRest.ServiceClientCredentials, options?: Models.AzureOpcRegistryClientOptions) {
    super(credentials, options);
  }

  /**
   * Get all registered applications in paged form.
   * The returned model can contain a continuation token if more results are
   * available.
   * Call this operation again using the token to retrieve more results.
   * @summary Get list of applications
   * @param [options] The optional parameters
   * @returns Promise<Models.GetListOfApplicationsResponse>
   */
  getListOfApplications(options?: Models.AzureOpcRegistryClientGetListOfApplicationsOptionalParams): Promise<Models.GetListOfApplicationsResponse>;
  /**
   * @param callback The callback
   */
  getListOfApplications(callback: msRest.ServiceCallback<Models.ApplicationInfoListApiModel>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getListOfApplications(options: Models.AzureOpcRegistryClientGetListOfApplicationsOptionalParams, callback: msRest.ServiceCallback<Models.ApplicationInfoListApiModel>): void;
  getListOfApplications(options?: Models.AzureOpcRegistryClientGetListOfApplicationsOptionalParams | msRest.ServiceCallback<Models.ApplicationInfoListApiModel>, callback?: msRest.ServiceCallback<Models.ApplicationInfoListApiModel>): Promise<Models.GetListOfApplicationsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getListOfApplicationsOperationSpec,
      callback) as Promise<Models.GetListOfApplicationsResponse>;
  }

  /**
   * The application is registered using the provided information, but it
   * is not associated with a supervisor.  This is useful for when you need
   * to register clients or you want to register a server that is located
   * in a network not reachable through a Twin module.
   * @summary Create new application
   * @param request Application registration request
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateApplicationResponse>
   */
  createApplication(request: Models.ApplicationRegistrationRequestApiModel, options?: msRest.RequestOptionsBase): Promise<Models.CreateApplicationResponse>;
  /**
   * @param request Application registration request
   * @param callback The callback
   */
  createApplication(request: Models.ApplicationRegistrationRequestApiModel, callback: msRest.ServiceCallback<Models.ApplicationRegistrationResponseApiModel>): void;
  /**
   * @param request Application registration request
   * @param options The optional parameters
   * @param callback The callback
   */
  createApplication(request: Models.ApplicationRegistrationRequestApiModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ApplicationRegistrationResponseApiModel>): void;
  createApplication(request: Models.ApplicationRegistrationRequestApiModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ApplicationRegistrationResponseApiModel>, callback?: msRest.ServiceCallback<Models.ApplicationRegistrationResponseApiModel>): Promise<Models.CreateApplicationResponse> {
    return this.sendOperationRequest(
      {
        request,
        options
      },
      createApplicationOperationSpec,
      callback) as Promise<Models.CreateApplicationResponse>;
  }

  /**
   * Registers a server solely using a discovery url. Requires that
   * the onboarding agent service is running and the server can be
   * located by a supervisor in its network using the discovery url.
   * @summary Register new server
   * @param request Server registration request
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  registerServer(request: Models.ServerRegistrationRequestApiModel, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param request Server registration request
   * @param callback The callback
   */
  registerServer(request: Models.ServerRegistrationRequestApiModel, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param request Server registration request
   * @param options The optional parameters
   * @param callback The callback
   */
  registerServer(request: Models.ServerRegistrationRequestApiModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  registerServer(request: Models.ServerRegistrationRequestApiModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        request,
        options
      },
      registerServerOperationSpec,
      callback);
  }

  /**
   * Purges all applications that have not been seen for a specified amount of time.
   * @summary Purge applications
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteAllDisabledApplications(options?: Models.AzureOpcRegistryClientDeleteAllDisabledApplicationsOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param callback The callback
   */
  deleteAllDisabledApplications(callback: msRest.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAllDisabledApplications(options: Models.AzureOpcRegistryClientDeleteAllDisabledApplicationsOptionalParams, callback: msRest.ServiceCallback<void>): void;
  deleteAllDisabledApplications(options?: Models.AzureOpcRegistryClientDeleteAllDisabledApplicationsOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      deleteAllDisabledApplicationsOperationSpec,
      callback);
  }

  /**
   * A manager can disable an application.
   * @summary Disable an enabled application.
   * @param applicationId The application id
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  disableApplication(applicationId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param applicationId The application id
   * @param callback The callback
   */
  disableApplication(applicationId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param applicationId The application id
   * @param options The optional parameters
   * @param callback The callback
   */
  disableApplication(applicationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  disableApplication(applicationId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        applicationId,
        options
      },
      disableApplicationOperationSpec,
      callback);
  }

  /**
   * A manager can enable an application.
   * @summary Re-enable a disabled application.
   * @param applicationId The application id
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  enableApplication(applicationId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param applicationId The application id
   * @param callback The callback
   */
  enableApplication(applicationId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param applicationId The application id
   * @param options The optional parameters
   * @param callback The callback
   */
  enableApplication(applicationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  enableApplication(applicationId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        applicationId,
        options
      },
      enableApplicationOperationSpec,
      callback);
  }

  /**
   * Registers servers by running a discovery scan in a supervisor's
   * network. Requires that the onboarding agent service is running.
   * @summary Discover servers
   * @param request Discovery request
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  discoverServer(request: Models.DiscoveryRequestApiModel, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param request Discovery request
   * @param callback The callback
   */
  discoverServer(request: Models.DiscoveryRequestApiModel, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param request Discovery request
   * @param options The optional parameters
   * @param callback The callback
   */
  discoverServer(request: Models.DiscoveryRequestApiModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  discoverServer(request: Models.DiscoveryRequestApiModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        request,
        options
      },
      discoverServerOperationSpec,
      callback);
  }

  /**
   * @summary Get application registration
   * @param applicationId Application id for the server
   * @param [options] The optional parameters
   * @returns Promise<Models.GetApplicationRegistrationResponse>
   */
  getApplicationRegistration(applicationId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetApplicationRegistrationResponse>;
  /**
   * @param applicationId Application id for the server
   * @param callback The callback
   */
  getApplicationRegistration(applicationId: string, callback: msRest.ServiceCallback<Models.ApplicationRegistrationApiModel>): void;
  /**
   * @param applicationId Application id for the server
   * @param options The optional parameters
   * @param callback The callback
   */
  getApplicationRegistration(applicationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ApplicationRegistrationApiModel>): void;
  getApplicationRegistration(applicationId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ApplicationRegistrationApiModel>, callback?: msRest.ServiceCallback<Models.ApplicationRegistrationApiModel>): Promise<Models.GetApplicationRegistrationResponse> {
    return this.sendOperationRequest(
      {
        applicationId,
        options
      },
      getApplicationRegistrationOperationSpec,
      callback) as Promise<Models.GetApplicationRegistrationResponse>;
  }

  /**
   * Unregisters and deletes application and all its associated endpoints.
   * @summary Unregister application
   * @param applicationId The identifier of the application
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteApplication(applicationId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param applicationId The identifier of the application
   * @param callback The callback
   */
  deleteApplication(applicationId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param applicationId The identifier of the application
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteApplication(applicationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteApplication(applicationId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        applicationId,
        options
      },
      deleteApplicationOperationSpec,
      callback);
  }

  /**
   * The application information is updated with new properties.  Note that
   * this information might be overridden if the application is re-discovered
   * during a discovery run (recurring or one-time).
   * @summary Update application registration
   * @param applicationId The identifier of the application
   * @param request Application update request
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updateApplicationRegistration(applicationId: string, request: Models.ApplicationRegistrationUpdateApiModel, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param applicationId The identifier of the application
   * @param request Application update request
   * @param callback The callback
   */
  updateApplicationRegistration(applicationId: string, request: Models.ApplicationRegistrationUpdateApiModel, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param applicationId The identifier of the application
   * @param request Application update request
   * @param options The optional parameters
   * @param callback The callback
   */
  updateApplicationRegistration(applicationId: string, request: Models.ApplicationRegistrationUpdateApiModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  updateApplicationRegistration(applicationId: string, request: Models.ApplicationRegistrationUpdateApiModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        applicationId,
        request,
        options
      },
      updateApplicationRegistrationOperationSpec,
      callback);
  }

  /**
   * List all sites applications are registered in.
   * @summary Get list of sites
   * @param [options] The optional parameters
   * @returns Promise<Models.GetListOfSitesResponse>
   */
  getListOfSites(options?: Models.AzureOpcRegistryClientGetListOfSitesOptionalParams): Promise<Models.GetListOfSitesResponse>;
  /**
   * @param callback The callback
   */
  getListOfSites(callback: msRest.ServiceCallback<Models.ApplicationSiteListApiModel>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getListOfSites(options: Models.AzureOpcRegistryClientGetListOfSitesOptionalParams, callback: msRest.ServiceCallback<Models.ApplicationSiteListApiModel>): void;
  getListOfSites(options?: Models.AzureOpcRegistryClientGetListOfSitesOptionalParams | msRest.ServiceCallback<Models.ApplicationSiteListApiModel>, callback?: msRest.ServiceCallback<Models.ApplicationSiteListApiModel>): Promise<Models.GetListOfSitesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getListOfSitesOperationSpec,
      callback) as Promise<Models.GetListOfSitesResponse>;
  }

  /**
   * Get a list of applications filtered using the specified query parameters.
   * The returned model can contain a continuation token if more results are
   * available.
   * Call the GetListOfApplications operation using the token to retrieve
   * more results.
   * @summary Get filtered list of applications
   * @param query Applications Query model
   * @param [options] The optional parameters
   * @returns Promise<Models.GetFilteredListOfApplicationsResponse>
   */
  getFilteredListOfApplications(query: Models.ApplicationRegistrationQueryApiModel, options?: Models.AzureOpcRegistryClientGetFilteredListOfApplicationsOptionalParams): Promise<Models.GetFilteredListOfApplicationsResponse>;
  /**
   * @param query Applications Query model
   * @param callback The callback
   */
  getFilteredListOfApplications(query: Models.ApplicationRegistrationQueryApiModel, callback: msRest.ServiceCallback<Models.ApplicationInfoListApiModel>): void;
  /**
   * @param query Applications Query model
   * @param options The optional parameters
   * @param callback The callback
   */
  getFilteredListOfApplications(query: Models.ApplicationRegistrationQueryApiModel, options: Models.AzureOpcRegistryClientGetFilteredListOfApplicationsOptionalParams, callback: msRest.ServiceCallback<Models.ApplicationInfoListApiModel>): void;
  getFilteredListOfApplications(query: Models.ApplicationRegistrationQueryApiModel, options?: Models.AzureOpcRegistryClientGetFilteredListOfApplicationsOptionalParams | msRest.ServiceCallback<Models.ApplicationInfoListApiModel>, callback?: msRest.ServiceCallback<Models.ApplicationInfoListApiModel>): Promise<Models.GetFilteredListOfApplicationsResponse> {
    return this.sendOperationRequest(
      {
        query,
        options
      },
      getFilteredListOfApplicationsOperationSpec,
      callback) as Promise<Models.GetFilteredListOfApplicationsResponse>;
  }

  /**
   * List applications that match a query model.
   * The returned model can contain a continuation token if more results are
   * available.
   * Call the GetListOfApplications operation using the token to retrieve
   * more results.
   * @summary Query applications
   * @param query Application query
   * @param [options] The optional parameters
   * @returns Promise<Models.QueryApplicationsResponse>
   */
  queryApplications(query: Models.ApplicationRegistrationQueryApiModel, options?: Models.AzureOpcRegistryClientQueryApplicationsOptionalParams): Promise<Models.QueryApplicationsResponse>;
  /**
   * @param query Application query
   * @param callback The callback
   */
  queryApplications(query: Models.ApplicationRegistrationQueryApiModel, callback: msRest.ServiceCallback<Models.ApplicationInfoListApiModel>): void;
  /**
   * @param query Application query
   * @param options The optional parameters
   * @param callback The callback
   */
  queryApplications(query: Models.ApplicationRegistrationQueryApiModel, options: Models.AzureOpcRegistryClientQueryApplicationsOptionalParams, callback: msRest.ServiceCallback<Models.ApplicationInfoListApiModel>): void;
  queryApplications(query: Models.ApplicationRegistrationQueryApiModel, options?: Models.AzureOpcRegistryClientQueryApplicationsOptionalParams | msRest.ServiceCallback<Models.ApplicationInfoListApiModel>, callback?: msRest.ServiceCallback<Models.ApplicationInfoListApiModel>): Promise<Models.QueryApplicationsResponse> {
    return this.sendOperationRequest(
      {
        query,
        options
      },
      queryApplicationsOperationSpec,
      callback) as Promise<Models.QueryApplicationsResponse>;
  }

  /**
   * A query model which supports the OPC UA Global Discovery Server query.
   * @summary Query applications by id.
   * @param [options] The optional parameters
   * @returns Promise<Models.QueryApplicationsByIdResponse>
   */
  queryApplicationsById(options?: Models.AzureOpcRegistryClientQueryApplicationsByIdOptionalParams): Promise<Models.QueryApplicationsByIdResponse>;
  /**
   * @param callback The callback
   */
  queryApplicationsById(callback: msRest.ServiceCallback<Models.ApplicationRecordListApiModel>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  queryApplicationsById(options: Models.AzureOpcRegistryClientQueryApplicationsByIdOptionalParams, callback: msRest.ServiceCallback<Models.ApplicationRecordListApiModel>): void;
  queryApplicationsById(options?: Models.AzureOpcRegistryClientQueryApplicationsByIdOptionalParams | msRest.ServiceCallback<Models.ApplicationRecordListApiModel>, callback?: msRest.ServiceCallback<Models.ApplicationRecordListApiModel>): Promise<Models.QueryApplicationsByIdResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      queryApplicationsByIdOperationSpec,
      callback) as Promise<Models.QueryApplicationsByIdResponse>;
  }

  /**
   * Activates an endpoint for subsequent use in twin service.
   * All endpoints must be activated using this API or through a
   * activation filter during application registration or discovery.
   * @summary Activate endpoint
   * @param endpointId endpoint identifier
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  activateEndpoint(endpointId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param endpointId endpoint identifier
   * @param callback The callback
   */
  activateEndpoint(endpointId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param endpointId endpoint identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  activateEndpoint(endpointId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  activateEndpoint(endpointId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        endpointId,
        options
      },
      activateEndpointOperationSpec,
      callback);
  }

  /**
   * Gets information about an endpoint.
   * @summary Get endpoint information
   * @param endpointId endpoint identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.GetEndpointResponse>
   */
  getEndpoint(endpointId: string, options?: Models.AzureOpcRegistryClientGetEndpointOptionalParams): Promise<Models.GetEndpointResponse>;
  /**
   * @param endpointId endpoint identifier
   * @param callback The callback
   */
  getEndpoint(endpointId: string, callback: msRest.ServiceCallback<Models.EndpointInfoApiModel>): void;
  /**
   * @param endpointId endpoint identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  getEndpoint(endpointId: string, options: Models.AzureOpcRegistryClientGetEndpointOptionalParams, callback: msRest.ServiceCallback<Models.EndpointInfoApiModel>): void;
  getEndpoint(endpointId: string, options?: Models.AzureOpcRegistryClientGetEndpointOptionalParams | msRest.ServiceCallback<Models.EndpointInfoApiModel>, callback?: msRest.ServiceCallback<Models.EndpointInfoApiModel>): Promise<Models.GetEndpointResponse> {
    return this.sendOperationRequest(
      {
        endpointId,
        options
      },
      getEndpointOperationSpec,
      callback) as Promise<Models.GetEndpointResponse>;
  }

  /**
   * @summary Update endpoint information
   * @param endpointId endpoint identifier
   * @param request Endpoint update request
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updateEndpoint(endpointId: string, request: Models.EndpointRegistrationUpdateApiModel, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param endpointId endpoint identifier
   * @param request Endpoint update request
   * @param callback The callback
   */
  updateEndpoint(endpointId: string, request: Models.EndpointRegistrationUpdateApiModel, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param endpointId endpoint identifier
   * @param request Endpoint update request
   * @param options The optional parameters
   * @param callback The callback
   */
  updateEndpoint(endpointId: string, request: Models.EndpointRegistrationUpdateApiModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  updateEndpoint(endpointId: string, request: Models.EndpointRegistrationUpdateApiModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        endpointId,
        request,
        options
      },
      updateEndpointOperationSpec,
      callback);
  }

  /**
   * Get all registered endpoints in paged form.
   * The returned model can contain a continuation token if more results are
   * available.
   * Call this operation again using the token to retrieve more results.
   * @summary Get list of endpoints
   * @param [options] The optional parameters
   * @returns Promise<Models.GetListOfEndpointsResponse>
   */
  getListOfEndpoints(options?: Models.AzureOpcRegistryClientGetListOfEndpointsOptionalParams): Promise<Models.GetListOfEndpointsResponse>;
  /**
   * @param callback The callback
   */
  getListOfEndpoints(callback: msRest.ServiceCallback<Models.EndpointInfoListApiModel>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getListOfEndpoints(options: Models.AzureOpcRegistryClientGetListOfEndpointsOptionalParams, callback: msRest.ServiceCallback<Models.EndpointInfoListApiModel>): void;
  getListOfEndpoints(options?: Models.AzureOpcRegistryClientGetListOfEndpointsOptionalParams | msRest.ServiceCallback<Models.EndpointInfoListApiModel>, callback?: msRest.ServiceCallback<Models.EndpointInfoListApiModel>): Promise<Models.GetListOfEndpointsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getListOfEndpointsOperationSpec,
      callback) as Promise<Models.GetListOfEndpointsResponse>;
  }

  /**
   * Get a list of endpoints filtered using the specified query parameters.
   * The returned model can contain a continuation token if more results are
   * available.
   * Call the GetListOfEndpoints operation using the token to retrieve
   * more results.
   * @summary Get filtered list of endpoints
   * @param [options] The optional parameters
   * @returns Promise<Models.GetFilteredListOfEndpointsResponse>
   */
  getFilteredListOfEndpoints(options?: Models.AzureOpcRegistryClientGetFilteredListOfEndpointsOptionalParams): Promise<Models.GetFilteredListOfEndpointsResponse>;
  /**
   * @param callback The callback
   */
  getFilteredListOfEndpoints(callback: msRest.ServiceCallback<Models.EndpointInfoListApiModel>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getFilteredListOfEndpoints(options: Models.AzureOpcRegistryClientGetFilteredListOfEndpointsOptionalParams, callback: msRest.ServiceCallback<Models.EndpointInfoListApiModel>): void;
  getFilteredListOfEndpoints(options?: Models.AzureOpcRegistryClientGetFilteredListOfEndpointsOptionalParams | msRest.ServiceCallback<Models.EndpointInfoListApiModel>, callback?: msRest.ServiceCallback<Models.EndpointInfoListApiModel>): Promise<Models.GetFilteredListOfEndpointsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getFilteredListOfEndpointsOperationSpec,
      callback) as Promise<Models.GetFilteredListOfEndpointsResponse>;
  }

  /**
   * Return endpoints that match the specified query.
   * The returned model can contain a continuation token if more results are
   * available.
   * Call the GetListOfEndpoints operation using the token to retrieve
   * more results.
   * @summary Query endpoints
   * @param query Query to match
   * @param [options] The optional parameters
   * @returns Promise<Models.QueryEndpointsResponse>
   */
  queryEndpoints(query: Models.EndpointRegistrationQueryApiModel, options?: Models.AzureOpcRegistryClientQueryEndpointsOptionalParams): Promise<Models.QueryEndpointsResponse>;
  /**
   * @param query Query to match
   * @param callback The callback
   */
  queryEndpoints(query: Models.EndpointRegistrationQueryApiModel, callback: msRest.ServiceCallback<Models.EndpointInfoListApiModel>): void;
  /**
   * @param query Query to match
   * @param options The optional parameters
   * @param callback The callback
   */
  queryEndpoints(query: Models.EndpointRegistrationQueryApiModel, options: Models.AzureOpcRegistryClientQueryEndpointsOptionalParams, callback: msRest.ServiceCallback<Models.EndpointInfoListApiModel>): void;
  queryEndpoints(query: Models.EndpointRegistrationQueryApiModel, options?: Models.AzureOpcRegistryClientQueryEndpointsOptionalParams | msRest.ServiceCallback<Models.EndpointInfoListApiModel>, callback?: msRest.ServiceCallback<Models.EndpointInfoListApiModel>): Promise<Models.QueryEndpointsResponse> {
    return this.sendOperationRequest(
      {
        query,
        options
      },
      queryEndpointsOperationSpec,
      callback) as Promise<Models.QueryEndpointsResponse>;
  }

  /**
   * Deactivates the endpoint and disable access through twin service.
   * @summary Deactivate endpoint
   * @param endpointId endpoint identifier
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deactivateEndpoint(endpointId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param endpointId endpoint identifier
   * @param callback The callback
   */
  deactivateEndpoint(endpointId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param endpointId endpoint identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  deactivateEndpoint(endpointId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deactivateEndpoint(endpointId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        endpointId,
        options
      },
      deactivateEndpointOperationSpec,
      callback);
  }

  /**
   * @summary Return the service status in the form of the service status
   * api model.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetStatusResponse>
   */
  getStatus(options?: msRest.RequestOptionsBase): Promise<Models.GetStatusResponse>;
  /**
   * @param callback The callback
   */
  getStatus(callback: msRest.ServiceCallback<Models.StatusResponseApiModel>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getStatus(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StatusResponseApiModel>): void;
  getStatus(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StatusResponseApiModel>, callback?: msRest.ServiceCallback<Models.StatusResponseApiModel>): Promise<Models.GetStatusResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getStatusOperationSpec,
      callback) as Promise<Models.GetStatusResponse>;
  }

  /**
   * Returns a supervisor's registration and connectivity information.
   * A supervisor id corresponds to the twin modules module identity.
   * @summary Get supervisor registration information
   * @param supervisorId Supervisor identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSupervisorResponse>
   */
  getSupervisor(supervisorId: string, options?: Models.AzureOpcRegistryClientGetSupervisorOptionalParams): Promise<Models.GetSupervisorResponse>;
  /**
   * @param supervisorId Supervisor identifier
   * @param callback The callback
   */
  getSupervisor(supervisorId: string, callback: msRest.ServiceCallback<Models.SupervisorApiModel>): void;
  /**
   * @param supervisorId Supervisor identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  getSupervisor(supervisorId: string, options: Models.AzureOpcRegistryClientGetSupervisorOptionalParams, callback: msRest.ServiceCallback<Models.SupervisorApiModel>): void;
  getSupervisor(supervisorId: string, options?: Models.AzureOpcRegistryClientGetSupervisorOptionalParams | msRest.ServiceCallback<Models.SupervisorApiModel>, callback?: msRest.ServiceCallback<Models.SupervisorApiModel>): Promise<Models.GetSupervisorResponse> {
    return this.sendOperationRequest(
      {
        supervisorId,
        options
      },
      getSupervisorOperationSpec,
      callback) as Promise<Models.GetSupervisorResponse>;
  }

  /**
   * Allows a caller to configure recurring discovery runs on the twin module
   * identified by the supervisor id or update site information.
   * @summary Update supervisor information
   * @param supervisorId supervisor identifier
   * @param request Patch request
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updateSupervisor(supervisorId: string, request: Models.SupervisorUpdateApiModel, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param supervisorId supervisor identifier
   * @param request Patch request
   * @param callback The callback
   */
  updateSupervisor(supervisorId: string, request: Models.SupervisorUpdateApiModel, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param supervisorId supervisor identifier
   * @param request Patch request
   * @param options The optional parameters
   * @param callback The callback
   */
  updateSupervisor(supervisorId: string, request: Models.SupervisorUpdateApiModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  updateSupervisor(supervisorId: string, request: Models.SupervisorUpdateApiModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        supervisorId,
        request,
        options
      },
      updateSupervisorOperationSpec,
      callback);
  }

  /**
   * Allows a caller to get runtime status for a supervisor.
   * @summary Get runtime status of supervisor
   * @param supervisorId supervisor identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSupervisorStatusResponse>
   */
  getSupervisorStatus(supervisorId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetSupervisorStatusResponse>;
  /**
   * @param supervisorId supervisor identifier
   * @param callback The callback
   */
  getSupervisorStatus(supervisorId: string, callback: msRest.ServiceCallback<Models.SupervisorStatusApiModel>): void;
  /**
   * @param supervisorId supervisor identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  getSupervisorStatus(supervisorId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SupervisorStatusApiModel>): void;
  getSupervisorStatus(supervisorId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SupervisorStatusApiModel>, callback?: msRest.ServiceCallback<Models.SupervisorStatusApiModel>): Promise<Models.GetSupervisorStatusResponse> {
    return this.sendOperationRequest(
      {
        supervisorId,
        options
      },
      getSupervisorStatusOperationSpec,
      callback) as Promise<Models.GetSupervisorStatusResponse>;
  }

  /**
   * Allows a caller to reset the twin module using its supervisor
   * identity identifier.
   * @summary Reset supervisor
   * @param supervisorId supervisor identifier
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  resetSupervisor(supervisorId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param supervisorId supervisor identifier
   * @param callback The callback
   */
  resetSupervisor(supervisorId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param supervisorId supervisor identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  resetSupervisor(supervisorId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  resetSupervisor(supervisorId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        supervisorId,
        options
      },
      resetSupervisorOperationSpec,
      callback);
  }

  /**
   * Get all registered supervisors and therefore twin modules in paged form.
   * The returned model can contain a continuation token if more results are
   * available.
   * Call this operation again using the token to retrieve more results.
   * @summary Get list of supervisors
   * @param [options] The optional parameters
   * @returns Promise<Models.GetListOfSupervisorsResponse>
   */
  getListOfSupervisors(options?: Models.AzureOpcRegistryClientGetListOfSupervisorsOptionalParams): Promise<Models.GetListOfSupervisorsResponse>;
  /**
   * @param callback The callback
   */
  getListOfSupervisors(callback: msRest.ServiceCallback<Models.SupervisorListApiModel>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getListOfSupervisors(options: Models.AzureOpcRegistryClientGetListOfSupervisorsOptionalParams, callback: msRest.ServiceCallback<Models.SupervisorListApiModel>): void;
  getListOfSupervisors(options?: Models.AzureOpcRegistryClientGetListOfSupervisorsOptionalParams | msRest.ServiceCallback<Models.SupervisorListApiModel>, callback?: msRest.ServiceCallback<Models.SupervisorListApiModel>): Promise<Models.GetListOfSupervisorsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getListOfSupervisorsOperationSpec,
      callback) as Promise<Models.GetListOfSupervisorsResponse>;
  }

  /**
   * Get a list of supervisors filtered using the specified query parameters.
   * The returned model can contain a continuation token if more results are
   * available.
   * Call the GetListOfSupervisors operation using the token to retrieve
   * more results.
   * @summary Get filtered list of supervisors
   * @param [options] The optional parameters
   * @returns Promise<Models.GetFilteredListOfSupervisorsResponse>
   */
  getFilteredListOfSupervisors(options?: Models.AzureOpcRegistryClientGetFilteredListOfSupervisorsOptionalParams): Promise<Models.GetFilteredListOfSupervisorsResponse>;
  /**
   * @param callback The callback
   */
  getFilteredListOfSupervisors(callback: msRest.ServiceCallback<Models.SupervisorListApiModel>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getFilteredListOfSupervisors(options: Models.AzureOpcRegistryClientGetFilteredListOfSupervisorsOptionalParams, callback: msRest.ServiceCallback<Models.SupervisorListApiModel>): void;
  getFilteredListOfSupervisors(options?: Models.AzureOpcRegistryClientGetFilteredListOfSupervisorsOptionalParams | msRest.ServiceCallback<Models.SupervisorListApiModel>, callback?: msRest.ServiceCallback<Models.SupervisorListApiModel>): Promise<Models.GetFilteredListOfSupervisorsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getFilteredListOfSupervisorsOperationSpec,
      callback) as Promise<Models.GetFilteredListOfSupervisorsResponse>;
  }

  /**
   * Get all supervisors that match a specified query.
   * The returned model can contain a continuation token if more results are
   * available.
   * Call the GetListOfSupervisors operation using the token to retrieve
   * more results.
   * @summary Query supervisors
   * @param query Supervisors query model
   * @param [options] The optional parameters
   * @returns Promise<Models.QuerySupervisorsResponse>
   */
  querySupervisors(query: Models.SupervisorQueryApiModel, options?: Models.AzureOpcRegistryClientQuerySupervisorsOptionalParams): Promise<Models.QuerySupervisorsResponse>;
  /**
   * @param query Supervisors query model
   * @param callback The callback
   */
  querySupervisors(query: Models.SupervisorQueryApiModel, callback: msRest.ServiceCallback<Models.SupervisorListApiModel>): void;
  /**
   * @param query Supervisors query model
   * @param options The optional parameters
   * @param callback The callback
   */
  querySupervisors(query: Models.SupervisorQueryApiModel, options: Models.AzureOpcRegistryClientQuerySupervisorsOptionalParams, callback: msRest.ServiceCallback<Models.SupervisorListApiModel>): void;
  querySupervisors(query: Models.SupervisorQueryApiModel, options?: Models.AzureOpcRegistryClientQuerySupervisorsOptionalParams | msRest.ServiceCallback<Models.SupervisorListApiModel>, callback?: msRest.ServiceCallback<Models.SupervisorListApiModel>): Promise<Models.QuerySupervisorsResponse> {
    return this.sendOperationRequest(
      {
        query,
        options
      },
      querySupervisorsOperationSpec,
      callback) as Promise<Models.QuerySupervisorsResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getListOfApplicationsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/applications",
  queryParameters: [
    Parameters.continuationToken,
    Parameters.pageSize
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationInfoListApiModel
    },
    default: {}
  },
  serializer
};

const createApplicationOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "v2/applications",
  requestBody: {
    parameterPath: "request",
    mapper: {
      ...Mappers.ApplicationRegistrationRequestApiModel,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationRegistrationResponseApiModel
    },
    default: {}
  },
  serializer
};

const registerServerOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/applications",
  requestBody: {
    parameterPath: "request",
    mapper: {
      ...Mappers.ServerRegistrationRequestApiModel,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const deleteAllDisabledApplicationsOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v2/applications",
  queryParameters: [
    Parameters.notSeenFor
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const disableApplicationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/applications/{applicationId}/disable",
  urlParameters: [
    Parameters.applicationId
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const enableApplicationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/applications/{applicationId}/enable",
  urlParameters: [
    Parameters.applicationId
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const discoverServerOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/applications/discover",
  requestBody: {
    parameterPath: "request",
    mapper: {
      ...Mappers.DiscoveryRequestApiModel,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const getApplicationRegistrationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/applications/{applicationId}",
  urlParameters: [
    Parameters.applicationId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationRegistrationApiModel
    },
    default: {}
  },
  serializer
};

const deleteApplicationOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v2/applications/{applicationId}",
  urlParameters: [
    Parameters.applicationId
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const updateApplicationRegistrationOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v2/applications/{applicationId}",
  urlParameters: [
    Parameters.applicationId
  ],
  requestBody: {
    parameterPath: "request",
    mapper: {
      ...Mappers.ApplicationRegistrationUpdateApiModel,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const getListOfSitesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/applications/sites",
  queryParameters: [
    Parameters.continuationToken,
    Parameters.pageSize
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationSiteListApiModel
    },
    default: {}
  },
  serializer
};

const getFilteredListOfApplicationsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/applications/query",
  queryParameters: [
    Parameters.pageSize
  ],
  requestBody: {
    parameterPath: "query",
    mapper: {
      ...Mappers.ApplicationRegistrationQueryApiModel,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationInfoListApiModel
    },
    default: {}
  },
  serializer
};

const queryApplicationsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/applications/query",
  queryParameters: [
    Parameters.pageSize
  ],
  requestBody: {
    parameterPath: "query",
    mapper: {
      ...Mappers.ApplicationRegistrationQueryApiModel,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationInfoListApiModel
    },
    default: {}
  },
  serializer
};

const queryApplicationsByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/applications/querybyid",
  requestBody: {
    parameterPath: [
      "options",
      "query"
    ],
    mapper: Mappers.ApplicationRecordQueryApiModel
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationRecordListApiModel
    },
    default: {}
  },
  serializer
};

const activateEndpointOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/endpoints/{endpointId}/activate",
  urlParameters: [
    Parameters.endpointId
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const getEndpointOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/endpoints/{endpointId}",
  urlParameters: [
    Parameters.endpointId
  ],
  queryParameters: [
    Parameters.onlyServerState
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EndpointInfoApiModel
    },
    default: {}
  },
  serializer
};

const updateEndpointOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v2/endpoints/{endpointId}",
  urlParameters: [
    Parameters.endpointId
  ],
  requestBody: {
    parameterPath: "request",
    mapper: {
      ...Mappers.EndpointRegistrationUpdateApiModel,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const getListOfEndpointsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/endpoints",
  queryParameters: [
    Parameters.onlyServerState,
    Parameters.continuationToken,
    Parameters.pageSize
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EndpointInfoListApiModel
    },
    default: {}
  },
  serializer
};

const getFilteredListOfEndpointsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/endpoints/query",
  queryParameters: [
    Parameters.url,
    Parameters.userAuthentication,
    Parameters.certificate,
    Parameters.securityMode,
    Parameters.securityPolicy,
    Parameters.activated,
    Parameters.connected,
    Parameters.endpointState,
    Parameters.includeNotSeenSince,
    Parameters.onlyServerState,
    Parameters.pageSize
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EndpointInfoListApiModel
    },
    default: {}
  },
  serializer
};

const queryEndpointsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/endpoints/query",
  queryParameters: [
    Parameters.onlyServerState,
    Parameters.pageSize
  ],
  requestBody: {
    parameterPath: "query",
    mapper: {
      ...Mappers.EndpointRegistrationQueryApiModel,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.EndpointInfoListApiModel
    },
    default: {}
  },
  serializer
};

const deactivateEndpointOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/endpoints/{endpointId}/deactivate",
  urlParameters: [
    Parameters.endpointId
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const getStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/status",
  responses: {
    200: {
      bodyMapper: Mappers.StatusResponseApiModel
    },
    default: {}
  },
  serializer
};

const getSupervisorOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/supervisors/{supervisorId}",
  urlParameters: [
    Parameters.supervisorId
  ],
  queryParameters: [
    Parameters.onlyServerState
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SupervisorApiModel
    },
    default: {}
  },
  serializer
};

const updateSupervisorOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v2/supervisors/{supervisorId}",
  urlParameters: [
    Parameters.supervisorId
  ],
  requestBody: {
    parameterPath: "request",
    mapper: {
      ...Mappers.SupervisorUpdateApiModel,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const getSupervisorStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/supervisors/{supervisorId}/status",
  urlParameters: [
    Parameters.supervisorId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SupervisorStatusApiModel
    },
    default: {}
  },
  serializer
};

const resetSupervisorOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/supervisors/{supervisorId}/reset",
  urlParameters: [
    Parameters.supervisorId
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const getListOfSupervisorsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/supervisors",
  queryParameters: [
    Parameters.onlyServerState,
    Parameters.continuationToken,
    Parameters.pageSize
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SupervisorListApiModel
    },
    default: {}
  },
  serializer
};

const getFilteredListOfSupervisorsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/supervisors/query",
  queryParameters: [
    Parameters.siteId,
    Parameters.discovery,
    Parameters.connected,
    Parameters.onlyServerState,
    Parameters.pageSize
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SupervisorListApiModel
    },
    default: {}
  },
  serializer
};

const querySupervisorsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/supervisors/query",
  queryParameters: [
    Parameters.onlyServerState,
    Parameters.pageSize
  ],
  requestBody: {
    parameterPath: "query",
    mapper: {
      ...Mappers.SupervisorQueryApiModel,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.SupervisorListApiModel
    },
    default: {}
  },
  serializer
};

export {
  AzureOpcRegistryClient,
  AzureOpcRegistryClientContext,
  Models as AzureOpcRegistryModels,
  Mappers as AzureOpcRegistryMappers
};
