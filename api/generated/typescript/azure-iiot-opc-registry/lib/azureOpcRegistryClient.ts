/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { AzureOpcRegistryClientContext } from "./azureOpcRegistryClientContext";

class AzureOpcRegistryClient extends AzureOpcRegistryClientContext {
  /**
   * Initializes a new instance of the AzureOpcRegistryClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param [options] The parameter options
   */
  constructor(credentials: msRest.ServiceClientCredentials, options?: Models.AzureOpcRegistryClientOptions) {
    super(credentials, options);
  }

  /**
   * Registers a server solely using a discovery url. Requires that the onboarding agent service is
   * running and the server can be located by a supervisor in its network using the discovery url.
   * @summary Register new server
   * @param body Server registration request
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  registerServer(body: Models.ServerRegistrationRequestApiModel, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param body Server registration request
   * @param callback The callback
   */
  registerServer(body: Models.ServerRegistrationRequestApiModel, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param body Server registration request
   * @param options The optional parameters
   * @param callback The callback
   */
  registerServer(body: Models.ServerRegistrationRequestApiModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  registerServer(body: Models.ServerRegistrationRequestApiModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      registerServerOperationSpec,
      callback);
  }

  /**
   * The application is registered using the provided information, but it is not associated with a
   * supervisor. This is useful for when you need to register clients or you want to register a
   * server that is located in a network not reachable through a Twin module.
   * @summary Create new application
   * @param body Application registration request
   * @param [options] The optional parameters
   * @returns Promise<Models.CreateApplicationResponse>
   */
  createApplication(body: Models.ApplicationRegistrationRequestApiModel, options?: msRest.RequestOptionsBase): Promise<Models.CreateApplicationResponse>;
  /**
   * @param body Application registration request
   * @param callback The callback
   */
  createApplication(body: Models.ApplicationRegistrationRequestApiModel, callback: msRest.ServiceCallback<Models.ApplicationRegistrationResponseApiModel>): void;
  /**
   * @param body Application registration request
   * @param options The optional parameters
   * @param callback The callback
   */
  createApplication(body: Models.ApplicationRegistrationRequestApiModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ApplicationRegistrationResponseApiModel>): void;
  createApplication(body: Models.ApplicationRegistrationRequestApiModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ApplicationRegistrationResponseApiModel>, callback?: msRest.ServiceCallback<Models.ApplicationRegistrationResponseApiModel>): Promise<Models.CreateApplicationResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      createApplicationOperationSpec,
      callback) as Promise<Models.CreateApplicationResponse>;
  }

  /**
   * Purges all applications that have not been seen for a specified amount of time.
   * @summary Purge applications
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteAllDisabledApplications(options?: Models.AzureOpcRegistryClientDeleteAllDisabledApplicationsOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param callback The callback
   */
  deleteAllDisabledApplications(callback: msRest.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAllDisabledApplications(options: Models.AzureOpcRegistryClientDeleteAllDisabledApplicationsOptionalParams, callback: msRest.ServiceCallback<void>): void;
  deleteAllDisabledApplications(options?: Models.AzureOpcRegistryClientDeleteAllDisabledApplicationsOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      deleteAllDisabledApplicationsOperationSpec,
      callback);
  }

  /**
   * Get all registered applications in paged form. The returned model can contain a continuation
   * token if more results are available. Call this operation again using the token to retrieve more
   * results.
   * @summary Get list of applications
   * @param [options] The optional parameters
   * @returns Promise<Models.GetListOfApplicationsResponse>
   */
  getListOfApplications(options?: Models.AzureOpcRegistryClientGetListOfApplicationsOptionalParams): Promise<Models.GetListOfApplicationsResponse>;
  /**
   * @param callback The callback
   */
  getListOfApplications(callback: msRest.ServiceCallback<Models.ApplicationInfoListApiModel>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getListOfApplications(options: Models.AzureOpcRegistryClientGetListOfApplicationsOptionalParams, callback: msRest.ServiceCallback<Models.ApplicationInfoListApiModel>): void;
  getListOfApplications(options?: Models.AzureOpcRegistryClientGetListOfApplicationsOptionalParams | msRest.ServiceCallback<Models.ApplicationInfoListApiModel>, callback?: msRest.ServiceCallback<Models.ApplicationInfoListApiModel>): Promise<Models.GetListOfApplicationsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getListOfApplicationsOperationSpec,
      callback) as Promise<Models.GetListOfApplicationsResponse>;
  }

  /**
   * A manager can disable an application.
   * @summary Disable an enabled application.
   * @param applicationId The application id
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  disableApplication(applicationId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param applicationId The application id
   * @param callback The callback
   */
  disableApplication(applicationId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param applicationId The application id
   * @param options The optional parameters
   * @param callback The callback
   */
  disableApplication(applicationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  disableApplication(applicationId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        applicationId,
        options
      },
      disableApplicationOperationSpec,
      callback);
  }

  /**
   * A manager can enable an application.
   * @summary Re-enable a disabled application.
   * @param applicationId The application id
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  enableApplication(applicationId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param applicationId The application id
   * @param callback The callback
   */
  enableApplication(applicationId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param applicationId The application id
   * @param options The optional parameters
   * @param callback The callback
   */
  enableApplication(applicationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  enableApplication(applicationId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        applicationId,
        options
      },
      enableApplicationOperationSpec,
      callback);
  }

  /**
   * Registers servers by running a discovery scan in a supervisor's network. Requires that the
   * onboarding agent service is running.
   * @summary Discover servers
   * @param body Discovery request
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  discoverServer(body: Models.DiscoveryRequestApiModel, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param body Discovery request
   * @param callback The callback
   */
  discoverServer(body: Models.DiscoveryRequestApiModel, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param body Discovery request
   * @param options The optional parameters
   * @param callback The callback
   */
  discoverServer(body: Models.DiscoveryRequestApiModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  discoverServer(body: Models.DiscoveryRequestApiModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      discoverServerOperationSpec,
      callback);
  }

  /**
   * Cancels a discovery request using the request identifier.
   * @summary Cancel discovery
   * @param requestId Discovery request
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  cancel(requestId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param requestId Discovery request
   * @param callback The callback
   */
  cancel(requestId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param requestId Discovery request
   * @param options The optional parameters
   * @param callback The callback
   */
  cancel(requestId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  cancel(requestId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        requestId,
        options
      },
      cancelOperationSpec,
      callback);
  }

  /**
   * @summary Get application registration
   * @param applicationId Application id for the server
   * @param [options] The optional parameters
   * @returns Promise<Models.GetApplicationRegistrationResponse>
   */
  getApplicationRegistration(applicationId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetApplicationRegistrationResponse>;
  /**
   * @param applicationId Application id for the server
   * @param callback The callback
   */
  getApplicationRegistration(applicationId: string, callback: msRest.ServiceCallback<Models.ApplicationRegistrationApiModel>): void;
  /**
   * @param applicationId Application id for the server
   * @param options The optional parameters
   * @param callback The callback
   */
  getApplicationRegistration(applicationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ApplicationRegistrationApiModel>): void;
  getApplicationRegistration(applicationId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ApplicationRegistrationApiModel>, callback?: msRest.ServiceCallback<Models.ApplicationRegistrationApiModel>): Promise<Models.GetApplicationRegistrationResponse> {
    return this.sendOperationRequest(
      {
        applicationId,
        options
      },
      getApplicationRegistrationOperationSpec,
      callback) as Promise<Models.GetApplicationRegistrationResponse>;
  }

  /**
   * The application information is updated with new properties. Note that this information might be
   * overridden if the application is re-discovered during a discovery run (recurring or one-time).
   * @summary Update application registration
   * @param applicationId The identifier of the application
   * @param body Application update request
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updateApplicationRegistration(applicationId: string, body: Models.ApplicationRegistrationUpdateApiModel, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param applicationId The identifier of the application
   * @param body Application update request
   * @param callback The callback
   */
  updateApplicationRegistration(applicationId: string, body: Models.ApplicationRegistrationUpdateApiModel, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param applicationId The identifier of the application
   * @param body Application update request
   * @param options The optional parameters
   * @param callback The callback
   */
  updateApplicationRegistration(applicationId: string, body: Models.ApplicationRegistrationUpdateApiModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  updateApplicationRegistration(applicationId: string, body: Models.ApplicationRegistrationUpdateApiModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        applicationId,
        body,
        options
      },
      updateApplicationRegistrationOperationSpec,
      callback);
  }

  /**
   * Unregisters and deletes application and all its associated endpoints.
   * @summary Unregister application
   * @param applicationId The identifier of the application
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteApplication(applicationId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param applicationId The identifier of the application
   * @param callback The callback
   */
  deleteApplication(applicationId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param applicationId The identifier of the application
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteApplication(applicationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteApplication(applicationId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        applicationId,
        options
      },
      deleteApplicationOperationSpec,
      callback);
  }

  /**
   * List all sites applications are registered in.
   * @summary Get list of sites
   * @param [options] The optional parameters
   * @returns Promise<Models.GetListOfSitesResponse>
   */
  getListOfSites(options?: Models.AzureOpcRegistryClientGetListOfSitesOptionalParams): Promise<Models.GetListOfSitesResponse>;
  /**
   * @param callback The callback
   */
  getListOfSites(callback: msRest.ServiceCallback<Models.ApplicationSiteListApiModel>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getListOfSites(options: Models.AzureOpcRegistryClientGetListOfSitesOptionalParams, callback: msRest.ServiceCallback<Models.ApplicationSiteListApiModel>): void;
  getListOfSites(options?: Models.AzureOpcRegistryClientGetListOfSitesOptionalParams | msRest.ServiceCallback<Models.ApplicationSiteListApiModel>, callback?: msRest.ServiceCallback<Models.ApplicationSiteListApiModel>): Promise<Models.GetListOfSitesResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getListOfSitesOperationSpec,
      callback) as Promise<Models.GetListOfSitesResponse>;
  }

  /**
   * List applications that match a query model. The returned model can contain a continuation token
   * if more results are available. Call the GetListOfApplications operation using the token to
   * retrieve more results.
   * @summary Query applications
   * @param body Application query
   * @param [options] The optional parameters
   * @returns Promise<Models.QueryApplicationsResponse>
   */
  queryApplications(body: Models.ApplicationRegistrationQueryApiModel, options?: Models.AzureOpcRegistryClientQueryApplicationsOptionalParams): Promise<Models.QueryApplicationsResponse>;
  /**
   * @param body Application query
   * @param callback The callback
   */
  queryApplications(body: Models.ApplicationRegistrationQueryApiModel, callback: msRest.ServiceCallback<Models.ApplicationInfoListApiModel>): void;
  /**
   * @param body Application query
   * @param options The optional parameters
   * @param callback The callback
   */
  queryApplications(body: Models.ApplicationRegistrationQueryApiModel, options: Models.AzureOpcRegistryClientQueryApplicationsOptionalParams, callback: msRest.ServiceCallback<Models.ApplicationInfoListApiModel>): void;
  queryApplications(body: Models.ApplicationRegistrationQueryApiModel, options?: Models.AzureOpcRegistryClientQueryApplicationsOptionalParams | msRest.ServiceCallback<Models.ApplicationInfoListApiModel>, callback?: msRest.ServiceCallback<Models.ApplicationInfoListApiModel>): Promise<Models.QueryApplicationsResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      queryApplicationsOperationSpec,
      callback) as Promise<Models.QueryApplicationsResponse>;
  }

  /**
   * Get a list of applications filtered using the specified query parameters. The returned model can
   * contain a continuation token if more results are available. Call the GetListOfApplications
   * operation using the token to retrieve more results.
   * @summary Get filtered list of applications
   * @param body Applications Query model
   * @param [options] The optional parameters
   * @returns Promise<Models.GetFilteredListOfApplicationsResponse>
   */
  getFilteredListOfApplications(body: Models.ApplicationRegistrationQueryApiModel, options?: Models.AzureOpcRegistryClientGetFilteredListOfApplicationsOptionalParams): Promise<Models.GetFilteredListOfApplicationsResponse>;
  /**
   * @param body Applications Query model
   * @param callback The callback
   */
  getFilteredListOfApplications(body: Models.ApplicationRegistrationQueryApiModel, callback: msRest.ServiceCallback<Models.ApplicationInfoListApiModel>): void;
  /**
   * @param body Applications Query model
   * @param options The optional parameters
   * @param callback The callback
   */
  getFilteredListOfApplications(body: Models.ApplicationRegistrationQueryApiModel, options: Models.AzureOpcRegistryClientGetFilteredListOfApplicationsOptionalParams, callback: msRest.ServiceCallback<Models.ApplicationInfoListApiModel>): void;
  getFilteredListOfApplications(body: Models.ApplicationRegistrationQueryApiModel, options?: Models.AzureOpcRegistryClientGetFilteredListOfApplicationsOptionalParams | msRest.ServiceCallback<Models.ApplicationInfoListApiModel>, callback?: msRest.ServiceCallback<Models.ApplicationInfoListApiModel>): Promise<Models.GetFilteredListOfApplicationsResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      getFilteredListOfApplicationsOperationSpec,
      callback) as Promise<Models.GetFilteredListOfApplicationsResponse>;
  }

  /**
   * A query model which supports the OPC UA Global Discovery Server query.
   * @summary Query applications by id.
   * @param [options] The optional parameters
   * @returns Promise<Models.QueryApplicationsByIdResponse>
   */
  queryApplicationsById(options?: Models.AzureOpcRegistryClientQueryApplicationsByIdOptionalParams): Promise<Models.QueryApplicationsByIdResponse>;
  /**
   * @param callback The callback
   */
  queryApplicationsById(callback: msRest.ServiceCallback<Models.ApplicationRecordListApiModel>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  queryApplicationsById(options: Models.AzureOpcRegistryClientQueryApplicationsByIdOptionalParams, callback: msRest.ServiceCallback<Models.ApplicationRecordListApiModel>): void;
  queryApplicationsById(options?: Models.AzureOpcRegistryClientQueryApplicationsByIdOptionalParams | msRest.ServiceCallback<Models.ApplicationRecordListApiModel>, callback?: msRest.ServiceCallback<Models.ApplicationRecordListApiModel>): Promise<Models.QueryApplicationsByIdResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      queryApplicationsByIdOperationSpec,
      callback) as Promise<Models.QueryApplicationsByIdResponse>;
  }

  /**
   * Register a client to receive application events through SignalR.
   * @summary Subscribe for application events
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  subscribe(options?: Models.AzureOpcRegistryClientSubscribeOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param callback The callback
   */
  subscribe(callback: msRest.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  subscribe(options: Models.AzureOpcRegistryClientSubscribeOptionalParams, callback: msRest.ServiceCallback<void>): void;
  subscribe(options?: Models.AzureOpcRegistryClientSubscribeOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      subscribeOperationSpec,
      callback);
  }

  /**
   * Unregister a user and stop it from receiving events.
   * @summary Unsubscribe from application events
   * @param userId The user id that will not receive any more events
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  unsubscribe(userId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param userId The user id that will not receive any more events
   * @param callback The callback
   */
  unsubscribe(userId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param userId The user id that will not receive any more events
   * @param options The optional parameters
   * @param callback The callback
   */
  unsubscribe(userId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  unsubscribe(userId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        userId,
        options
      },
      unsubscribeOperationSpec,
      callback);
  }

  /**
   * Returns a discoverer's registration and connectivity information. A discoverer id corresponds to
   * the twin modules module identity.
   * @summary Get discoverer registration information
   * @param discovererId Discoverer identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.GetDiscovererResponse>
   */
  getDiscoverer(discovererId: string, options?: Models.AzureOpcRegistryClientGetDiscovererOptionalParams): Promise<Models.GetDiscovererResponse>;
  /**
   * @param discovererId Discoverer identifier
   * @param callback The callback
   */
  getDiscoverer(discovererId: string, callback: msRest.ServiceCallback<Models.DiscovererApiModel>): void;
  /**
   * @param discovererId Discoverer identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  getDiscoverer(discovererId: string, options: Models.AzureOpcRegistryClientGetDiscovererOptionalParams, callback: msRest.ServiceCallback<Models.DiscovererApiModel>): void;
  getDiscoverer(discovererId: string, options?: Models.AzureOpcRegistryClientGetDiscovererOptionalParams | msRest.ServiceCallback<Models.DiscovererApiModel>, callback?: msRest.ServiceCallback<Models.DiscovererApiModel>): Promise<Models.GetDiscovererResponse> {
    return this.sendOperationRequest(
      {
        discovererId,
        options
      },
      getDiscovererOperationSpec,
      callback) as Promise<Models.GetDiscovererResponse>;
  }

  /**
   * Allows a caller to configure recurring discovery runs on the twin module identified by the
   * discoverer id or update site information.
   * @summary Update discoverer information
   * @param discovererId discoverer identifier
   * @param body Patch request
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updateDiscoverer(discovererId: string, body: Models.DiscovererUpdateApiModel, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param discovererId discoverer identifier
   * @param body Patch request
   * @param callback The callback
   */
  updateDiscoverer(discovererId: string, body: Models.DiscovererUpdateApiModel, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param discovererId discoverer identifier
   * @param body Patch request
   * @param options The optional parameters
   * @param callback The callback
   */
  updateDiscoverer(discovererId: string, body: Models.DiscovererUpdateApiModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  updateDiscoverer(discovererId: string, body: Models.DiscovererUpdateApiModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        discovererId,
        body,
        options
      },
      updateDiscovererOperationSpec,
      callback);
  }

  /**
   * Allows a caller to configure recurring discovery runs on the discovery module identified by the
   * module id.
   * @summary Enable server discovery
   * @param discovererId discoverer identifier
   * @param mode Discovery mode. Possible values include: 'Off', 'Local', 'Network', 'Fast', 'Scan'
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  setDiscoveryMode(discovererId: string, mode: Models.DiscoveryMode, options?: Models.AzureOpcRegistryClientSetDiscoveryModeOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param discovererId discoverer identifier
   * @param mode Discovery mode. Possible values include: 'Off', 'Local', 'Network', 'Fast', 'Scan'
   * @param callback The callback
   */
  setDiscoveryMode(discovererId: string, mode: Models.DiscoveryMode, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param discovererId discoverer identifier
   * @param mode Discovery mode. Possible values include: 'Off', 'Local', 'Network', 'Fast', 'Scan'
   * @param options The optional parameters
   * @param callback The callback
   */
  setDiscoveryMode(discovererId: string, mode: Models.DiscoveryMode, options: Models.AzureOpcRegistryClientSetDiscoveryModeOptionalParams, callback: msRest.ServiceCallback<void>): void;
  setDiscoveryMode(discovererId: string, mode: Models.DiscoveryMode, options?: Models.AzureOpcRegistryClientSetDiscoveryModeOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        discovererId,
        mode,
        options
      },
      setDiscoveryModeOperationSpec,
      callback);
  }

  /**
   * Get all registered discoverers and therefore twin modules in paged form. The returned model can
   * contain a continuation token if more results are available. Call this operation again using the
   * token to retrieve more results.
   * @summary Get list of discoverers
   * @param [options] The optional parameters
   * @returns Promise<Models.GetListOfDiscoverersResponse>
   */
  getListOfDiscoverers(options?: Models.AzureOpcRegistryClientGetListOfDiscoverersOptionalParams): Promise<Models.GetListOfDiscoverersResponse>;
  /**
   * @param callback The callback
   */
  getListOfDiscoverers(callback: msRest.ServiceCallback<Models.DiscovererListApiModel>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getListOfDiscoverers(options: Models.AzureOpcRegistryClientGetListOfDiscoverersOptionalParams, callback: msRest.ServiceCallback<Models.DiscovererListApiModel>): void;
  getListOfDiscoverers(options?: Models.AzureOpcRegistryClientGetListOfDiscoverersOptionalParams | msRest.ServiceCallback<Models.DiscovererListApiModel>, callback?: msRest.ServiceCallback<Models.DiscovererListApiModel>): Promise<Models.GetListOfDiscoverersResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getListOfDiscoverersOperationSpec,
      callback) as Promise<Models.GetListOfDiscoverersResponse>;
  }

  /**
   * Get all discoverers that match a specified query. The returned model can contain a continuation
   * token if more results are available. Call the GetListOfDiscoverers operation using the token to
   * retrieve more results.
   * @summary Query discoverers
   * @param body Discoverers query model
   * @param [options] The optional parameters
   * @returns Promise<Models.QueryDiscoverersResponse>
   */
  queryDiscoverers(body: Models.DiscovererQueryApiModel, options?: Models.AzureOpcRegistryClientQueryDiscoverersOptionalParams): Promise<Models.QueryDiscoverersResponse>;
  /**
   * @param body Discoverers query model
   * @param callback The callback
   */
  queryDiscoverers(body: Models.DiscovererQueryApiModel, callback: msRest.ServiceCallback<Models.DiscovererListApiModel>): void;
  /**
   * @param body Discoverers query model
   * @param options The optional parameters
   * @param callback The callback
   */
  queryDiscoverers(body: Models.DiscovererQueryApiModel, options: Models.AzureOpcRegistryClientQueryDiscoverersOptionalParams, callback: msRest.ServiceCallback<Models.DiscovererListApiModel>): void;
  queryDiscoverers(body: Models.DiscovererQueryApiModel, options?: Models.AzureOpcRegistryClientQueryDiscoverersOptionalParams | msRest.ServiceCallback<Models.DiscovererListApiModel>, callback?: msRest.ServiceCallback<Models.DiscovererListApiModel>): Promise<Models.QueryDiscoverersResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      queryDiscoverersOperationSpec,
      callback) as Promise<Models.QueryDiscoverersResponse>;
  }

  /**
   * Get a list of discoverers filtered using the specified query parameters. The returned model can
   * contain a continuation token if more results are available. Call the GetListOfDiscoverers
   * operation using the token to retrieve more results.
   * @summary Get filtered list of discoverers
   * @param [options] The optional parameters
   * @returns Promise<Models.GetFilteredListOfDiscoverersResponse>
   */
  getFilteredListOfDiscoverers(options?: Models.AzureOpcRegistryClientGetFilteredListOfDiscoverersOptionalParams): Promise<Models.GetFilteredListOfDiscoverersResponse>;
  /**
   * @param callback The callback
   */
  getFilteredListOfDiscoverers(callback: msRest.ServiceCallback<Models.DiscovererListApiModel>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getFilteredListOfDiscoverers(options: Models.AzureOpcRegistryClientGetFilteredListOfDiscoverersOptionalParams, callback: msRest.ServiceCallback<Models.DiscovererListApiModel>): void;
  getFilteredListOfDiscoverers(options?: Models.AzureOpcRegistryClientGetFilteredListOfDiscoverersOptionalParams | msRest.ServiceCallback<Models.DiscovererListApiModel>, callback?: msRest.ServiceCallback<Models.DiscovererListApiModel>): Promise<Models.GetFilteredListOfDiscoverersResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getFilteredListOfDiscoverersOperationSpec,
      callback) as Promise<Models.GetFilteredListOfDiscoverersResponse>;
  }

  /**
   * Register a user to receive discoverer events through SignalR.
   * @summary Subscribe to discoverer registry events
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  subscribe1(options?: Models.AzureOpcRegistryClientSubscribe1OptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param callback The callback
   */
  subscribe1(callback: msRest.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  subscribe1(options: Models.AzureOpcRegistryClientSubscribe1OptionalParams, callback: msRest.ServiceCallback<void>): void;
  subscribe1(options?: Models.AzureOpcRegistryClientSubscribe1OptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      subscribe1OperationSpec,
      callback);
  }

  /**
   * Unregister a user and stop it from receiving discoverer events.
   * @summary Unsubscribe registry events
   * @param userId The user id that will not receive any more discoverer events
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  unsubscribe1(userId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param userId The user id that will not receive any more discoverer events
   * @param callback The callback
   */
  unsubscribe1(userId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param userId The user id that will not receive any more discoverer events
   * @param options The optional parameters
   * @param callback The callback
   */
  unsubscribe1(userId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  unsubscribe1(userId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        userId,
        options
      },
      unsubscribe1OperationSpec,
      callback);
  }

  /**
   * Register a client to receive discovery progress events through SignalR from a particular
   * discoverer.
   * @summary Subscribe to discovery progress from discoverer
   * @param discovererId The discoverer to subscribe to
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  subscribeByDiscovererId(discovererId: string, options?: Models.AzureOpcRegistryClientSubscribeByDiscovererIdOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param discovererId The discoverer to subscribe to
   * @param callback The callback
   */
  subscribeByDiscovererId(discovererId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param discovererId The discoverer to subscribe to
   * @param options The optional parameters
   * @param callback The callback
   */
  subscribeByDiscovererId(discovererId: string, options: Models.AzureOpcRegistryClientSubscribeByDiscovererIdOptionalParams, callback: msRest.ServiceCallback<void>): void;
  subscribeByDiscovererId(discovererId: string, options?: Models.AzureOpcRegistryClientSubscribeByDiscovererIdOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        discovererId,
        options
      },
      subscribeByDiscovererIdOperationSpec,
      callback);
  }

  /**
   * Register a client to receive discovery progress events through SignalR for a particular request.
   * @summary Subscribe to discovery progress for a request
   * @param requestId The request to monitor
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  subscribeByRequestId(requestId: string, options?: Models.AzureOpcRegistryClientSubscribeByRequestIdOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param requestId The request to monitor
   * @param callback The callback
   */
  subscribeByRequestId(requestId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param requestId The request to monitor
   * @param options The optional parameters
   * @param callback The callback
   */
  subscribeByRequestId(requestId: string, options: Models.AzureOpcRegistryClientSubscribeByRequestIdOptionalParams, callback: msRest.ServiceCallback<void>): void;
  subscribeByRequestId(requestId: string, options?: Models.AzureOpcRegistryClientSubscribeByRequestIdOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        requestId,
        options
      },
      subscribeByRequestIdOperationSpec,
      callback);
  }

  /**
   * Unregister a client and stop it from receiving discovery events for a particular request.
   * @summary Unsubscribe from discovery progress for a request.
   * @param requestId The request to unsubscribe from
   * @param userId The user id that will not receive any more discovery progress
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  unsubscribeByRequestId(requestId: string, userId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param requestId The request to unsubscribe from
   * @param userId The user id that will not receive any more discovery progress
   * @param callback The callback
   */
  unsubscribeByRequestId(requestId: string, userId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param requestId The request to unsubscribe from
   * @param userId The user id that will not receive any more discovery progress
   * @param options The optional parameters
   * @param callback The callback
   */
  unsubscribeByRequestId(requestId: string, userId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  unsubscribeByRequestId(requestId: string, userId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        requestId,
        userId,
        options
      },
      unsubscribeByRequestIdOperationSpec,
      callback);
  }

  /**
   * Unregister a client and stop it from receiving discovery events.
   * @summary Unsubscribe from discovery progress from discoverer.
   * @param discovererId The discoverer to unsubscribe from
   * @param userId The user id that will not receive any more discovery progress
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  unsubscribeByDiscovererId(discovererId: string, userId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param discovererId The discoverer to unsubscribe from
   * @param userId The user id that will not receive any more discovery progress
   * @param callback The callback
   */
  unsubscribeByDiscovererId(discovererId: string, userId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param discovererId The discoverer to unsubscribe from
   * @param userId The user id that will not receive any more discovery progress
   * @param options The optional parameters
   * @param callback The callback
   */
  unsubscribeByDiscovererId(discovererId: string, userId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  unsubscribeByDiscovererId(discovererId: string, userId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        discovererId,
        userId,
        options
      },
      unsubscribeByDiscovererIdOperationSpec,
      callback);
  }

  /**
   * Activates an endpoint for subsequent use in twin service. All endpoints must be activated using
   * this API or through a activation filter during application registration or discovery.
   * @summary Activate endpoint
   * @param endpointId endpoint identifier
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  activateEndpoint(endpointId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param endpointId endpoint identifier
   * @param callback The callback
   */
  activateEndpoint(endpointId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param endpointId endpoint identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  activateEndpoint(endpointId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  activateEndpoint(endpointId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        endpointId,
        options
      },
      activateEndpointOperationSpec,
      callback);
  }

  /**
   * Gets information about an endpoint.
   * @summary Get endpoint information
   * @param endpointId endpoint identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.GetEndpointResponse>
   */
  getEndpoint(endpointId: string, options?: Models.AzureOpcRegistryClientGetEndpointOptionalParams): Promise<Models.GetEndpointResponse>;
  /**
   * @param endpointId endpoint identifier
   * @param callback The callback
   */
  getEndpoint(endpointId: string, callback: msRest.ServiceCallback<Models.EndpointInfoApiModel>): void;
  /**
   * @param endpointId endpoint identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  getEndpoint(endpointId: string, options: Models.AzureOpcRegistryClientGetEndpointOptionalParams, callback: msRest.ServiceCallback<Models.EndpointInfoApiModel>): void;
  getEndpoint(endpointId: string, options?: Models.AzureOpcRegistryClientGetEndpointOptionalParams | msRest.ServiceCallback<Models.EndpointInfoApiModel>, callback?: msRest.ServiceCallback<Models.EndpointInfoApiModel>): Promise<Models.GetEndpointResponse> {
    return this.sendOperationRequest(
      {
        endpointId,
        options
      },
      getEndpointOperationSpec,
      callback) as Promise<Models.GetEndpointResponse>;
  }

  /**
   * Get all registered endpoints in paged form. The returned model can contain a continuation token
   * if more results are available. Call this operation again using the token to retrieve more
   * results.
   * @summary Get list of endpoints
   * @param [options] The optional parameters
   * @returns Promise<Models.GetListOfEndpointsResponse>
   */
  getListOfEndpoints(options?: Models.AzureOpcRegistryClientGetListOfEndpointsOptionalParams): Promise<Models.GetListOfEndpointsResponse>;
  /**
   * @param callback The callback
   */
  getListOfEndpoints(callback: msRest.ServiceCallback<Models.EndpointInfoListApiModel>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getListOfEndpoints(options: Models.AzureOpcRegistryClientGetListOfEndpointsOptionalParams, callback: msRest.ServiceCallback<Models.EndpointInfoListApiModel>): void;
  getListOfEndpoints(options?: Models.AzureOpcRegistryClientGetListOfEndpointsOptionalParams | msRest.ServiceCallback<Models.EndpointInfoListApiModel>, callback?: msRest.ServiceCallback<Models.EndpointInfoListApiModel>): Promise<Models.GetListOfEndpointsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getListOfEndpointsOperationSpec,
      callback) as Promise<Models.GetListOfEndpointsResponse>;
  }

  /**
   * Return endpoints that match the specified query. The returned model can contain a continuation
   * token if more results are available. Call the GetListOfEndpoints operation using the token to
   * retrieve more results.
   * @summary Query endpoints
   * @param body Query to match
   * @param [options] The optional parameters
   * @returns Promise<Models.QueryEndpointsResponse>
   */
  queryEndpoints(body: Models.EndpointRegistrationQueryApiModel, options?: Models.AzureOpcRegistryClientQueryEndpointsOptionalParams): Promise<Models.QueryEndpointsResponse>;
  /**
   * @param body Query to match
   * @param callback The callback
   */
  queryEndpoints(body: Models.EndpointRegistrationQueryApiModel, callback: msRest.ServiceCallback<Models.EndpointInfoListApiModel>): void;
  /**
   * @param body Query to match
   * @param options The optional parameters
   * @param callback The callback
   */
  queryEndpoints(body: Models.EndpointRegistrationQueryApiModel, options: Models.AzureOpcRegistryClientQueryEndpointsOptionalParams, callback: msRest.ServiceCallback<Models.EndpointInfoListApiModel>): void;
  queryEndpoints(body: Models.EndpointRegistrationQueryApiModel, options?: Models.AzureOpcRegistryClientQueryEndpointsOptionalParams | msRest.ServiceCallback<Models.EndpointInfoListApiModel>, callback?: msRest.ServiceCallback<Models.EndpointInfoListApiModel>): Promise<Models.QueryEndpointsResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      queryEndpointsOperationSpec,
      callback) as Promise<Models.QueryEndpointsResponse>;
  }

  /**
   * Get a list of endpoints filtered using the specified query parameters. The returned model can
   * contain a continuation token if more results are available. Call the GetListOfEndpoints
   * operation using the token to retrieve more results.
   * @summary Get filtered list of endpoints
   * @param [options] The optional parameters
   * @returns Promise<Models.GetFilteredListOfEndpointsResponse>
   */
  getFilteredListOfEndpoints(options?: Models.AzureOpcRegistryClientGetFilteredListOfEndpointsOptionalParams): Promise<Models.GetFilteredListOfEndpointsResponse>;
  /**
   * @param callback The callback
   */
  getFilteredListOfEndpoints(callback: msRest.ServiceCallback<Models.EndpointInfoListApiModel>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getFilteredListOfEndpoints(options: Models.AzureOpcRegistryClientGetFilteredListOfEndpointsOptionalParams, callback: msRest.ServiceCallback<Models.EndpointInfoListApiModel>): void;
  getFilteredListOfEndpoints(options?: Models.AzureOpcRegistryClientGetFilteredListOfEndpointsOptionalParams | msRest.ServiceCallback<Models.EndpointInfoListApiModel>, callback?: msRest.ServiceCallback<Models.EndpointInfoListApiModel>): Promise<Models.GetFilteredListOfEndpointsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getFilteredListOfEndpointsOperationSpec,
      callback) as Promise<Models.GetFilteredListOfEndpointsResponse>;
  }

  /**
   * Deactivates the endpoint and disable access through twin service.
   * @summary Deactivate endpoint
   * @param endpointId endpoint identifier
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deactivateEndpoint(endpointId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param endpointId endpoint identifier
   * @param callback The callback
   */
  deactivateEndpoint(endpointId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param endpointId endpoint identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  deactivateEndpoint(endpointId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deactivateEndpoint(endpointId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        endpointId,
        options
      },
      deactivateEndpointOperationSpec,
      callback);
  }

  /**
   * Register a user to receive endpoint events through SignalR.
   * @summary Subscribe for endpoint events
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  subscribe2(options?: Models.AzureOpcRegistryClientSubscribe2OptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param callback The callback
   */
  subscribe2(callback: msRest.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  subscribe2(options: Models.AzureOpcRegistryClientSubscribe2OptionalParams, callback: msRest.ServiceCallback<void>): void;
  subscribe2(options?: Models.AzureOpcRegistryClientSubscribe2OptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      subscribe2OperationSpec,
      callback);
  }

  /**
   * Unregister a user and stop it from receiving endpoint events.
   * @summary Unsubscribe from endpoint events
   * @param userId The user id that will not receive any more endpoint events
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  unsubscribe2(userId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param userId The user id that will not receive any more endpoint events
   * @param callback The callback
   */
  unsubscribe2(userId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param userId The user id that will not receive any more endpoint events
   * @param options The optional parameters
   * @param callback The callback
   */
  unsubscribe2(userId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  unsubscribe2(userId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        userId,
        options
      },
      unsubscribe2OperationSpec,
      callback);
  }

  /**
   * Returns a Gateway's registration and connectivity information. A Gateway id corresponds to the
   * twin modules module identity.
   * @summary Get Gateway registration information
   * @param gatewayId Gateway identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.GetGatewayResponse>
   */
  getGateway(gatewayId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetGatewayResponse>;
  /**
   * @param gatewayId Gateway identifier
   * @param callback The callback
   */
  getGateway(gatewayId: string, callback: msRest.ServiceCallback<Models.GatewayInfoApiModel>): void;
  /**
   * @param gatewayId Gateway identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  getGateway(gatewayId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GatewayInfoApiModel>): void;
  getGateway(gatewayId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GatewayInfoApiModel>, callback?: msRest.ServiceCallback<Models.GatewayInfoApiModel>): Promise<Models.GetGatewayResponse> {
    return this.sendOperationRequest(
      {
        gatewayId,
        options
      },
      getGatewayOperationSpec,
      callback) as Promise<Models.GetGatewayResponse>;
  }

  /**
   * Allows a caller to configure operations on the Gateway module identified by the Gateway id.
   * @summary Update Gateway configuration
   * @param gatewayId Gateway identifier
   * @param body Patch request
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updateGateway(gatewayId: string, body: Models.GatewayUpdateApiModel, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param gatewayId Gateway identifier
   * @param body Patch request
   * @param callback The callback
   */
  updateGateway(gatewayId: string, body: Models.GatewayUpdateApiModel, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param gatewayId Gateway identifier
   * @param body Patch request
   * @param options The optional parameters
   * @param callback The callback
   */
  updateGateway(gatewayId: string, body: Models.GatewayUpdateApiModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  updateGateway(gatewayId: string, body: Models.GatewayUpdateApiModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        gatewayId,
        body,
        options
      },
      updateGatewayOperationSpec,
      callback);
  }

  /**
   * Get all registered Gateways and therefore twin modules in paged form. The returned model can
   * contain a continuation token if more results are available. Call this operation again using the
   * token to retrieve more results.
   * @summary Get list of Gateways
   * @param [options] The optional parameters
   * @returns Promise<Models.GetListOfGatewayResponse>
   */
  getListOfGateway(options?: Models.AzureOpcRegistryClientGetListOfGatewayOptionalParams): Promise<Models.GetListOfGatewayResponse>;
  /**
   * @param callback The callback
   */
  getListOfGateway(callback: msRest.ServiceCallback<Models.GatewayListApiModel>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getListOfGateway(options: Models.AzureOpcRegistryClientGetListOfGatewayOptionalParams, callback: msRest.ServiceCallback<Models.GatewayListApiModel>): void;
  getListOfGateway(options?: Models.AzureOpcRegistryClientGetListOfGatewayOptionalParams | msRest.ServiceCallback<Models.GatewayListApiModel>, callback?: msRest.ServiceCallback<Models.GatewayListApiModel>): Promise<Models.GetListOfGatewayResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getListOfGatewayOperationSpec,
      callback) as Promise<Models.GetListOfGatewayResponse>;
  }

  /**
   * Get all Gateways that match a specified query. The returned model can contain a continuation
   * token if more results are available. Call the GetListOfGateway operation using the token to
   * retrieve more results.
   * @summary Query Gateways
   * @param body Gateway query model
   * @param [options] The optional parameters
   * @returns Promise<Models.QueryGatewayResponse>
   */
  queryGateway(body: Models.GatewayQueryApiModel, options?: Models.AzureOpcRegistryClientQueryGatewayOptionalParams): Promise<Models.QueryGatewayResponse>;
  /**
   * @param body Gateway query model
   * @param callback The callback
   */
  queryGateway(body: Models.GatewayQueryApiModel, callback: msRest.ServiceCallback<Models.GatewayListApiModel>): void;
  /**
   * @param body Gateway query model
   * @param options The optional parameters
   * @param callback The callback
   */
  queryGateway(body: Models.GatewayQueryApiModel, options: Models.AzureOpcRegistryClientQueryGatewayOptionalParams, callback: msRest.ServiceCallback<Models.GatewayListApiModel>): void;
  queryGateway(body: Models.GatewayQueryApiModel, options?: Models.AzureOpcRegistryClientQueryGatewayOptionalParams | msRest.ServiceCallback<Models.GatewayListApiModel>, callback?: msRest.ServiceCallback<Models.GatewayListApiModel>): Promise<Models.QueryGatewayResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      queryGatewayOperationSpec,
      callback) as Promise<Models.QueryGatewayResponse>;
  }

  /**
   * Get a list of Gateways filtered using the specified query parameters. The returned model can
   * contain a continuation token if more results are available. Call the GetListOfGateway operation
   * using the token to retrieve more results.
   * @summary Get filtered list of Gateways
   * @param [options] The optional parameters
   * @returns Promise<Models.GetFilteredListOfGatewayResponse>
   */
  getFilteredListOfGateway(options?: Models.AzureOpcRegistryClientGetFilteredListOfGatewayOptionalParams): Promise<Models.GetFilteredListOfGatewayResponse>;
  /**
   * @param callback The callback
   */
  getFilteredListOfGateway(callback: msRest.ServiceCallback<Models.GatewayListApiModel>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getFilteredListOfGateway(options: Models.AzureOpcRegistryClientGetFilteredListOfGatewayOptionalParams, callback: msRest.ServiceCallback<Models.GatewayListApiModel>): void;
  getFilteredListOfGateway(options?: Models.AzureOpcRegistryClientGetFilteredListOfGatewayOptionalParams | msRest.ServiceCallback<Models.GatewayListApiModel>, callback?: msRest.ServiceCallback<Models.GatewayListApiModel>): Promise<Models.GetFilteredListOfGatewayResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getFilteredListOfGatewayOperationSpec,
      callback) as Promise<Models.GetFilteredListOfGatewayResponse>;
  }

  /**
   * Register a user to receive Gateway events through SignalR.
   * @summary Subscribe to Gateway registry events
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  subscribe3(options?: Models.AzureOpcRegistryClientSubscribe3OptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param callback The callback
   */
  subscribe3(callback: msRest.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  subscribe3(options: Models.AzureOpcRegistryClientSubscribe3OptionalParams, callback: msRest.ServiceCallback<void>): void;
  subscribe3(options?: Models.AzureOpcRegistryClientSubscribe3OptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      subscribe3OperationSpec,
      callback);
  }

  /**
   * Unregister a user and stop it from receiving Gateway events.
   * @summary Unsubscribe registry events
   * @param userId The user id that will not receive any more Gateway events
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  unsubscribe3(userId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param userId The user id that will not receive any more Gateway events
   * @param callback The callback
   */
  unsubscribe3(userId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param userId The user id that will not receive any more Gateway events
   * @param options The optional parameters
   * @param callback The callback
   */
  unsubscribe3(userId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  unsubscribe3(userId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        userId,
        options
      },
      unsubscribe3OperationSpec,
      callback);
  }

  /**
   * Returns a publisher's registration and connectivity information. A publisher id corresponds to
   * the twin modules module identity.
   * @summary Get publisher registration information
   * @param publisherId Publisher identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPublisherResponse>
   */
  getPublisher(publisherId: string, options?: Models.AzureOpcRegistryClientGetPublisherOptionalParams): Promise<Models.GetPublisherResponse>;
  /**
   * @param publisherId Publisher identifier
   * @param callback The callback
   */
  getPublisher(publisherId: string, callback: msRest.ServiceCallback<Models.PublisherApiModel>): void;
  /**
   * @param publisherId Publisher identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  getPublisher(publisherId: string, options: Models.AzureOpcRegistryClientGetPublisherOptionalParams, callback: msRest.ServiceCallback<Models.PublisherApiModel>): void;
  getPublisher(publisherId: string, options?: Models.AzureOpcRegistryClientGetPublisherOptionalParams | msRest.ServiceCallback<Models.PublisherApiModel>, callback?: msRest.ServiceCallback<Models.PublisherApiModel>): Promise<Models.GetPublisherResponse> {
    return this.sendOperationRequest(
      {
        publisherId,
        options
      },
      getPublisherOperationSpec,
      callback) as Promise<Models.GetPublisherResponse>;
  }

  /**
   * Allows a caller to configure operations on the publisher module identified by the publisher id.
   * @summary Update publisher configuration
   * @param publisherId Publisher identifier
   * @param body Patch request
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updatePublisher(publisherId: string, body: Models.PublisherUpdateApiModel, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param publisherId Publisher identifier
   * @param body Patch request
   * @param callback The callback
   */
  updatePublisher(publisherId: string, body: Models.PublisherUpdateApiModel, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param publisherId Publisher identifier
   * @param body Patch request
   * @param options The optional parameters
   * @param callback The callback
   */
  updatePublisher(publisherId: string, body: Models.PublisherUpdateApiModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  updatePublisher(publisherId: string, body: Models.PublisherUpdateApiModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        publisherId,
        body,
        options
      },
      updatePublisherOperationSpec,
      callback);
  }

  /**
   * Get all registered publishers and therefore twin modules in paged form. The returned model can
   * contain a continuation token if more results are available. Call this operation again using the
   * token to retrieve more results.
   * @summary Get list of publishers
   * @param [options] The optional parameters
   * @returns Promise<Models.GetListOfPublisherResponse>
   */
  getListOfPublisher(options?: Models.AzureOpcRegistryClientGetListOfPublisherOptionalParams): Promise<Models.GetListOfPublisherResponse>;
  /**
   * @param callback The callback
   */
  getListOfPublisher(callback: msRest.ServiceCallback<Models.PublisherListApiModel>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getListOfPublisher(options: Models.AzureOpcRegistryClientGetListOfPublisherOptionalParams, callback: msRest.ServiceCallback<Models.PublisherListApiModel>): void;
  getListOfPublisher(options?: Models.AzureOpcRegistryClientGetListOfPublisherOptionalParams | msRest.ServiceCallback<Models.PublisherListApiModel>, callback?: msRest.ServiceCallback<Models.PublisherListApiModel>): Promise<Models.GetListOfPublisherResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getListOfPublisherOperationSpec,
      callback) as Promise<Models.GetListOfPublisherResponse>;
  }

  /**
   * Get all publishers that match a specified query. The returned model can contain a continuation
   * token if more results are available. Call the GetListOfPublisher operation using the token to
   * retrieve more results.
   * @summary Query publishers
   * @param body Publisher query model
   * @param [options] The optional parameters
   * @returns Promise<Models.QueryPublisherResponse>
   */
  queryPublisher(body: Models.PublisherQueryApiModel, options?: Models.AzureOpcRegistryClientQueryPublisherOptionalParams): Promise<Models.QueryPublisherResponse>;
  /**
   * @param body Publisher query model
   * @param callback The callback
   */
  queryPublisher(body: Models.PublisherQueryApiModel, callback: msRest.ServiceCallback<Models.PublisherListApiModel>): void;
  /**
   * @param body Publisher query model
   * @param options The optional parameters
   * @param callback The callback
   */
  queryPublisher(body: Models.PublisherQueryApiModel, options: Models.AzureOpcRegistryClientQueryPublisherOptionalParams, callback: msRest.ServiceCallback<Models.PublisherListApiModel>): void;
  queryPublisher(body: Models.PublisherQueryApiModel, options?: Models.AzureOpcRegistryClientQueryPublisherOptionalParams | msRest.ServiceCallback<Models.PublisherListApiModel>, callback?: msRest.ServiceCallback<Models.PublisherListApiModel>): Promise<Models.QueryPublisherResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      queryPublisherOperationSpec,
      callback) as Promise<Models.QueryPublisherResponse>;
  }

  /**
   * Get a list of publishers filtered using the specified query parameters. The returned model can
   * contain a continuation token if more results are available. Call the GetListOfPublisher
   * operation using the token to retrieve more results.
   * @summary Get filtered list of publishers
   * @param [options] The optional parameters
   * @returns Promise<Models.GetFilteredListOfPublisherResponse>
   */
  getFilteredListOfPublisher(options?: Models.AzureOpcRegistryClientGetFilteredListOfPublisherOptionalParams): Promise<Models.GetFilteredListOfPublisherResponse>;
  /**
   * @param callback The callback
   */
  getFilteredListOfPublisher(callback: msRest.ServiceCallback<Models.PublisherListApiModel>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getFilteredListOfPublisher(options: Models.AzureOpcRegistryClientGetFilteredListOfPublisherOptionalParams, callback: msRest.ServiceCallback<Models.PublisherListApiModel>): void;
  getFilteredListOfPublisher(options?: Models.AzureOpcRegistryClientGetFilteredListOfPublisherOptionalParams | msRest.ServiceCallback<Models.PublisherListApiModel>, callback?: msRest.ServiceCallback<Models.PublisherListApiModel>): Promise<Models.GetFilteredListOfPublisherResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getFilteredListOfPublisherOperationSpec,
      callback) as Promise<Models.GetFilteredListOfPublisherResponse>;
  }

  /**
   * Register a user to receive publisher events through SignalR.
   * @summary Subscribe to publisher registry events
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  subscribe4(options?: Models.AzureOpcRegistryClientSubscribe4OptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param callback The callback
   */
  subscribe4(callback: msRest.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  subscribe4(options: Models.AzureOpcRegistryClientSubscribe4OptionalParams, callback: msRest.ServiceCallback<void>): void;
  subscribe4(options?: Models.AzureOpcRegistryClientSubscribe4OptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      subscribe4OperationSpec,
      callback);
  }

  /**
   * Unregister a user and stop it from receiving publisher events.
   * @summary Unsubscribe registry events
   * @param userId The user id that will not receive any more publisher events
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  unsubscribe4(userId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param userId The user id that will not receive any more publisher events
   * @param callback The callback
   */
  unsubscribe4(userId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param userId The user id that will not receive any more publisher events
   * @param options The optional parameters
   * @param callback The callback
   */
  unsubscribe4(userId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  unsubscribe4(userId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        userId,
        options
      },
      unsubscribe4OperationSpec,
      callback);
  }

  /**
   * @summary Return the service status in the form of the service status
   * api model.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetStatusResponse>
   */
  getStatus(options?: msRest.RequestOptionsBase): Promise<Models.GetStatusResponse>;
  /**
   * @param callback The callback
   */
  getStatus(callback: msRest.ServiceCallback<Models.StatusResponseApiModel>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getStatus(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StatusResponseApiModel>): void;
  getStatus(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StatusResponseApiModel>, callback?: msRest.ServiceCallback<Models.StatusResponseApiModel>): Promise<Models.GetStatusResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getStatusOperationSpec,
      callback) as Promise<Models.GetStatusResponse>;
  }

  /**
   * Returns a supervisor's registration and connectivity information. A supervisor id corresponds to
   * the twin modules module identity.
   * @summary Get supervisor registration information
   * @param supervisorId Supervisor identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSupervisorResponse>
   */
  getSupervisor(supervisorId: string, options?: Models.AzureOpcRegistryClientGetSupervisorOptionalParams): Promise<Models.GetSupervisorResponse>;
  /**
   * @param supervisorId Supervisor identifier
   * @param callback The callback
   */
  getSupervisor(supervisorId: string, callback: msRest.ServiceCallback<Models.SupervisorApiModel>): void;
  /**
   * @param supervisorId Supervisor identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  getSupervisor(supervisorId: string, options: Models.AzureOpcRegistryClientGetSupervisorOptionalParams, callback: msRest.ServiceCallback<Models.SupervisorApiModel>): void;
  getSupervisor(supervisorId: string, options?: Models.AzureOpcRegistryClientGetSupervisorOptionalParams | msRest.ServiceCallback<Models.SupervisorApiModel>, callback?: msRest.ServiceCallback<Models.SupervisorApiModel>): Promise<Models.GetSupervisorResponse> {
    return this.sendOperationRequest(
      {
        supervisorId,
        options
      },
      getSupervisorOperationSpec,
      callback) as Promise<Models.GetSupervisorResponse>;
  }

  /**
   * Allows a caller to configure recurring discovery runs on the twin module identified by the
   * supervisor id or update site information.
   * @summary Update supervisor information
   * @param supervisorId supervisor identifier
   * @param body Patch request
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  updateSupervisor(supervisorId: string, body: Models.SupervisorUpdateApiModel, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param supervisorId supervisor identifier
   * @param body Patch request
   * @param callback The callback
   */
  updateSupervisor(supervisorId: string, body: Models.SupervisorUpdateApiModel, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param supervisorId supervisor identifier
   * @param body Patch request
   * @param options The optional parameters
   * @param callback The callback
   */
  updateSupervisor(supervisorId: string, body: Models.SupervisorUpdateApiModel, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  updateSupervisor(supervisorId: string, body: Models.SupervisorUpdateApiModel, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        supervisorId,
        body,
        options
      },
      updateSupervisorOperationSpec,
      callback);
  }

  /**
   * Allows a caller to get runtime status for a supervisor.
   * @summary Get runtime status of supervisor
   * @param supervisorId supervisor identifier
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSupervisorStatusResponse>
   */
  getSupervisorStatus(supervisorId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetSupervisorStatusResponse>;
  /**
   * @param supervisorId supervisor identifier
   * @param callback The callback
   */
  getSupervisorStatus(supervisorId: string, callback: msRest.ServiceCallback<Models.SupervisorStatusApiModel>): void;
  /**
   * @param supervisorId supervisor identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  getSupervisorStatus(supervisorId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SupervisorStatusApiModel>): void;
  getSupervisorStatus(supervisorId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SupervisorStatusApiModel>, callback?: msRest.ServiceCallback<Models.SupervisorStatusApiModel>): Promise<Models.GetSupervisorStatusResponse> {
    return this.sendOperationRequest(
      {
        supervisorId,
        options
      },
      getSupervisorStatusOperationSpec,
      callback) as Promise<Models.GetSupervisorStatusResponse>;
  }

  /**
   * Allows a caller to reset the twin module using its supervisor identity identifier.
   * @summary Reset supervisor
   * @param supervisorId supervisor identifier
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  resetSupervisor(supervisorId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param supervisorId supervisor identifier
   * @param callback The callback
   */
  resetSupervisor(supervisorId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param supervisorId supervisor identifier
   * @param options The optional parameters
   * @param callback The callback
   */
  resetSupervisor(supervisorId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  resetSupervisor(supervisorId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        supervisorId,
        options
      },
      resetSupervisorOperationSpec,
      callback);
  }

  /**
   * Get all registered supervisors and therefore twin modules in paged form. The returned model can
   * contain a continuation token if more results are available. Call this operation again using the
   * token to retrieve more results.
   * @summary Get list of supervisors
   * @param [options] The optional parameters
   * @returns Promise<Models.GetListOfSupervisorsResponse>
   */
  getListOfSupervisors(options?: Models.AzureOpcRegistryClientGetListOfSupervisorsOptionalParams): Promise<Models.GetListOfSupervisorsResponse>;
  /**
   * @param callback The callback
   */
  getListOfSupervisors(callback: msRest.ServiceCallback<Models.SupervisorListApiModel>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getListOfSupervisors(options: Models.AzureOpcRegistryClientGetListOfSupervisorsOptionalParams, callback: msRest.ServiceCallback<Models.SupervisorListApiModel>): void;
  getListOfSupervisors(options?: Models.AzureOpcRegistryClientGetListOfSupervisorsOptionalParams | msRest.ServiceCallback<Models.SupervisorListApiModel>, callback?: msRest.ServiceCallback<Models.SupervisorListApiModel>): Promise<Models.GetListOfSupervisorsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getListOfSupervisorsOperationSpec,
      callback) as Promise<Models.GetListOfSupervisorsResponse>;
  }

  /**
   * Get all supervisors that match a specified query. The returned model can contain a continuation
   * token if more results are available. Call the GetListOfSupervisors operation using the token to
   * retrieve more results.
   * @summary Query supervisors
   * @param body Supervisors query model
   * @param [options] The optional parameters
   * @returns Promise<Models.QuerySupervisorsResponse>
   */
  querySupervisors(body: Models.SupervisorQueryApiModel, options?: Models.AzureOpcRegistryClientQuerySupervisorsOptionalParams): Promise<Models.QuerySupervisorsResponse>;
  /**
   * @param body Supervisors query model
   * @param callback The callback
   */
  querySupervisors(body: Models.SupervisorQueryApiModel, callback: msRest.ServiceCallback<Models.SupervisorListApiModel>): void;
  /**
   * @param body Supervisors query model
   * @param options The optional parameters
   * @param callback The callback
   */
  querySupervisors(body: Models.SupervisorQueryApiModel, options: Models.AzureOpcRegistryClientQuerySupervisorsOptionalParams, callback: msRest.ServiceCallback<Models.SupervisorListApiModel>): void;
  querySupervisors(body: Models.SupervisorQueryApiModel, options?: Models.AzureOpcRegistryClientQuerySupervisorsOptionalParams | msRest.ServiceCallback<Models.SupervisorListApiModel>, callback?: msRest.ServiceCallback<Models.SupervisorListApiModel>): Promise<Models.QuerySupervisorsResponse> {
    return this.sendOperationRequest(
      {
        body,
        options
      },
      querySupervisorsOperationSpec,
      callback) as Promise<Models.QuerySupervisorsResponse>;
  }

  /**
   * Get a list of supervisors filtered using the specified query parameters. The returned model can
   * contain a continuation token if more results are available. Call the GetListOfSupervisors
   * operation using the token to retrieve more results.
   * @summary Get filtered list of supervisors
   * @param [options] The optional parameters
   * @returns Promise<Models.GetFilteredListOfSupervisorsResponse>
   */
  getFilteredListOfSupervisors(options?: Models.AzureOpcRegistryClientGetFilteredListOfSupervisorsOptionalParams): Promise<Models.GetFilteredListOfSupervisorsResponse>;
  /**
   * @param callback The callback
   */
  getFilteredListOfSupervisors(callback: msRest.ServiceCallback<Models.SupervisorListApiModel>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getFilteredListOfSupervisors(options: Models.AzureOpcRegistryClientGetFilteredListOfSupervisorsOptionalParams, callback: msRest.ServiceCallback<Models.SupervisorListApiModel>): void;
  getFilteredListOfSupervisors(options?: Models.AzureOpcRegistryClientGetFilteredListOfSupervisorsOptionalParams | msRest.ServiceCallback<Models.SupervisorListApiModel>, callback?: msRest.ServiceCallback<Models.SupervisorListApiModel>): Promise<Models.GetFilteredListOfSupervisorsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getFilteredListOfSupervisorsOperationSpec,
      callback) as Promise<Models.GetFilteredListOfSupervisorsResponse>;
  }

  /**
   * Register a user to receive supervisor events through SignalR.
   * @summary Subscribe to supervisor registry events
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  subscribe5(options?: Models.AzureOpcRegistryClientSubscribe5OptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param callback The callback
   */
  subscribe5(callback: msRest.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  subscribe5(options: Models.AzureOpcRegistryClientSubscribe5OptionalParams, callback: msRest.ServiceCallback<void>): void;
  subscribe5(options?: Models.AzureOpcRegistryClientSubscribe5OptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      subscribe5OperationSpec,
      callback);
  }

  /**
   * Unregister a user and stop it from receiving supervisor events.
   * @summary Unsubscribe registry events
   * @param userId The user id that will not receive any more supervisor events
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  unsubscribe5(userId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param userId The user id that will not receive any more supervisor events
   * @param callback The callback
   */
  unsubscribe5(userId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param userId The user id that will not receive any more supervisor events
   * @param options The optional parameters
   * @param callback The callback
   */
  unsubscribe5(userId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  unsubscribe5(userId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        userId,
        options
      },
      unsubscribe5OperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const registerServerOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/applications",
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.ServerRegistrationRequestApiModel,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const createApplicationOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "v2/applications",
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.ApplicationRegistrationRequestApiModel,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationRegistrationResponseApiModel
    },
    default: {}
  },
  serializer
};

const deleteAllDisabledApplicationsOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v2/applications",
  queryParameters: [
    Parameters.notSeenFor
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const getListOfApplicationsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/applications",
  queryParameters: [
    Parameters.continuationToken,
    Parameters.pageSize
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationInfoListApiModel
    },
    default: {}
  },
  serializer
};

const disableApplicationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/applications/{applicationId}/disable",
  urlParameters: [
    Parameters.applicationId0
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const enableApplicationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/applications/{applicationId}/enable",
  urlParameters: [
    Parameters.applicationId0
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const discoverServerOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/applications/discover",
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.DiscoveryRequestApiModel,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const cancelOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v2/applications/discover/{requestId}",
  urlParameters: [
    Parameters.requestId
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const getApplicationRegistrationOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/applications/{applicationId}",
  urlParameters: [
    Parameters.applicationId0
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationRegistrationApiModel
    },
    default: {}
  },
  serializer
};

const updateApplicationRegistrationOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v2/applications/{applicationId}",
  urlParameters: [
    Parameters.applicationId0
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.ApplicationRegistrationUpdateApiModel,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const deleteApplicationOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v2/applications/{applicationId}",
  urlParameters: [
    Parameters.applicationId0
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const getListOfSitesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/applications/sites",
  queryParameters: [
    Parameters.continuationToken,
    Parameters.pageSize
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationSiteListApiModel
    },
    default: {}
  },
  serializer
};

const queryApplicationsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/applications/query",
  queryParameters: [
    Parameters.pageSize
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.ApplicationRegistrationQueryApiModel,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationInfoListApiModel
    },
    default: {}
  },
  serializer
};

const getFilteredListOfApplicationsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/applications/query",
  queryParameters: [
    Parameters.pageSize
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.ApplicationRegistrationQueryApiModel,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationInfoListApiModel
    },
    default: {}
  },
  serializer
};

const queryApplicationsByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/applications/querybyid",
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.ApplicationRecordQueryApiModel
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.ApplicationRecordListApiModel
    },
    default: {}
  },
  serializer
};

const subscribeOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "v2/applications/events",
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: {
      serializedName: "body",
      type: {
        name: "String"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const unsubscribeOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v2/applications/events/{userId}",
  urlParameters: [
    Parameters.userId
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const getDiscovererOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/discovery/{discovererId}",
  urlParameters: [
    Parameters.discovererId0
  ],
  queryParameters: [
    Parameters.onlyServerState
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DiscovererApiModel
    },
    default: {}
  },
  serializer
};

const updateDiscovererOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v2/discovery/{discovererId}",
  urlParameters: [
    Parameters.discovererId0
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.DiscovererUpdateApiModel,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const setDiscoveryModeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/discovery/{discovererId}",
  urlParameters: [
    Parameters.discovererId0
  ],
  queryParameters: [
    Parameters.mode
  ],
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: Mappers.DiscoveryConfigApiModel
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const getListOfDiscoverersOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/discovery",
  queryParameters: [
    Parameters.onlyServerState,
    Parameters.continuationToken,
    Parameters.pageSize
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DiscovererListApiModel
    },
    default: {}
  },
  serializer
};

const queryDiscoverersOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/discovery/query",
  queryParameters: [
    Parameters.onlyServerState,
    Parameters.pageSize
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.DiscovererQueryApiModel,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.DiscovererListApiModel
    },
    default: {}
  },
  serializer
};

const getFilteredListOfDiscoverersOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/discovery/query",
  queryParameters: [
    Parameters.siteId,
    Parameters.discovery,
    Parameters.connected,
    Parameters.onlyServerState,
    Parameters.pageSize
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DiscovererListApiModel
    },
    default: {}
  },
  serializer
};

const subscribe1OperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "v2/discovery/events",
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: {
      serializedName: "body",
      type: {
        name: "String"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const unsubscribe1OperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v2/discovery/events/{userId}",
  urlParameters: [
    Parameters.userId
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const subscribeByDiscovererIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "v2/discovery/{discovererId}/events",
  urlParameters: [
    Parameters.discovererId0
  ],
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: {
      serializedName: "body",
      type: {
        name: "String"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const subscribeByRequestIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "v2/discovery/requests/{requestId}/events",
  urlParameters: [
    Parameters.requestId
  ],
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: {
      serializedName: "body",
      type: {
        name: "String"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const unsubscribeByRequestIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v2/discovery/requests/{requestId}/events/{userId}",
  urlParameters: [
    Parameters.requestId,
    Parameters.userId
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const unsubscribeByDiscovererIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v2/discovery/{discovererId}/events/{userId}",
  urlParameters: [
    Parameters.discovererId0,
    Parameters.userId
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const activateEndpointOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/endpoints/{endpointId}/activate",
  urlParameters: [
    Parameters.endpointId
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const getEndpointOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/endpoints/{endpointId}",
  urlParameters: [
    Parameters.endpointId
  ],
  queryParameters: [
    Parameters.onlyServerState
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EndpointInfoApiModel
    },
    default: {}
  },
  serializer
};

const getListOfEndpointsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/endpoints",
  queryParameters: [
    Parameters.onlyServerState,
    Parameters.continuationToken,
    Parameters.pageSize
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EndpointInfoListApiModel
    },
    default: {}
  },
  serializer
};

const queryEndpointsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/endpoints/query",
  queryParameters: [
    Parameters.onlyServerState,
    Parameters.pageSize
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.EndpointRegistrationQueryApiModel,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.EndpointInfoListApiModel
    },
    default: {}
  },
  serializer
};

const getFilteredListOfEndpointsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/endpoints/query",
  queryParameters: [
    Parameters.url,
    Parameters.certificate,
    Parameters.securityMode,
    Parameters.securityPolicy,
    Parameters.activated,
    Parameters.connected,
    Parameters.endpointState,
    Parameters.includeNotSeenSince,
    Parameters.discovererId1,
    Parameters.applicationId1,
    Parameters.supervisorId0,
    Parameters.siteOrGatewayId,
    Parameters.onlyServerState,
    Parameters.pageSize
  ],
  responses: {
    200: {
      bodyMapper: Mappers.EndpointInfoListApiModel
    },
    default: {}
  },
  serializer
};

const deactivateEndpointOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/endpoints/{endpointId}/deactivate",
  urlParameters: [
    Parameters.endpointId
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const subscribe2OperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "v2/endpoints/events",
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: {
      serializedName: "body",
      type: {
        name: "String"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const unsubscribe2OperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v2/endpoints/events/{userId}",
  urlParameters: [
    Parameters.userId
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const getGatewayOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/gateways/{GatewayId}",
  urlParameters: [
    Parameters.gatewayId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GatewayInfoApiModel
    },
    default: {}
  },
  serializer
};

const updateGatewayOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v2/gateways/{GatewayId}",
  urlParameters: [
    Parameters.gatewayId
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.GatewayUpdateApiModel,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const getListOfGatewayOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/gateways",
  queryParameters: [
    Parameters.continuationToken,
    Parameters.pageSize
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GatewayListApiModel
    },
    default: {}
  },
  serializer
};

const queryGatewayOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/gateways/query",
  queryParameters: [
    Parameters.pageSize
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.GatewayQueryApiModel,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.GatewayListApiModel
    },
    default: {}
  },
  serializer
};

const getFilteredListOfGatewayOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/gateways/query",
  queryParameters: [
    Parameters.siteId,
    Parameters.connected,
    Parameters.pageSize
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GatewayListApiModel
    },
    default: {}
  },
  serializer
};

const subscribe3OperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "v2/gateways/events",
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: {
      serializedName: "body",
      type: {
        name: "String"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const unsubscribe3OperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v2/gateways/events/{userId}",
  urlParameters: [
    Parameters.userId
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const getPublisherOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/publishers/{publisherId}",
  urlParameters: [
    Parameters.publisherId
  ],
  queryParameters: [
    Parameters.onlyServerState
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PublisherApiModel
    },
    default: {}
  },
  serializer
};

const updatePublisherOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v2/publishers/{publisherId}",
  urlParameters: [
    Parameters.publisherId
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.PublisherUpdateApiModel,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const getListOfPublisherOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/publishers",
  queryParameters: [
    Parameters.onlyServerState,
    Parameters.continuationToken,
    Parameters.pageSize
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PublisherListApiModel
    },
    default: {}
  },
  serializer
};

const queryPublisherOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/publishers/query",
  queryParameters: [
    Parameters.onlyServerState,
    Parameters.pageSize
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.PublisherQueryApiModel,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.PublisherListApiModel
    },
    default: {}
  },
  serializer
};

const getFilteredListOfPublisherOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/publishers/query",
  queryParameters: [
    Parameters.siteId,
    Parameters.connected,
    Parameters.onlyServerState,
    Parameters.pageSize
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PublisherListApiModel
    },
    default: {}
  },
  serializer
};

const subscribe4OperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "v2/publishers/events",
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: {
      serializedName: "body",
      type: {
        name: "String"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const unsubscribe4OperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v2/publishers/events/{userId}",
  urlParameters: [
    Parameters.userId
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const getStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/status",
  responses: {
    200: {
      bodyMapper: Mappers.StatusResponseApiModel
    },
    default: {}
  },
  serializer
};

const getSupervisorOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/supervisors/{supervisorId}",
  urlParameters: [
    Parameters.supervisorId1
  ],
  queryParameters: [
    Parameters.onlyServerState
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SupervisorApiModel
    },
    default: {}
  },
  serializer
};

const updateSupervisorOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "v2/supervisors/{supervisorId}",
  urlParameters: [
    Parameters.supervisorId1
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.SupervisorUpdateApiModel,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const getSupervisorStatusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/supervisors/{supervisorId}/status",
  urlParameters: [
    Parameters.supervisorId1
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SupervisorStatusApiModel
    },
    default: {}
  },
  serializer
};

const resetSupervisorOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/supervisors/{supervisorId}/reset",
  urlParameters: [
    Parameters.supervisorId1
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const getListOfSupervisorsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/supervisors",
  queryParameters: [
    Parameters.onlyServerState,
    Parameters.continuationToken,
    Parameters.pageSize
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SupervisorListApiModel
    },
    default: {}
  },
  serializer
};

const querySupervisorsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v2/supervisors/query",
  queryParameters: [
    Parameters.onlyServerState,
    Parameters.pageSize
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.SupervisorQueryApiModel,
      required: true
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.SupervisorListApiModel
    },
    default: {}
  },
  serializer
};

const getFilteredListOfSupervisorsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v2/supervisors/query",
  queryParameters: [
    Parameters.siteId,
    Parameters.connected,
    Parameters.onlyServerState,
    Parameters.pageSize
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SupervisorListApiModel
    },
    default: {}
  },
  serializer
};

const subscribe5OperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "v2/supervisors/events",
  requestBody: {
    parameterPath: [
      "options",
      "body"
    ],
    mapper: {
      serializedName: "body",
      type: {
        name: "String"
      }
    }
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const unsubscribe5OperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v2/supervisors/events/{userId}",
  urlParameters: [
    Parameters.userId
  ],
  responses: {
    200: {},
    default: {}
  },
  serializer
};

export {
  AzureOpcRegistryClient,
  AzureOpcRegistryClientContext,
  Models as AzureOpcRegistryModels,
  Mappers as AzureOpcRegistryMappers
};
