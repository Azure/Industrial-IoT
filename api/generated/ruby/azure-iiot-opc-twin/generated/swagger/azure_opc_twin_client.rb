# encoding: utf-8
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module azure.iiot.opc.twin
  #
  # A service client - single point of access to the REST API.
  #
  class AzureOpcTwinClient < MsRest::ServiceClient
    include MsRest::Serialization

    # @return [String] the base URI of the service.
    attr_accessor :base_url

    # @return Subscription credentials which uniquely identify client
    # subscription.
    attr_accessor :credentials

    #
    # Creates initializes a new instance of the AzureOpcTwinClient class.
    # @param credentials [MsRest::ServiceClientCredentials] credentials to authorize HTTP requests made by the service client.
    # @param base_url [String] the base URI of the service.
    # @param options [Array] filters to be applied to the HTTP requests.
    #
    def initialize(credentials = nil, base_url = nil, options = nil)
      super(credentials, options)
      @base_url = base_url || 'http://localhost/twin'

      fail ArgumentError, 'invalid type of credentials input parameter' unless credentials.is_a?(MsRest::ServiceClientCredentials) unless credentials.nil?
      @credentials = credentials

      add_telemetry
    end

    #
    # Makes a request and returns the body of the response.
    # @param method [Symbol] with any of the following values :get, :put, :post, :patch, :delete.
    # @param path [String] the path, relative to {base_url}.
    # @param options [Hash{String=>String}] specifying any request options like :body.
    # @return [Hash{String=>String}] containing the body of the response.
    # Example:
    #
    #  request_content = "{'location':'westus','tags':{'tag1':'val1','tag2':'val2'}}"
    #  path = "/path"
    #  options = {
    #    body: request_content,
    #    query_params: {'api-version' => '2016-02-01'}
    #  }
    #  result = @client.make_request(:put, path, options)
    #
    def make_request(method, path, options = {})
      result = make_request_with_http_info(method, path, options)
      result.body unless result.nil?
    end

    #
    # Makes a request and returns the operation response.
    # @param method [Symbol] with any of the following values :get, :put, :post, :patch, :delete.
    # @param path [String] the path, relative to {base_url}.
    # @param options [Hash{String=>String}] specifying any request options like :body.
    # @return [MsRest::HttpOperationResponse] Operation response containing the request, response and status.
    #
    def make_request_with_http_info(method, path, options = {})
      result = make_request_async(method, path, options).value!
      result.body = result.response.body.to_s.empty? ? nil : JSON.load(result.response.body)
      result
    end

    #
    # Makes a request asynchronously.
    # @param method [Symbol] with any of the following values :get, :put, :post, :patch, :delete.
    # @param path [String] the path, relative to {base_url}.
    # @param options [Hash{String=>String}] specifying any request options like :body.
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def make_request_async(method, path, options = {})
      fail ArgumentError, 'method is nil' if method.nil?
      fail ArgumentError, 'path is nil' if path.nil?

      request_url = options[:base_url] || @base_url
      if(!options[:headers].nil? && !options[:headers]['Content-Type'].nil?)
        @request_headers['Content-Type'] = options[:headers]['Content-Type']
      end

      request_headers = @request_headers
      options.merge!({headers: request_headers.merge(options[:headers] || {})})
      options.merge!({credentials: @credentials}) unless @credentials.nil?

      super(request_url, method, path, options)
    end

    #
    # Browse set of unique target nodes
    #
    # Browse the set of unique hierarchically referenced target nodes on the
    # endpoint.
    # The endpoint must be activated and connected and the module client
    # and server must trust each other.
    # The root node id to browse from can be provided as part of the query
    # parameters.
    # If it is not provided, the RootFolder node is browsed. Note that this
    # is the same as the POST method with the model containing the node id
    # and the targetNodesOnly flag set to true.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param node_id [String] The node to browse or omit to browse the root node
    # (i=84)
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [BrowseResponseApiModel] operation results.
    #
    def get_set_of_unique_nodes(endpoint_id, node_id:nil, custom_headers:nil)
      response = get_set_of_unique_nodes_async(endpoint_id, node_id:node_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Browse set of unique target nodes
    #
    # Browse the set of unique hierarchically referenced target nodes on the
    # endpoint.
    # The endpoint must be activated and connected and the module client
    # and server must trust each other.
    # The root node id to browse from can be provided as part of the query
    # parameters.
    # If it is not provided, the RootFolder node is browsed. Note that this
    # is the same as the POST method with the model containing the node id
    # and the targetNodesOnly flag set to true.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param node_id [String] The node to browse or omit to browse the root node
    # (i=84)
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_set_of_unique_nodes_with_http_info(endpoint_id, node_id:nil, custom_headers:nil)
      get_set_of_unique_nodes_async(endpoint_id, node_id:node_id, custom_headers:custom_headers).value!
    end

    #
    # Browse set of unique target nodes
    #
    # Browse the set of unique hierarchically referenced target nodes on the
    # endpoint.
    # The endpoint must be activated and connected and the module client
    # and server must trust each other.
    # The root node id to browse from can be provided as part of the query
    # parameters.
    # If it is not provided, the RootFolder node is browsed. Note that this
    # is the same as the POST method with the model containing the node id
    # and the targetNodesOnly flag set to true.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param node_id [String] The node to browse or omit to browse the root node
    # (i=84)
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_set_of_unique_nodes_async(endpoint_id, node_id:nil, custom_headers:nil)
      fail ArgumentError, 'endpoint_id is nil' if endpoint_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      path_template = 'v2/browse/{endpointId}'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'endpointId' => endpoint_id},
          query_params: {'nodeId' => node_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = azure.iiot.opc.twin::Models::BrowseResponseApiModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Browse node references
    #
    # Browse a node on the specified endpoint.
    # The endpoint must be activated and connected and the module client
    # and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param request [BrowseRequestApiModel] The browse request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [BrowseResponseApiModel] operation results.
    #
    def browse(endpoint_id, request, custom_headers:nil)
      response = browse_async(endpoint_id, request, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Browse node references
    #
    # Browse a node on the specified endpoint.
    # The endpoint must be activated and connected and the module client
    # and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param request [BrowseRequestApiModel] The browse request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def browse_with_http_info(endpoint_id, request, custom_headers:nil)
      browse_async(endpoint_id, request, custom_headers:custom_headers).value!
    end

    #
    # Browse node references
    #
    # Browse a node on the specified endpoint.
    # The endpoint must be activated and connected and the module client
    # and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param request [BrowseRequestApiModel] The browse request
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def browse_async(endpoint_id, request, custom_headers:nil)
      fail ArgumentError, 'endpoint_id is nil' if endpoint_id.nil?
      fail ArgumentError, 'request is nil' if request.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json-patch+json; charset=utf-8'

      # Serialize Request
      request_mapper = azure.iiot.opc.twin::Models::BrowseRequestApiModel.mapper()
      request_content = self.serialize(request_mapper,  request)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v2/browse/{endpointId}'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'endpointId' => endpoint_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = azure.iiot.opc.twin::Models::BrowseResponseApiModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Browse next set of unique target nodes
    #
    # Browse the next set of unique hierarchically referenced target nodes on the
    # endpoint.
    # The endpoint must be activated and connected and the module client
    # and server must trust each other.
    # Note that this is the same as the POST method with the model containing
    # the continuation token and the targetNodesOnly flag set to true.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param continuation_token [String] Continuation token from
    # GetSetOfUniqueNodes operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [BrowseNextResponseApiModel] operation results.
    #
    def get_next_set_of_unique_nodes(endpoint_id, continuation_token, custom_headers:nil)
      response = get_next_set_of_unique_nodes_async(endpoint_id, continuation_token, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Browse next set of unique target nodes
    #
    # Browse the next set of unique hierarchically referenced target nodes on the
    # endpoint.
    # The endpoint must be activated and connected and the module client
    # and server must trust each other.
    # Note that this is the same as the POST method with the model containing
    # the continuation token and the targetNodesOnly flag set to true.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param continuation_token [String] Continuation token from
    # GetSetOfUniqueNodes operation
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_next_set_of_unique_nodes_with_http_info(endpoint_id, continuation_token, custom_headers:nil)
      get_next_set_of_unique_nodes_async(endpoint_id, continuation_token, custom_headers:custom_headers).value!
    end

    #
    # Browse next set of unique target nodes
    #
    # Browse the next set of unique hierarchically referenced target nodes on the
    # endpoint.
    # The endpoint must be activated and connected and the module client
    # and server must trust each other.
    # Note that this is the same as the POST method with the model containing
    # the continuation token and the targetNodesOnly flag set to true.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param continuation_token [String] Continuation token from
    # GetSetOfUniqueNodes operation
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_next_set_of_unique_nodes_async(endpoint_id, continuation_token, custom_headers:nil)
      fail ArgumentError, 'endpoint_id is nil' if endpoint_id.nil?
      fail ArgumentError, 'continuation_token is nil' if continuation_token.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      path_template = 'v2/browse/{endpointId}/next'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'endpointId' => endpoint_id},
          query_params: {'continuationToken' => continuation_token},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = azure.iiot.opc.twin::Models::BrowseNextResponseApiModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Browse next set of references
    #
    # Browse next set of references on the endpoint.
    # The endpoint must be activated and connected and the module client
    # and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param request [BrowseNextRequestApiModel] The request body with continuation
    # token.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [BrowseNextResponseApiModel] operation results.
    #
    def browse_next(endpoint_id, request, custom_headers:nil)
      response = browse_next_async(endpoint_id, request, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Browse next set of references
    #
    # Browse next set of references on the endpoint.
    # The endpoint must be activated and connected and the module client
    # and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param request [BrowseNextRequestApiModel] The request body with continuation
    # token.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def browse_next_with_http_info(endpoint_id, request, custom_headers:nil)
      browse_next_async(endpoint_id, request, custom_headers:custom_headers).value!
    end

    #
    # Browse next set of references
    #
    # Browse next set of references on the endpoint.
    # The endpoint must be activated and connected and the module client
    # and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param request [BrowseNextRequestApiModel] The request body with continuation
    # token.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def browse_next_async(endpoint_id, request, custom_headers:nil)
      fail ArgumentError, 'endpoint_id is nil' if endpoint_id.nil?
      fail ArgumentError, 'request is nil' if request.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json-patch+json; charset=utf-8'

      # Serialize Request
      request_mapper = azure.iiot.opc.twin::Models::BrowseNextRequestApiModel.mapper()
      request_content = self.serialize(request_mapper,  request)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v2/browse/{endpointId}/next'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'endpointId' => endpoint_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = azure.iiot.opc.twin::Models::BrowseNextResponseApiModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Browse using a browse path
    #
    # Browse using a path from the specified node id.
    # This call uses TranslateBrowsePathsToNodeIds service under the hood.
    # The endpoint must be activated and connected and the module client
    # and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param request [BrowsePathRequestApiModel] The browse path request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [BrowsePathResponseApiModel] operation results.
    #
    def browse_using_path(endpoint_id, request, custom_headers:nil)
      response = browse_using_path_async(endpoint_id, request, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Browse using a browse path
    #
    # Browse using a path from the specified node id.
    # This call uses TranslateBrowsePathsToNodeIds service under the hood.
    # The endpoint must be activated and connected and the module client
    # and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param request [BrowsePathRequestApiModel] The browse path request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def browse_using_path_with_http_info(endpoint_id, request, custom_headers:nil)
      browse_using_path_async(endpoint_id, request, custom_headers:custom_headers).value!
    end

    #
    # Browse using a browse path
    #
    # Browse using a path from the specified node id.
    # This call uses TranslateBrowsePathsToNodeIds service under the hood.
    # The endpoint must be activated and connected and the module client
    # and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param request [BrowsePathRequestApiModel] The browse path request
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def browse_using_path_async(endpoint_id, request, custom_headers:nil)
      fail ArgumentError, 'endpoint_id is nil' if endpoint_id.nil?
      fail ArgumentError, 'request is nil' if request.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json-patch+json; charset=utf-8'

      # Serialize Request
      request_mapper = azure.iiot.opc.twin::Models::BrowsePathRequestApiModel.mapper()
      request_content = self.serialize(request_mapper,  request)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v2/browse/{endpointId}/path'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'endpointId' => endpoint_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = azure.iiot.opc.twin::Models::BrowsePathResponseApiModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get method meta data
    #
    # Return method meta data to support a user interface displaying forms to
    # input and output arguments.
    # The endpoint must be activated and connected and the module client
    # and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param request [MethodMetadataRequestApiModel] The method metadata request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MethodMetadataResponseApiModel] operation results.
    #
    def get_call_metadata(endpoint_id, request, custom_headers:nil)
      response = get_call_metadata_async(endpoint_id, request, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get method meta data
    #
    # Return method meta data to support a user interface displaying forms to
    # input and output arguments.
    # The endpoint must be activated and connected and the module client
    # and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param request [MethodMetadataRequestApiModel] The method metadata request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_call_metadata_with_http_info(endpoint_id, request, custom_headers:nil)
      get_call_metadata_async(endpoint_id, request, custom_headers:custom_headers).value!
    end

    #
    # Get method meta data
    #
    # Return method meta data to support a user interface displaying forms to
    # input and output arguments.
    # The endpoint must be activated and connected and the module client
    # and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param request [MethodMetadataRequestApiModel] The method metadata request
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_call_metadata_async(endpoint_id, request, custom_headers:nil)
      fail ArgumentError, 'endpoint_id is nil' if endpoint_id.nil?
      fail ArgumentError, 'request is nil' if request.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json-patch+json; charset=utf-8'

      # Serialize Request
      request_mapper = azure.iiot.opc.twin::Models::MethodMetadataRequestApiModel.mapper()
      request_content = self.serialize(request_mapper,  request)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v2/call/{endpointId}/metadata'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'endpointId' => endpoint_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = azure.iiot.opc.twin::Models::MethodMetadataResponseApiModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Call a method
    #
    # Invoke method node with specified input arguments.
    # The endpoint must be activated and connected and the module client
    # and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param request [MethodCallRequestApiModel] The method call request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MethodCallResponseApiModel] operation results.
    #
    def call_method(endpoint_id, request, custom_headers:nil)
      response = call_method_async(endpoint_id, request, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Call a method
    #
    # Invoke method node with specified input arguments.
    # The endpoint must be activated and connected and the module client
    # and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param request [MethodCallRequestApiModel] The method call request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def call_method_with_http_info(endpoint_id, request, custom_headers:nil)
      call_method_async(endpoint_id, request, custom_headers:custom_headers).value!
    end

    #
    # Call a method
    #
    # Invoke method node with specified input arguments.
    # The endpoint must be activated and connected and the module client
    # and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param request [MethodCallRequestApiModel] The method call request
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def call_method_async(endpoint_id, request, custom_headers:nil)
      fail ArgumentError, 'endpoint_id is nil' if endpoint_id.nil?
      fail ArgumentError, 'request is nil' if request.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json-patch+json; charset=utf-8'

      # Serialize Request
      request_mapper = azure.iiot.opc.twin::Models::MethodCallRequestApiModel.mapper()
      request_content = self.serialize(request_mapper,  request)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v2/call/{endpointId}'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'endpointId' => endpoint_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = azure.iiot.opc.twin::Models::MethodCallResponseApiModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get variable value
    #
    # Get a variable node's value using its node id.
    # The endpoint must be activated and connected and the module client
    # and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param node_id [String] The node to read
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ValueReadResponseApiModel] operation results.
    #
    def get_value(endpoint_id, node_id, custom_headers:nil)
      response = get_value_async(endpoint_id, node_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get variable value
    #
    # Get a variable node's value using its node id.
    # The endpoint must be activated and connected and the module client
    # and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param node_id [String] The node to read
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_value_with_http_info(endpoint_id, node_id, custom_headers:nil)
      get_value_async(endpoint_id, node_id, custom_headers:custom_headers).value!
    end

    #
    # Get variable value
    #
    # Get a variable node's value using its node id.
    # The endpoint must be activated and connected and the module client
    # and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param node_id [String] The node to read
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_value_async(endpoint_id, node_id, custom_headers:nil)
      fail ArgumentError, 'endpoint_id is nil' if endpoint_id.nil?
      fail ArgumentError, 'node_id is nil' if node_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      path_template = 'v2/read/{endpointId}'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'endpointId' => endpoint_id},
          query_params: {'nodeId' => node_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = azure.iiot.opc.twin::Models::ValueReadResponseApiModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Read variable value
    #
    # Read a variable node's value.
    # The endpoint must be activated and connected and the module client
    # and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param request [ValueReadRequestApiModel] The read value request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ValueReadResponseApiModel] operation results.
    #
    def read_value(endpoint_id, request, custom_headers:nil)
      response = read_value_async(endpoint_id, request, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Read variable value
    #
    # Read a variable node's value.
    # The endpoint must be activated and connected and the module client
    # and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param request [ValueReadRequestApiModel] The read value request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def read_value_with_http_info(endpoint_id, request, custom_headers:nil)
      read_value_async(endpoint_id, request, custom_headers:custom_headers).value!
    end

    #
    # Read variable value
    #
    # Read a variable node's value.
    # The endpoint must be activated and connected and the module client
    # and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param request [ValueReadRequestApiModel] The read value request
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def read_value_async(endpoint_id, request, custom_headers:nil)
      fail ArgumentError, 'endpoint_id is nil' if endpoint_id.nil?
      fail ArgumentError, 'request is nil' if request.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json-patch+json; charset=utf-8'

      # Serialize Request
      request_mapper = azure.iiot.opc.twin::Models::ValueReadRequestApiModel.mapper()
      request_content = self.serialize(request_mapper,  request)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v2/read/{endpointId}'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'endpointId' => endpoint_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = azure.iiot.opc.twin::Models::ValueReadResponseApiModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Read node attributes
    #
    # Read attributes of a node.
    # The endpoint must be activated and connected and the module client
    # and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param request [ReadRequestApiModel] The read request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ReadResponseApiModel] operation results.
    #
    def read_attributes(endpoint_id, request, custom_headers:nil)
      response = read_attributes_async(endpoint_id, request, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Read node attributes
    #
    # Read attributes of a node.
    # The endpoint must be activated and connected and the module client
    # and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param request [ReadRequestApiModel] The read request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def read_attributes_with_http_info(endpoint_id, request, custom_headers:nil)
      read_attributes_async(endpoint_id, request, custom_headers:custom_headers).value!
    end

    #
    # Read node attributes
    #
    # Read attributes of a node.
    # The endpoint must be activated and connected and the module client
    # and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param request [ReadRequestApiModel] The read request
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def read_attributes_async(endpoint_id, request, custom_headers:nil)
      fail ArgumentError, 'endpoint_id is nil' if endpoint_id.nil?
      fail ArgumentError, 'request is nil' if request.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json-patch+json; charset=utf-8'

      # Serialize Request
      request_mapper = azure.iiot.opc.twin::Models::ReadRequestApiModel.mapper()
      request_content = self.serialize(request_mapper,  request)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v2/read/{endpointId}/attributes'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'endpointId' => endpoint_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = azure.iiot.opc.twin::Models::ReadResponseApiModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Return the service status in the form of the service status
    # api model.
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [StatusResponseApiModel] operation results.
    #
    def get_status(custom_headers:nil)
      response = get_status_async(custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Return the service status in the form of the service status
    # api model.
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_status_with_http_info(custom_headers:nil)
      get_status_async(custom_headers:custom_headers).value!
    end

    #
    # Return the service status in the form of the service status
    # api model.
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_status_async(custom_headers:nil)


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      path_template = 'v2/status'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = azure.iiot.opc.twin::Models::StatusResponseApiModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Write variable value
    #
    # Write variable node's value.
    # The endpoint must be activated and connected and the module client
    # and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param request [ValueWriteRequestApiModel] The write value request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ValueWriteResponseApiModel] operation results.
    #
    def write_value(endpoint_id, request, custom_headers:nil)
      response = write_value_async(endpoint_id, request, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Write variable value
    #
    # Write variable node's value.
    # The endpoint must be activated and connected and the module client
    # and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param request [ValueWriteRequestApiModel] The write value request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def write_value_with_http_info(endpoint_id, request, custom_headers:nil)
      write_value_async(endpoint_id, request, custom_headers:custom_headers).value!
    end

    #
    # Write variable value
    #
    # Write variable node's value.
    # The endpoint must be activated and connected and the module client
    # and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param request [ValueWriteRequestApiModel] The write value request
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def write_value_async(endpoint_id, request, custom_headers:nil)
      fail ArgumentError, 'endpoint_id is nil' if endpoint_id.nil?
      fail ArgumentError, 'request is nil' if request.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json-patch+json; charset=utf-8'

      # Serialize Request
      request_mapper = azure.iiot.opc.twin::Models::ValueWriteRequestApiModel.mapper()
      request_content = self.serialize(request_mapper,  request)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v2/write/{endpointId}'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'endpointId' => endpoint_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = azure.iiot.opc.twin::Models::ValueWriteResponseApiModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Write node attributes
    #
    # Write any attribute of a node.
    # The endpoint must be activated and connected and the module client
    # and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param request [WriteRequestApiModel] The batch write request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [WriteResponseApiModel] operation results.
    #
    def write_attributes(endpoint_id, request, custom_headers:nil)
      response = write_attributes_async(endpoint_id, request, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Write node attributes
    #
    # Write any attribute of a node.
    # The endpoint must be activated and connected and the module client
    # and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param request [WriteRequestApiModel] The batch write request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def write_attributes_with_http_info(endpoint_id, request, custom_headers:nil)
      write_attributes_async(endpoint_id, request, custom_headers:custom_headers).value!
    end

    #
    # Write node attributes
    #
    # Write any attribute of a node.
    # The endpoint must be activated and connected and the module client
    # and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param request [WriteRequestApiModel] The batch write request
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def write_attributes_async(endpoint_id, request, custom_headers:nil)
      fail ArgumentError, 'endpoint_id is nil' if endpoint_id.nil?
      fail ArgumentError, 'request is nil' if request.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json-patch+json; charset=utf-8'

      # Serialize Request
      request_mapper = azure.iiot.opc.twin::Models::WriteRequestApiModel.mapper()
      request_content = self.serialize(request_mapper,  request)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v2/write/{endpointId}/attributes'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'endpointId' => endpoint_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = azure.iiot.opc.twin::Models::WriteResponseApiModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end


    private
    #
    # Adds telemetry information.
    #
    def add_telemetry
        sdk_information = 'swagger'
        add_user_agent_information(sdk_information)
    end
  end
end
