# encoding: utf-8
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module azure.iiot.opc.history
  #
  # A service client - single point of access to the REST API.
  #
  class AzureOpcHistoryClient < MsRest::ServiceClient
    include MsRest::Serialization

    # @return [String] the base URI of the service.
    attr_accessor :base_url

    # @return Subscription credentials which uniquely identify client
    # subscription.
    attr_accessor :credentials

    #
    # Creates initializes a new instance of the AzureOpcHistoryClient class.
    # @param credentials [MsRest::ServiceClientCredentials] credentials to authorize HTTP requests made by the service client.
    # @param base_url [String] the base URI of the service.
    # @param options [Array] filters to be applied to the HTTP requests.
    #
    def initialize(credentials = nil, base_url = nil, options = nil)
      super(credentials, options)
      @base_url = base_url || 'http://localhost:9080'

      fail ArgumentError, 'invalid type of credentials input parameter' unless credentials.is_a?(MsRest::ServiceClientCredentials) unless credentials.nil?
      @credentials = credentials

      add_telemetry
    end

    #
    # Makes a request and returns the body of the response.
    # @param method [Symbol] with any of the following values :get, :put, :post, :patch, :delete.
    # @param path [String] the path, relative to {base_url}.
    # @param options [Hash{String=>String}] specifying any request options like :body.
    # @return [Hash{String=>String}] containing the body of the response.
    # Example:
    #
    #  request_content = "{'location':'westus','tags':{'tag1':'val1','tag2':'val2'}}"
    #  path = "/path"
    #  options = {
    #    body: request_content,
    #    query_params: {'api-version' => '2016-02-01'}
    #  }
    #  result = @client.make_request(:put, path, options)
    #
    def make_request(method, path, options = {})
      result = make_request_with_http_info(method, path, options)
      result.body unless result.nil?
    end

    #
    # Makes a request and returns the operation response.
    # @param method [Symbol] with any of the following values :get, :put, :post, :patch, :delete.
    # @param path [String] the path, relative to {base_url}.
    # @param options [Hash{String=>String}] specifying any request options like :body.
    # @return [MsRest::HttpOperationResponse] Operation response containing the request, response and status.
    #
    def make_request_with_http_info(method, path, options = {})
      result = make_request_async(method, path, options).value!
      result.body = result.response.body.to_s.empty? ? nil : JSON.load(result.response.body)
      result
    end

    #
    # Makes a request asynchronously.
    # @param method [Symbol] with any of the following values :get, :put, :post, :patch, :delete.
    # @param path [String] the path, relative to {base_url}.
    # @param options [Hash{String=>String}] specifying any request options like :body.
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def make_request_async(method, path, options = {})
      fail ArgumentError, 'method is nil' if method.nil?
      fail ArgumentError, 'path is nil' if path.nil?

      request_url = options[:base_url] || @base_url
      if(!options[:headers].nil? && !options[:headers]['Content-Type'].nil?)
        @request_headers['Content-Type'] = options[:headers]['Content-Type']
      end

      request_headers = @request_headers
      options.merge!({headers: request_headers.merge(options[:headers] || {})})
      options.merge!({credentials: @credentials}) unless @credentials.nil?

      super(request_url, method, path, options)
    end

    #
    # Delete value history at specified times
    #
    # Delete value history using historic access. The endpoint must be activated
    # and connected and the module client and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [DeleteValuesAtTimesDetailsApiModelHistoryUpdateRequestApiModel]
    # The history update request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [HistoryUpdateResponseApiModel] operation results.
    #
    def history_delete_values_at_times(endpoint_id, body, custom_headers:nil)
      response = history_delete_values_at_times_async(endpoint_id, body, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Delete value history at specified times
    #
    # Delete value history using historic access. The endpoint must be activated
    # and connected and the module client and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [DeleteValuesAtTimesDetailsApiModelHistoryUpdateRequestApiModel]
    # The history update request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def history_delete_values_at_times_with_http_info(endpoint_id, body, custom_headers:nil)
      history_delete_values_at_times_async(endpoint_id, body, custom_headers:custom_headers).value!
    end

    #
    # Delete value history at specified times
    #
    # Delete value history using historic access. The endpoint must be activated
    # and connected and the module client and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [DeleteValuesAtTimesDetailsApiModelHistoryUpdateRequestApiModel]
    # The history update request
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def history_delete_values_at_times_async(endpoint_id, body, custom_headers:nil)
      fail ArgumentError, 'endpoint_id is nil' if endpoint_id.nil?
      fail ArgumentError, 'body is nil' if body.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json-patch+json; charset=utf-8'

      # Serialize Request
      request_mapper = azure.iiot.opc.history::Models::DeleteValuesAtTimesDetailsApiModelHistoryUpdateRequestApiModel.mapper()
      request_content = self.serialize(request_mapper,  body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v2/delete/{endpointId}/values/pick'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'endpointId' => endpoint_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = azure.iiot.opc.history::Models::HistoryUpdateResponseApiModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Delete historic values
    #
    # Delete historic values using historic access. The endpoint must be activated
    # and connected and the module client and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [DeleteValuesDetailsApiModelHistoryUpdateRequestApiModel] The
    # history update request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [HistoryUpdateResponseApiModel] operation results.
    #
    def history_delete_values(endpoint_id, body, custom_headers:nil)
      response = history_delete_values_async(endpoint_id, body, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Delete historic values
    #
    # Delete historic values using historic access. The endpoint must be activated
    # and connected and the module client and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [DeleteValuesDetailsApiModelHistoryUpdateRequestApiModel] The
    # history update request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def history_delete_values_with_http_info(endpoint_id, body, custom_headers:nil)
      history_delete_values_async(endpoint_id, body, custom_headers:custom_headers).value!
    end

    #
    # Delete historic values
    #
    # Delete historic values using historic access. The endpoint must be activated
    # and connected and the module client and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [DeleteValuesDetailsApiModelHistoryUpdateRequestApiModel] The
    # history update request
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def history_delete_values_async(endpoint_id, body, custom_headers:nil)
      fail ArgumentError, 'endpoint_id is nil' if endpoint_id.nil?
      fail ArgumentError, 'body is nil' if body.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json-patch+json; charset=utf-8'

      # Serialize Request
      request_mapper = azure.iiot.opc.history::Models::DeleteValuesDetailsApiModelHistoryUpdateRequestApiModel.mapper()
      request_content = self.serialize(request_mapper,  body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v2/delete/{endpointId}/values'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'endpointId' => endpoint_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = azure.iiot.opc.history::Models::HistoryUpdateResponseApiModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Delete historic values
    #
    # Delete historic values using historic access. The endpoint must be activated
    # and connected and the module client and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [DeleteModifiedValuesDetailsApiModelHistoryUpdateRequestApiModel]
    # The history update request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [HistoryUpdateResponseApiModel] operation results.
    #
    def history_delete_modified_values(endpoint_id, body, custom_headers:nil)
      response = history_delete_modified_values_async(endpoint_id, body, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Delete historic values
    #
    # Delete historic values using historic access. The endpoint must be activated
    # and connected and the module client and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [DeleteModifiedValuesDetailsApiModelHistoryUpdateRequestApiModel]
    # The history update request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def history_delete_modified_values_with_http_info(endpoint_id, body, custom_headers:nil)
      history_delete_modified_values_async(endpoint_id, body, custom_headers:custom_headers).value!
    end

    #
    # Delete historic values
    #
    # Delete historic values using historic access. The endpoint must be activated
    # and connected and the module client and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [DeleteModifiedValuesDetailsApiModelHistoryUpdateRequestApiModel]
    # The history update request
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def history_delete_modified_values_async(endpoint_id, body, custom_headers:nil)
      fail ArgumentError, 'endpoint_id is nil' if endpoint_id.nil?
      fail ArgumentError, 'body is nil' if body.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json-patch+json; charset=utf-8'

      # Serialize Request
      request_mapper = azure.iiot.opc.history::Models::DeleteModifiedValuesDetailsApiModelHistoryUpdateRequestApiModel.mapper()
      request_content = self.serialize(request_mapper,  body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v2/delete/{endpointId}/values/modified'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'endpointId' => endpoint_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = azure.iiot.opc.history::Models::HistoryUpdateResponseApiModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Delete historic events
    #
    # Delete historic events using historic access. The endpoint must be activated
    # and connected and the module client and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [DeleteEventsDetailsApiModelHistoryUpdateRequestApiModel] The
    # history update request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [HistoryUpdateResponseApiModel] operation results.
    #
    def history_delete_events(endpoint_id, body, custom_headers:nil)
      response = history_delete_events_async(endpoint_id, body, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Delete historic events
    #
    # Delete historic events using historic access. The endpoint must be activated
    # and connected and the module client and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [DeleteEventsDetailsApiModelHistoryUpdateRequestApiModel] The
    # history update request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def history_delete_events_with_http_info(endpoint_id, body, custom_headers:nil)
      history_delete_events_async(endpoint_id, body, custom_headers:custom_headers).value!
    end

    #
    # Delete historic events
    #
    # Delete historic events using historic access. The endpoint must be activated
    # and connected and the module client and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [DeleteEventsDetailsApiModelHistoryUpdateRequestApiModel] The
    # history update request
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def history_delete_events_async(endpoint_id, body, custom_headers:nil)
      fail ArgumentError, 'endpoint_id is nil' if endpoint_id.nil?
      fail ArgumentError, 'body is nil' if body.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json-patch+json; charset=utf-8'

      # Serialize Request
      request_mapper = azure.iiot.opc.history::Models::DeleteEventsDetailsApiModelHistoryUpdateRequestApiModel.mapper()
      request_content = self.serialize(request_mapper,  body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v2/delete/{endpointId}/events'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'endpointId' => endpoint_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = azure.iiot.opc.history::Models::HistoryUpdateResponseApiModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Read history using json details
    #
    # Read node history if available using historic access. The endpoint must be
    # activated and connected and the module client and server must trust each
    # other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [JTokenHistoryReadRequestApiModel] The history read request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [JTokenHistoryReadResponseApiModel] operation results.
    #
    def history_read_raw(endpoint_id, body, custom_headers:nil)
      response = history_read_raw_async(endpoint_id, body, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Read history using json details
    #
    # Read node history if available using historic access. The endpoint must be
    # activated and connected and the module client and server must trust each
    # other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [JTokenHistoryReadRequestApiModel] The history read request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def history_read_raw_with_http_info(endpoint_id, body, custom_headers:nil)
      history_read_raw_async(endpoint_id, body, custom_headers:custom_headers).value!
    end

    #
    # Read history using json details
    #
    # Read node history if available using historic access. The endpoint must be
    # activated and connected and the module client and server must trust each
    # other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [JTokenHistoryReadRequestApiModel] The history read request
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def history_read_raw_async(endpoint_id, body, custom_headers:nil)
      fail ArgumentError, 'endpoint_id is nil' if endpoint_id.nil?
      fail ArgumentError, 'body is nil' if body.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json-patch+json; charset=utf-8'

      # Serialize Request
      request_mapper = azure.iiot.opc.history::Models::JTokenHistoryReadRequestApiModel.mapper()
      request_content = self.serialize(request_mapper,  body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v2/history/read/{endpointId}'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'endpointId' => endpoint_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = azure.iiot.opc.history::Models::JTokenHistoryReadResponseApiModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Read next batch of history as json
    #
    # Read next batch of node history values using historic access. The endpoint
    # must be activated and connected and the module client and server must trust
    # each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [HistoryReadNextRequestApiModel] The history read next request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [JTokenHistoryReadNextResponseApiModel] operation results.
    #
    def history_read_raw_next(endpoint_id, body, custom_headers:nil)
      response = history_read_raw_next_async(endpoint_id, body, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Read next batch of history as json
    #
    # Read next batch of node history values using historic access. The endpoint
    # must be activated and connected and the module client and server must trust
    # each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [HistoryReadNextRequestApiModel] The history read next request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def history_read_raw_next_with_http_info(endpoint_id, body, custom_headers:nil)
      history_read_raw_next_async(endpoint_id, body, custom_headers:custom_headers).value!
    end

    #
    # Read next batch of history as json
    #
    # Read next batch of node history values using historic access. The endpoint
    # must be activated and connected and the module client and server must trust
    # each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [HistoryReadNextRequestApiModel] The history read next request
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def history_read_raw_next_async(endpoint_id, body, custom_headers:nil)
      fail ArgumentError, 'endpoint_id is nil' if endpoint_id.nil?
      fail ArgumentError, 'body is nil' if body.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json-patch+json; charset=utf-8'

      # Serialize Request
      request_mapper = azure.iiot.opc.history::Models::HistoryReadNextRequestApiModel.mapper()
      request_content = self.serialize(request_mapper,  body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v2/history/read/{endpointId}/next'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'endpointId' => endpoint_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = azure.iiot.opc.history::Models::JTokenHistoryReadNextResponseApiModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Update node history using raw json
    #
    # Update node history using historic access. The endpoint must be activated and
    # connected and the module client and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [JTokenHistoryUpdateRequestApiModel] The history update request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [HistoryUpdateResponseApiModel] operation results.
    #
    def history_update_raw(endpoint_id, body, custom_headers:nil)
      response = history_update_raw_async(endpoint_id, body, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Update node history using raw json
    #
    # Update node history using historic access. The endpoint must be activated and
    # connected and the module client and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [JTokenHistoryUpdateRequestApiModel] The history update request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def history_update_raw_with_http_info(endpoint_id, body, custom_headers:nil)
      history_update_raw_async(endpoint_id, body, custom_headers:custom_headers).value!
    end

    #
    # Update node history using raw json
    #
    # Update node history using historic access. The endpoint must be activated and
    # connected and the module client and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [JTokenHistoryUpdateRequestApiModel] The history update request
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def history_update_raw_async(endpoint_id, body, custom_headers:nil)
      fail ArgumentError, 'endpoint_id is nil' if endpoint_id.nil?
      fail ArgumentError, 'body is nil' if body.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json-patch+json; charset=utf-8'

      # Serialize Request
      request_mapper = azure.iiot.opc.history::Models::JTokenHistoryUpdateRequestApiModel.mapper()
      request_content = self.serialize(request_mapper,  body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v2/history/update/{endpointId}'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'endpointId' => endpoint_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = azure.iiot.opc.history::Models::HistoryUpdateResponseApiModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Insert historic values
    #
    # Insert historic values using historic access. The endpoint must be activated
    # and connected and the module client and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [InsertValuesDetailsApiModelHistoryUpdateRequestApiModel] The
    # history insert request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [HistoryUpdateResponseApiModel] operation results.
    #
    def history_insert_values(endpoint_id, body, custom_headers:nil)
      response = history_insert_values_async(endpoint_id, body, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Insert historic values
    #
    # Insert historic values using historic access. The endpoint must be activated
    # and connected and the module client and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [InsertValuesDetailsApiModelHistoryUpdateRequestApiModel] The
    # history insert request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def history_insert_values_with_http_info(endpoint_id, body, custom_headers:nil)
      history_insert_values_async(endpoint_id, body, custom_headers:custom_headers).value!
    end

    #
    # Insert historic values
    #
    # Insert historic values using historic access. The endpoint must be activated
    # and connected and the module client and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [InsertValuesDetailsApiModelHistoryUpdateRequestApiModel] The
    # history insert request
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def history_insert_values_async(endpoint_id, body, custom_headers:nil)
      fail ArgumentError, 'endpoint_id is nil' if endpoint_id.nil?
      fail ArgumentError, 'body is nil' if body.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json-patch+json; charset=utf-8'

      # Serialize Request
      request_mapper = azure.iiot.opc.history::Models::InsertValuesDetailsApiModelHistoryUpdateRequestApiModel.mapper()
      request_content = self.serialize(request_mapper,  body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v2/insert/{endpointId}/values'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'endpointId' => endpoint_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = azure.iiot.opc.history::Models::HistoryUpdateResponseApiModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Insert historic events
    #
    # Insert historic events using historic access. The endpoint must be activated
    # and connected and the module client and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [InsertEventsDetailsApiModelHistoryUpdateRequestApiModel] The
    # history insert request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [HistoryUpdateResponseApiModel] operation results.
    #
    def history_insert_events(endpoint_id, body, custom_headers:nil)
      response = history_insert_events_async(endpoint_id, body, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Insert historic events
    #
    # Insert historic events using historic access. The endpoint must be activated
    # and connected and the module client and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [InsertEventsDetailsApiModelHistoryUpdateRequestApiModel] The
    # history insert request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def history_insert_events_with_http_info(endpoint_id, body, custom_headers:nil)
      history_insert_events_async(endpoint_id, body, custom_headers:custom_headers).value!
    end

    #
    # Insert historic events
    #
    # Insert historic events using historic access. The endpoint must be activated
    # and connected and the module client and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [InsertEventsDetailsApiModelHistoryUpdateRequestApiModel] The
    # history insert request
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def history_insert_events_async(endpoint_id, body, custom_headers:nil)
      fail ArgumentError, 'endpoint_id is nil' if endpoint_id.nil?
      fail ArgumentError, 'body is nil' if body.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json-patch+json; charset=utf-8'

      # Serialize Request
      request_mapper = azure.iiot.opc.history::Models::InsertEventsDetailsApiModelHistoryUpdateRequestApiModel.mapper()
      request_content = self.serialize(request_mapper,  body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v2/insert/{endpointId}/events'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'endpointId' => endpoint_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = azure.iiot.opc.history::Models::HistoryUpdateResponseApiModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Read historic events
    #
    # Read historic events of a node if available using historic access. The
    # endpoint must be activated and connected and the module client and server
    # must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [ReadEventsDetailsApiModelHistoryReadRequestApiModel] The history
    # read request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [HistoricEventApiModelSequenceHistoryReadResponseApiModel] operation
    # results.
    #
    def history_read_events(endpoint_id, body, custom_headers:nil)
      response = history_read_events_async(endpoint_id, body, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Read historic events
    #
    # Read historic events of a node if available using historic access. The
    # endpoint must be activated and connected and the module client and server
    # must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [ReadEventsDetailsApiModelHistoryReadRequestApiModel] The history
    # read request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def history_read_events_with_http_info(endpoint_id, body, custom_headers:nil)
      history_read_events_async(endpoint_id, body, custom_headers:custom_headers).value!
    end

    #
    # Read historic events
    #
    # Read historic events of a node if available using historic access. The
    # endpoint must be activated and connected and the module client and server
    # must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [ReadEventsDetailsApiModelHistoryReadRequestApiModel] The history
    # read request
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def history_read_events_async(endpoint_id, body, custom_headers:nil)
      fail ArgumentError, 'endpoint_id is nil' if endpoint_id.nil?
      fail ArgumentError, 'body is nil' if body.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json-patch+json; charset=utf-8'

      # Serialize Request
      request_mapper = azure.iiot.opc.history::Models::ReadEventsDetailsApiModelHistoryReadRequestApiModel.mapper()
      request_content = self.serialize(request_mapper,  body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v2/read/{endpointId}/events'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'endpointId' => endpoint_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = azure.iiot.opc.history::Models::HistoricEventApiModelSequenceHistoryReadResponseApiModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Read next batch of historic events
    #
    # Read next batch of historic events of a node using historic access. The
    # endpoint must be activated and connected and the module client and server
    # must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [HistoryReadNextRequestApiModel] The history read next request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [HistoricEventApiModelSequenceHistoryReadNextResponseApiModel]
    # operation results.
    #
    def history_read_events_next(endpoint_id, body, custom_headers:nil)
      response = history_read_events_next_async(endpoint_id, body, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Read next batch of historic events
    #
    # Read next batch of historic events of a node using historic access. The
    # endpoint must be activated and connected and the module client and server
    # must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [HistoryReadNextRequestApiModel] The history read next request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def history_read_events_next_with_http_info(endpoint_id, body, custom_headers:nil)
      history_read_events_next_async(endpoint_id, body, custom_headers:custom_headers).value!
    end

    #
    # Read next batch of historic events
    #
    # Read next batch of historic events of a node using historic access. The
    # endpoint must be activated and connected and the module client and server
    # must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [HistoryReadNextRequestApiModel] The history read next request
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def history_read_events_next_async(endpoint_id, body, custom_headers:nil)
      fail ArgumentError, 'endpoint_id is nil' if endpoint_id.nil?
      fail ArgumentError, 'body is nil' if body.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json-patch+json; charset=utf-8'

      # Serialize Request
      request_mapper = azure.iiot.opc.history::Models::HistoryReadNextRequestApiModel.mapper()
      request_content = self.serialize(request_mapper,  body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v2/read/{endpointId}/events/next'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'endpointId' => endpoint_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = azure.iiot.opc.history::Models::HistoricEventApiModelSequenceHistoryReadNextResponseApiModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Read historic processed values at specified times
    #
    # Read processed history values of a node if available using historic access.
    # The endpoint must be activated and connected and the module client and server
    # must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [ReadValuesDetailsApiModelHistoryReadRequestApiModel] The history
    # read request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [HistoricValueApiModelSequenceHistoryReadResponseApiModel] operation
    # results.
    #
    def history_read_values(endpoint_id, body, custom_headers:nil)
      response = history_read_values_async(endpoint_id, body, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Read historic processed values at specified times
    #
    # Read processed history values of a node if available using historic access.
    # The endpoint must be activated and connected and the module client and server
    # must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [ReadValuesDetailsApiModelHistoryReadRequestApiModel] The history
    # read request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def history_read_values_with_http_info(endpoint_id, body, custom_headers:nil)
      history_read_values_async(endpoint_id, body, custom_headers:custom_headers).value!
    end

    #
    # Read historic processed values at specified times
    #
    # Read processed history values of a node if available using historic access.
    # The endpoint must be activated and connected and the module client and server
    # must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [ReadValuesDetailsApiModelHistoryReadRequestApiModel] The history
    # read request
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def history_read_values_async(endpoint_id, body, custom_headers:nil)
      fail ArgumentError, 'endpoint_id is nil' if endpoint_id.nil?
      fail ArgumentError, 'body is nil' if body.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json-patch+json; charset=utf-8'

      # Serialize Request
      request_mapper = azure.iiot.opc.history::Models::ReadValuesDetailsApiModelHistoryReadRequestApiModel.mapper()
      request_content = self.serialize(request_mapper,  body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v2/read/{endpointId}/values'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'endpointId' => endpoint_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = azure.iiot.opc.history::Models::HistoricValueApiModelSequenceHistoryReadResponseApiModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Read historic values at specified times
    #
    # Read historic values of a node if available using historic access. The
    # endpoint must be activated and connected and the module client and server
    # must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [ReadValuesAtTimesDetailsApiModelHistoryReadRequestApiModel] The
    # history read request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [HistoricValueApiModelSequenceHistoryReadResponseApiModel] operation
    # results.
    #
    def history_read_values_at_times(endpoint_id, body, custom_headers:nil)
      response = history_read_values_at_times_async(endpoint_id, body, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Read historic values at specified times
    #
    # Read historic values of a node if available using historic access. The
    # endpoint must be activated and connected and the module client and server
    # must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [ReadValuesAtTimesDetailsApiModelHistoryReadRequestApiModel] The
    # history read request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def history_read_values_at_times_with_http_info(endpoint_id, body, custom_headers:nil)
      history_read_values_at_times_async(endpoint_id, body, custom_headers:custom_headers).value!
    end

    #
    # Read historic values at specified times
    #
    # Read historic values of a node if available using historic access. The
    # endpoint must be activated and connected and the module client and server
    # must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [ReadValuesAtTimesDetailsApiModelHistoryReadRequestApiModel] The
    # history read request
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def history_read_values_at_times_async(endpoint_id, body, custom_headers:nil)
      fail ArgumentError, 'endpoint_id is nil' if endpoint_id.nil?
      fail ArgumentError, 'body is nil' if body.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json-patch+json; charset=utf-8'

      # Serialize Request
      request_mapper = azure.iiot.opc.history::Models::ReadValuesAtTimesDetailsApiModelHistoryReadRequestApiModel.mapper()
      request_content = self.serialize(request_mapper,  body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v2/read/{endpointId}/values/pick'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'endpointId' => endpoint_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = azure.iiot.opc.history::Models::HistoricValueApiModelSequenceHistoryReadResponseApiModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Read historic processed values at specified times
    #
    # Read processed history values of a node if available using historic access.
    # The endpoint must be activated and connected and the module client and server
    # must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [ReadProcessedValuesDetailsApiModelHistoryReadRequestApiModel]
    # The history read request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [HistoricValueApiModelSequenceHistoryReadResponseApiModel] operation
    # results.
    #
    def history_read_processed_values(endpoint_id, body, custom_headers:nil)
      response = history_read_processed_values_async(endpoint_id, body, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Read historic processed values at specified times
    #
    # Read processed history values of a node if available using historic access.
    # The endpoint must be activated and connected and the module client and server
    # must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [ReadProcessedValuesDetailsApiModelHistoryReadRequestApiModel]
    # The history read request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def history_read_processed_values_with_http_info(endpoint_id, body, custom_headers:nil)
      history_read_processed_values_async(endpoint_id, body, custom_headers:custom_headers).value!
    end

    #
    # Read historic processed values at specified times
    #
    # Read processed history values of a node if available using historic access.
    # The endpoint must be activated and connected and the module client and server
    # must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [ReadProcessedValuesDetailsApiModelHistoryReadRequestApiModel]
    # The history read request
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def history_read_processed_values_async(endpoint_id, body, custom_headers:nil)
      fail ArgumentError, 'endpoint_id is nil' if endpoint_id.nil?
      fail ArgumentError, 'body is nil' if body.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json-patch+json; charset=utf-8'

      # Serialize Request
      request_mapper = azure.iiot.opc.history::Models::ReadProcessedValuesDetailsApiModelHistoryReadRequestApiModel.mapper()
      request_content = self.serialize(request_mapper,  body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v2/read/{endpointId}/values/processed'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'endpointId' => endpoint_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = azure.iiot.opc.history::Models::HistoricValueApiModelSequenceHistoryReadResponseApiModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Read historic modified values at specified times
    #
    # Read processed history values of a node if available using historic access.
    # The endpoint must be activated and connected and the module client and server
    # must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [ReadModifiedValuesDetailsApiModelHistoryReadRequestApiModel] The
    # history read request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [HistoricValueApiModelSequenceHistoryReadResponseApiModel] operation
    # results.
    #
    def history_read_modified_values(endpoint_id, body, custom_headers:nil)
      response = history_read_modified_values_async(endpoint_id, body, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Read historic modified values at specified times
    #
    # Read processed history values of a node if available using historic access.
    # The endpoint must be activated and connected and the module client and server
    # must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [ReadModifiedValuesDetailsApiModelHistoryReadRequestApiModel] The
    # history read request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def history_read_modified_values_with_http_info(endpoint_id, body, custom_headers:nil)
      history_read_modified_values_async(endpoint_id, body, custom_headers:custom_headers).value!
    end

    #
    # Read historic modified values at specified times
    #
    # Read processed history values of a node if available using historic access.
    # The endpoint must be activated and connected and the module client and server
    # must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [ReadModifiedValuesDetailsApiModelHistoryReadRequestApiModel] The
    # history read request
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def history_read_modified_values_async(endpoint_id, body, custom_headers:nil)
      fail ArgumentError, 'endpoint_id is nil' if endpoint_id.nil?
      fail ArgumentError, 'body is nil' if body.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json-patch+json; charset=utf-8'

      # Serialize Request
      request_mapper = azure.iiot.opc.history::Models::ReadModifiedValuesDetailsApiModelHistoryReadRequestApiModel.mapper()
      request_content = self.serialize(request_mapper,  body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v2/read/{endpointId}/values/modified'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'endpointId' => endpoint_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = azure.iiot.opc.history::Models::HistoricValueApiModelSequenceHistoryReadResponseApiModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Read next batch of historic values
    #
    # Read next batch of historic values of a node using historic access. The
    # endpoint must be activated and connected and the module client and server
    # must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [HistoryReadNextRequestApiModel] The history read next request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [HistoricValueApiModelSequenceHistoryReadNextResponseApiModel]
    # operation results.
    #
    def history_read_value_next(endpoint_id, body, custom_headers:nil)
      response = history_read_value_next_async(endpoint_id, body, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Read next batch of historic values
    #
    # Read next batch of historic values of a node using historic access. The
    # endpoint must be activated and connected and the module client and server
    # must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [HistoryReadNextRequestApiModel] The history read next request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def history_read_value_next_with_http_info(endpoint_id, body, custom_headers:nil)
      history_read_value_next_async(endpoint_id, body, custom_headers:custom_headers).value!
    end

    #
    # Read next batch of historic values
    #
    # Read next batch of historic values of a node using historic access. The
    # endpoint must be activated and connected and the module client and server
    # must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [HistoryReadNextRequestApiModel] The history read next request
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def history_read_value_next_async(endpoint_id, body, custom_headers:nil)
      fail ArgumentError, 'endpoint_id is nil' if endpoint_id.nil?
      fail ArgumentError, 'body is nil' if body.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json-patch+json; charset=utf-8'

      # Serialize Request
      request_mapper = azure.iiot.opc.history::Models::HistoryReadNextRequestApiModel.mapper()
      request_content = self.serialize(request_mapper,  body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v2/read/{endpointId}/values/next'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'endpointId' => endpoint_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = azure.iiot.opc.history::Models::HistoricValueApiModelSequenceHistoryReadNextResponseApiModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Replace historic values
    #
    # Replace historic values using historic access. The endpoint must be activated
    # and connected and the module client and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [ReplaceValuesDetailsApiModelHistoryUpdateRequestApiModel] The
    # history replace request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [HistoryUpdateResponseApiModel] operation results.
    #
    def history_replace_values(endpoint_id, body, custom_headers:nil)
      response = history_replace_values_async(endpoint_id, body, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Replace historic values
    #
    # Replace historic values using historic access. The endpoint must be activated
    # and connected and the module client and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [ReplaceValuesDetailsApiModelHistoryUpdateRequestApiModel] The
    # history replace request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def history_replace_values_with_http_info(endpoint_id, body, custom_headers:nil)
      history_replace_values_async(endpoint_id, body, custom_headers:custom_headers).value!
    end

    #
    # Replace historic values
    #
    # Replace historic values using historic access. The endpoint must be activated
    # and connected and the module client and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [ReplaceValuesDetailsApiModelHistoryUpdateRequestApiModel] The
    # history replace request
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def history_replace_values_async(endpoint_id, body, custom_headers:nil)
      fail ArgumentError, 'endpoint_id is nil' if endpoint_id.nil?
      fail ArgumentError, 'body is nil' if body.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json-patch+json; charset=utf-8'

      # Serialize Request
      request_mapper = azure.iiot.opc.history::Models::ReplaceValuesDetailsApiModelHistoryUpdateRequestApiModel.mapper()
      request_content = self.serialize(request_mapper,  body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v2/replace/{endpointId}/values'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'endpointId' => endpoint_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = azure.iiot.opc.history::Models::HistoryUpdateResponseApiModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Replace historic events
    #
    # Replace historic events using historic access. The endpoint must be activated
    # and connected and the module client and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [ReplaceEventsDetailsApiModelHistoryUpdateRequestApiModel] The
    # history replace request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [HistoryUpdateResponseApiModel] operation results.
    #
    def history_replace_events(endpoint_id, body, custom_headers:nil)
      response = history_replace_events_async(endpoint_id, body, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Replace historic events
    #
    # Replace historic events using historic access. The endpoint must be activated
    # and connected and the module client and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [ReplaceEventsDetailsApiModelHistoryUpdateRequestApiModel] The
    # history replace request
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def history_replace_events_with_http_info(endpoint_id, body, custom_headers:nil)
      history_replace_events_async(endpoint_id, body, custom_headers:custom_headers).value!
    end

    #
    # Replace historic events
    #
    # Replace historic events using historic access. The endpoint must be activated
    # and connected and the module client and server must trust each other.
    #
    # @param endpoint_id [String] The identifier of the activated endpoint.
    # @param body [ReplaceEventsDetailsApiModelHistoryUpdateRequestApiModel] The
    # history replace request
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def history_replace_events_async(endpoint_id, body, custom_headers:nil)
      fail ArgumentError, 'endpoint_id is nil' if endpoint_id.nil?
      fail ArgumentError, 'body is nil' if body.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json-patch+json; charset=utf-8'

      # Serialize Request
      request_mapper = azure.iiot.opc.history::Models::ReplaceEventsDetailsApiModelHistoryUpdateRequestApiModel.mapper()
      request_content = self.serialize(request_mapper,  body)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v2/replace/{endpointId}/events'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'endpointId' => endpoint_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = azure.iiot.opc.history::Models::HistoryUpdateResponseApiModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end


    private
    #
    # Adds telemetry information.
    #
    def add_telemetry
        sdk_information = 'swagger'
        add_user_agent_information(sdk_information)
    end
  end
end
