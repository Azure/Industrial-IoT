package azureiiotopcregistry

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

import (
    "context"
    "encoding/json"
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/date"
    "github.com/Azure/go-autorest/autorest/to"
    "github.com/Azure/go-autorest/tracing"
    "net/http"
)

// The package's fully qualified name.
const fqdn = "go/azure-iiot-opc-registry"

        // ApplicationType enumerates the values for application type.
    type ApplicationType string

    const (
                // Client ...
        Client ApplicationType = "Client"
                // ClientAndServer ...
        ClientAndServer ApplicationType = "ClientAndServer"
                // DiscoveryServer ...
        DiscoveryServer ApplicationType = "DiscoveryServer"
                // Server ...
        Server ApplicationType = "Server"
            )
    // PossibleApplicationTypeValues returns an array of possible values for the ApplicationType const type.
    func PossibleApplicationTypeValues() []ApplicationType {
        return []ApplicationType{Client,ClientAndServer,DiscoveryServer,Server}
    }

        // CredentialType enumerates the values for credential type.
    type CredentialType string

    const (
                // JwtToken ...
        JwtToken CredentialType = "JwtToken"
                // None ...
        None CredentialType = "None"
                // UserName ...
        UserName CredentialType = "UserName"
                // X509Certificate ...
        X509Certificate CredentialType = "X509Certificate"
            )
    // PossibleCredentialTypeValues returns an array of possible values for the CredentialType const type.
    func PossibleCredentialTypeValues() []CredentialType {
        return []CredentialType{JwtToken,None,UserName,X509Certificate}
    }

        // DiscoveryMode enumerates the values for discovery mode.
    type DiscoveryMode string

    const (
                // Fast ...
        Fast DiscoveryMode = "Fast"
                // Local ...
        Local DiscoveryMode = "Local"
                // Network ...
        Network DiscoveryMode = "Network"
                // Off ...
        Off DiscoveryMode = "Off"
                // Scan ...
        Scan DiscoveryMode = "Scan"
            )
    // PossibleDiscoveryModeValues returns an array of possible values for the DiscoveryMode const type.
    func PossibleDiscoveryModeValues() []DiscoveryMode {
        return []DiscoveryMode{Fast,Local,Network,Off,Scan}
    }

        // EndpointActivationState enumerates the values for endpoint
        // activation state.
    type EndpointActivationState string

    const (
                // Activated ...
        Activated EndpointActivationState = "Activated"
                // ActivatedAndConnected ...
        ActivatedAndConnected EndpointActivationState = "ActivatedAndConnected"
                // Deactivated ...
        Deactivated EndpointActivationState = "Deactivated"
            )
    // PossibleEndpointActivationStateValues returns an array of possible values for the EndpointActivationState const type.
    func PossibleEndpointActivationStateValues() []EndpointActivationState {
        return []EndpointActivationState{Activated,ActivatedAndConnected,Deactivated}
    }

        // EndpointConnectivityState enumerates the values for endpoint
        // connectivity state.
    type EndpointConnectivityState string

    const (
                // Busy ...
        Busy EndpointConnectivityState = "Busy"
                // CertificateInvalid ...
        CertificateInvalid EndpointConnectivityState = "CertificateInvalid"
                // Connecting ...
        Connecting EndpointConnectivityState = "Connecting"
                // Error ...
        Error EndpointConnectivityState = "Error"
                // NotReachable ...
        NotReachable EndpointConnectivityState = "NotReachable"
                // NoTrust ...
        NoTrust EndpointConnectivityState = "NoTrust"
                // Ready ...
        Ready EndpointConnectivityState = "Ready"
            )
    // PossibleEndpointConnectivityStateValues returns an array of possible values for the EndpointConnectivityState const type.
    func PossibleEndpointConnectivityStateValues() []EndpointConnectivityState {
        return []EndpointConnectivityState{Busy,CertificateInvalid,Connecting,Error,NotReachable,NoTrust,Ready}
    }

        // SecurityAssessment enumerates the values for security assessment.
    type SecurityAssessment string

    const (
                // High ...
        High SecurityAssessment = "High"
                // Low ...
        Low SecurityAssessment = "Low"
                // Medium ...
        Medium SecurityAssessment = "Medium"
                // Unknown ...
        Unknown SecurityAssessment = "Unknown"
            )
    // PossibleSecurityAssessmentValues returns an array of possible values for the SecurityAssessment const type.
    func PossibleSecurityAssessmentValues() []SecurityAssessment {
        return []SecurityAssessment{High,Low,Medium,Unknown}
    }

        // SecurityMode enumerates the values for security mode.
    type SecurityMode string

    const (
                // SecurityModeBest ...
        SecurityModeBest SecurityMode = "Best"
                // SecurityModeNone ...
        SecurityModeNone SecurityMode = "None"
                // SecurityModeSign ...
        SecurityModeSign SecurityMode = "Sign"
                // SecurityModeSignAndEncrypt ...
        SecurityModeSignAndEncrypt SecurityMode = "SignAndEncrypt"
            )
    // PossibleSecurityModeValues returns an array of possible values for the SecurityMode const type.
    func PossibleSecurityModeValues() []SecurityMode {
        return []SecurityMode{SecurityModeBest,SecurityModeNone,SecurityModeSign,SecurityModeSignAndEncrypt}
    }

        // TraceLogLevel enumerates the values for trace log level.
    type TraceLogLevel string

    const (
                // TraceLogLevelDebug ...
        TraceLogLevelDebug TraceLogLevel = "Debug"
                // TraceLogLevelError ...
        TraceLogLevelError TraceLogLevel = "Error"
                // TraceLogLevelInformation ...
        TraceLogLevelInformation TraceLogLevel = "Information"
                // TraceLogLevelVerbose ...
        TraceLogLevelVerbose TraceLogLevel = "Verbose"
            )
    // PossibleTraceLogLevelValues returns an array of possible values for the TraceLogLevel const type.
    func PossibleTraceLogLevelValues() []TraceLogLevel {
        return []TraceLogLevel{TraceLogLevelDebug,TraceLogLevelError,TraceLogLevelInformation,TraceLogLevelVerbose}
    }

            // ApplicationInfoAPIModel application info model
            type ApplicationInfoAPIModel struct {
            // ApplicationID - Unique application id
            ApplicationID *string `json:"applicationId,omitempty"`
            // ApplicationType - Type of application. Possible values include: 'Server', 'Client', 'ClientAndServer', 'DiscoveryServer'
            ApplicationType ApplicationType `json:"applicationType,omitempty"`
            // ApplicationURI - Unique application uri
            ApplicationURI *string `json:"applicationUri,omitempty"`
            // ProductURI - Product uri
            ProductURI *string `json:"productUri,omitempty"`
            // ApplicationName - Default name of application
            ApplicationName *string `json:"applicationName,omitempty"`
            // Locale - Locale of default name - defaults to "en"
            Locale *string `json:"locale,omitempty"`
            // LocalizedNames - Localized Names of application keyed on locale
            LocalizedNames map[string]*string `json:"localizedNames"`
            // Certificate - Application public cert
            Certificate *[]byte `json:"certificate,omitempty"`
            // Capabilities - The capabilities advertised by the server.
            Capabilities *[]string `json:"capabilities,omitempty"`
            // DiscoveryUrls - Discovery urls of the server
            DiscoveryUrls *[]string `json:"discoveryUrls,omitempty"`
            // DiscoveryProfileURI - Discovery profile uri
            DiscoveryProfileURI *string `json:"discoveryProfileUri,omitempty"`
            // GatewayServerURI - Gateway server uri
            GatewayServerURI *string `json:"gatewayServerUri,omitempty"`
            // HostAddresses - Host addresses of server application or null
            HostAddresses *[]string `json:"hostAddresses,omitempty"`
            // SiteID - Site of the application
            SiteID *string `json:"siteId,omitempty"`
            // SupervisorID - Supervisor having registered the application
            SupervisorID *string `json:"supervisorId,omitempty"`
            // NotSeenSince - Last time application was seen
            NotSeenSince *date.Time `json:"notSeenSince,omitempty"`
            // Created - Created
            Created *RegistryOperationAPIModel `json:"created,omitempty"`
            // Updated - Updated
            Updated *RegistryOperationAPIModel `json:"updated,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationInfoAPIModel.
        func (aiam ApplicationInfoAPIModel)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(aiam.ApplicationID != nil) {
                objectMap["applicationId"] = aiam.ApplicationID
                }
                if(aiam.ApplicationType != "") {
                objectMap["applicationType"] = aiam.ApplicationType
                }
                if(aiam.ApplicationURI != nil) {
                objectMap["applicationUri"] = aiam.ApplicationURI
                }
                if(aiam.ProductURI != nil) {
                objectMap["productUri"] = aiam.ProductURI
                }
                if(aiam.ApplicationName != nil) {
                objectMap["applicationName"] = aiam.ApplicationName
                }
                if(aiam.Locale != nil) {
                objectMap["locale"] = aiam.Locale
                }
                if(aiam.LocalizedNames != nil) {
                objectMap["localizedNames"] = aiam.LocalizedNames
                }
                if(aiam.Certificate != nil) {
                objectMap["certificate"] = aiam.Certificate
                }
                if(aiam.Capabilities != nil) {
                objectMap["capabilities"] = aiam.Capabilities
                }
                if(aiam.DiscoveryUrls != nil) {
                objectMap["discoveryUrls"] = aiam.DiscoveryUrls
                }
                if(aiam.DiscoveryProfileURI != nil) {
                objectMap["discoveryProfileUri"] = aiam.DiscoveryProfileURI
                }
                if(aiam.GatewayServerURI != nil) {
                objectMap["gatewayServerUri"] = aiam.GatewayServerURI
                }
                if(aiam.HostAddresses != nil) {
                objectMap["hostAddresses"] = aiam.HostAddresses
                }
                if(aiam.SiteID != nil) {
                objectMap["siteId"] = aiam.SiteID
                }
                if(aiam.SupervisorID != nil) {
                objectMap["supervisorId"] = aiam.SupervisorID
                }
                if(aiam.NotSeenSince != nil) {
                objectMap["notSeenSince"] = aiam.NotSeenSince
                }
                if(aiam.Created != nil) {
                objectMap["created"] = aiam.Created
                }
                if(aiam.Updated != nil) {
                objectMap["updated"] = aiam.Updated
                }
                return json.Marshal(objectMap)
        }

            // ApplicationInfoListAPIModel list of registered applications
            type ApplicationInfoListAPIModel struct {
            autorest.Response `json:"-"`
            // Items - Application infos
            Items *[]ApplicationInfoAPIModel `json:"items,omitempty"`
            // ContinuationToken - Continuation or null if final
            ContinuationToken *string `json:"continuationToken,omitempty"`
            }

            // ApplicationInfoListAPIModelIterator provides access to a
            // complete listing of ApplicationInfoAPIModel values.
            type ApplicationInfoListAPIModelIterator struct {
                i int
                page ApplicationInfoListAPIModelPage
            }
        // NextWithContext advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        func (iter * ApplicationInfoListAPIModelIterator) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/ApplicationInfoListAPIModelIterator.NextWithContext")
        defer func() {
        sc := -1
        if iter.Response().Response.Response != nil {
        sc = iter.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        iter.i++
        if iter.i < len(iter. page.Values()) {
        return nil
        }
        err = iter.page.NextWithContext(ctx)
        if err != nil {
        iter. i--
        return err
        }
        iter.i = 0
        return nil
        }
        // Next advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        // Deprecated: Use NextWithContext() instead.
        func (iter * ApplicationInfoListAPIModelIterator) Next() error {
        return iter.NextWithContext(context.Background())
        }
        // NotDone returns true if the enumeration should be started or is not yet complete.
        func (iter ApplicationInfoListAPIModelIterator) NotDone() bool {
        return iter.page.NotDone() && iter.i < len(iter. page.Values())
        }
        // Response returns the raw server response from the last page request.
        func (iter ApplicationInfoListAPIModelIterator) Response() ApplicationInfoListAPIModel {
        return iter.page.Response()
        }
        // Value returns the current value or a zero-initialized value if the
        // iterator has advanced beyond the end of the collection.
        func (iter ApplicationInfoListAPIModelIterator) Value() ApplicationInfoAPIModel {
        if !iter.page.NotDone() {
        return ApplicationInfoAPIModel{}
        }
        return iter.page.Values()[iter.i]
        }
        // Creates a new instance of the ApplicationInfoListAPIModelIterator type.
        func NewApplicationInfoListAPIModelIterator (page ApplicationInfoListAPIModelPage) ApplicationInfoListAPIModelIterator {
            return ApplicationInfoListAPIModelIterator{page: page}
        }


                // IsEmpty returns true if the ListResult contains no values.
                func (ailam ApplicationInfoListAPIModel) IsEmpty() bool {
                return ailam.Value == nil || len(*ailam.Value) == 0
                }

                    // applicationInfoListAPIModelPreparer prepares a request to retrieve the next set of results.
                    // It returns nil if no more results exist.
                    func (ailam ApplicationInfoListAPIModel) applicationInfoListAPIModelPreparer(ctx context.Context) (*http.Request, error) {
                    if ailam.ContinuationToken == nil || len(to.String(ailam.ContinuationToken)) < 1 {
                    return nil, nil
                    }
                    return autorest.Prepare((&http.Request{}).WithContext(ctx),
                    autorest.AsJSON(),
                    autorest.AsGet(),
                    autorest.WithBaseURL(to.String( ailam.ContinuationToken)));
                    }

            // ApplicationInfoListAPIModelPage contains a page of
            // ApplicationInfoAPIModel values.
            type ApplicationInfoListAPIModelPage struct {
                fn func(context.Context, ApplicationInfoListAPIModel) (ApplicationInfoListAPIModel, error)
                ailam ApplicationInfoListAPIModel
            }

        // NextWithContext advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        func (page * ApplicationInfoListAPIModelPage) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/ApplicationInfoListAPIModelPage.NextWithContext")
        defer func() {
        sc := -1
        if page.Response().Response.Response != nil {
        sc = page.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        next, err := page.fn(ctx, page.ailam)
        if err != nil {
        return err
        }
        page.ailam = next
        return nil
        }

        // Next advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        // Deprecated: Use NextWithContext() instead.
        func (page * ApplicationInfoListAPIModelPage) Next() error {
        return page.NextWithContext(context.Background())
        }
        // NotDone returns true if the page enumeration should be started or is not yet complete.
        func (page ApplicationInfoListAPIModelPage) NotDone() bool {
        return !page.ailam.IsEmpty()
        }
        // Response returns the raw server response from the last page request.
        func (page ApplicationInfoListAPIModelPage) Response() ApplicationInfoListAPIModel {
        return page.ailam
        }
        // Values returns the slice of values for the current page or nil if there are no values.
        func (page ApplicationInfoListAPIModelPage) Values() []ApplicationInfoAPIModel {
        if page.ailam.IsEmpty() {
        return nil
        }
        return *page.ailam.Value
        }
        // Creates a new instance of the ApplicationInfoListAPIModelPage type.
        func NewApplicationInfoListAPIModelPage (getNextPage func(context.Context, ApplicationInfoListAPIModel) (ApplicationInfoListAPIModel, error)) ApplicationInfoListAPIModelPage {
            return ApplicationInfoListAPIModelPage{fn: getNextPage}
        }

            // ApplicationRecordAPIModel application with optional list of
            // endpoints
            type ApplicationRecordAPIModel struct {
            // RecordID - Record id
            RecordID *int32 `json:"recordId,omitempty"`
            // Application - Application information
            Application *ApplicationInfoAPIModel `json:"application,omitempty"`
            }

            // ApplicationRecordListAPIModel create response
            type ApplicationRecordListAPIModel struct {
            autorest.Response `json:"-"`
            // Applications - Applications found
            Applications *[]ApplicationRecordAPIModel `json:"applications,omitempty"`
            // LastCounterResetTime - Last counter reset
            LastCounterResetTime *date.Time `json:"lastCounterResetTime,omitempty"`
            // NextRecordID - Next record id
            NextRecordID *int32 `json:"nextRecordId,omitempty"`
            }

            // ApplicationRecordQueryAPIModel query by id
            type ApplicationRecordQueryAPIModel struct {
            // StartingRecordID - Starting record id
            StartingRecordID *int32 `json:"startingRecordId,omitempty"`
            // MaxRecordsToReturn - Max records to return
            MaxRecordsToReturn *int32 `json:"maxRecordsToReturn,omitempty"`
            // ApplicationName - Application name
            ApplicationName *string `json:"applicationName,omitempty"`
            // ApplicationURI - Application uri
            ApplicationURI *string `json:"applicationUri,omitempty"`
            // ApplicationType - Application type. Possible values include: 'Server', 'Client', 'ClientAndServer', 'DiscoveryServer'
            ApplicationType ApplicationType `json:"applicationType,omitempty"`
            // ProductURI - Product uri
            ProductURI *string `json:"productUri,omitempty"`
            // ServerCapabilities - Server capabilities
            ServerCapabilities *[]string `json:"serverCapabilities,omitempty"`
            }

            // ApplicationRegistrationAPIModel application with list of
            // endpoints
            type ApplicationRegistrationAPIModel struct {
            autorest.Response `json:"-"`
            // Application - Application information
            Application *ApplicationInfoAPIModel `json:"application,omitempty"`
            // Endpoints - List of endpoint twins
            Endpoints *[]EndpointRegistrationAPIModel `json:"endpoints,omitempty"`
            // SecurityAssessment - Application security assessment. Possible values include: 'Unknown', 'Low', 'Medium', 'High'
            SecurityAssessment SecurityAssessment `json:"securityAssessment,omitempty"`
            }

            // ApplicationRegistrationQueryAPIModel application information
            type ApplicationRegistrationQueryAPIModel struct {
            // ApplicationType - Type of application. Possible values include: 'Server', 'Client', 'ClientAndServer', 'DiscoveryServer'
            ApplicationType ApplicationType `json:"applicationType,omitempty"`
            // ApplicationURI - Application uri
            ApplicationURI *string `json:"applicationUri,omitempty"`
            // ProductURI - Product uri
            ProductURI *string `json:"productUri,omitempty"`
            // ApplicationName - Name of application
            ApplicationName *string `json:"applicationName,omitempty"`
            // Locale - Locale of application name - default is "en"
            Locale *string `json:"locale,omitempty"`
            // Capability - Application capability to query with
            Capability *string `json:"capability,omitempty"`
            // DiscoveryProfileURI - Discovery profile uri
            DiscoveryProfileURI *string `json:"discoveryProfileUri,omitempty"`
            // GatewayServerURI - Gateway server uri
            GatewayServerURI *string `json:"gatewayServerUri,omitempty"`
            // SiteOrSupervisorID - Supervisor or site the application belongs to.
            SiteOrSupervisorID *string `json:"siteOrSupervisorId,omitempty"`
            // IncludeNotSeenSince - Whether to include apps that were soft deleted
            IncludeNotSeenSince *bool `json:"includeNotSeenSince,omitempty"`
            }

            // ApplicationRegistrationRequestAPIModel application information
            type ApplicationRegistrationRequestAPIModel struct {
            // ApplicationURI - Unique application uri
            ApplicationURI *string `json:"applicationUri,omitempty"`
            // ApplicationType - Type of application. Possible values include: 'Server', 'Client', 'ClientAndServer', 'DiscoveryServer'
            ApplicationType ApplicationType `json:"applicationType,omitempty"`
            // ProductURI - Product uri of the application.
            ProductURI *string `json:"productUri,omitempty"`
            // ApplicationName - Default name of the server or client.
            ApplicationName *string `json:"applicationName,omitempty"`
            // Locale - Locale of default name
            Locale *string `json:"locale,omitempty"`
            // SiteID - Site of the application
            SiteID *string `json:"siteId,omitempty"`
            // LocalizedNames - Localized names key off locale id.
            LocalizedNames map[string]*string `json:"localizedNames"`
            // Capabilities - The OPC UA defined capabilities of the server.
            Capabilities *[]string `json:"capabilities,omitempty"`
            // DiscoveryUrls - Discovery urls of the server.
            DiscoveryUrls *[]string `json:"discoveryUrls,omitempty"`
            // DiscoveryProfileURI - The discovery profile uri of the server.
            DiscoveryProfileURI *string `json:"discoveryProfileUri,omitempty"`
            // GatewayServerURI - Gateway server uri
            GatewayServerURI *string `json:"gatewayServerUri,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationRegistrationRequestAPIModel.
        func (arram ApplicationRegistrationRequestAPIModel)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(arram.ApplicationURI != nil) {
                objectMap["applicationUri"] = arram.ApplicationURI
                }
                if(arram.ApplicationType != "") {
                objectMap["applicationType"] = arram.ApplicationType
                }
                if(arram.ProductURI != nil) {
                objectMap["productUri"] = arram.ProductURI
                }
                if(arram.ApplicationName != nil) {
                objectMap["applicationName"] = arram.ApplicationName
                }
                if(arram.Locale != nil) {
                objectMap["locale"] = arram.Locale
                }
                if(arram.SiteID != nil) {
                objectMap["siteId"] = arram.SiteID
                }
                if(arram.LocalizedNames != nil) {
                objectMap["localizedNames"] = arram.LocalizedNames
                }
                if(arram.Capabilities != nil) {
                objectMap["capabilities"] = arram.Capabilities
                }
                if(arram.DiscoveryUrls != nil) {
                objectMap["discoveryUrls"] = arram.DiscoveryUrls
                }
                if(arram.DiscoveryProfileURI != nil) {
                objectMap["discoveryProfileUri"] = arram.DiscoveryProfileURI
                }
                if(arram.GatewayServerURI != nil) {
                objectMap["gatewayServerUri"] = arram.GatewayServerURI
                }
                return json.Marshal(objectMap)
        }

            // ApplicationRegistrationResponseAPIModel result of an application
            // registration
            type ApplicationRegistrationResponseAPIModel struct {
            autorest.Response `json:"-"`
            // ID - New id application was registered under
            ID *string `json:"id,omitempty"`
            }

            // ApplicationRegistrationUpdateAPIModel application registration
            // update request
            type ApplicationRegistrationUpdateAPIModel struct {
            // ProductURI - Product uri
            ProductURI *string `json:"productUri,omitempty"`
            // ApplicationName - Default name of the server or client.
            ApplicationName *string `json:"applicationName,omitempty"`
            // Locale - Locale of default name - defaults to "en"
            Locale *string `json:"locale,omitempty"`
            // LocalizedNames - Localized names keyed off locale id.
            // To remove entry, set value for locale id to null.
            LocalizedNames map[string]*string `json:"localizedNames"`
            // Certificate - Application public cert
            Certificate *[]byte `json:"certificate,omitempty"`
            // Capabilities - Capabilities of the application
            Capabilities *[]string `json:"capabilities,omitempty"`
            // DiscoveryUrls - Discovery urls of the application
            DiscoveryUrls *[]string `json:"discoveryUrls,omitempty"`
            // DiscoveryProfileURI - Discovery profile uri
            DiscoveryProfileURI *string `json:"discoveryProfileUri,omitempty"`
            // GatewayServerURI - Gateway server uri
            GatewayServerURI *string `json:"gatewayServerUri,omitempty"`
            }

        // MarshalJSON is the custom marshaler for ApplicationRegistrationUpdateAPIModel.
        func (aruam ApplicationRegistrationUpdateAPIModel)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(aruam.ProductURI != nil) {
                objectMap["productUri"] = aruam.ProductURI
                }
                if(aruam.ApplicationName != nil) {
                objectMap["applicationName"] = aruam.ApplicationName
                }
                if(aruam.Locale != nil) {
                objectMap["locale"] = aruam.Locale
                }
                if(aruam.LocalizedNames != nil) {
                objectMap["localizedNames"] = aruam.LocalizedNames
                }
                if(aruam.Certificate != nil) {
                objectMap["certificate"] = aruam.Certificate
                }
                if(aruam.Capabilities != nil) {
                objectMap["capabilities"] = aruam.Capabilities
                }
                if(aruam.DiscoveryUrls != nil) {
                objectMap["discoveryUrls"] = aruam.DiscoveryUrls
                }
                if(aruam.DiscoveryProfileURI != nil) {
                objectMap["discoveryProfileUri"] = aruam.DiscoveryProfileURI
                }
                if(aruam.GatewayServerURI != nil) {
                objectMap["gatewayServerUri"] = aruam.GatewayServerURI
                }
                return json.Marshal(objectMap)
        }

            // ApplicationSiteListAPIModel list of application sites
            type ApplicationSiteListAPIModel struct {
            autorest.Response `json:"-"`
            // Sites - Distinct list of sites applications were registered in.
            Sites *[]string `json:"sites,omitempty"`
            // ContinuationToken - Continuation or null if final
            ContinuationToken *string `json:"continuationToken,omitempty"`
            }

            // ApplicationSiteListAPIModelIterator provides access to a
            // complete listing of string values.
            type ApplicationSiteListAPIModelIterator struct {
                i int
                page ApplicationSiteListAPIModelPage
            }
        // NextWithContext advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        func (iter * ApplicationSiteListAPIModelIterator) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/ApplicationSiteListAPIModelIterator.NextWithContext")
        defer func() {
        sc := -1
        if iter.Response().Response.Response != nil {
        sc = iter.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        iter.i++
        if iter.i < len(iter. page.Values()) {
        return nil
        }
        err = iter.page.NextWithContext(ctx)
        if err != nil {
        iter. i--
        return err
        }
        iter.i = 0
        return nil
        }
        // Next advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        // Deprecated: Use NextWithContext() instead.
        func (iter * ApplicationSiteListAPIModelIterator) Next() error {
        return iter.NextWithContext(context.Background())
        }
        // NotDone returns true if the enumeration should be started or is not yet complete.
        func (iter ApplicationSiteListAPIModelIterator) NotDone() bool {
        return iter.page.NotDone() && iter.i < len(iter. page.Values())
        }
        // Response returns the raw server response from the last page request.
        func (iter ApplicationSiteListAPIModelIterator) Response() ApplicationSiteListAPIModel {
        return iter.page.Response()
        }
        // Value returns the current value or a zero-initialized value if the
        // iterator has advanced beyond the end of the collection.
        func (iter ApplicationSiteListAPIModelIterator) Value() string {
        if !iter.page.NotDone() {
        return ""
        }
        return iter.page.Values()[iter.i]
        }
        // Creates a new instance of the ApplicationSiteListAPIModelIterator type.
        func NewApplicationSiteListAPIModelIterator (page ApplicationSiteListAPIModelPage) ApplicationSiteListAPIModelIterator {
            return ApplicationSiteListAPIModelIterator{page: page}
        }


                // IsEmpty returns true if the ListResult contains no values.
                func (aslam ApplicationSiteListAPIModel) IsEmpty() bool {
                return aslam.Value == nil || len(*aslam.Value) == 0
                }

                    // applicationSiteListAPIModelPreparer prepares a request to retrieve the next set of results.
                    // It returns nil if no more results exist.
                    func (aslam ApplicationSiteListAPIModel) applicationSiteListAPIModelPreparer(ctx context.Context) (*http.Request, error) {
                    if aslam.ContinuationToken == nil || len(to.String(aslam.ContinuationToken)) < 1 {
                    return nil, nil
                    }
                    return autorest.Prepare((&http.Request{}).WithContext(ctx),
                    autorest.AsJSON(),
                    autorest.AsGet(),
                    autorest.WithBaseURL(to.String( aslam.ContinuationToken)));
                    }

            // ApplicationSiteListAPIModelPage contains a page of string
            // values.
            type ApplicationSiteListAPIModelPage struct {
                fn func(context.Context, ApplicationSiteListAPIModel) (ApplicationSiteListAPIModel, error)
                aslam ApplicationSiteListAPIModel
            }

        // NextWithContext advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        func (page * ApplicationSiteListAPIModelPage) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/ApplicationSiteListAPIModelPage.NextWithContext")
        defer func() {
        sc := -1
        if page.Response().Response.Response != nil {
        sc = page.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        next, err := page.fn(ctx, page.aslam)
        if err != nil {
        return err
        }
        page.aslam = next
        return nil
        }

        // Next advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        // Deprecated: Use NextWithContext() instead.
        func (page * ApplicationSiteListAPIModelPage) Next() error {
        return page.NextWithContext(context.Background())
        }
        // NotDone returns true if the page enumeration should be started or is not yet complete.
        func (page ApplicationSiteListAPIModelPage) NotDone() bool {
        return !page.aslam.IsEmpty()
        }
        // Response returns the raw server response from the last page request.
        func (page ApplicationSiteListAPIModelPage) Response() ApplicationSiteListAPIModel {
        return page.aslam
        }
        // Values returns the slice of values for the current page or nil if there are no values.
        func (page ApplicationSiteListAPIModelPage) Values() []string {
        if page.aslam.IsEmpty() {
        return nil
        }
        return *page.aslam.Value
        }
        // Creates a new instance of the ApplicationSiteListAPIModelPage type.
        func NewApplicationSiteListAPIModelPage (getNextPage func(context.Context, ApplicationSiteListAPIModel) (ApplicationSiteListAPIModel, error)) ApplicationSiteListAPIModelPage {
            return ApplicationSiteListAPIModelPage{fn: getNextPage}
        }

            // AuthenticationMethodAPIModel authentication Method model
            type AuthenticationMethodAPIModel struct {
            // ID - Authentication method id
            ID *string `json:"id,omitempty"`
            // CredentialType - Type of credential. Possible values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
            CredentialType CredentialType `json:"credentialType,omitempty"`
            // SecurityPolicy - Security policy to use when passing credential.
            SecurityPolicy *string `json:"securityPolicy,omitempty"`
            // Configuration - Method specific configuration
            Configuration interface{} `json:"configuration,omitempty"`
            }

            // DiscoveryConfigAPIModel discovery configuration
            type DiscoveryConfigAPIModel struct {
            // AddressRangesToScan - Address ranges to scan (null == all wired nics)
            AddressRangesToScan *string `json:"addressRangesToScan,omitempty"`
            // NetworkProbeTimeoutMs - Network probe timeout
            NetworkProbeTimeoutMs *int32 `json:"networkProbeTimeoutMs,omitempty"`
            // MaxNetworkProbes - Max network probes that should ever run.
            MaxNetworkProbes *int32 `json:"maxNetworkProbes,omitempty"`
            // PortRangesToScan - Port ranges to scan (null == all unassigned)
            PortRangesToScan *string `json:"portRangesToScan,omitempty"`
            // PortProbeTimeoutMs - Port probe timeout
            PortProbeTimeoutMs *int32 `json:"portProbeTimeoutMs,omitempty"`
            // MaxPortProbes - Max port probes that should ever run.
            MaxPortProbes *int32 `json:"maxPortProbes,omitempty"`
            // MinPortProbesPercent - Probes that must always be there as percent of max.
            MinPortProbesPercent *int32 `json:"minPortProbesPercent,omitempty"`
            // IdleTimeBetweenScansSec - Delay time between discovery sweeps in seconds
            IdleTimeBetweenScansSec *int32 `json:"idleTimeBetweenScansSec,omitempty"`
            // DiscoveryUrls - List of preset discovery urls to use
            DiscoveryUrls *[]string `json:"discoveryUrls,omitempty"`
            // Locales - List of locales to filter with during discovery
            Locales *[]string `json:"locales,omitempty"`
            // ActivationFilter - Activate all twins with this filter during onboarding.
            ActivationFilter *EndpointActivationFilterAPIModel `json:"activationFilter,omitempty"`
            }

            // DiscoveryRequestAPIModel discovery request
            type DiscoveryRequestAPIModel struct {
            // ID - Id of discovery request
            ID *string `json:"id,omitempty"`
            // Discovery - Discovery mode to use. Possible values include: 'Off', 'Local', 'Network', 'Fast', 'Scan'
            Discovery DiscoveryMode `json:"discovery,omitempty"`
            // Configuration - Scan configuration to use
            Configuration *DiscoveryConfigAPIModel `json:"configuration,omitempty"`
            }

            // EndpointActivationFilterAPIModel endpoint Activation Filter
            // model
            type EndpointActivationFilterAPIModel struct {
            // TrustLists - Certificate trust list identifiers to use for
            // activation, if null, all certificates are
            // trusted.  If empty list, no certificates are
            // trusted which is equal to no filter.
            TrustLists *[]string `json:"trustLists,omitempty"`
            // SecurityPolicies - Endpoint security policies to filter against.
            // If set to null, all policies are in scope.
            SecurityPolicies *[]string `json:"securityPolicies,omitempty"`
            // SecurityMode - Security mode level to activate. If null,
            // then Microsoft.Azure.IIoT.OpcUa.Core.Models.SecurityMode.Best is assumed. Possible values include: 'SecurityModeBest', 'SecurityModeSign', 'SecurityModeSignAndEncrypt', 'SecurityModeNone'
            SecurityMode SecurityMode `json:"securityMode,omitempty"`
            }

            // EndpointActivationStatusAPIModel endpoint Activation status
            // model
            type EndpointActivationStatusAPIModel struct {
            // ID - Identifier of the endoint
            ID *string `json:"id,omitempty"`
            // ActivationState - Activation state. Possible values include: 'Deactivated', 'Activated', 'ActivatedAndConnected'
            ActivationState EndpointActivationState `json:"activationState,omitempty"`
            }

            // EndpointAPIModel endpoint model
            type EndpointAPIModel struct {
            // URL - Endpoint url to use to connect with
            URL *string `json:"url,omitempty"`
            // AlternativeUrls - Alternative endpoint urls that can be used for
            // accessing and validating the server
            AlternativeUrls *[]string `json:"alternativeUrls,omitempty"`
            // SecurityMode - Security Mode to use for communication
            // default to best. Possible values include: 'SecurityModeBest', 'SecurityModeSign', 'SecurityModeSignAndEncrypt', 'SecurityModeNone'
            SecurityMode SecurityMode `json:"securityMode,omitempty"`
            // SecurityPolicy - Security policy uri to use for communication
            // default to best.
            SecurityPolicy *string `json:"securityPolicy,omitempty"`
            // Certificate - Endpoint certificate that was registered.
            Certificate *[]byte `json:"certificate,omitempty"`
            }

            // EndpointInfoAPIModel endpoint registration model
            type EndpointInfoAPIModel struct {
            autorest.Response `json:"-"`
            // Registration - Endpoint registration
            Registration *EndpointRegistrationAPIModel `json:"registration,omitempty"`
            // ApplicationID - Application id endpoint is registered under.
            ApplicationID *string `json:"applicationId,omitempty"`
            // ActivationState - Activation state of endpoint. Possible values include: 'Deactivated', 'Activated', 'ActivatedAndConnected'
            ActivationState EndpointActivationState `json:"activationState,omitempty"`
            // EndpointState - Last state of the activated endpoint. Possible values include: 'Connecting', 'NotReachable', 'Busy', 'NoTrust', 'CertificateInvalid', 'Ready', 'Error'
            EndpointState EndpointConnectivityState `json:"endpointState,omitempty"`
            // OutOfSync - Whether the registration is out of sync
            OutOfSync *bool `json:"outOfSync,omitempty"`
            // NotSeenSince - Last time endpoint was seen
            NotSeenSince *date.Time `json:"notSeenSince,omitempty"`
            }

            // EndpointInfoListAPIModel endpoint registration list
            type EndpointInfoListAPIModel struct {
            autorest.Response `json:"-"`
            // Items - Endpoint registrations
            Items *[]EndpointInfoAPIModel `json:"items,omitempty"`
            // ContinuationToken - Continuation or null if final
            ContinuationToken *string `json:"continuationToken,omitempty"`
            }

            // EndpointInfoListAPIModelIterator provides access to a complete
            // listing of EndpointInfoAPIModel values.
            type EndpointInfoListAPIModelIterator struct {
                i int
                page EndpointInfoListAPIModelPage
            }
        // NextWithContext advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        func (iter * EndpointInfoListAPIModelIterator) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/EndpointInfoListAPIModelIterator.NextWithContext")
        defer func() {
        sc := -1
        if iter.Response().Response.Response != nil {
        sc = iter.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        iter.i++
        if iter.i < len(iter. page.Values()) {
        return nil
        }
        err = iter.page.NextWithContext(ctx)
        if err != nil {
        iter. i--
        return err
        }
        iter.i = 0
        return nil
        }
        // Next advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        // Deprecated: Use NextWithContext() instead.
        func (iter * EndpointInfoListAPIModelIterator) Next() error {
        return iter.NextWithContext(context.Background())
        }
        // NotDone returns true if the enumeration should be started or is not yet complete.
        func (iter EndpointInfoListAPIModelIterator) NotDone() bool {
        return iter.page.NotDone() && iter.i < len(iter. page.Values())
        }
        // Response returns the raw server response from the last page request.
        func (iter EndpointInfoListAPIModelIterator) Response() EndpointInfoListAPIModel {
        return iter.page.Response()
        }
        // Value returns the current value or a zero-initialized value if the
        // iterator has advanced beyond the end of the collection.
        func (iter EndpointInfoListAPIModelIterator) Value() EndpointInfoAPIModel {
        if !iter.page.NotDone() {
        return EndpointInfoAPIModel{}
        }
        return iter.page.Values()[iter.i]
        }
        // Creates a new instance of the EndpointInfoListAPIModelIterator type.
        func NewEndpointInfoListAPIModelIterator (page EndpointInfoListAPIModelPage) EndpointInfoListAPIModelIterator {
            return EndpointInfoListAPIModelIterator{page: page}
        }


                // IsEmpty returns true if the ListResult contains no values.
                func (eilam EndpointInfoListAPIModel) IsEmpty() bool {
                return eilam.Value == nil || len(*eilam.Value) == 0
                }

                    // endpointInfoListAPIModelPreparer prepares a request to retrieve the next set of results.
                    // It returns nil if no more results exist.
                    func (eilam EndpointInfoListAPIModel) endpointInfoListAPIModelPreparer(ctx context.Context) (*http.Request, error) {
                    if eilam.ContinuationToken == nil || len(to.String(eilam.ContinuationToken)) < 1 {
                    return nil, nil
                    }
                    return autorest.Prepare((&http.Request{}).WithContext(ctx),
                    autorest.AsJSON(),
                    autorest.AsGet(),
                    autorest.WithBaseURL(to.String( eilam.ContinuationToken)));
                    }

            // EndpointInfoListAPIModelPage contains a page of
            // EndpointInfoAPIModel values.
            type EndpointInfoListAPIModelPage struct {
                fn func(context.Context, EndpointInfoListAPIModel) (EndpointInfoListAPIModel, error)
                eilam EndpointInfoListAPIModel
            }

        // NextWithContext advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        func (page * EndpointInfoListAPIModelPage) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/EndpointInfoListAPIModelPage.NextWithContext")
        defer func() {
        sc := -1
        if page.Response().Response.Response != nil {
        sc = page.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        next, err := page.fn(ctx, page.eilam)
        if err != nil {
        return err
        }
        page.eilam = next
        return nil
        }

        // Next advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        // Deprecated: Use NextWithContext() instead.
        func (page * EndpointInfoListAPIModelPage) Next() error {
        return page.NextWithContext(context.Background())
        }
        // NotDone returns true if the page enumeration should be started or is not yet complete.
        func (page EndpointInfoListAPIModelPage) NotDone() bool {
        return !page.eilam.IsEmpty()
        }
        // Response returns the raw server response from the last page request.
        func (page EndpointInfoListAPIModelPage) Response() EndpointInfoListAPIModel {
        return page.eilam
        }
        // Values returns the slice of values for the current page or nil if there are no values.
        func (page EndpointInfoListAPIModelPage) Values() []EndpointInfoAPIModel {
        if page.eilam.IsEmpty() {
        return nil
        }
        return *page.eilam.Value
        }
        // Creates a new instance of the EndpointInfoListAPIModelPage type.
        func NewEndpointInfoListAPIModelPage (getNextPage func(context.Context, EndpointInfoListAPIModel) (EndpointInfoListAPIModel, error)) EndpointInfoListAPIModelPage {
            return EndpointInfoListAPIModelPage{fn: getNextPage}
        }

            // EndpointRegistrationAPIModel endpoint registration model
            type EndpointRegistrationAPIModel struct {
            // ID - Registered identifier of the endpoint
            ID *string `json:"id,omitempty"`
            // EndpointURL - Original endpoint url of the endpoint
            EndpointURL *string `json:"endpointUrl,omitempty"`
            // SiteID - Registered site of the endpoint
            SiteID *string `json:"siteId,omitempty"`
            // SupervisorID - Supervisor that registered the endpoint.
            SupervisorID *string `json:"supervisorId,omitempty"`
            // Endpoint - Endpoint information of the registration
            Endpoint *EndpointAPIModel `json:"endpoint,omitempty"`
            // SecurityLevel - Security level of the endpoint
            SecurityLevel *int32 `json:"securityLevel,omitempty"`
            // AuthenticationMethods - Supported authentication methods that can be selected to
            // obtain a credential and used to interact with the endpoint.
            AuthenticationMethods *[]AuthenticationMethodAPIModel `json:"authenticationMethods,omitempty"`
            }

            // EndpointRegistrationQueryAPIModel endpoint query
            type EndpointRegistrationQueryAPIModel struct {
            // URL - Endoint url for direct server access
            URL *string `json:"url,omitempty"`
            // Certificate - Certificate of the endpoint
            Certificate *[]byte `json:"certificate,omitempty"`
            // SecurityMode - Security Mode. Possible values include: 'SecurityModeBest', 'SecurityModeSign', 'SecurityModeSignAndEncrypt', 'SecurityModeNone'
            SecurityMode SecurityMode `json:"securityMode,omitempty"`
            // SecurityPolicy - Security policy uri
            SecurityPolicy *string `json:"securityPolicy,omitempty"`
            // Activated - Whether the endpoint was activated
            Activated *bool `json:"activated,omitempty"`
            // Connected - Whether the endpoint is connected on supervisor.
            Connected *bool `json:"connected,omitempty"`
            // EndpointState - The last state of the the activated endpoint. Possible values include: 'Connecting', 'NotReachable', 'Busy', 'NoTrust', 'CertificateInvalid', 'Ready', 'Error'
            EndpointState EndpointConnectivityState `json:"endpointState,omitempty"`
            // IncludeNotSeenSince - Whether to include endpoints that were soft deleted
            IncludeNotSeenSince *bool `json:"includeNotSeenSince,omitempty"`
            }

            // PublisherAPIModel publisher registration model
            type PublisherAPIModel struct {
            autorest.Response `json:"-"`
            // ID - Publisher id
            ID *string `json:"id,omitempty"`
            // SiteID - Site of the publisher
            SiteID *string `json:"siteId,omitempty"`
            // Certificate - Publisher public client cert
            Certificate *[]byte `json:"certificate,omitempty"`
            // LogLevel - Current log level. Possible values include: 'TraceLogLevelError', 'TraceLogLevelInformation', 'TraceLogLevelDebug', 'TraceLogLevelVerbose'
            LogLevel TraceLogLevel `json:"logLevel,omitempty"`
            // Configuration - Publisher agent configuration
            Configuration *PublisherConfigAPIModel `json:"configuration,omitempty"`
            // OutOfSync - Whether the registration is out of sync between
            // client (module) and server (service) (default: false).
            OutOfSync *bool `json:"outOfSync,omitempty"`
            // Connected - Whether publisher is connected on this registration
            Connected *bool `json:"connected,omitempty"`
            }

            // PublisherConfigAPIModel default publisher agent configuration
            type PublisherConfigAPIModel struct {
            // Capabilities - Capabilities
            Capabilities map[string]*string `json:"capabilities"`
            // JobCheckInterval - Interval to check job
            JobCheckInterval *string `json:"jobCheckInterval,omitempty"`
            // HeartbeatInterval - Heartbeat interval
            HeartbeatInterval *string `json:"heartbeatInterval,omitempty"`
            // MaxWorkers - Parallel jobs
            MaxWorkers *int32 `json:"maxWorkers,omitempty"`
            // JobOrchestratorURL - Job orchestrator endpoint url
            JobOrchestratorURL *string `json:"jobOrchestratorUrl,omitempty"`
            }

        // MarshalJSON is the custom marshaler for PublisherConfigAPIModel.
        func (pcam PublisherConfigAPIModel)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(pcam.Capabilities != nil) {
                objectMap["capabilities"] = pcam.Capabilities
                }
                if(pcam.JobCheckInterval != nil) {
                objectMap["jobCheckInterval"] = pcam.JobCheckInterval
                }
                if(pcam.HeartbeatInterval != nil) {
                objectMap["heartbeatInterval"] = pcam.HeartbeatInterval
                }
                if(pcam.MaxWorkers != nil) {
                objectMap["maxWorkers"] = pcam.MaxWorkers
                }
                if(pcam.JobOrchestratorURL != nil) {
                objectMap["jobOrchestratorUrl"] = pcam.JobOrchestratorURL
                }
                return json.Marshal(objectMap)
        }

            // PublisherListAPIModel publisher registration list
            type PublisherListAPIModel struct {
            autorest.Response `json:"-"`
            // Items - Registrations
            Items *[]PublisherAPIModel `json:"items,omitempty"`
            // ContinuationToken - Continuation or null if final
            ContinuationToken *string `json:"continuationToken,omitempty"`
            }

            // PublisherListAPIModelIterator provides access to a complete
            // listing of PublisherAPIModel values.
            type PublisherListAPIModelIterator struct {
                i int
                page PublisherListAPIModelPage
            }
        // NextWithContext advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        func (iter * PublisherListAPIModelIterator) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/PublisherListAPIModelIterator.NextWithContext")
        defer func() {
        sc := -1
        if iter.Response().Response.Response != nil {
        sc = iter.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        iter.i++
        if iter.i < len(iter. page.Values()) {
        return nil
        }
        err = iter.page.NextWithContext(ctx)
        if err != nil {
        iter. i--
        return err
        }
        iter.i = 0
        return nil
        }
        // Next advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        // Deprecated: Use NextWithContext() instead.
        func (iter * PublisherListAPIModelIterator) Next() error {
        return iter.NextWithContext(context.Background())
        }
        // NotDone returns true if the enumeration should be started or is not yet complete.
        func (iter PublisherListAPIModelIterator) NotDone() bool {
        return iter.page.NotDone() && iter.i < len(iter. page.Values())
        }
        // Response returns the raw server response from the last page request.
        func (iter PublisherListAPIModelIterator) Response() PublisherListAPIModel {
        return iter.page.Response()
        }
        // Value returns the current value or a zero-initialized value if the
        // iterator has advanced beyond the end of the collection.
        func (iter PublisherListAPIModelIterator) Value() PublisherAPIModel {
        if !iter.page.NotDone() {
        return PublisherAPIModel{}
        }
        return iter.page.Values()[iter.i]
        }
        // Creates a new instance of the PublisherListAPIModelIterator type.
        func NewPublisherListAPIModelIterator (page PublisherListAPIModelPage) PublisherListAPIModelIterator {
            return PublisherListAPIModelIterator{page: page}
        }


                // IsEmpty returns true if the ListResult contains no values.
                func (plam PublisherListAPIModel) IsEmpty() bool {
                return plam.Value == nil || len(*plam.Value) == 0
                }

                    // publisherListAPIModelPreparer prepares a request to retrieve the next set of results.
                    // It returns nil if no more results exist.
                    func (plam PublisherListAPIModel) publisherListAPIModelPreparer(ctx context.Context) (*http.Request, error) {
                    if plam.ContinuationToken == nil || len(to.String(plam.ContinuationToken)) < 1 {
                    return nil, nil
                    }
                    return autorest.Prepare((&http.Request{}).WithContext(ctx),
                    autorest.AsJSON(),
                    autorest.AsGet(),
                    autorest.WithBaseURL(to.String( plam.ContinuationToken)));
                    }

            // PublisherListAPIModelPage contains a page of PublisherAPIModel
            // values.
            type PublisherListAPIModelPage struct {
                fn func(context.Context, PublisherListAPIModel) (PublisherListAPIModel, error)
                plam PublisherListAPIModel
            }

        // NextWithContext advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        func (page * PublisherListAPIModelPage) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/PublisherListAPIModelPage.NextWithContext")
        defer func() {
        sc := -1
        if page.Response().Response.Response != nil {
        sc = page.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        next, err := page.fn(ctx, page.plam)
        if err != nil {
        return err
        }
        page.plam = next
        return nil
        }

        // Next advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        // Deprecated: Use NextWithContext() instead.
        func (page * PublisherListAPIModelPage) Next() error {
        return page.NextWithContext(context.Background())
        }
        // NotDone returns true if the page enumeration should be started or is not yet complete.
        func (page PublisherListAPIModelPage) NotDone() bool {
        return !page.plam.IsEmpty()
        }
        // Response returns the raw server response from the last page request.
        func (page PublisherListAPIModelPage) Response() PublisherListAPIModel {
        return page.plam
        }
        // Values returns the slice of values for the current page or nil if there are no values.
        func (page PublisherListAPIModelPage) Values() []PublisherAPIModel {
        if page.plam.IsEmpty() {
        return nil
        }
        return *page.plam.Value
        }
        // Creates a new instance of the PublisherListAPIModelPage type.
        func NewPublisherListAPIModelPage (getNextPage func(context.Context, PublisherListAPIModel) (PublisherListAPIModel, error)) PublisherListAPIModelPage {
            return PublisherListAPIModelPage{fn: getNextPage}
        }

            // PublisherQueryAPIModel publisher registration query
            type PublisherQueryAPIModel struct {
            // SiteID - Site of the publisher
            SiteID *string `json:"siteId,omitempty"`
            // Connected - Included connected or disconnected
            Connected *bool `json:"connected,omitempty"`
            }

            // PublisherUpdateAPIModel publisher registration update request
            type PublisherUpdateAPIModel struct {
            // SiteID - Site of the publisher
            SiteID *string `json:"siteId,omitempty"`
            // Configuration - Publisher discovery configuration
            Configuration *PublisherConfigAPIModel `json:"configuration,omitempty"`
            // LogLevel - Current log level. Possible values include: 'TraceLogLevelError', 'TraceLogLevelInformation', 'TraceLogLevelDebug', 'TraceLogLevelVerbose'
            LogLevel TraceLogLevel `json:"logLevel,omitempty"`
            }

            // RegistryOperationAPIModel registry operation log model
            type RegistryOperationAPIModel struct {
            // AuthorityID - Operation User
            AuthorityID *string `json:"authorityId,omitempty"`
            // Time - Operation time
            Time *date.Time `json:"time,omitempty"`
            }

            // ServerRegistrationRequestAPIModel application registration
            // request
            type ServerRegistrationRequestAPIModel struct {
            // DiscoveryURL - Discovery url to use for registration
            DiscoveryURL *string `json:"discoveryUrl,omitempty"`
            // ID - Registration id
            ID *string `json:"id,omitempty"`
            // ActivationFilter - Upon discovery, activate all endpoints with this filter.
            ActivationFilter *EndpointActivationFilterAPIModel `json:"activationFilter,omitempty"`
            }

            // StatusResponseAPIModel status response model
            type StatusResponseAPIModel struct {
            autorest.Response `json:"-"`
            // Name - Name of this service
            Name *string `json:"name,omitempty"`
            // Status - Operational status
            Status *string `json:"status,omitempty"`
            // CurrentTime - READ-ONLY; Current time
            CurrentTime *string `json:"currentTime,omitempty"`
            // StartTime - READ-ONLY; Start time of service
            StartTime *string `json:"startTime,omitempty"`
            // UpTime - READ-ONLY; Up time of service
            UpTime *int64 `json:"upTime,omitempty"`
            // UID - READ-ONLY; Value generated at bootstrap by each instance of the service and
            // used to correlate logs coming from the same instance. The value
            // changes every time the service starts.
            UID *string `json:"uid,omitempty"`
            // Properties - READ-ONLY; A property bag with details about the service
            Properties map[string]*string `json:"properties"`
            // Dependencies - READ-ONLY; A property bag with details about the internal dependencies
            Dependencies map[string]*string `json:"dependencies"`
            // Metadata - READ-ONLY; Optional meta data.
            Metadata map[string]*string `json:"$metadata"`
            }

        // MarshalJSON is the custom marshaler for StatusResponseAPIModel.
        func (sram StatusResponseAPIModel)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(sram.Name != nil) {
                objectMap["name"] = sram.Name
                }
                if(sram.Status != nil) {
                objectMap["status"] = sram.Status
                }
                return json.Marshal(objectMap)
        }

            // SupervisorAPIModel supervisor registration model
            type SupervisorAPIModel struct {
            autorest.Response `json:"-"`
            // ID - Supervisor id
            ID *string `json:"id,omitempty"`
            // SiteID - Site of the supervisor
            SiteID *string `json:"siteId,omitempty"`
            // Discovery - Whether the supervisor is in discovery mode. Possible values include: 'Off', 'Local', 'Network', 'Fast', 'Scan'
            Discovery DiscoveryMode `json:"discovery,omitempty"`
            // DiscoveryConfig - Supervisor configuration
            DiscoveryConfig *DiscoveryConfigAPIModel `json:"discoveryConfig,omitempty"`
            // Certificate - Supervisor public client cert
            Certificate *[]byte `json:"certificate,omitempty"`
            // LogLevel - Current log level. Possible values include: 'TraceLogLevelError', 'TraceLogLevelInformation', 'TraceLogLevelDebug', 'TraceLogLevelVerbose'
            LogLevel TraceLogLevel `json:"logLevel,omitempty"`
            // OutOfSync - Whether the registration is out of sync between
            // client (module) and server (service) (default: false).
            OutOfSync *bool `json:"outOfSync,omitempty"`
            // Connected - Whether supervisor is connected on this registration
            Connected *bool `json:"connected,omitempty"`
            }

            // SupervisorListAPIModel supervisor registration list
            type SupervisorListAPIModel struct {
            autorest.Response `json:"-"`
            // Items - Registrations
            Items *[]SupervisorAPIModel `json:"items,omitempty"`
            // ContinuationToken - Continuation or null if final
            ContinuationToken *string `json:"continuationToken,omitempty"`
            }

            // SupervisorListAPIModelIterator provides access to a complete
            // listing of SupervisorAPIModel values.
            type SupervisorListAPIModelIterator struct {
                i int
                page SupervisorListAPIModelPage
            }
        // NextWithContext advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        func (iter * SupervisorListAPIModelIterator) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/SupervisorListAPIModelIterator.NextWithContext")
        defer func() {
        sc := -1
        if iter.Response().Response.Response != nil {
        sc = iter.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        iter.i++
        if iter.i < len(iter. page.Values()) {
        return nil
        }
        err = iter.page.NextWithContext(ctx)
        if err != nil {
        iter. i--
        return err
        }
        iter.i = 0
        return nil
        }
        // Next advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        // Deprecated: Use NextWithContext() instead.
        func (iter * SupervisorListAPIModelIterator) Next() error {
        return iter.NextWithContext(context.Background())
        }
        // NotDone returns true if the enumeration should be started or is not yet complete.
        func (iter SupervisorListAPIModelIterator) NotDone() bool {
        return iter.page.NotDone() && iter.i < len(iter. page.Values())
        }
        // Response returns the raw server response from the last page request.
        func (iter SupervisorListAPIModelIterator) Response() SupervisorListAPIModel {
        return iter.page.Response()
        }
        // Value returns the current value or a zero-initialized value if the
        // iterator has advanced beyond the end of the collection.
        func (iter SupervisorListAPIModelIterator) Value() SupervisorAPIModel {
        if !iter.page.NotDone() {
        return SupervisorAPIModel{}
        }
        return iter.page.Values()[iter.i]
        }
        // Creates a new instance of the SupervisorListAPIModelIterator type.
        func NewSupervisorListAPIModelIterator (page SupervisorListAPIModelPage) SupervisorListAPIModelIterator {
            return SupervisorListAPIModelIterator{page: page}
        }


                // IsEmpty returns true if the ListResult contains no values.
                func (slam SupervisorListAPIModel) IsEmpty() bool {
                return slam.Value == nil || len(*slam.Value) == 0
                }

                    // supervisorListAPIModelPreparer prepares a request to retrieve the next set of results.
                    // It returns nil if no more results exist.
                    func (slam SupervisorListAPIModel) supervisorListAPIModelPreparer(ctx context.Context) (*http.Request, error) {
                    if slam.ContinuationToken == nil || len(to.String(slam.ContinuationToken)) < 1 {
                    return nil, nil
                    }
                    return autorest.Prepare((&http.Request{}).WithContext(ctx),
                    autorest.AsJSON(),
                    autorest.AsGet(),
                    autorest.WithBaseURL(to.String( slam.ContinuationToken)));
                    }

            // SupervisorListAPIModelPage contains a page of SupervisorAPIModel
            // values.
            type SupervisorListAPIModelPage struct {
                fn func(context.Context, SupervisorListAPIModel) (SupervisorListAPIModel, error)
                slam SupervisorListAPIModel
            }

        // NextWithContext advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        func (page * SupervisorListAPIModelPage) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/SupervisorListAPIModelPage.NextWithContext")
        defer func() {
        sc := -1
        if page.Response().Response.Response != nil {
        sc = page.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        next, err := page.fn(ctx, page.slam)
        if err != nil {
        return err
        }
        page.slam = next
        return nil
        }

        // Next advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        // Deprecated: Use NextWithContext() instead.
        func (page * SupervisorListAPIModelPage) Next() error {
        return page.NextWithContext(context.Background())
        }
        // NotDone returns true if the page enumeration should be started or is not yet complete.
        func (page SupervisorListAPIModelPage) NotDone() bool {
        return !page.slam.IsEmpty()
        }
        // Response returns the raw server response from the last page request.
        func (page SupervisorListAPIModelPage) Response() SupervisorListAPIModel {
        return page.slam
        }
        // Values returns the slice of values for the current page or nil if there are no values.
        func (page SupervisorListAPIModelPage) Values() []SupervisorAPIModel {
        if page.slam.IsEmpty() {
        return nil
        }
        return *page.slam.Value
        }
        // Creates a new instance of the SupervisorListAPIModelPage type.
        func NewSupervisorListAPIModelPage (getNextPage func(context.Context, SupervisorListAPIModel) (SupervisorListAPIModel, error)) SupervisorListAPIModelPage {
            return SupervisorListAPIModelPage{fn: getNextPage}
        }

            // SupervisorQueryAPIModel supervisor registration query
            type SupervisorQueryAPIModel struct {
            // SiteID - Site of the supervisor
            SiteID *string `json:"siteId,omitempty"`
            // Discovery - Discovery mode of supervisor. Possible values include: 'Off', 'Local', 'Network', 'Fast', 'Scan'
            Discovery DiscoveryMode `json:"discovery,omitempty"`
            // Connected - Included connected or disconnected
            Connected *bool `json:"connected,omitempty"`
            }

            // SupervisorStatusAPIModel supervisor runtime status
            type SupervisorStatusAPIModel struct {
            autorest.Response `json:"-"`
            // DeviceID - Edge device id
            DeviceID *string `json:"deviceId,omitempty"`
            // ModuleID - Module id
            ModuleID *string `json:"moduleId,omitempty"`
            // SiteID - Site id
            SiteID *string `json:"siteId,omitempty"`
            // Endpoints - Endpoint activation status
            Endpoints *[]EndpointActivationStatusAPIModel `json:"endpoints,omitempty"`
            }

            // SupervisorUpdateAPIModel supervisor registration update request
            type SupervisorUpdateAPIModel struct {
            // SiteID - Site of the supervisor
            SiteID *string `json:"siteId,omitempty"`
            // Discovery - Whether the supervisor is in discovery mode.
            // If null, does not change. Possible values include: 'Off', 'Local', 'Network', 'Fast', 'Scan'
            Discovery DiscoveryMode `json:"discovery,omitempty"`
            // DiscoveryConfig - Supervisor discovery configuration
            DiscoveryConfig *DiscoveryConfigAPIModel `json:"discoveryConfig,omitempty"`
            // LogLevel - Current log level. Possible values include: 'TraceLogLevelError', 'TraceLogLevelInformation', 'TraceLogLevelDebug', 'TraceLogLevelVerbose'
            LogLevel TraceLogLevel `json:"logLevel,omitempty"`
            }

