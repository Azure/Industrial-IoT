package azureiiotopctwin

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

import (
    "context"
    "encoding/json"
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/date"
    "github.com/Azure/go-autorest/autorest/to"
    "github.com/Azure/go-autorest/tracing"
    "net/http"
)

// The package's fully qualified name.
const fqdn = "go/azure-iiot-opc-twin"

        // BrowseDirection enumerates the values for browse direction.
    type BrowseDirection string

    const (
                // Backward ...
        Backward BrowseDirection = "Backward"
                // Both ...
        Both BrowseDirection = "Both"
                // Forward ...
        Forward BrowseDirection = "Forward"
            )
    // PossibleBrowseDirectionValues returns an array of possible values for the BrowseDirection const type.
    func PossibleBrowseDirectionValues() []BrowseDirection {
        return []BrowseDirection{Backward,Both,Forward}
    }

        // CredentialType enumerates the values for credential type.
    type CredentialType string

    const (
                // JwtToken ...
        JwtToken CredentialType = "JwtToken"
                // None ...
        None CredentialType = "None"
                // UserName ...
        UserName CredentialType = "UserName"
                // X509Certificate ...
        X509Certificate CredentialType = "X509Certificate"
            )
    // PossibleCredentialTypeValues returns an array of possible values for the CredentialType const type.
    func PossibleCredentialTypeValues() []CredentialType {
        return []CredentialType{JwtToken,None,UserName,X509Certificate}
    }

        // DiagnosticsLevel enumerates the values for diagnostics level.
    type DiagnosticsLevel string

    const (
                // DiagnosticsLevelDiagnostics ...
        DiagnosticsLevelDiagnostics DiagnosticsLevel = "Diagnostics"
                // DiagnosticsLevelNone ...
        DiagnosticsLevelNone DiagnosticsLevel = "None"
                // DiagnosticsLevelOperations ...
        DiagnosticsLevelOperations DiagnosticsLevel = "Operations"
                // DiagnosticsLevelStatus ...
        DiagnosticsLevelStatus DiagnosticsLevel = "Status"
                // DiagnosticsLevelVerbose ...
        DiagnosticsLevelVerbose DiagnosticsLevel = "Verbose"
            )
    // PossibleDiagnosticsLevelValues returns an array of possible values for the DiagnosticsLevel const type.
    func PossibleDiagnosticsLevelValues() []DiagnosticsLevel {
        return []DiagnosticsLevel{DiagnosticsLevelDiagnostics,DiagnosticsLevelNone,DiagnosticsLevelOperations,DiagnosticsLevelStatus,DiagnosticsLevelVerbose}
    }

        // NodeAccessLevel enumerates the values for node access level.
    type NodeAccessLevel string

    const (
                // CurrentRead ...
        CurrentRead NodeAccessLevel = "CurrentRead"
                // CurrentWrite ...
        CurrentWrite NodeAccessLevel = "CurrentWrite"
                // HistoryRead ...
        HistoryRead NodeAccessLevel = "HistoryRead"
                // HistoryWrite ...
        HistoryWrite NodeAccessLevel = "HistoryWrite"
                // NonatomicRead ...
        NonatomicRead NodeAccessLevel = "NonatomicRead"
                // NonatomicWrite ...
        NonatomicWrite NodeAccessLevel = "NonatomicWrite"
                // SemanticChange ...
        SemanticChange NodeAccessLevel = "SemanticChange"
                // StatusWrite ...
        StatusWrite NodeAccessLevel = "StatusWrite"
                // TimestampWrite ...
        TimestampWrite NodeAccessLevel = "TimestampWrite"
                // WriteFullArrayOnly ...
        WriteFullArrayOnly NodeAccessLevel = "WriteFullArrayOnly"
            )
    // PossibleNodeAccessLevelValues returns an array of possible values for the NodeAccessLevel const type.
    func PossibleNodeAccessLevelValues() []NodeAccessLevel {
        return []NodeAccessLevel{CurrentRead,CurrentWrite,HistoryRead,HistoryWrite,NonatomicRead,NonatomicWrite,SemanticChange,StatusWrite,TimestampWrite,WriteFullArrayOnly}
    }

        // NodeAccessRestrictions enumerates the values for node access
        // restrictions.
    type NodeAccessRestrictions string

    const (
                // EncryptionRequired ...
        EncryptionRequired NodeAccessRestrictions = "EncryptionRequired"
                // SessionRequired ...
        SessionRequired NodeAccessRestrictions = "SessionRequired"
                // SigningRequired ...
        SigningRequired NodeAccessRestrictions = "SigningRequired"
            )
    // PossibleNodeAccessRestrictionsValues returns an array of possible values for the NodeAccessRestrictions const type.
    func PossibleNodeAccessRestrictionsValues() []NodeAccessRestrictions {
        return []NodeAccessRestrictions{EncryptionRequired,SessionRequired,SigningRequired}
    }

        // NodeAttribute enumerates the values for node attribute.
    type NodeAttribute string

    const (
                // NodeAttributeAccessLevel ...
        NodeAttributeAccessLevel NodeAttribute = "AccessLevel"
                // NodeAttributeAccessRestrictions ...
        NodeAttributeAccessRestrictions NodeAttribute = "AccessRestrictions"
                // NodeAttributeArrayDimensions ...
        NodeAttributeArrayDimensions NodeAttribute = "ArrayDimensions"
                // NodeAttributeBrowseName ...
        NodeAttributeBrowseName NodeAttribute = "BrowseName"
                // NodeAttributeContainsNoLoops ...
        NodeAttributeContainsNoLoops NodeAttribute = "ContainsNoLoops"
                // NodeAttributeDataType ...
        NodeAttributeDataType NodeAttribute = "DataType"
                // NodeAttributeDataTypeDefinition ...
        NodeAttributeDataTypeDefinition NodeAttribute = "DataTypeDefinition"
                // NodeAttributeDescription ...
        NodeAttributeDescription NodeAttribute = "Description"
                // NodeAttributeDisplayName ...
        NodeAttributeDisplayName NodeAttribute = "DisplayName"
                // NodeAttributeEventNotifier ...
        NodeAttributeEventNotifier NodeAttribute = "EventNotifier"
                // NodeAttributeExecutable ...
        NodeAttributeExecutable NodeAttribute = "Executable"
                // NodeAttributeHistorizing ...
        NodeAttributeHistorizing NodeAttribute = "Historizing"
                // NodeAttributeInverseName ...
        NodeAttributeInverseName NodeAttribute = "InverseName"
                // NodeAttributeIsAbstract ...
        NodeAttributeIsAbstract NodeAttribute = "IsAbstract"
                // NodeAttributeMinimumSamplingInterval ...
        NodeAttributeMinimumSamplingInterval NodeAttribute = "MinimumSamplingInterval"
                // NodeAttributeNodeClass ...
        NodeAttributeNodeClass NodeAttribute = "NodeClass"
                // NodeAttributeRolePermissions ...
        NodeAttributeRolePermissions NodeAttribute = "RolePermissions"
                // NodeAttributeSymmetric ...
        NodeAttributeSymmetric NodeAttribute = "Symmetric"
                // NodeAttributeUserAccessLevel ...
        NodeAttributeUserAccessLevel NodeAttribute = "UserAccessLevel"
                // NodeAttributeUserExecutable ...
        NodeAttributeUserExecutable NodeAttribute = "UserExecutable"
                // NodeAttributeUserRolePermissions ...
        NodeAttributeUserRolePermissions NodeAttribute = "UserRolePermissions"
                // NodeAttributeUserWriteMask ...
        NodeAttributeUserWriteMask NodeAttribute = "UserWriteMask"
                // NodeAttributeValue ...
        NodeAttributeValue NodeAttribute = "Value"
                // NodeAttributeValueRank ...
        NodeAttributeValueRank NodeAttribute = "ValueRank"
                // NodeAttributeWriteMask ...
        NodeAttributeWriteMask NodeAttribute = "WriteMask"
            )
    // PossibleNodeAttributeValues returns an array of possible values for the NodeAttribute const type.
    func PossibleNodeAttributeValues() []NodeAttribute {
        return []NodeAttribute{NodeAttributeAccessLevel,NodeAttributeAccessRestrictions,NodeAttributeArrayDimensions,NodeAttributeBrowseName,NodeAttributeContainsNoLoops,NodeAttributeDataType,NodeAttributeDataTypeDefinition,NodeAttributeDescription,NodeAttributeDisplayName,NodeAttributeEventNotifier,NodeAttributeExecutable,NodeAttributeHistorizing,NodeAttributeInverseName,NodeAttributeIsAbstract,NodeAttributeMinimumSamplingInterval,NodeAttributeNodeClass,NodeAttributeRolePermissions,NodeAttributeSymmetric,NodeAttributeUserAccessLevel,NodeAttributeUserExecutable,NodeAttributeUserRolePermissions,NodeAttributeUserWriteMask,NodeAttributeValue,NodeAttributeValueRank,NodeAttributeWriteMask}
    }

        // NodeClass enumerates the values for node class.
    type NodeClass string

    const (
                // DataType ...
        DataType NodeClass = "DataType"
                // Method ...
        Method NodeClass = "Method"
                // Object ...
        Object NodeClass = "Object"
                // ObjectType ...
        ObjectType NodeClass = "ObjectType"
                // ReferenceType ...
        ReferenceType NodeClass = "ReferenceType"
                // Variable ...
        Variable NodeClass = "Variable"
                // VariableType ...
        VariableType NodeClass = "VariableType"
                // View ...
        View NodeClass = "View"
            )
    // PossibleNodeClassValues returns an array of possible values for the NodeClass const type.
    func PossibleNodeClassValues() []NodeClass {
        return []NodeClass{DataType,Method,Object,ObjectType,ReferenceType,Variable,VariableType,View}
    }

        // NodeEventNotifier enumerates the values for node event notifier.
    type NodeEventNotifier string

    const (
                // NodeEventNotifierHistoryRead ...
        NodeEventNotifierHistoryRead NodeEventNotifier = "HistoryRead"
                // NodeEventNotifierHistoryWrite ...
        NodeEventNotifierHistoryWrite NodeEventNotifier = "HistoryWrite"
                // NodeEventNotifierSubscribeToEvents ...
        NodeEventNotifierSubscribeToEvents NodeEventNotifier = "SubscribeToEvents"
            )
    // PossibleNodeEventNotifierValues returns an array of possible values for the NodeEventNotifier const type.
    func PossibleNodeEventNotifierValues() []NodeEventNotifier {
        return []NodeEventNotifier{NodeEventNotifierHistoryRead,NodeEventNotifierHistoryWrite,NodeEventNotifierSubscribeToEvents}
    }

        // NodeValueRank enumerates the values for node value rank.
    type NodeValueRank string

    const (
                // Any ...
        Any NodeValueRank = "Any"
                // OneDimension ...
        OneDimension NodeValueRank = "OneDimension"
                // OneOrMoreDimensions ...
        OneOrMoreDimensions NodeValueRank = "OneOrMoreDimensions"
                // Scalar ...
        Scalar NodeValueRank = "Scalar"
                // ScalarOrOneDimension ...
        ScalarOrOneDimension NodeValueRank = "ScalarOrOneDimension"
                // TwoDimensions ...
        TwoDimensions NodeValueRank = "TwoDimensions"
            )
    // PossibleNodeValueRankValues returns an array of possible values for the NodeValueRank const type.
    func PossibleNodeValueRankValues() []NodeValueRank {
        return []NodeValueRank{Any,OneDimension,OneOrMoreDimensions,Scalar,ScalarOrOneDimension,TwoDimensions}
    }

        // RolePermissions enumerates the values for role permissions.
    type RolePermissions string

    const (
                // AddNode ...
        AddNode RolePermissions = "AddNode"
                // AddReference ...
        AddReference RolePermissions = "AddReference"
                // Browse ...
        Browse RolePermissions = "Browse"
                // Call ...
        Call RolePermissions = "Call"
                // DeleteHistory ...
        DeleteHistory RolePermissions = "DeleteHistory"
                // DeleteNode ...
        DeleteNode RolePermissions = "DeleteNode"
                // InsertHistory ...
        InsertHistory RolePermissions = "InsertHistory"
                // ModifyHistory ...
        ModifyHistory RolePermissions = "ModifyHistory"
                // Read ...
        Read RolePermissions = "Read"
                // ReadHistory ...
        ReadHistory RolePermissions = "ReadHistory"
                // ReadRolePermissions ...
        ReadRolePermissions RolePermissions = "ReadRolePermissions"
                // ReceiveEvents ...
        ReceiveEvents RolePermissions = "ReceiveEvents"
                // RemoveReference ...
        RemoveReference RolePermissions = "RemoveReference"
                // Write ...
        Write RolePermissions = "Write"
                // WriteAttribute ...
        WriteAttribute RolePermissions = "WriteAttribute"
                // WriteHistorizing ...
        WriteHistorizing RolePermissions = "WriteHistorizing"
                // WriteRolePermissions ...
        WriteRolePermissions RolePermissions = "WriteRolePermissions"
            )
    // PossibleRolePermissionsValues returns an array of possible values for the RolePermissions const type.
    func PossibleRolePermissionsValues() []RolePermissions {
        return []RolePermissions{AddNode,AddReference,Browse,Call,DeleteHistory,DeleteNode,InsertHistory,ModifyHistory,Read,ReadHistory,ReadRolePermissions,ReceiveEvents,RemoveReference,Write,WriteAttribute,WriteHistorizing,WriteRolePermissions}
    }

            // AttributeReadRequestAPIModel attribute to read
            type AttributeReadRequestAPIModel struct {
            // NodeID - Node to read from or write to (mandatory)
            NodeID *string `json:"nodeId,omitempty"`
            // Attribute - Attribute to read or write. Possible values include: 'NodeAttributeNodeClass', 'NodeAttributeBrowseName', 'NodeAttributeDisplayName', 'NodeAttributeDescription', 'NodeAttributeWriteMask', 'NodeAttributeUserWriteMask', 'NodeAttributeIsAbstract', 'NodeAttributeSymmetric', 'NodeAttributeInverseName', 'NodeAttributeContainsNoLoops', 'NodeAttributeEventNotifier', 'NodeAttributeValue', 'NodeAttributeDataType', 'NodeAttributeValueRank', 'NodeAttributeArrayDimensions', 'NodeAttributeAccessLevel', 'NodeAttributeUserAccessLevel', 'NodeAttributeMinimumSamplingInterval', 'NodeAttributeHistorizing', 'NodeAttributeExecutable', 'NodeAttributeUserExecutable', 'NodeAttributeDataTypeDefinition', 'NodeAttributeRolePermissions', 'NodeAttributeUserRolePermissions', 'NodeAttributeAccessRestrictions'
            Attribute NodeAttribute `json:"attribute,omitempty"`
            }

            // AttributeReadResponseAPIModel attribute value read
            type AttributeReadResponseAPIModel struct {
            // Value - Attribute value
            Value interface{} `json:"value,omitempty"`
            // ErrorInfo - Service result in case of error
            ErrorInfo *ServiceResultAPIModel `json:"errorInfo,omitempty"`
            }

            // AttributeWriteRequestAPIModel attribute and value to write to it
            type AttributeWriteRequestAPIModel struct {
            // NodeID - Node to write to (mandatory)
            NodeID *string `json:"nodeId,omitempty"`
            // Attribute - Attribute to write (mandatory). Possible values include: 'NodeAttributeNodeClass', 'NodeAttributeBrowseName', 'NodeAttributeDisplayName', 'NodeAttributeDescription', 'NodeAttributeWriteMask', 'NodeAttributeUserWriteMask', 'NodeAttributeIsAbstract', 'NodeAttributeSymmetric', 'NodeAttributeInverseName', 'NodeAttributeContainsNoLoops', 'NodeAttributeEventNotifier', 'NodeAttributeValue', 'NodeAttributeDataType', 'NodeAttributeValueRank', 'NodeAttributeArrayDimensions', 'NodeAttributeAccessLevel', 'NodeAttributeUserAccessLevel', 'NodeAttributeMinimumSamplingInterval', 'NodeAttributeHistorizing', 'NodeAttributeExecutable', 'NodeAttributeUserExecutable', 'NodeAttributeDataTypeDefinition', 'NodeAttributeRolePermissions', 'NodeAttributeUserRolePermissions', 'NodeAttributeAccessRestrictions'
            Attribute NodeAttribute `json:"attribute,omitempty"`
            // Value - Value to write (mandatory)
            Value interface{} `json:"value,omitempty"`
            }

            // AttributeWriteResponseAPIModel attribute write result
            type AttributeWriteResponseAPIModel struct {
            // ErrorInfo - Service result in case of error
            ErrorInfo *ServiceResultAPIModel `json:"errorInfo,omitempty"`
            }

            // BrowseNextRequestAPIModel request node browsing continuation
            type BrowseNextRequestAPIModel struct {
            // ContinuationToken - Continuation token from previews browse request.
            // (mandatory)
            ContinuationToken *string `json:"continuationToken,omitempty"`
            // Abort - Whether to abort browse and release.
            // (default: false)
            Abort *bool `json:"abort,omitempty"`
            // TargetNodesOnly - Whether to collapse all references into a set of
            // unique target nodes and not show reference
            // information.
            // (default is false)
            TargetNodesOnly *bool `json:"targetNodesOnly,omitempty"`
            // ReadVariableValues - Whether to read variable values on target nodes.
            // (default is false)
            ReadVariableValues *bool `json:"readVariableValues,omitempty"`
            // Header - Optional request header
            Header *RequestHeaderAPIModel `json:"header,omitempty"`
            }

            // BrowseNextResponseAPIModel result of node browse continuation
            type BrowseNextResponseAPIModel struct {
            autorest.Response `json:"-"`
            // References - References, if included, otherwise null.
            References *[]NodeReferenceAPIModel `json:"references,omitempty"`
            // ContinuationToken - Continuation token if more results pending.
            ContinuationToken *string `json:"continuationToken,omitempty"`
            // ErrorInfo - Service result in case of error
            ErrorInfo *ServiceResultAPIModel `json:"errorInfo,omitempty"`
            }

            // BrowseNextResponseAPIModelIterator provides access to a complete
            // listing of NodeReferenceAPIModel values.
            type BrowseNextResponseAPIModelIterator struct {
                i int
                page BrowseNextResponseAPIModelPage
            }
        // NextWithContext advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        func (iter * BrowseNextResponseAPIModelIterator) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/BrowseNextResponseAPIModelIterator.NextWithContext")
        defer func() {
        sc := -1
        if iter.Response().Response.Response != nil {
        sc = iter.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        iter.i++
        if iter.i < len(iter. page.Values()) {
        return nil
        }
        err = iter.page.NextWithContext(ctx)
        if err != nil {
        iter. i--
        return err
        }
        iter.i = 0
        return nil
        }
        // Next advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        // Deprecated: Use NextWithContext() instead.
        func (iter * BrowseNextResponseAPIModelIterator) Next() error {
        return iter.NextWithContext(context.Background())
        }
        // NotDone returns true if the enumeration should be started or is not yet complete.
        func (iter BrowseNextResponseAPIModelIterator) NotDone() bool {
        return iter.page.NotDone() && iter.i < len(iter. page.Values())
        }
        // Response returns the raw server response from the last page request.
        func (iter BrowseNextResponseAPIModelIterator) Response() BrowseNextResponseAPIModel {
        return iter.page.Response()
        }
        // Value returns the current value or a zero-initialized value if the
        // iterator has advanced beyond the end of the collection.
        func (iter BrowseNextResponseAPIModelIterator) Value() NodeReferenceAPIModel {
        if !iter.page.NotDone() {
        return NodeReferenceAPIModel{}
        }
        return iter.page.Values()[iter.i]
        }
        // Creates a new instance of the BrowseNextResponseAPIModelIterator type.
        func NewBrowseNextResponseAPIModelIterator (page BrowseNextResponseAPIModelPage) BrowseNextResponseAPIModelIterator {
            return BrowseNextResponseAPIModelIterator{page: page}
        }


                // IsEmpty returns true if the ListResult contains no values.
                func (bnram BrowseNextResponseAPIModel) IsEmpty() bool {
                return bnram.Value == nil || len(*bnram.Value) == 0
                }

                    // browseNextResponseAPIModelPreparer prepares a request to retrieve the next set of results.
                    // It returns nil if no more results exist.
                    func (bnram BrowseNextResponseAPIModel) browseNextResponseAPIModelPreparer(ctx context.Context) (*http.Request, error) {
                    if bnram.ContinuationToken == nil || len(to.String(bnram.ContinuationToken)) < 1 {
                    return nil, nil
                    }
                    return autorest.Prepare((&http.Request{}).WithContext(ctx),
                    autorest.AsJSON(),
                    autorest.AsGet(),
                    autorest.WithBaseURL(to.String( bnram.ContinuationToken)));
                    }

            // BrowseNextResponseAPIModelPage contains a page of
            // NodeReferenceAPIModel values.
            type BrowseNextResponseAPIModelPage struct {
                fn func(context.Context, BrowseNextResponseAPIModel) (BrowseNextResponseAPIModel, error)
                bnram BrowseNextResponseAPIModel
            }

        // NextWithContext advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        func (page * BrowseNextResponseAPIModelPage) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/BrowseNextResponseAPIModelPage.NextWithContext")
        defer func() {
        sc := -1
        if page.Response().Response.Response != nil {
        sc = page.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        next, err := page.fn(ctx, page.bnram)
        if err != nil {
        return err
        }
        page.bnram = next
        return nil
        }

        // Next advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        // Deprecated: Use NextWithContext() instead.
        func (page * BrowseNextResponseAPIModelPage) Next() error {
        return page.NextWithContext(context.Background())
        }
        // NotDone returns true if the page enumeration should be started or is not yet complete.
        func (page BrowseNextResponseAPIModelPage) NotDone() bool {
        return !page.bnram.IsEmpty()
        }
        // Response returns the raw server response from the last page request.
        func (page BrowseNextResponseAPIModelPage) Response() BrowseNextResponseAPIModel {
        return page.bnram
        }
        // Values returns the slice of values for the current page or nil if there are no values.
        func (page BrowseNextResponseAPIModelPage) Values() []NodeReferenceAPIModel {
        if page.bnram.IsEmpty() {
        return nil
        }
        return *page.bnram.Value
        }
        // Creates a new instance of the BrowseNextResponseAPIModelPage type.
        func NewBrowseNextResponseAPIModelPage (getNextPage func(context.Context, BrowseNextResponseAPIModel) (BrowseNextResponseAPIModel, error)) BrowseNextResponseAPIModelPage {
            return BrowseNextResponseAPIModelPage{fn: getNextPage}
        }

            // BrowsePathRequestAPIModel browse nodes by path
            type BrowsePathRequestAPIModel struct {
            // NodeID - Node to browse from.
            // (default: RootFolder).
            NodeID *string `json:"nodeId,omitempty"`
            // BrowsePaths - The paths to browse from node.
            // (mandatory)
            BrowsePaths *[][]string `json:"browsePaths,omitempty"`
            // ReadVariableValues - Whether to read variable values on target nodes.
            // (default is false)
            ReadVariableValues *bool `json:"readVariableValues,omitempty"`
            // Header - Optional request header
            Header *RequestHeaderAPIModel `json:"header,omitempty"`
            }

            // BrowsePathResponseAPIModel result of node browse continuation
            type BrowsePathResponseAPIModel struct {
            autorest.Response `json:"-"`
            // Targets - Targets
            Targets *[]NodePathTargetAPIModel `json:"targets,omitempty"`
            // ErrorInfo - Service result in case of error
            ErrorInfo *ServiceResultAPIModel `json:"errorInfo,omitempty"`
            }

            // BrowseRequestAPIModel browse request model
            type BrowseRequestAPIModel struct {
            // NodeID - Node to browse.
            // (default: RootFolder).
            NodeID *string `json:"nodeId,omitempty"`
            // Direction - Direction to browse in
            // (default: forward). Possible values include: 'Forward', 'Backward', 'Both'
            Direction BrowseDirection `json:"direction,omitempty"`
            // View - View to browse
            // (default: null = new view = All nodes).
            View *BrowseViewAPIModel `json:"view,omitempty"`
            // ReferenceTypeID - Reference types to browse.
            // (default: hierarchical).
            ReferenceTypeID *string `json:"referenceTypeId,omitempty"`
            // NoSubtypes - Whether to include subtypes of the reference type.
            // (default is false)
            NoSubtypes *bool `json:"noSubtypes,omitempty"`
            // MaxReferencesToReturn - Max number of references to return. There might
            // be less returned as this is up to the client
            // restrictions.  Set to 0 to return no references
            // or target nodes.
            // (default is decided by client e.g. 60)
            MaxReferencesToReturn *int32 `json:"maxReferencesToReturn,omitempty"`
            // TargetNodesOnly - Whether to collapse all references into a set of
            // unique target nodes and not show reference
            // information.
            // (default is false)
            TargetNodesOnly *bool `json:"targetNodesOnly,omitempty"`
            // ReadVariableValues - Whether to read variable values on target nodes.
            // (default is false)
            ReadVariableValues *bool `json:"readVariableValues,omitempty"`
            // Header - Optional request header
            Header *RequestHeaderAPIModel `json:"header,omitempty"`
            }

            // BrowseResponseAPIModel browse response model
            type BrowseResponseAPIModel struct {
            autorest.Response `json:"-"`
            // Node - Node info for the currently browsed node
            Node *NodeAPIModel `json:"node,omitempty"`
            // References - References, if included, otherwise null.
            References *[]NodeReferenceAPIModel `json:"references,omitempty"`
            // ContinuationToken - Continuation token if more results pending.
            ContinuationToken *string `json:"continuationToken,omitempty"`
            // ErrorInfo - Service result in case of error
            ErrorInfo *ServiceResultAPIModel `json:"errorInfo,omitempty"`
            }

            // BrowseViewAPIModel browse view model
            type BrowseViewAPIModel struct {
            // ViewID - Node of the view to browse
            ViewID *string `json:"viewId,omitempty"`
            // Version - Browses specific version of the view.
            Version *int32 `json:"version,omitempty"`
            // Timestamp - Browses at or before this timestamp.
            Timestamp *date.Time `json:"timestamp,omitempty"`
            }

            // CredentialAPIModel credential model
            type CredentialAPIModel struct {
            // Type - Type of credential. Possible values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
            Type CredentialType `json:"type,omitempty"`
            // Value - Value to pass to server
            Value interface{} `json:"value,omitempty"`
            }

            // DiagnosticsAPIModel diagnostics configuration
            type DiagnosticsAPIModel struct {
            // Level - Requested level of response diagnostics.
            // (default: Status). Possible values include: 'DiagnosticsLevelNone', 'DiagnosticsLevelStatus', 'DiagnosticsLevelOperations', 'DiagnosticsLevelDiagnostics', 'DiagnosticsLevelVerbose'
            Level DiagnosticsLevel `json:"level,omitempty"`
            // AuditID - Client audit log entry.
            // (default: client generated)
            AuditID *string `json:"auditId,omitempty"`
            // TimeStamp - Timestamp of request.
            // (default: client generated)
            TimeStamp *date.Time `json:"timeStamp,omitempty"`
            }

            // MethodCallArgumentAPIModel method arg model
            type MethodCallArgumentAPIModel struct {
            // Value - Initial value or value to use
            Value interface{} `json:"value,omitempty"`
            // DataType - Data type Id of the value (from meta data)
            DataType *string `json:"dataType,omitempty"`
            }

            // MethodCallRequestAPIModel call request model
            type MethodCallRequestAPIModel struct {
            // MethodID - Method id of method to call.
            MethodID *string `json:"methodId,omitempty"`
            // ObjectID - Context of the method, i.e. an object or object type
            // node.
            ObjectID *string `json:"objectId,omitempty"`
            // Arguments - Arguments for the method - null means no args
            Arguments *[]MethodCallArgumentAPIModel `json:"arguments,omitempty"`
            // MethodBrowsePath - An optional component path from the node identified by
            // MethodId or from a resolved objectId to the actual
            // method node.
            MethodBrowsePath *[]string `json:"methodBrowsePath,omitempty"`
            // ObjectBrowsePath - An optional component path from the node identified by
            // ObjectId to the actual object or objectType node.
            // If ObjectId is null, the root node (i=84) is used.
            ObjectBrowsePath *[]string `json:"objectBrowsePath,omitempty"`
            // Header - Optional request header
            Header *RequestHeaderAPIModel `json:"header,omitempty"`
            }

            // MethodCallResponseAPIModel method call response model
            type MethodCallResponseAPIModel struct {
            autorest.Response `json:"-"`
            // Results - Output results
            Results *[]MethodCallArgumentAPIModel `json:"results,omitempty"`
            // ErrorInfo - Service result in case of error
            ErrorInfo *ServiceResultAPIModel `json:"errorInfo,omitempty"`
            }

            // MethodMetadataArgumentAPIModel method argument metadata model
            type MethodMetadataArgumentAPIModel struct {
            // Name - Argument name
            Name *string `json:"name,omitempty"`
            // Description - Optional description
            Description *string `json:"description,omitempty"`
            // Type - Data type node of the argument
            Type *NodeAPIModel `json:"type,omitempty"`
            // DefaultValue - Default value
            DefaultValue interface{} `json:"defaultValue,omitempty"`
            // ValueRank - Optional, scalar if not set. Possible values include: 'ScalarOrOneDimension', 'Any', 'Scalar', 'OneOrMoreDimensions', 'OneDimension', 'TwoDimensions'
            ValueRank NodeValueRank `json:"valueRank,omitempty"`
            // ArrayDimensions - Optional, array dimension
            ArrayDimensions *[]int32 `json:"arrayDimensions,omitempty"`
            }

            // MethodMetadataRequestAPIModel method metadata request model
            type MethodMetadataRequestAPIModel struct {
            // MethodID - Method id of method to call.
            // (Required)
            MethodID *string `json:"methodId,omitempty"`
            // MethodBrowsePath - An optional component path from the node identified by
            // MethodId to the actual method node.
            MethodBrowsePath *[]string `json:"methodBrowsePath,omitempty"`
            // Header - Optional request header
            Header *RequestHeaderAPIModel `json:"header,omitempty"`
            }

            // MethodMetadataResponseAPIModel method metadata query model
            type MethodMetadataResponseAPIModel struct {
            autorest.Response `json:"-"`
            // ObjectID - Id of object that the method is a component of
            ObjectID *string `json:"objectId,omitempty"`
            // InputArguments - Input argument meta data
            InputArguments *[]MethodMetadataArgumentAPIModel `json:"inputArguments,omitempty"`
            // OutputArguments - output argument meta data
            OutputArguments *[]MethodMetadataArgumentAPIModel `json:"outputArguments,omitempty"`
            // ErrorInfo - Service result in case of error
            ErrorInfo *ServiceResultAPIModel `json:"errorInfo,omitempty"`
            }

            // NodeAPIModel node model
            type NodeAPIModel struct {
            // NodeClass - Type of node. Possible values include: 'Object', 'Variable', 'Method', 'ObjectType', 'VariableType', 'ReferenceType', 'DataType', 'View'
            NodeClass NodeClass `json:"nodeClass,omitempty"`
            // DisplayName - Display name
            DisplayName *string `json:"displayName,omitempty"`
            // NodeID - Id of node.
            // (Mandatory).
            NodeID *string `json:"nodeId,omitempty"`
            // Description - Description if any
            Description *string `json:"description,omitempty"`
            // BrowseName - Browse name
            BrowseName *string `json:"browseName,omitempty"`
            // AccessRestrictions - Node access restrictions if any.
            // (default: none). Possible values include: 'SigningRequired', 'EncryptionRequired', 'SessionRequired'
            AccessRestrictions NodeAccessRestrictions `json:"accessRestrictions,omitempty"`
            // WriteMask - Default write mask for the node
            // (default: 0)
            WriteMask *int32 `json:"writeMask,omitempty"`
            // UserWriteMask - User write mask for the node
            // (default: 0)
            UserWriteMask *int32 `json:"userWriteMask,omitempty"`
            // IsAbstract - Whether type is abstract, if type can
            // be abstract.  Null if not type node.
            // (default: false)
            IsAbstract *bool `json:"isAbstract,omitempty"`
            // ContainsNoLoops - Whether a view contains loops. Null if
            // not a view.
            ContainsNoLoops *bool `json:"containsNoLoops,omitempty"`
            // EventNotifier - If object or view and eventing, event notifier
            // to subscribe to.
            // (default: no events supported). Possible values include: 'NodeEventNotifierSubscribeToEvents', 'NodeEventNotifierHistoryRead', 'NodeEventNotifierHistoryWrite'
            EventNotifier NodeEventNotifier `json:"eventNotifier,omitempty"`
            // Executable - If method node class, whether method can
            // be called.
            Executable *bool `json:"executable,omitempty"`
            // UserExecutable - If method node class, whether method can
            // be called by current user.
            // (default: false if not executable)
            UserExecutable *bool `json:"userExecutable,omitempty"`
            // DataTypeDefinition - Data type definition in case node is a
            // data type node and definition is available,
            // otherwise null.
            DataTypeDefinition interface{} `json:"dataTypeDefinition,omitempty"`
            // AccessLevel - Default access level for variable node.
            // (default: 0). Possible values include: 'CurrentRead', 'CurrentWrite', 'HistoryRead', 'HistoryWrite', 'SemanticChange', 'StatusWrite', 'TimestampWrite', 'NonatomicRead', 'NonatomicWrite', 'WriteFullArrayOnly'
            AccessLevel NodeAccessLevel `json:"accessLevel,omitempty"`
            // UserAccessLevel - User access level for variable node or null.
            // (default: 0). Possible values include: 'CurrentRead', 'CurrentWrite', 'HistoryRead', 'HistoryWrite', 'SemanticChange', 'StatusWrite', 'TimestampWrite', 'NonatomicRead', 'NonatomicWrite', 'WriteFullArrayOnly'
            UserAccessLevel NodeAccessLevel `json:"userAccessLevel,omitempty"`
            // DataType - If variable the datatype of the variable.
            // (default: null)
            DataType *string `json:"dataType,omitempty"`
            // ValueRank - Value rank of the variable data of a variable
            // or variable type, otherwise null.
            // (default: scalar = -1). Possible values include: 'ScalarOrOneDimension', 'Any', 'Scalar', 'OneOrMoreDimensions', 'OneDimension', 'TwoDimensions'
            ValueRank NodeValueRank `json:"valueRank,omitempty"`
            // ArrayDimensions - Array dimensions of variable or variable type.
            // (default: empty array)
            ArrayDimensions *[]int32 `json:"arrayDimensions,omitempty"`
            // Historizing - Whether the value of a variable is historizing.
            // (default: false)
            Historizing *bool `json:"historizing,omitempty"`
            // MinimumSamplingInterval - Minimum sampling interval for the variable
            // value, otherwise null if not a variable node.
            // (default: null)
            MinimumSamplingInterval *float64 `json:"minimumSamplingInterval,omitempty"`
            // Value - Value of variable or default value of the
            // subtyped variable in case node is a variable
            // type, otherwise null.
            Value interface{} `json:"value,omitempty"`
            // InverseName - Inverse name of the reference if the node is
            // a reference type, otherwise null.
            InverseName *string `json:"inverseName,omitempty"`
            // Symmetric - Whether the reference is symmetric in case
            // the node is a reference type, otherwise
            // null.
            Symmetric *bool `json:"symmetric,omitempty"`
            // RolePermissions - Role permissions
            RolePermissions *[]RolePermissionAPIModel `json:"rolePermissions,omitempty"`
            // UserRolePermissions - User Role permissions
            UserRolePermissions *[]RolePermissionAPIModel `json:"userRolePermissions,omitempty"`
            // TypeDefinitionID - Optional type definition of the node
            TypeDefinitionID *string `json:"typeDefinitionId,omitempty"`
            // Children - Whether node has children which are defined as
            // any forward hierarchical references.
            // (default: unknown)
            Children *bool `json:"children,omitempty"`
            }

            // NodePathTargetAPIModel node path target
            type NodePathTargetAPIModel struct {
            // BrowsePath - The target browse path
            BrowsePath *[]string `json:"browsePath,omitempty"`
            // Target - Target node
            Target *NodeAPIModel `json:"target,omitempty"`
            // RemainingPathIndex - Remaining index in path
            RemainingPathIndex *int32 `json:"remainingPathIndex,omitempty"`
            }

            // NodeReferenceAPIModel reference model
            type NodeReferenceAPIModel struct {
            // ReferenceTypeID - Reference Type identifier
            ReferenceTypeID *string `json:"referenceTypeId,omitempty"`
            // Direction - Browse direction of reference. Possible values include: 'Forward', 'Backward', 'Both'
            Direction BrowseDirection `json:"direction,omitempty"`
            // Target - Target node
            Target *NodeAPIModel `json:"target,omitempty"`
            }

            // PublishedItemAPIModel a monitored and published item
            type PublishedItemAPIModel struct {
            // NodeID - Node to monitor
            NodeID *string `json:"nodeId,omitempty"`
            // BrowsePath - An optional path from NodeId instance to
            // the actual node.
            BrowsePath *[]string `json:"browsePath,omitempty"`
            // NodeAttribute - Attribute to monitor. Possible values include: 'NodeAttributeNodeClass', 'NodeAttributeBrowseName', 'NodeAttributeDisplayName', 'NodeAttributeDescription', 'NodeAttributeWriteMask', 'NodeAttributeUserWriteMask', 'NodeAttributeIsAbstract', 'NodeAttributeSymmetric', 'NodeAttributeInverseName', 'NodeAttributeContainsNoLoops', 'NodeAttributeEventNotifier', 'NodeAttributeValue', 'NodeAttributeDataType', 'NodeAttributeValueRank', 'NodeAttributeArrayDimensions', 'NodeAttributeAccessLevel', 'NodeAttributeUserAccessLevel', 'NodeAttributeMinimumSamplingInterval', 'NodeAttributeHistorizing', 'NodeAttributeExecutable', 'NodeAttributeUserExecutable', 'NodeAttributeDataTypeDefinition', 'NodeAttributeRolePermissions', 'NodeAttributeUserRolePermissions', 'NodeAttributeAccessRestrictions'
            NodeAttribute NodeAttribute `json:"nodeAttribute,omitempty"`
            // PublishingInterval - Publishing interval to use
            PublishingInterval *int32 `json:"publishingInterval,omitempty"`
            // SamplingInterval - Sampling interval to use
            SamplingInterval *int32 `json:"samplingInterval,omitempty"`
            }

            // PublishedItemListRequestAPIModel request list of published items
            type PublishedItemListRequestAPIModel struct {
            // ContinuationToken - Continuation token or null to start
            ContinuationToken *string `json:"continuationToken,omitempty"`
            }

            // PublishedItemListResponseAPIModel list of published nodes
            type PublishedItemListResponseAPIModel struct {
            autorest.Response `json:"-"`
            // Items - Monitored items
            Items *[]PublishedItemAPIModel `json:"items,omitempty"`
            // ContinuationToken - Continuation or null if final
            ContinuationToken *string `json:"continuationToken,omitempty"`
            }

            // PublishedItemListResponseAPIModelIterator provides access to a
            // complete listing of PublishedItemAPIModel values.
            type PublishedItemListResponseAPIModelIterator struct {
                i int
                page PublishedItemListResponseAPIModelPage
            }
        // NextWithContext advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        func (iter * PublishedItemListResponseAPIModelIterator) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/PublishedItemListResponseAPIModelIterator.NextWithContext")
        defer func() {
        sc := -1
        if iter.Response().Response.Response != nil {
        sc = iter.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        iter.i++
        if iter.i < len(iter. page.Values()) {
        return nil
        }
        err = iter.page.NextWithContext(ctx)
        if err != nil {
        iter. i--
        return err
        }
        iter.i = 0
        return nil
        }
        // Next advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        // Deprecated: Use NextWithContext() instead.
        func (iter * PublishedItemListResponseAPIModelIterator) Next() error {
        return iter.NextWithContext(context.Background())
        }
        // NotDone returns true if the enumeration should be started or is not yet complete.
        func (iter PublishedItemListResponseAPIModelIterator) NotDone() bool {
        return iter.page.NotDone() && iter.i < len(iter. page.Values())
        }
        // Response returns the raw server response from the last page request.
        func (iter PublishedItemListResponseAPIModelIterator) Response() PublishedItemListResponseAPIModel {
        return iter.page.Response()
        }
        // Value returns the current value or a zero-initialized value if the
        // iterator has advanced beyond the end of the collection.
        func (iter PublishedItemListResponseAPIModelIterator) Value() PublishedItemAPIModel {
        if !iter.page.NotDone() {
        return PublishedItemAPIModel{}
        }
        return iter.page.Values()[iter.i]
        }
        // Creates a new instance of the PublishedItemListResponseAPIModelIterator type.
        func NewPublishedItemListResponseAPIModelIterator (page PublishedItemListResponseAPIModelPage) PublishedItemListResponseAPIModelIterator {
            return PublishedItemListResponseAPIModelIterator{page: page}
        }


                // IsEmpty returns true if the ListResult contains no values.
                func (pilram PublishedItemListResponseAPIModel) IsEmpty() bool {
                return pilram.Value == nil || len(*pilram.Value) == 0
                }

                    // publishedItemListResponseAPIModelPreparer prepares a request to retrieve the next set of results.
                    // It returns nil if no more results exist.
                    func (pilram PublishedItemListResponseAPIModel) publishedItemListResponseAPIModelPreparer(ctx context.Context) (*http.Request, error) {
                    if pilram.ContinuationToken == nil || len(to.String(pilram.ContinuationToken)) < 1 {
                    return nil, nil
                    }
                    return autorest.Prepare((&http.Request{}).WithContext(ctx),
                    autorest.AsJSON(),
                    autorest.AsGet(),
                    autorest.WithBaseURL(to.String( pilram.ContinuationToken)));
                    }

            // PublishedItemListResponseAPIModelPage contains a page of
            // PublishedItemAPIModel values.
            type PublishedItemListResponseAPIModelPage struct {
                fn func(context.Context, PublishedItemListResponseAPIModel) (PublishedItemListResponseAPIModel, error)
                pilram PublishedItemListResponseAPIModel
            }

        // NextWithContext advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        func (page * PublishedItemListResponseAPIModelPage) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/PublishedItemListResponseAPIModelPage.NextWithContext")
        defer func() {
        sc := -1
        if page.Response().Response.Response != nil {
        sc = page.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        next, err := page.fn(ctx, page.pilram)
        if err != nil {
        return err
        }
        page.pilram = next
        return nil
        }

        // Next advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        // Deprecated: Use NextWithContext() instead.
        func (page * PublishedItemListResponseAPIModelPage) Next() error {
        return page.NextWithContext(context.Background())
        }
        // NotDone returns true if the page enumeration should be started or is not yet complete.
        func (page PublishedItemListResponseAPIModelPage) NotDone() bool {
        return !page.pilram.IsEmpty()
        }
        // Response returns the raw server response from the last page request.
        func (page PublishedItemListResponseAPIModelPage) Response() PublishedItemListResponseAPIModel {
        return page.pilram
        }
        // Values returns the slice of values for the current page or nil if there are no values.
        func (page PublishedItemListResponseAPIModelPage) Values() []PublishedItemAPIModel {
        if page.pilram.IsEmpty() {
        return nil
        }
        return *page.pilram.Value
        }
        // Creates a new instance of the PublishedItemListResponseAPIModelPage type.
        func NewPublishedItemListResponseAPIModelPage (getNextPage func(context.Context, PublishedItemListResponseAPIModel) (PublishedItemListResponseAPIModel, error)) PublishedItemListResponseAPIModelPage {
            return PublishedItemListResponseAPIModelPage{fn: getNextPage}
        }

            // PublishStartRequestAPIModel publish request
            type PublishStartRequestAPIModel struct {
            // Item - Item to publish
            Item *PublishedItemAPIModel `json:"item,omitempty"`
            // Header - Optional request header
            Header *RequestHeaderAPIModel `json:"header,omitempty"`
            }

            // PublishStartResponseAPIModel result of publish request
            type PublishStartResponseAPIModel struct {
            autorest.Response `json:"-"`
            // ErrorInfo - Service result in case of error
            ErrorInfo *ServiceResultAPIModel `json:"errorInfo,omitempty"`
            }

            // PublishStopRequestAPIModel unpublish request
            type PublishStopRequestAPIModel struct {
            // NodeID - Node of published item to unpublish
            NodeID *string `json:"nodeId,omitempty"`
            // BrowsePath - An optional path from NodeId instance to
            // the actual node.
            BrowsePath *[]string `json:"browsePath,omitempty"`
            // NodeAttribute - Attribute of item to unpublish. Possible values include: 'NodeAttributeNodeClass', 'NodeAttributeBrowseName', 'NodeAttributeDisplayName', 'NodeAttributeDescription', 'NodeAttributeWriteMask', 'NodeAttributeUserWriteMask', 'NodeAttributeIsAbstract', 'NodeAttributeSymmetric', 'NodeAttributeInverseName', 'NodeAttributeContainsNoLoops', 'NodeAttributeEventNotifier', 'NodeAttributeValue', 'NodeAttributeDataType', 'NodeAttributeValueRank', 'NodeAttributeArrayDimensions', 'NodeAttributeAccessLevel', 'NodeAttributeUserAccessLevel', 'NodeAttributeMinimumSamplingInterval', 'NodeAttributeHistorizing', 'NodeAttributeExecutable', 'NodeAttributeUserExecutable', 'NodeAttributeDataTypeDefinition', 'NodeAttributeRolePermissions', 'NodeAttributeUserRolePermissions', 'NodeAttributeAccessRestrictions'
            NodeAttribute NodeAttribute `json:"nodeAttribute,omitempty"`
            // Diagnostics - Optional diagnostics configuration
            Diagnostics *DiagnosticsAPIModel `json:"diagnostics,omitempty"`
            }

            // PublishStopResponseAPIModel result of unpublish request
            type PublishStopResponseAPIModel struct {
            autorest.Response `json:"-"`
            // ErrorInfo - Service result in case of error
            ErrorInfo *ServiceResultAPIModel `json:"errorInfo,omitempty"`
            }

            // ReadRequestAPIModel request node attribute read
            type ReadRequestAPIModel struct {
            // Attributes - Attributes to read
            Attributes *[]AttributeReadRequestAPIModel `json:"attributes,omitempty"`
            // Header - Optional request header
            Header *RequestHeaderAPIModel `json:"header,omitempty"`
            }

            // ReadResponseAPIModel result of attribute reads
            type ReadResponseAPIModel struct {
            autorest.Response `json:"-"`
            // Results - All results of attribute reads
            Results *[]AttributeReadResponseAPIModel `json:"results,omitempty"`
            }

            // RequestHeaderAPIModel request header model
            type RequestHeaderAPIModel struct {
            // Elevation - Optional User elevation
            Elevation *CredentialAPIModel `json:"elevation,omitempty"`
            // Locales - Optional list of locales in preference order.
            Locales *[]string `json:"locales,omitempty"`
            // Diagnostics - Optional diagnostics configuration
            Diagnostics *DiagnosticsAPIModel `json:"diagnostics,omitempty"`
            }

            // RolePermissionAPIModel role permission model
            type RolePermissionAPIModel struct {
            // RoleID - Identifier of the role object.
            RoleID *string `json:"roleId,omitempty"`
            // Permissions - Permissions assigned for the role. Possible values include: 'Browse', 'ReadRolePermissions', 'WriteAttribute', 'WriteRolePermissions', 'WriteHistorizing', 'Read', 'Write', 'ReadHistory', 'InsertHistory', 'ModifyHistory', 'DeleteHistory', 'ReceiveEvents', 'Call', 'AddReference', 'RemoveReference', 'DeleteNode', 'AddNode'
            Permissions RolePermissions `json:"permissions,omitempty"`
            }

            // ServiceResultAPIModel service result
            type ServiceResultAPIModel struct {
            // StatusCode - Error code - if null operation succeeded.
            StatusCode *int32 `json:"statusCode,omitempty"`
            // ErrorMessage - Error message in case of error or null.
            ErrorMessage *string `json:"errorMessage,omitempty"`
            // Diagnostics - Additional diagnostics information
            Diagnostics interface{} `json:"diagnostics,omitempty"`
            }

            // StatusResponseAPIModel status response model
            type StatusResponseAPIModel struct {
            autorest.Response `json:"-"`
            // Name - Name of this service
            Name *string `json:"name,omitempty"`
            // Status - Operational status
            Status *string `json:"status,omitempty"`
            // CurrentTime - READ-ONLY; Current time
            CurrentTime *string `json:"currentTime,omitempty"`
            // StartTime - READ-ONLY; Start time of service
            StartTime *string `json:"startTime,omitempty"`
            // UpTime - READ-ONLY; Up time of service
            UpTime *int64 `json:"upTime,omitempty"`
            // UID - READ-ONLY; Value generated at bootstrap by each instance of the service and
            // used to correlate logs coming from the same instance. The value
            // changes every time the service starts.
            UID *string `json:"uid,omitempty"`
            // Properties - READ-ONLY; A property bag with details about the service
            Properties map[string]*string `json:"properties"`
            // Dependencies - READ-ONLY; A property bag with details about the internal dependencies
            Dependencies map[string]*string `json:"dependencies"`
            // Metadata - READ-ONLY; Optional meta data.
            Metadata map[string]*string `json:"$metadata"`
            }

        // MarshalJSON is the custom marshaler for StatusResponseAPIModel.
        func (sram StatusResponseAPIModel)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(sram.Name != nil) {
                objectMap["name"] = sram.Name
                }
                if(sram.Status != nil) {
                objectMap["status"] = sram.Status
                }
                return json.Marshal(objectMap)
        }

            // ValueReadRequestAPIModel node value read request webservice api
            // model
            type ValueReadRequestAPIModel struct {
            // NodeID - Node to read from (mandatory)
            NodeID *string `json:"nodeId,omitempty"`
            // BrowsePath - An optional path from NodeId instance to
            // the actual node.
            BrowsePath *[]string `json:"browsePath,omitempty"`
            // IndexRange - Index range to read, e.g. 1:2,0:1 for 2 slices
            // out of a matrix or 0:1 for the first item in
            // an array, string or bytestring.
            // See 7.22 of part 4: NumericRange.
            IndexRange *string `json:"indexRange,omitempty"`
            // Header - Optional request header
            Header *RequestHeaderAPIModel `json:"header,omitempty"`
            }

            // ValueReadResponseAPIModel value read response model
            type ValueReadResponseAPIModel struct {
            autorest.Response `json:"-"`
            // Value - Value read
            Value interface{} `json:"value,omitempty"`
            // DataType - Built in data type of the value read.
            DataType *string `json:"dataType,omitempty"`
            // SourcePicoseconds - Pico seconds part of when value was read at source.
            SourcePicoseconds *int32 `json:"sourcePicoseconds,omitempty"`
            // SourceTimestamp - Timestamp of when value was read at source.
            SourceTimestamp *date.Time `json:"sourceTimestamp,omitempty"`
            // ServerPicoseconds - Pico seconds part of when value was read at server.
            ServerPicoseconds *int32 `json:"serverPicoseconds,omitempty"`
            // ServerTimestamp - Timestamp of when value was read at server.
            ServerTimestamp *date.Time `json:"serverTimestamp,omitempty"`
            // ErrorInfo - Service result in case of error
            ErrorInfo *ServiceResultAPIModel `json:"errorInfo,omitempty"`
            }

            // ValueWriteRequestAPIModel value write request model
            type ValueWriteRequestAPIModel struct {
            // NodeID - Node id to to write value to.
            NodeID *string `json:"nodeId,omitempty"`
            // BrowsePath - An optional path from NodeId instance to
            // the actual node.
            BrowsePath *[]string `json:"browsePath,omitempty"`
            // Value - Value to write. The system tries to convert
            // the value according to the data type value,
            // e.g. convert comma seperated value strings
            // into arrays.  (Mandatory)
            Value interface{} `json:"value,omitempty"`
            // DataType - A built in datatype for the value. This can
            // be a data type from browse, or a built in
            // type.
            // (default: best effort)
            DataType *string `json:"dataType,omitempty"`
            // IndexRange - Index range to write
            IndexRange *string `json:"indexRange,omitempty"`
            // Header - Optional request header
            Header *RequestHeaderAPIModel `json:"header,omitempty"`
            }

            // ValueWriteResponseAPIModel value write response model
            type ValueWriteResponseAPIModel struct {
            autorest.Response `json:"-"`
            // ErrorInfo - Service result in case of error
            ErrorInfo *ServiceResultAPIModel `json:"errorInfo,omitempty"`
            }

            // WriteRequestAPIModel request node attribute write
            type WriteRequestAPIModel struct {
            // Attributes - Attributes to update
            Attributes *[]AttributeWriteRequestAPIModel `json:"attributes,omitempty"`
            // Header - Optional request header
            Header *RequestHeaderAPIModel `json:"header,omitempty"`
            }

            // WriteResponseAPIModel result of attribute write
            type WriteResponseAPIModel struct {
            autorest.Response `json:"-"`
            // Results - All results of attribute writes
            Results *[]AttributeWriteResponseAPIModel `json:"results,omitempty"`
            }

