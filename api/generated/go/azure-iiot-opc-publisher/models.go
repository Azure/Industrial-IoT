package azureiiotopcpublisher

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

import (
    "context"
    "encoding/json"
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/date"
    "github.com/Azure/go-autorest/autorest/to"
    "github.com/Azure/go-autorest/tracing"
    "net/http"
)

// The package's fully qualified name.
const fqdn = "go/azure-iiot-opc-publisher"

        // CredentialType enumerates the values for credential type.
    type CredentialType string

    const (
                // JwtToken ...
        JwtToken CredentialType = "JwtToken"
                // None ...
        None CredentialType = "None"
                // UserName ...
        UserName CredentialType = "UserName"
                // X509Certificate ...
        X509Certificate CredentialType = "X509Certificate"
            )
    // PossibleCredentialTypeValues returns an array of possible values for the CredentialType const type.
    func PossibleCredentialTypeValues() []CredentialType {
        return []CredentialType{JwtToken,None,UserName,X509Certificate}
    }

        // DiagnosticsLevel enumerates the values for diagnostics level.
    type DiagnosticsLevel string

    const (
                // DiagnosticsLevelDiagnostics ...
        DiagnosticsLevelDiagnostics DiagnosticsLevel = "Diagnostics"
                // DiagnosticsLevelNone ...
        DiagnosticsLevelNone DiagnosticsLevel = "None"
                // DiagnosticsLevelOperations ...
        DiagnosticsLevelOperations DiagnosticsLevel = "Operations"
                // DiagnosticsLevelStatus ...
        DiagnosticsLevelStatus DiagnosticsLevel = "Status"
                // DiagnosticsLevelVerbose ...
        DiagnosticsLevelVerbose DiagnosticsLevel = "Verbose"
            )
    // PossibleDiagnosticsLevelValues returns an array of possible values for the DiagnosticsLevel const type.
    func PossibleDiagnosticsLevelValues() []DiagnosticsLevel {
        return []DiagnosticsLevel{DiagnosticsLevelDiagnostics,DiagnosticsLevelNone,DiagnosticsLevelOperations,DiagnosticsLevelStatus,DiagnosticsLevelVerbose}
    }

            // CredentialAPIModel credential model
            type CredentialAPIModel struct {
            // Type - Type of credential. Possible values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
            Type CredentialType `json:"type,omitempty"`
            // Value - Value to pass to server
            Value interface{} `json:"value,omitempty"`
            }

            // DiagnosticsAPIModel diagnostics configuration
            type DiagnosticsAPIModel struct {
            // Level - Requested level of response diagnostics.
            // (default: Status). Possible values include: 'DiagnosticsLevelNone', 'DiagnosticsLevelStatus', 'DiagnosticsLevelOperations', 'DiagnosticsLevelDiagnostics', 'DiagnosticsLevelVerbose'
            Level DiagnosticsLevel `json:"level,omitempty"`
            // AuditID - Client audit log entry.
            // (default: client generated)
            AuditID *string `json:"auditId,omitempty"`
            // TimeStamp - Timestamp of request.
            // (default: client generated)
            TimeStamp *date.Time `json:"timeStamp,omitempty"`
            }

            // PublishedItemAPIModel a monitored and published item
            type PublishedItemAPIModel struct {
            // NodeID - Node to monitor
            NodeID *string `json:"nodeId,omitempty"`
            // PublishingInterval - Publishing interval to use
            PublishingInterval *string `json:"publishingInterval,omitempty"`
            // SamplingInterval - Sampling interval to use
            SamplingInterval *string `json:"samplingInterval,omitempty"`
            }

            // PublishedItemListRequestAPIModel request list of published items
            type PublishedItemListRequestAPIModel struct {
            // ContinuationToken - Continuation token or null to start
            ContinuationToken *string `json:"continuationToken,omitempty"`
            }

            // PublishedItemListResponseAPIModel list of published nodes
            type PublishedItemListResponseAPIModel struct {
            autorest.Response `json:"-"`
            // Items - Monitored items
            Items *[]PublishedItemAPIModel `json:"items,omitempty"`
            // ContinuationToken - Continuation or null if final
            ContinuationToken *string `json:"continuationToken,omitempty"`
            }

            // PublishedItemListResponseAPIModelIterator provides access to a
            // complete listing of PublishedItemAPIModel values.
            type PublishedItemListResponseAPIModelIterator struct {
                i int
                page PublishedItemListResponseAPIModelPage
            }
        // NextWithContext advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        func (iter * PublishedItemListResponseAPIModelIterator) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/PublishedItemListResponseAPIModelIterator.NextWithContext")
        defer func() {
        sc := -1
        if iter.Response().Response.Response != nil {
        sc = iter.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        iter.i++
        if iter.i < len(iter. page.Values()) {
        return nil
        }
        err = iter.page.NextWithContext(ctx)
        if err != nil {
        iter. i--
        return err
        }
        iter.i = 0
        return nil
        }
        // Next advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        // Deprecated: Use NextWithContext() instead.
        func (iter * PublishedItemListResponseAPIModelIterator) Next() error {
        return iter.NextWithContext(context.Background())
        }
        // NotDone returns true if the enumeration should be started or is not yet complete.
        func (iter PublishedItemListResponseAPIModelIterator) NotDone() bool {
        return iter.page.NotDone() && iter.i < len(iter. page.Values())
        }
        // Response returns the raw server response from the last page request.
        func (iter PublishedItemListResponseAPIModelIterator) Response() PublishedItemListResponseAPIModel {
        return iter.page.Response()
        }
        // Value returns the current value or a zero-initialized value if the
        // iterator has advanced beyond the end of the collection.
        func (iter PublishedItemListResponseAPIModelIterator) Value() PublishedItemAPIModel {
        if !iter.page.NotDone() {
        return PublishedItemAPIModel{}
        }
        return iter.page.Values()[iter.i]
        }
        // Creates a new instance of the PublishedItemListResponseAPIModelIterator type.
        func NewPublishedItemListResponseAPIModelIterator (page PublishedItemListResponseAPIModelPage) PublishedItemListResponseAPIModelIterator {
            return PublishedItemListResponseAPIModelIterator{page: page}
        }


                // IsEmpty returns true if the ListResult contains no values.
                func (pilram PublishedItemListResponseAPIModel) IsEmpty() bool {
                return pilram.Value == nil || len(*pilram.Value) == 0
                }

                    // publishedItemListResponseAPIModelPreparer prepares a request to retrieve the next set of results.
                    // It returns nil if no more results exist.
                    func (pilram PublishedItemListResponseAPIModel) publishedItemListResponseAPIModelPreparer(ctx context.Context) (*http.Request, error) {
                    if pilram.ContinuationToken == nil || len(to.String(pilram.ContinuationToken)) < 1 {
                    return nil, nil
                    }
                    return autorest.Prepare((&http.Request{}).WithContext(ctx),
                    autorest.AsJSON(),
                    autorest.AsGet(),
                    autorest.WithBaseURL(to.String( pilram.ContinuationToken)));
                    }

            // PublishedItemListResponseAPIModelPage contains a page of
            // PublishedItemAPIModel values.
            type PublishedItemListResponseAPIModelPage struct {
                fn func(context.Context, PublishedItemListResponseAPIModel) (PublishedItemListResponseAPIModel, error)
                pilram PublishedItemListResponseAPIModel
            }

        // NextWithContext advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        func (page * PublishedItemListResponseAPIModelPage) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/PublishedItemListResponseAPIModelPage.NextWithContext")
        defer func() {
        sc := -1
        if page.Response().Response.Response != nil {
        sc = page.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        next, err := page.fn(ctx, page.pilram)
        if err != nil {
        return err
        }
        page.pilram = next
        return nil
        }

        // Next advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        // Deprecated: Use NextWithContext() instead.
        func (page * PublishedItemListResponseAPIModelPage) Next() error {
        return page.NextWithContext(context.Background())
        }
        // NotDone returns true if the page enumeration should be started or is not yet complete.
        func (page PublishedItemListResponseAPIModelPage) NotDone() bool {
        return !page.pilram.IsEmpty()
        }
        // Response returns the raw server response from the last page request.
        func (page PublishedItemListResponseAPIModelPage) Response() PublishedItemListResponseAPIModel {
        return page.pilram
        }
        // Values returns the slice of values for the current page or nil if there are no values.
        func (page PublishedItemListResponseAPIModelPage) Values() []PublishedItemAPIModel {
        if page.pilram.IsEmpty() {
        return nil
        }
        return *page.pilram.Value
        }
        // Creates a new instance of the PublishedItemListResponseAPIModelPage type.
        func NewPublishedItemListResponseAPIModelPage (getNextPage func(context.Context, PublishedItemListResponseAPIModel) (PublishedItemListResponseAPIModel, error)) PublishedItemListResponseAPIModelPage {
            return PublishedItemListResponseAPIModelPage{fn: getNextPage}
        }

            // PublishStartRequestAPIModel publish request
            type PublishStartRequestAPIModel struct {
            // Item - Item to publish
            Item *PublishedItemAPIModel `json:"item,omitempty"`
            // Header - Optional request header
            Header *RequestHeaderAPIModel `json:"header,omitempty"`
            }

            // PublishStartResponseAPIModel result of publish request
            type PublishStartResponseAPIModel struct {
            autorest.Response `json:"-"`
            // ErrorInfo - Service result in case of error
            ErrorInfo *ServiceResultAPIModel `json:"errorInfo,omitempty"`
            }

            // PublishStopRequestAPIModel unpublish request
            type PublishStopRequestAPIModel struct {
            // NodeID - Node of published item to unpublish
            NodeID *string `json:"nodeId,omitempty"`
            // Header - Optional request header
            Header *RequestHeaderAPIModel `json:"header,omitempty"`
            }

            // PublishStopResponseAPIModel result of unpublish request
            type PublishStopResponseAPIModel struct {
            autorest.Response `json:"-"`
            // ErrorInfo - Service result in case of error
            ErrorInfo *ServiceResultAPIModel `json:"errorInfo,omitempty"`
            }

            // RequestHeaderAPIModel request header model
            type RequestHeaderAPIModel struct {
            // Elevation - Optional User elevation
            Elevation *CredentialAPIModel `json:"elevation,omitempty"`
            // Locales - Optional list of locales in preference order.
            Locales *[]string `json:"locales,omitempty"`
            // Diagnostics - Optional diagnostics configuration
            Diagnostics *DiagnosticsAPIModel `json:"diagnostics,omitempty"`
            }

            // ServiceResultAPIModel service result
            type ServiceResultAPIModel struct {
            // StatusCode - Error code - if null operation succeeded.
            StatusCode *int32 `json:"statusCode,omitempty"`
            // ErrorMessage - Error message in case of error or null.
            ErrorMessage *string `json:"errorMessage,omitempty"`
            // Diagnostics - Additional diagnostics information
            Diagnostics interface{} `json:"diagnostics,omitempty"`
            }

            // StatusResponseAPIModel status response model
            type StatusResponseAPIModel struct {
            autorest.Response `json:"-"`
            // Name - Name of this service
            Name *string `json:"name,omitempty"`
            // Status - Operational status
            Status *string `json:"status,omitempty"`
            // CurrentTime - READ-ONLY; Current time
            CurrentTime *string `json:"currentTime,omitempty"`
            // StartTime - READ-ONLY; Start time of service
            StartTime *string `json:"startTime,omitempty"`
            // UpTime - READ-ONLY; Up time of service
            UpTime *int64 `json:"upTime,omitempty"`
            // UID - READ-ONLY; Value generated at bootstrap by each instance of the service and
            // used to correlate logs coming from the same instance. The value
            // changes every time the service starts.
            UID *string `json:"uid,omitempty"`
            // Properties - READ-ONLY; A property bag with details about the service
            Properties map[string]*string `json:"properties"`
            // Dependencies - READ-ONLY; A property bag with details about the internal dependencies
            Dependencies map[string]*string `json:"dependencies"`
            // Metadata - READ-ONLY; Optional meta data.
            Metadata map[string]*string `json:"$metadata"`
            }

        // MarshalJSON is the custom marshaler for StatusResponseAPIModel.
        func (sram StatusResponseAPIModel)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(sram.Name != nil) {
                objectMap["name"] = sram.Name
                }
                if(sram.Status != nil) {
                objectMap["status"] = sram.Status
                }
                return json.Marshal(objectMap)
        }

