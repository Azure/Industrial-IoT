// Package azureiiotopchistory implements the Azure ARM Azureiiotopchistory
// service API version v2.
//
// Azure Industrial IoT OPC UA Historic Access Service
package azureiiotopchistory

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

import (
    "context"
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/azure"
    "github.com/Azure/go-autorest/autorest/validation"
    "github.com/Azure/go-autorest/tracing"
    "net/http"
)

const (
// DefaultBaseURI is the default URI used for the service Azureiiotopchistory
DefaultBaseURI = "http://localhost")

// BaseClient is the base client for Azureiiotopchistory.
type BaseClient struct {
    autorest.Client
    BaseURI string
}

// New creates an instance of the BaseClient client.
func New()BaseClient {
    return NewWithBaseURI(DefaultBaseURI, )
}

// NewWithBaseURI creates an instance of the BaseClient client.
func NewWithBaseURI(baseURI string, ) BaseClient {
    return BaseClient{
        Client: autorest.NewClientWithUserAgent(UserAgent()),
        BaseURI: baseURI,
    }
}

    // GetStatus sends the get status request.
    func (client BaseClient) GetStatus(ctx context.Context) (result StatusResponseAPIModel, err error) {
        if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/BaseClient.GetStatus")
            defer func() {
                sc := -1
                if result.Response.Response != nil {
                    sc = result.Response.Response.StatusCode
                }
                tracing.EndSpan(ctx, sc, err)
            }()
        }
            req, err := client.GetStatusPreparer(ctx)
        if err != nil {
        err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "GetStatus", nil , "Failure preparing request")
        return
        }

                resp, err := client.GetStatusSender(req)
                if err != nil {
                result.Response = autorest.Response{Response: resp}
                err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "GetStatus", resp, "Failure sending request")
                return
                }

                result, err = client.GetStatusResponder(resp)
                if err != nil {
                err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "GetStatus", resp, "Failure responding to request")
                }

        return
        }

        // GetStatusPreparer prepares the GetStatus request.
        func (client BaseClient) GetStatusPreparer(ctx context.Context) (*http.Request, error) {
            preparer := autorest.CreatePreparer(
        autorest.AsGet(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPath("/v2/status"))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // GetStatusSender sends the GetStatus request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) GetStatusSender(req *http.Request) (*http.Response, error) {
            sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                return autorest.SendWithSender(client, req, sd...)
                }

    // GetStatusResponder handles the response to the GetStatus request. The method always
    // closes the http.Response Body.
    func (client BaseClient) GetStatusResponder(resp *http.Response) (result StatusResponseAPIModel, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
        }

    // HistoryDeleteEvents delete historic events using historic access.
    // The endpoint must be activated and connected and the module client
    // and server must trust each other.
        // Parameters:
            // endpointID - the identifier of the activated endpoint.
            // request - the history update request
    func (client BaseClient) HistoryDeleteEvents(ctx context.Context, endpointID string, request HistoryUpdateRequestAPIModelDeleteEventsDetailsAPIModel) (result HistoryUpdateResponseAPIModel, err error) {
        if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/BaseClient.HistoryDeleteEvents")
            defer func() {
                sc := -1
                if result.Response.Response != nil {
                    sc = result.Response.Response.StatusCode
                }
                tracing.EndSpan(ctx, sc, err)
            }()
        }
                if err := validation.Validate([]validation.Validation{
                { TargetValue: request,
                 Constraints: []validation.Constraint{	{Target: "request.Details", Name: validation.Null, Rule: true ,
                Chain: []validation.Constraint{	{Target: "request.Details.EventIds", Name: validation.Null, Rule: true, Chain: nil },
                }}}}}); err != nil {
                return result, validation.NewError("azureiiotopchistory.BaseClient", "HistoryDeleteEvents", err.Error())
                }

                    req, err := client.HistoryDeleteEventsPreparer(ctx, endpointID, request)
        if err != nil {
        err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryDeleteEvents", nil , "Failure preparing request")
        return
        }

                resp, err := client.HistoryDeleteEventsSender(req)
                if err != nil {
                result.Response = autorest.Response{Response: resp}
                err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryDeleteEvents", resp, "Failure sending request")
                return
                }

                result, err = client.HistoryDeleteEventsResponder(resp)
                if err != nil {
                err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryDeleteEvents", resp, "Failure responding to request")
                }

        return
        }

        // HistoryDeleteEventsPreparer prepares the HistoryDeleteEvents request.
        func (client BaseClient) HistoryDeleteEventsPreparer(ctx context.Context, endpointID string, request HistoryUpdateRequestAPIModelDeleteEventsDetailsAPIModel) (*http.Request, error) {
                pathParameters := map[string]interface{} {
                "endpointId": autorest.Encode("path",endpointID),
                }

            preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json-patch+json; charset=utf-8"),
        autorest.AsPost(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/v2/delete/{endpointId}/events",pathParameters),
        autorest.WithJSON(request))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // HistoryDeleteEventsSender sends the HistoryDeleteEvents request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) HistoryDeleteEventsSender(req *http.Request) (*http.Response, error) {
            sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                return autorest.SendWithSender(client, req, sd...)
                }

    // HistoryDeleteEventsResponder handles the response to the HistoryDeleteEvents request. The method always
    // closes the http.Response Body.
    func (client BaseClient) HistoryDeleteEventsResponder(resp *http.Response) (result HistoryUpdateResponseAPIModel, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
        }

    // HistoryDeleteModifiedValues delete historic values using historic access.
    // The endpoint must be activated and connected and the module client
    // and server must trust each other.
        // Parameters:
            // endpointID - the identifier of the activated endpoint.
            // request - the history update request
    func (client BaseClient) HistoryDeleteModifiedValues(ctx context.Context, endpointID string, request HistoryUpdateRequestAPIModelDeleteModifiedValuesDetailsAPIModel) (result HistoryUpdateResponseAPIModel, err error) {
        if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/BaseClient.HistoryDeleteModifiedValues")
            defer func() {
                sc := -1
                if result.Response.Response != nil {
                    sc = result.Response.Response.StatusCode
                }
                tracing.EndSpan(ctx, sc, err)
            }()
        }
                if err := validation.Validate([]validation.Validation{
                { TargetValue: request,
                 Constraints: []validation.Constraint{	{Target: "request.Details", Name: validation.Null, Rule: true, Chain: nil }}}}); err != nil {
                return result, validation.NewError("azureiiotopchistory.BaseClient", "HistoryDeleteModifiedValues", err.Error())
                }

                    req, err := client.HistoryDeleteModifiedValuesPreparer(ctx, endpointID, request)
        if err != nil {
        err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryDeleteModifiedValues", nil , "Failure preparing request")
        return
        }

                resp, err := client.HistoryDeleteModifiedValuesSender(req)
                if err != nil {
                result.Response = autorest.Response{Response: resp}
                err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryDeleteModifiedValues", resp, "Failure sending request")
                return
                }

                result, err = client.HistoryDeleteModifiedValuesResponder(resp)
                if err != nil {
                err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryDeleteModifiedValues", resp, "Failure responding to request")
                }

        return
        }

        // HistoryDeleteModifiedValuesPreparer prepares the HistoryDeleteModifiedValues request.
        func (client BaseClient) HistoryDeleteModifiedValuesPreparer(ctx context.Context, endpointID string, request HistoryUpdateRequestAPIModelDeleteModifiedValuesDetailsAPIModel) (*http.Request, error) {
                pathParameters := map[string]interface{} {
                "endpointId": autorest.Encode("path",endpointID),
                }

            preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json-patch+json; charset=utf-8"),
        autorest.AsPost(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/v2/delete/{endpointId}/values/modified",pathParameters),
        autorest.WithJSON(request))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // HistoryDeleteModifiedValuesSender sends the HistoryDeleteModifiedValues request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) HistoryDeleteModifiedValuesSender(req *http.Request) (*http.Response, error) {
            sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                return autorest.SendWithSender(client, req, sd...)
                }

    // HistoryDeleteModifiedValuesResponder handles the response to the HistoryDeleteModifiedValues request. The method always
    // closes the http.Response Body.
    func (client BaseClient) HistoryDeleteModifiedValuesResponder(resp *http.Response) (result HistoryUpdateResponseAPIModel, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
        }

    // HistoryDeleteValues delete historic values using historic access.
    // The endpoint must be activated and connected and the module client
    // and server must trust each other.
        // Parameters:
            // endpointID - the identifier of the activated endpoint.
            // request - the history update request
    func (client BaseClient) HistoryDeleteValues(ctx context.Context, endpointID string, request HistoryUpdateRequestAPIModelDeleteValuesDetailsAPIModel) (result HistoryUpdateResponseAPIModel, err error) {
        if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/BaseClient.HistoryDeleteValues")
            defer func() {
                sc := -1
                if result.Response.Response != nil {
                    sc = result.Response.Response.StatusCode
                }
                tracing.EndSpan(ctx, sc, err)
            }()
        }
                if err := validation.Validate([]validation.Validation{
                { TargetValue: request,
                 Constraints: []validation.Constraint{	{Target: "request.Details", Name: validation.Null, Rule: true, Chain: nil }}}}); err != nil {
                return result, validation.NewError("azureiiotopchistory.BaseClient", "HistoryDeleteValues", err.Error())
                }

                    req, err := client.HistoryDeleteValuesPreparer(ctx, endpointID, request)
        if err != nil {
        err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryDeleteValues", nil , "Failure preparing request")
        return
        }

                resp, err := client.HistoryDeleteValuesSender(req)
                if err != nil {
                result.Response = autorest.Response{Response: resp}
                err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryDeleteValues", resp, "Failure sending request")
                return
                }

                result, err = client.HistoryDeleteValuesResponder(resp)
                if err != nil {
                err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryDeleteValues", resp, "Failure responding to request")
                }

        return
        }

        // HistoryDeleteValuesPreparer prepares the HistoryDeleteValues request.
        func (client BaseClient) HistoryDeleteValuesPreparer(ctx context.Context, endpointID string, request HistoryUpdateRequestAPIModelDeleteValuesDetailsAPIModel) (*http.Request, error) {
                pathParameters := map[string]interface{} {
                "endpointId": autorest.Encode("path",endpointID),
                }

            preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json-patch+json; charset=utf-8"),
        autorest.AsPost(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/v2/delete/{endpointId}/values",pathParameters),
        autorest.WithJSON(request))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // HistoryDeleteValuesSender sends the HistoryDeleteValues request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) HistoryDeleteValuesSender(req *http.Request) (*http.Response, error) {
            sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                return autorest.SendWithSender(client, req, sd...)
                }

    // HistoryDeleteValuesResponder handles the response to the HistoryDeleteValues request. The method always
    // closes the http.Response Body.
    func (client BaseClient) HistoryDeleteValuesResponder(resp *http.Response) (result HistoryUpdateResponseAPIModel, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
        }

    // HistoryDeleteValuesAtTimes delete value history using historic access.
    // The endpoint must be activated and connected and the module client
    // and server must trust each other.
        // Parameters:
            // endpointID - the identifier of the activated endpoint.
            // request - the history update request
    func (client BaseClient) HistoryDeleteValuesAtTimes(ctx context.Context, endpointID string, request HistoryUpdateRequestAPIModelDeleteValuesAtTimesDetailsAPIModel) (result HistoryUpdateResponseAPIModel, err error) {
        if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/BaseClient.HistoryDeleteValuesAtTimes")
            defer func() {
                sc := -1
                if result.Response.Response != nil {
                    sc = result.Response.Response.StatusCode
                }
                tracing.EndSpan(ctx, sc, err)
            }()
        }
                if err := validation.Validate([]validation.Validation{
                { TargetValue: request,
                 Constraints: []validation.Constraint{	{Target: "request.Details", Name: validation.Null, Rule: true ,
                Chain: []validation.Constraint{	{Target: "request.Details.ReqTimes", Name: validation.Null, Rule: true, Chain: nil },
                }}}}}); err != nil {
                return result, validation.NewError("azureiiotopchistory.BaseClient", "HistoryDeleteValuesAtTimes", err.Error())
                }

                    req, err := client.HistoryDeleteValuesAtTimesPreparer(ctx, endpointID, request)
        if err != nil {
        err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryDeleteValuesAtTimes", nil , "Failure preparing request")
        return
        }

                resp, err := client.HistoryDeleteValuesAtTimesSender(req)
                if err != nil {
                result.Response = autorest.Response{Response: resp}
                err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryDeleteValuesAtTimes", resp, "Failure sending request")
                return
                }

                result, err = client.HistoryDeleteValuesAtTimesResponder(resp)
                if err != nil {
                err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryDeleteValuesAtTimes", resp, "Failure responding to request")
                }

        return
        }

        // HistoryDeleteValuesAtTimesPreparer prepares the HistoryDeleteValuesAtTimes request.
        func (client BaseClient) HistoryDeleteValuesAtTimesPreparer(ctx context.Context, endpointID string, request HistoryUpdateRequestAPIModelDeleteValuesAtTimesDetailsAPIModel) (*http.Request, error) {
                pathParameters := map[string]interface{} {
                "endpointId": autorest.Encode("path",endpointID),
                }

            preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json-patch+json; charset=utf-8"),
        autorest.AsPost(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/v2/delete/{endpointId}/values/pick",pathParameters),
        autorest.WithJSON(request))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // HistoryDeleteValuesAtTimesSender sends the HistoryDeleteValuesAtTimes request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) HistoryDeleteValuesAtTimesSender(req *http.Request) (*http.Response, error) {
            sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                return autorest.SendWithSender(client, req, sd...)
                }

    // HistoryDeleteValuesAtTimesResponder handles the response to the HistoryDeleteValuesAtTimes request. The method always
    // closes the http.Response Body.
    func (client BaseClient) HistoryDeleteValuesAtTimesResponder(resp *http.Response) (result HistoryUpdateResponseAPIModel, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
        }

    // HistoryInsertEvents insert historic events using historic access.
    // The endpoint must be activated and connected and the module client
    // and server must trust each other.
        // Parameters:
            // endpointID - the identifier of the activated endpoint.
            // request - the history insert request
    func (client BaseClient) HistoryInsertEvents(ctx context.Context, endpointID string, request HistoryUpdateRequestAPIModelInsertEventsDetailsAPIModel) (result HistoryUpdateResponseAPIModel, err error) {
        if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/BaseClient.HistoryInsertEvents")
            defer func() {
                sc := -1
                if result.Response.Response != nil {
                    sc = result.Response.Response.StatusCode
                }
                tracing.EndSpan(ctx, sc, err)
            }()
        }
                if err := validation.Validate([]validation.Validation{
                { TargetValue: request,
                 Constraints: []validation.Constraint{	{Target: "request.Details", Name: validation.Null, Rule: true ,
                Chain: []validation.Constraint{	{Target: "request.Details.Events", Name: validation.Null, Rule: true, Chain: nil },
                }}}}}); err != nil {
                return result, validation.NewError("azureiiotopchistory.BaseClient", "HistoryInsertEvents", err.Error())
                }

                    req, err := client.HistoryInsertEventsPreparer(ctx, endpointID, request)
        if err != nil {
        err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryInsertEvents", nil , "Failure preparing request")
        return
        }

                resp, err := client.HistoryInsertEventsSender(req)
                if err != nil {
                result.Response = autorest.Response{Response: resp}
                err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryInsertEvents", resp, "Failure sending request")
                return
                }

                result, err = client.HistoryInsertEventsResponder(resp)
                if err != nil {
                err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryInsertEvents", resp, "Failure responding to request")
                }

        return
        }

        // HistoryInsertEventsPreparer prepares the HistoryInsertEvents request.
        func (client BaseClient) HistoryInsertEventsPreparer(ctx context.Context, endpointID string, request HistoryUpdateRequestAPIModelInsertEventsDetailsAPIModel) (*http.Request, error) {
                pathParameters := map[string]interface{} {
                "endpointId": autorest.Encode("path",endpointID),
                }

            preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json-patch+json; charset=utf-8"),
        autorest.AsPost(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/v2/insert/{endpointId}/events",pathParameters),
        autorest.WithJSON(request))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // HistoryInsertEventsSender sends the HistoryInsertEvents request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) HistoryInsertEventsSender(req *http.Request) (*http.Response, error) {
            sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                return autorest.SendWithSender(client, req, sd...)
                }

    // HistoryInsertEventsResponder handles the response to the HistoryInsertEvents request. The method always
    // closes the http.Response Body.
    func (client BaseClient) HistoryInsertEventsResponder(resp *http.Response) (result HistoryUpdateResponseAPIModel, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
        }

    // HistoryInsertValues insert historic values using historic access.
    // The endpoint must be activated and connected and the module client
    // and server must trust each other.
        // Parameters:
            // endpointID - the identifier of the activated endpoint.
            // request - the history insert request
    func (client BaseClient) HistoryInsertValues(ctx context.Context, endpointID string, request HistoryUpdateRequestAPIModelInsertValuesDetailsAPIModel) (result HistoryUpdateResponseAPIModel, err error) {
        if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/BaseClient.HistoryInsertValues")
            defer func() {
                sc := -1
                if result.Response.Response != nil {
                    sc = result.Response.Response.StatusCode
                }
                tracing.EndSpan(ctx, sc, err)
            }()
        }
                if err := validation.Validate([]validation.Validation{
                { TargetValue: request,
                 Constraints: []validation.Constraint{	{Target: "request.Details", Name: validation.Null, Rule: true ,
                Chain: []validation.Constraint{	{Target: "request.Details.Values", Name: validation.Null, Rule: true, Chain: nil },
                }}}}}); err != nil {
                return result, validation.NewError("azureiiotopchistory.BaseClient", "HistoryInsertValues", err.Error())
                }

                    req, err := client.HistoryInsertValuesPreparer(ctx, endpointID, request)
        if err != nil {
        err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryInsertValues", nil , "Failure preparing request")
        return
        }

                resp, err := client.HistoryInsertValuesSender(req)
                if err != nil {
                result.Response = autorest.Response{Response: resp}
                err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryInsertValues", resp, "Failure sending request")
                return
                }

                result, err = client.HistoryInsertValuesResponder(resp)
                if err != nil {
                err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryInsertValues", resp, "Failure responding to request")
                }

        return
        }

        // HistoryInsertValuesPreparer prepares the HistoryInsertValues request.
        func (client BaseClient) HistoryInsertValuesPreparer(ctx context.Context, endpointID string, request HistoryUpdateRequestAPIModelInsertValuesDetailsAPIModel) (*http.Request, error) {
                pathParameters := map[string]interface{} {
                "endpointId": autorest.Encode("path",endpointID),
                }

            preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json-patch+json; charset=utf-8"),
        autorest.AsPost(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/v2/insert/{endpointId}/values",pathParameters),
        autorest.WithJSON(request))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // HistoryInsertValuesSender sends the HistoryInsertValues request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) HistoryInsertValuesSender(req *http.Request) (*http.Response, error) {
            sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                return autorest.SendWithSender(client, req, sd...)
                }

    // HistoryInsertValuesResponder handles the response to the HistoryInsertValues request. The method always
    // closes the http.Response Body.
    func (client BaseClient) HistoryInsertValuesResponder(resp *http.Response) (result HistoryUpdateResponseAPIModel, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
        }

    // HistoryReadEvents read historic events of a node if available using historic
    // access.
    // The endpoint must be activated and connected and the module client
    // and server must trust each other.
        // Parameters:
            // endpointID - the identifier of the activated endpoint.
            // request - the history read request
    func (client BaseClient) HistoryReadEvents(ctx context.Context, endpointID string, request HistoryReadRequestAPIModelReadEventsDetailsAPIModel) (result HistoryReadResponseAPIModelHistoricEventAPIModel, err error) {
        if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/BaseClient.HistoryReadEvents")
            defer func() {
                sc := -1
                if result.Response.Response != nil {
                    sc = result.Response.Response.StatusCode
                }
                tracing.EndSpan(ctx, sc, err)
            }()
        }
            req, err := client.HistoryReadEventsPreparer(ctx, endpointID, request)
        if err != nil {
        err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryReadEvents", nil , "Failure preparing request")
        return
        }

                resp, err := client.HistoryReadEventsSender(req)
                if err != nil {
                result.Response = autorest.Response{Response: resp}
                err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryReadEvents", resp, "Failure sending request")
                return
                }

                result, err = client.HistoryReadEventsResponder(resp)
                if err != nil {
                err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryReadEvents", resp, "Failure responding to request")
                }

        return
        }

        // HistoryReadEventsPreparer prepares the HistoryReadEvents request.
        func (client BaseClient) HistoryReadEventsPreparer(ctx context.Context, endpointID string, request HistoryReadRequestAPIModelReadEventsDetailsAPIModel) (*http.Request, error) {
                pathParameters := map[string]interface{} {
                "endpointId": autorest.Encode("path",endpointID),
                }

            preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json-patch+json; charset=utf-8"),
        autorest.AsPost(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/v2/read/{endpointId}/events",pathParameters),
        autorest.WithJSON(request))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // HistoryReadEventsSender sends the HistoryReadEvents request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) HistoryReadEventsSender(req *http.Request) (*http.Response, error) {
            sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                return autorest.SendWithSender(client, req, sd...)
                }

    // HistoryReadEventsResponder handles the response to the HistoryReadEvents request. The method always
    // closes the http.Response Body.
    func (client BaseClient) HistoryReadEventsResponder(resp *http.Response) (result HistoryReadResponseAPIModelHistoricEventAPIModel, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
        }

    // HistoryReadEventsNext read next batch of historic events of a node using
    // historic access.
    // The endpoint must be activated and connected and the module client
    // and server must trust each other.
        // Parameters:
            // endpointID - the identifier of the activated endpoint.
            // request - the history read next request
    func (client BaseClient) HistoryReadEventsNext(ctx context.Context, endpointID string, request HistoryReadNextRequestAPIModel) (result HistoryReadNextResponseAPIModelHistoricEventAPIModel, err error) {
        if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/BaseClient.HistoryReadEventsNext")
            defer func() {
                sc := -1
                if result.Response.Response != nil {
                    sc = result.Response.Response.StatusCode
                }
                tracing.EndSpan(ctx, sc, err)
            }()
        }
                if err := validation.Validate([]validation.Validation{
                { TargetValue: request,
                 Constraints: []validation.Constraint{	{Target: "request.ContinuationToken", Name: validation.Null, Rule: true, Chain: nil }}}}); err != nil {
                return result, validation.NewError("azureiiotopchistory.BaseClient", "HistoryReadEventsNext", err.Error())
                }

                    req, err := client.HistoryReadEventsNextPreparer(ctx, endpointID, request)
        if err != nil {
        err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryReadEventsNext", nil , "Failure preparing request")
        return
        }

                resp, err := client.HistoryReadEventsNextSender(req)
                if err != nil {
                result.Response = autorest.Response{Response: resp}
                err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryReadEventsNext", resp, "Failure sending request")
                return
                }

                result, err = client.HistoryReadEventsNextResponder(resp)
                if err != nil {
                err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryReadEventsNext", resp, "Failure responding to request")
                }

        return
        }

        // HistoryReadEventsNextPreparer prepares the HistoryReadEventsNext request.
        func (client BaseClient) HistoryReadEventsNextPreparer(ctx context.Context, endpointID string, request HistoryReadNextRequestAPIModel) (*http.Request, error) {
                pathParameters := map[string]interface{} {
                "endpointId": autorest.Encode("path",endpointID),
                }

            preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json-patch+json; charset=utf-8"),
        autorest.AsPost(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/v2/read/{endpointId}/events/next",pathParameters),
        autorest.WithJSON(request))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // HistoryReadEventsNextSender sends the HistoryReadEventsNext request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) HistoryReadEventsNextSender(req *http.Request) (*http.Response, error) {
            sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                return autorest.SendWithSender(client, req, sd...)
                }

    // HistoryReadEventsNextResponder handles the response to the HistoryReadEventsNext request. The method always
    // closes the http.Response Body.
    func (client BaseClient) HistoryReadEventsNextResponder(resp *http.Response) (result HistoryReadNextResponseAPIModelHistoricEventAPIModel, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
        }

    // HistoryReadModifiedValues read processed history values of a node if
    // available using historic access.
    // The endpoint must be activated and connected and the module client
    // and server must trust each other.
        // Parameters:
            // endpointID - the identifier of the activated endpoint.
            // request - the history read request
    func (client BaseClient) HistoryReadModifiedValues(ctx context.Context, endpointID string, request HistoryReadRequestAPIModelReadModifiedValuesDetailsAPIModel) (result HistoryReadResponseAPIModelHistoricValueAPIModel, err error) {
        if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/BaseClient.HistoryReadModifiedValues")
            defer func() {
                sc := -1
                if result.Response.Response != nil {
                    sc = result.Response.Response.StatusCode
                }
                tracing.EndSpan(ctx, sc, err)
            }()
        }
            req, err := client.HistoryReadModifiedValuesPreparer(ctx, endpointID, request)
        if err != nil {
        err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryReadModifiedValues", nil , "Failure preparing request")
        return
        }

                resp, err := client.HistoryReadModifiedValuesSender(req)
                if err != nil {
                result.Response = autorest.Response{Response: resp}
                err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryReadModifiedValues", resp, "Failure sending request")
                return
                }

                result, err = client.HistoryReadModifiedValuesResponder(resp)
                if err != nil {
                err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryReadModifiedValues", resp, "Failure responding to request")
                }

        return
        }

        // HistoryReadModifiedValuesPreparer prepares the HistoryReadModifiedValues request.
        func (client BaseClient) HistoryReadModifiedValuesPreparer(ctx context.Context, endpointID string, request HistoryReadRequestAPIModelReadModifiedValuesDetailsAPIModel) (*http.Request, error) {
                pathParameters := map[string]interface{} {
                "endpointId": autorest.Encode("path",endpointID),
                }

            preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json-patch+json; charset=utf-8"),
        autorest.AsPost(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/v2/read/{endpointId}/values/modified",pathParameters),
        autorest.WithJSON(request))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // HistoryReadModifiedValuesSender sends the HistoryReadModifiedValues request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) HistoryReadModifiedValuesSender(req *http.Request) (*http.Response, error) {
            sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                return autorest.SendWithSender(client, req, sd...)
                }

    // HistoryReadModifiedValuesResponder handles the response to the HistoryReadModifiedValues request. The method always
    // closes the http.Response Body.
    func (client BaseClient) HistoryReadModifiedValuesResponder(resp *http.Response) (result HistoryReadResponseAPIModelHistoricValueAPIModel, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
        }

    // HistoryReadProcessedValues read processed history values of a node if
    // available using historic access.
    // The endpoint must be activated and connected and the module client
    // and server must trust each other.
        // Parameters:
            // endpointID - the identifier of the activated endpoint.
            // request - the history read request
    func (client BaseClient) HistoryReadProcessedValues(ctx context.Context, endpointID string, request HistoryReadRequestAPIModelReadProcessedValuesDetailsAPIModel) (result HistoryReadResponseAPIModelHistoricValueAPIModel, err error) {
        if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/BaseClient.HistoryReadProcessedValues")
            defer func() {
                sc := -1
                if result.Response.Response != nil {
                    sc = result.Response.Response.StatusCode
                }
                tracing.EndSpan(ctx, sc, err)
            }()
        }
            req, err := client.HistoryReadProcessedValuesPreparer(ctx, endpointID, request)
        if err != nil {
        err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryReadProcessedValues", nil , "Failure preparing request")
        return
        }

                resp, err := client.HistoryReadProcessedValuesSender(req)
                if err != nil {
                result.Response = autorest.Response{Response: resp}
                err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryReadProcessedValues", resp, "Failure sending request")
                return
                }

                result, err = client.HistoryReadProcessedValuesResponder(resp)
                if err != nil {
                err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryReadProcessedValues", resp, "Failure responding to request")
                }

        return
        }

        // HistoryReadProcessedValuesPreparer prepares the HistoryReadProcessedValues request.
        func (client BaseClient) HistoryReadProcessedValuesPreparer(ctx context.Context, endpointID string, request HistoryReadRequestAPIModelReadProcessedValuesDetailsAPIModel) (*http.Request, error) {
                pathParameters := map[string]interface{} {
                "endpointId": autorest.Encode("path",endpointID),
                }

            preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json-patch+json; charset=utf-8"),
        autorest.AsPost(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/v2/read/{endpointId}/values/processed",pathParameters),
        autorest.WithJSON(request))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // HistoryReadProcessedValuesSender sends the HistoryReadProcessedValues request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) HistoryReadProcessedValuesSender(req *http.Request) (*http.Response, error) {
            sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                return autorest.SendWithSender(client, req, sd...)
                }

    // HistoryReadProcessedValuesResponder handles the response to the HistoryReadProcessedValues request. The method always
    // closes the http.Response Body.
    func (client BaseClient) HistoryReadProcessedValuesResponder(resp *http.Response) (result HistoryReadResponseAPIModelHistoricValueAPIModel, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
        }

    // HistoryReadRaw read node history if available using historic access.
    // The endpoint must be activated and connected and the module client
    // and server must trust each other.
        // Parameters:
            // endpointID - the identifier of the activated endpoint.
            // request - the history read request
    func (client BaseClient) HistoryReadRaw(ctx context.Context, endpointID string, request HistoryReadRequestAPIModelJToken) (result HistoryReadResponseAPIModelJToken, err error) {
        if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/BaseClient.HistoryReadRaw")
            defer func() {
                sc := -1
                if result.Response.Response != nil {
                    sc = result.Response.Response.StatusCode
                }
                tracing.EndSpan(ctx, sc, err)
            }()
        }
            req, err := client.HistoryReadRawPreparer(ctx, endpointID, request)
        if err != nil {
        err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryReadRaw", nil , "Failure preparing request")
        return
        }

                resp, err := client.HistoryReadRawSender(req)
                if err != nil {
                result.Response = autorest.Response{Response: resp}
                err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryReadRaw", resp, "Failure sending request")
                return
                }

                result, err = client.HistoryReadRawResponder(resp)
                if err != nil {
                err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryReadRaw", resp, "Failure responding to request")
                }

        return
        }

        // HistoryReadRawPreparer prepares the HistoryReadRaw request.
        func (client BaseClient) HistoryReadRawPreparer(ctx context.Context, endpointID string, request HistoryReadRequestAPIModelJToken) (*http.Request, error) {
                pathParameters := map[string]interface{} {
                "endpointId": autorest.Encode("path",endpointID),
                }

            preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json-patch+json; charset=utf-8"),
        autorest.AsPost(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/v2/history/read/{endpointId}",pathParameters),
        autorest.WithJSON(request))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // HistoryReadRawSender sends the HistoryReadRaw request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) HistoryReadRawSender(req *http.Request) (*http.Response, error) {
            sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                return autorest.SendWithSender(client, req, sd...)
                }

    // HistoryReadRawResponder handles the response to the HistoryReadRaw request. The method always
    // closes the http.Response Body.
    func (client BaseClient) HistoryReadRawResponder(resp *http.Response) (result HistoryReadResponseAPIModelJToken, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
        }

    // HistoryReadRawNext read next batch of node history values using historic
    // access.
    // The endpoint must be activated and connected and the module client
    // and server must trust each other.
        // Parameters:
            // endpointID - the identifier of the activated endpoint.
            // request - the history read next request
    func (client BaseClient) HistoryReadRawNext(ctx context.Context, endpointID string, request HistoryReadNextRequestAPIModel) (result HistoryReadNextResponseAPIModelJToken, err error) {
        if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/BaseClient.HistoryReadRawNext")
            defer func() {
                sc := -1
                if result.Response.Response != nil {
                    sc = result.Response.Response.StatusCode
                }
                tracing.EndSpan(ctx, sc, err)
            }()
        }
                if err := validation.Validate([]validation.Validation{
                { TargetValue: request,
                 Constraints: []validation.Constraint{	{Target: "request.ContinuationToken", Name: validation.Null, Rule: true, Chain: nil }}}}); err != nil {
                return result, validation.NewError("azureiiotopchistory.BaseClient", "HistoryReadRawNext", err.Error())
                }

                    req, err := client.HistoryReadRawNextPreparer(ctx, endpointID, request)
        if err != nil {
        err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryReadRawNext", nil , "Failure preparing request")
        return
        }

                resp, err := client.HistoryReadRawNextSender(req)
                if err != nil {
                result.Response = autorest.Response{Response: resp}
                err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryReadRawNext", resp, "Failure sending request")
                return
                }

                result, err = client.HistoryReadRawNextResponder(resp)
                if err != nil {
                err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryReadRawNext", resp, "Failure responding to request")
                }

        return
        }

        // HistoryReadRawNextPreparer prepares the HistoryReadRawNext request.
        func (client BaseClient) HistoryReadRawNextPreparer(ctx context.Context, endpointID string, request HistoryReadNextRequestAPIModel) (*http.Request, error) {
                pathParameters := map[string]interface{} {
                "endpointId": autorest.Encode("path",endpointID),
                }

            preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json-patch+json; charset=utf-8"),
        autorest.AsPost(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/v2/history/read/{endpointId}/next",pathParameters),
        autorest.WithJSON(request))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // HistoryReadRawNextSender sends the HistoryReadRawNext request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) HistoryReadRawNextSender(req *http.Request) (*http.Response, error) {
            sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                return autorest.SendWithSender(client, req, sd...)
                }

    // HistoryReadRawNextResponder handles the response to the HistoryReadRawNext request. The method always
    // closes the http.Response Body.
    func (client BaseClient) HistoryReadRawNextResponder(resp *http.Response) (result HistoryReadNextResponseAPIModelJToken, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
        }

    // HistoryReadValueNext read next batch of historic values of a node using
    // historic access.
    // The endpoint must be activated and connected and the module client
    // and server must trust each other.
        // Parameters:
            // endpointID - the identifier of the activated endpoint.
            // request - the history read next request
    func (client BaseClient) HistoryReadValueNext(ctx context.Context, endpointID string, request HistoryReadNextRequestAPIModel) (result HistoryReadNextResponseAPIModelHistoricValueAPIModel, err error) {
        if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/BaseClient.HistoryReadValueNext")
            defer func() {
                sc := -1
                if result.Response.Response != nil {
                    sc = result.Response.Response.StatusCode
                }
                tracing.EndSpan(ctx, sc, err)
            }()
        }
                if err := validation.Validate([]validation.Validation{
                { TargetValue: request,
                 Constraints: []validation.Constraint{	{Target: "request.ContinuationToken", Name: validation.Null, Rule: true, Chain: nil }}}}); err != nil {
                return result, validation.NewError("azureiiotopchistory.BaseClient", "HistoryReadValueNext", err.Error())
                }

                    req, err := client.HistoryReadValueNextPreparer(ctx, endpointID, request)
        if err != nil {
        err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryReadValueNext", nil , "Failure preparing request")
        return
        }

                resp, err := client.HistoryReadValueNextSender(req)
                if err != nil {
                result.Response = autorest.Response{Response: resp}
                err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryReadValueNext", resp, "Failure sending request")
                return
                }

                result, err = client.HistoryReadValueNextResponder(resp)
                if err != nil {
                err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryReadValueNext", resp, "Failure responding to request")
                }

        return
        }

        // HistoryReadValueNextPreparer prepares the HistoryReadValueNext request.
        func (client BaseClient) HistoryReadValueNextPreparer(ctx context.Context, endpointID string, request HistoryReadNextRequestAPIModel) (*http.Request, error) {
                pathParameters := map[string]interface{} {
                "endpointId": autorest.Encode("path",endpointID),
                }

            preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json-patch+json; charset=utf-8"),
        autorest.AsPost(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/v2/read/{endpointId}/values/next",pathParameters),
        autorest.WithJSON(request))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // HistoryReadValueNextSender sends the HistoryReadValueNext request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) HistoryReadValueNextSender(req *http.Request) (*http.Response, error) {
            sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                return autorest.SendWithSender(client, req, sd...)
                }

    // HistoryReadValueNextResponder handles the response to the HistoryReadValueNext request. The method always
    // closes the http.Response Body.
    func (client BaseClient) HistoryReadValueNextResponder(resp *http.Response) (result HistoryReadNextResponseAPIModelHistoricValueAPIModel, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
        }

    // HistoryReadValues read processed history values of a node if available using
    // historic access.
    // The endpoint must be activated and connected and the module client
    // and server must trust each other.
        // Parameters:
            // endpointID - the identifier of the activated endpoint.
            // request - the history read request
    func (client BaseClient) HistoryReadValues(ctx context.Context, endpointID string, request HistoryReadRequestAPIModelReadValuesDetailsAPIModel) (result HistoryReadResponseAPIModelHistoricValueAPIModel, err error) {
        if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/BaseClient.HistoryReadValues")
            defer func() {
                sc := -1
                if result.Response.Response != nil {
                    sc = result.Response.Response.StatusCode
                }
                tracing.EndSpan(ctx, sc, err)
            }()
        }
            req, err := client.HistoryReadValuesPreparer(ctx, endpointID, request)
        if err != nil {
        err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryReadValues", nil , "Failure preparing request")
        return
        }

                resp, err := client.HistoryReadValuesSender(req)
                if err != nil {
                result.Response = autorest.Response{Response: resp}
                err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryReadValues", resp, "Failure sending request")
                return
                }

                result, err = client.HistoryReadValuesResponder(resp)
                if err != nil {
                err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryReadValues", resp, "Failure responding to request")
                }

        return
        }

        // HistoryReadValuesPreparer prepares the HistoryReadValues request.
        func (client BaseClient) HistoryReadValuesPreparer(ctx context.Context, endpointID string, request HistoryReadRequestAPIModelReadValuesDetailsAPIModel) (*http.Request, error) {
                pathParameters := map[string]interface{} {
                "endpointId": autorest.Encode("path",endpointID),
                }

            preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json-patch+json; charset=utf-8"),
        autorest.AsPost(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/v2/read/{endpointId}/values",pathParameters),
        autorest.WithJSON(request))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // HistoryReadValuesSender sends the HistoryReadValues request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) HistoryReadValuesSender(req *http.Request) (*http.Response, error) {
            sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                return autorest.SendWithSender(client, req, sd...)
                }

    // HistoryReadValuesResponder handles the response to the HistoryReadValues request. The method always
    // closes the http.Response Body.
    func (client BaseClient) HistoryReadValuesResponder(resp *http.Response) (result HistoryReadResponseAPIModelHistoricValueAPIModel, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
        }

    // HistoryReadValuesAtTimes read historic values of a node if available using
    // historic access.
    // The endpoint must be activated and connected and the module client
    // and server must trust each other.
        // Parameters:
            // endpointID - the identifier of the activated endpoint.
            // request - the history read request
    func (client BaseClient) HistoryReadValuesAtTimes(ctx context.Context, endpointID string, request HistoryReadRequestAPIModelReadValuesAtTimesDetailsAPIModel) (result HistoryReadResponseAPIModelHistoricValueAPIModel, err error) {
        if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/BaseClient.HistoryReadValuesAtTimes")
            defer func() {
                sc := -1
                if result.Response.Response != nil {
                    sc = result.Response.Response.StatusCode
                }
                tracing.EndSpan(ctx, sc, err)
            }()
        }
                if err := validation.Validate([]validation.Validation{
                { TargetValue: request,
                 Constraints: []validation.Constraint{	{Target: "request.Details", Name: validation.Null, Rule: false ,
                Chain: []validation.Constraint{	{Target: "request.Details.ReqTimes", Name: validation.Null, Rule: true, Chain: nil },
                }}}}}); err != nil {
                return result, validation.NewError("azureiiotopchistory.BaseClient", "HistoryReadValuesAtTimes", err.Error())
                }

                    req, err := client.HistoryReadValuesAtTimesPreparer(ctx, endpointID, request)
        if err != nil {
        err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryReadValuesAtTimes", nil , "Failure preparing request")
        return
        }

                resp, err := client.HistoryReadValuesAtTimesSender(req)
                if err != nil {
                result.Response = autorest.Response{Response: resp}
                err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryReadValuesAtTimes", resp, "Failure sending request")
                return
                }

                result, err = client.HistoryReadValuesAtTimesResponder(resp)
                if err != nil {
                err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryReadValuesAtTimes", resp, "Failure responding to request")
                }

        return
        }

        // HistoryReadValuesAtTimesPreparer prepares the HistoryReadValuesAtTimes request.
        func (client BaseClient) HistoryReadValuesAtTimesPreparer(ctx context.Context, endpointID string, request HistoryReadRequestAPIModelReadValuesAtTimesDetailsAPIModel) (*http.Request, error) {
                pathParameters := map[string]interface{} {
                "endpointId": autorest.Encode("path",endpointID),
                }

            preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json-patch+json; charset=utf-8"),
        autorest.AsPost(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/v2/read/{endpointId}/values/pick",pathParameters),
        autorest.WithJSON(request))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // HistoryReadValuesAtTimesSender sends the HistoryReadValuesAtTimes request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) HistoryReadValuesAtTimesSender(req *http.Request) (*http.Response, error) {
            sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                return autorest.SendWithSender(client, req, sd...)
                }

    // HistoryReadValuesAtTimesResponder handles the response to the HistoryReadValuesAtTimes request. The method always
    // closes the http.Response Body.
    func (client BaseClient) HistoryReadValuesAtTimesResponder(resp *http.Response) (result HistoryReadResponseAPIModelHistoricValueAPIModel, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
        }

    // HistoryReplaceEvents replace historic events using historic access.
    // The endpoint must be activated and connected and the module client
    // and server must trust each other.
        // Parameters:
            // endpointID - the identifier of the activated endpoint.
            // request - the history replace request
    func (client BaseClient) HistoryReplaceEvents(ctx context.Context, endpointID string, request HistoryUpdateRequestAPIModelReplaceEventsDetailsAPIModel) (result HistoryUpdateResponseAPIModel, err error) {
        if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/BaseClient.HistoryReplaceEvents")
            defer func() {
                sc := -1
                if result.Response.Response != nil {
                    sc = result.Response.Response.StatusCode
                }
                tracing.EndSpan(ctx, sc, err)
            }()
        }
                if err := validation.Validate([]validation.Validation{
                { TargetValue: request,
                 Constraints: []validation.Constraint{	{Target: "request.Details", Name: validation.Null, Rule: true ,
                Chain: []validation.Constraint{	{Target: "request.Details.Events", Name: validation.Null, Rule: true, Chain: nil },
                }}}}}); err != nil {
                return result, validation.NewError("azureiiotopchistory.BaseClient", "HistoryReplaceEvents", err.Error())
                }

                    req, err := client.HistoryReplaceEventsPreparer(ctx, endpointID, request)
        if err != nil {
        err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryReplaceEvents", nil , "Failure preparing request")
        return
        }

                resp, err := client.HistoryReplaceEventsSender(req)
                if err != nil {
                result.Response = autorest.Response{Response: resp}
                err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryReplaceEvents", resp, "Failure sending request")
                return
                }

                result, err = client.HistoryReplaceEventsResponder(resp)
                if err != nil {
                err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryReplaceEvents", resp, "Failure responding to request")
                }

        return
        }

        // HistoryReplaceEventsPreparer prepares the HistoryReplaceEvents request.
        func (client BaseClient) HistoryReplaceEventsPreparer(ctx context.Context, endpointID string, request HistoryUpdateRequestAPIModelReplaceEventsDetailsAPIModel) (*http.Request, error) {
                pathParameters := map[string]interface{} {
                "endpointId": autorest.Encode("path",endpointID),
                }

            preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json-patch+json; charset=utf-8"),
        autorest.AsPost(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/v2/replace/{endpointId}/events",pathParameters),
        autorest.WithJSON(request))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // HistoryReplaceEventsSender sends the HistoryReplaceEvents request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) HistoryReplaceEventsSender(req *http.Request) (*http.Response, error) {
            sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                return autorest.SendWithSender(client, req, sd...)
                }

    // HistoryReplaceEventsResponder handles the response to the HistoryReplaceEvents request. The method always
    // closes the http.Response Body.
    func (client BaseClient) HistoryReplaceEventsResponder(resp *http.Response) (result HistoryUpdateResponseAPIModel, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
        }

    // HistoryReplaceValues replace historic values using historic access.
    // The endpoint must be activated and connected and the module client
    // and server must trust each other.
        // Parameters:
            // endpointID - the identifier of the activated endpoint.
            // request - the history replace request
    func (client BaseClient) HistoryReplaceValues(ctx context.Context, endpointID string, request HistoryUpdateRequestAPIModelReplaceValuesDetailsAPIModel) (result HistoryUpdateResponseAPIModel, err error) {
        if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/BaseClient.HistoryReplaceValues")
            defer func() {
                sc := -1
                if result.Response.Response != nil {
                    sc = result.Response.Response.StatusCode
                }
                tracing.EndSpan(ctx, sc, err)
            }()
        }
                if err := validation.Validate([]validation.Validation{
                { TargetValue: request,
                 Constraints: []validation.Constraint{	{Target: "request.Details", Name: validation.Null, Rule: true ,
                Chain: []validation.Constraint{	{Target: "request.Details.Values", Name: validation.Null, Rule: true, Chain: nil },
                }}}}}); err != nil {
                return result, validation.NewError("azureiiotopchistory.BaseClient", "HistoryReplaceValues", err.Error())
                }

                    req, err := client.HistoryReplaceValuesPreparer(ctx, endpointID, request)
        if err != nil {
        err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryReplaceValues", nil , "Failure preparing request")
        return
        }

                resp, err := client.HistoryReplaceValuesSender(req)
                if err != nil {
                result.Response = autorest.Response{Response: resp}
                err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryReplaceValues", resp, "Failure sending request")
                return
                }

                result, err = client.HistoryReplaceValuesResponder(resp)
                if err != nil {
                err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryReplaceValues", resp, "Failure responding to request")
                }

        return
        }

        // HistoryReplaceValuesPreparer prepares the HistoryReplaceValues request.
        func (client BaseClient) HistoryReplaceValuesPreparer(ctx context.Context, endpointID string, request HistoryUpdateRequestAPIModelReplaceValuesDetailsAPIModel) (*http.Request, error) {
                pathParameters := map[string]interface{} {
                "endpointId": autorest.Encode("path",endpointID),
                }

            preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json-patch+json; charset=utf-8"),
        autorest.AsPost(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/v2/replace/{endpointId}/values",pathParameters),
        autorest.WithJSON(request))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // HistoryReplaceValuesSender sends the HistoryReplaceValues request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) HistoryReplaceValuesSender(req *http.Request) (*http.Response, error) {
            sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                return autorest.SendWithSender(client, req, sd...)
                }

    // HistoryReplaceValuesResponder handles the response to the HistoryReplaceValues request. The method always
    // closes the http.Response Body.
    func (client BaseClient) HistoryReplaceValuesResponder(resp *http.Response) (result HistoryUpdateResponseAPIModel, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
        }

    // HistoryUpdateRaw update node history using historic access.
    // The endpoint must be activated and connected and the module client
    // and server must trust each other.
        // Parameters:
            // endpointID - the identifier of the activated endpoint.
            // request - the history update request
    func (client BaseClient) HistoryUpdateRaw(ctx context.Context, endpointID string, request HistoryUpdateRequestAPIModelJToken) (result HistoryUpdateResponseAPIModel, err error) {
        if tracing.IsEnabled() {
            ctx = tracing.StartSpan(ctx, fqdn + "/BaseClient.HistoryUpdateRaw")
            defer func() {
                sc := -1
                if result.Response.Response != nil {
                    sc = result.Response.Response.StatusCode
                }
                tracing.EndSpan(ctx, sc, err)
            }()
        }
                if err := validation.Validate([]validation.Validation{
                { TargetValue: request,
                 Constraints: []validation.Constraint{	{Target: "request.Details", Name: validation.Null, Rule: true, Chain: nil }}}}); err != nil {
                return result, validation.NewError("azureiiotopchistory.BaseClient", "HistoryUpdateRaw", err.Error())
                }

                    req, err := client.HistoryUpdateRawPreparer(ctx, endpointID, request)
        if err != nil {
        err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryUpdateRaw", nil , "Failure preparing request")
        return
        }

                resp, err := client.HistoryUpdateRawSender(req)
                if err != nil {
                result.Response = autorest.Response{Response: resp}
                err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryUpdateRaw", resp, "Failure sending request")
                return
                }

                result, err = client.HistoryUpdateRawResponder(resp)
                if err != nil {
                err = autorest.NewErrorWithError(err, "azureiiotopchistory.BaseClient", "HistoryUpdateRaw", resp, "Failure responding to request")
                }

        return
        }

        // HistoryUpdateRawPreparer prepares the HistoryUpdateRaw request.
        func (client BaseClient) HistoryUpdateRawPreparer(ctx context.Context, endpointID string, request HistoryUpdateRequestAPIModelJToken) (*http.Request, error) {
                pathParameters := map[string]interface{} {
                "endpointId": autorest.Encode("path",endpointID),
                }

            preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json-patch+json; charset=utf-8"),
        autorest.AsPost(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/v2/history/update/{endpointId}",pathParameters),
        autorest.WithJSON(request))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // HistoryUpdateRawSender sends the HistoryUpdateRaw request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) HistoryUpdateRawSender(req *http.Request) (*http.Response, error) {
            sd := autorest.GetSendDecorators(req.Context(), autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                return autorest.SendWithSender(client, req, sd...)
                }

    // HistoryUpdateRawResponder handles the response to the HistoryUpdateRaw request. The method always
    // closes the http.Response Body.
    func (client BaseClient) HistoryUpdateRawResponder(resp *http.Response) (result HistoryUpdateResponseAPIModel, err error) {
        err = autorest.Respond(
        resp,
        client.ByInspecting(),
        azure.WithErrorUnlessStatusCode(http.StatusOK),
        autorest.ByUnmarshallingJSON(&result),
        autorest.ByClosing())
        result.Response = autorest.Response{Response: resp}
            return
        }

