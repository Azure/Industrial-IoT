package azureiiotopcvault

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

import (
    "context"
    "encoding/json"
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/date"
    "github.com/Azure/go-autorest/autorest/to"
    "github.com/Azure/go-autorest/tracing"
    "net/http"
)

// The package's fully qualified name.
const fqdn = "go/azure-iiot-opc-vault"

        // CertificateRequestState enumerates the values for certificate
        // request state.
    type CertificateRequestState string

    const (
                // CertificateRequestStateAccepted ...
        CertificateRequestStateAccepted CertificateRequestState = "Accepted"
                // CertificateRequestStateApproved ...
        CertificateRequestStateApproved CertificateRequestState = "Approved"
                // CertificateRequestStateCompleted ...
        CertificateRequestStateCompleted CertificateRequestState = "Completed"
                // CertificateRequestStateFailure ...
        CertificateRequestStateFailure CertificateRequestState = "Failure"
                // CertificateRequestStateNew ...
        CertificateRequestStateNew CertificateRequestState = "New"
                // CertificateRequestStateRejected ...
        CertificateRequestStateRejected CertificateRequestState = "Rejected"
            )
    // PossibleCertificateRequestStateValues returns an array of possible values for the CertificateRequestState const type.
    func PossibleCertificateRequestStateValues() []CertificateRequestState {
        return []CertificateRequestState{CertificateRequestStateAccepted,CertificateRequestStateApproved,CertificateRequestStateCompleted,CertificateRequestStateFailure,CertificateRequestStateNew,CertificateRequestStateRejected}
    }

        // CertificateRequestType enumerates the values for certificate request
        // type.
    type CertificateRequestType string

    const (
                // KeyPairRequest ...
        KeyPairRequest CertificateRequestType = "KeyPairRequest"
                // SigningRequest ...
        SigningRequest CertificateRequestType = "SigningRequest"
            )
    // PossibleCertificateRequestTypeValues returns an array of possible values for the CertificateRequestType const type.
    func PossibleCertificateRequestTypeValues() []CertificateRequestType {
        return []CertificateRequestType{KeyPairRequest,SigningRequest}
    }

        // PrivateKeyType enumerates the values for private key type.
    type PrivateKeyType string

    const (
                // AES ...
        AES PrivateKeyType = "AES"
                // ECC ...
        ECC PrivateKeyType = "ECC"
                // RSA ...
        RSA PrivateKeyType = "RSA"
            )
    // PossiblePrivateKeyTypeValues returns an array of possible values for the PrivateKeyType const type.
    func PossiblePrivateKeyTypeValues() []PrivateKeyType {
        return []PrivateKeyType{AES,ECC,RSA}
    }

        // SignatureAlgorithm enumerates the values for signature algorithm.
    type SignatureAlgorithm string

    const (
                // Rsa256 ...
        Rsa256 SignatureAlgorithm = "Rsa256"
                // Rsa256Pss ...
        Rsa256Pss SignatureAlgorithm = "Rsa256Pss"
                // Rsa384 ...
        Rsa384 SignatureAlgorithm = "Rsa384"
                // Rsa384Pss ...
        Rsa384Pss SignatureAlgorithm = "Rsa384Pss"
                // Rsa512 ...
        Rsa512 SignatureAlgorithm = "Rsa512"
                // Rsa512Pss ...
        Rsa512Pss SignatureAlgorithm = "Rsa512Pss"
            )
    // PossibleSignatureAlgorithmValues returns an array of possible values for the SignatureAlgorithm const type.
    func PossibleSignatureAlgorithmValues() []SignatureAlgorithm {
        return []SignatureAlgorithm{Rsa256,Rsa256Pss,Rsa384,Rsa384Pss,Rsa512,Rsa512Pss}
    }

        // TrustGroupType enumerates the values for trust group type.
    type TrustGroupType string

    const (
                // ApplicationInstanceCertificate ...
        ApplicationInstanceCertificate TrustGroupType = "ApplicationInstanceCertificate"
                // HTTPSCertificate ...
        HTTPSCertificate TrustGroupType = "HttpsCertificate"
                // UserCredentialCertificate ...
        UserCredentialCertificate TrustGroupType = "UserCredentialCertificate"
            )
    // PossibleTrustGroupTypeValues returns an array of possible values for the TrustGroupType const type.
    func PossibleTrustGroupTypeValues() []TrustGroupType {
        return []TrustGroupType{ApplicationInstanceCertificate,HTTPSCertificate,UserCredentialCertificate}
    }

            // CertificateRequestQueryRequestAPIModel certificate request query
            // model
            type CertificateRequestQueryRequestAPIModel struct {
            // EntityID - The entity id to filter with
            EntityID *string `json:"entityId,omitempty"`
            // State - The certificate request state. Possible values include: 'CertificateRequestStateNew', 'CertificateRequestStateApproved', 'CertificateRequestStateRejected', 'CertificateRequestStateFailure', 'CertificateRequestStateCompleted', 'CertificateRequestStateAccepted'
            State CertificateRequestState `json:"state,omitempty"`
            }

            // CertificateRequestQueryResponseAPIModel response model
            type CertificateRequestQueryResponseAPIModel struct {
            autorest.Response `json:"-"`
            // Requests - The query result.
            Requests *[]CertificateRequestRecordAPIModel `json:"requests,omitempty"`
            // NextPageLink - Link to the next page of results.
            NextPageLink *string `json:"nextPageLink,omitempty"`
            }

            // CertificateRequestQueryResponseAPIModelIterator provides access
            // to a complete listing of CertificateRequestRecordAPIModel
            // values.
            type CertificateRequestQueryResponseAPIModelIterator struct {
                i int
                page CertificateRequestQueryResponseAPIModelPage
            }
        // NextWithContext advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        func (iter * CertificateRequestQueryResponseAPIModelIterator) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/CertificateRequestQueryResponseAPIModelIterator.NextWithContext")
        defer func() {
        sc := -1
        if iter.Response().Response.Response != nil {
        sc = iter.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        iter.i++
        if iter.i < len(iter. page.Values()) {
        return nil
        }
        err = iter.page.NextWithContext(ctx)
        if err != nil {
        iter. i--
        return err
        }
        iter.i = 0
        return nil
        }
        // Next advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        // Deprecated: Use NextWithContext() instead.
        func (iter * CertificateRequestQueryResponseAPIModelIterator) Next() error {
        return iter.NextWithContext(context.Background())
        }
        // NotDone returns true if the enumeration should be started or is not yet complete.
        func (iter CertificateRequestQueryResponseAPIModelIterator) NotDone() bool {
        return iter.page.NotDone() && iter.i < len(iter. page.Values())
        }
        // Response returns the raw server response from the last page request.
        func (iter CertificateRequestQueryResponseAPIModelIterator) Response() CertificateRequestQueryResponseAPIModel {
        return iter.page.Response()
        }
        // Value returns the current value or a zero-initialized value if the
        // iterator has advanced beyond the end of the collection.
        func (iter CertificateRequestQueryResponseAPIModelIterator) Value() CertificateRequestRecordAPIModel {
        if !iter.page.NotDone() {
        return CertificateRequestRecordAPIModel{}
        }
        return iter.page.Values()[iter.i]
        }
        // Creates a new instance of the CertificateRequestQueryResponseAPIModelIterator type.
        func NewCertificateRequestQueryResponseAPIModelIterator (page CertificateRequestQueryResponseAPIModelPage) CertificateRequestQueryResponseAPIModelIterator {
            return CertificateRequestQueryResponseAPIModelIterator{page: page}
        }


                // IsEmpty returns true if the ListResult contains no values.
                func (crqram CertificateRequestQueryResponseAPIModel) IsEmpty() bool {
                return crqram.Value == nil || len(*crqram.Value) == 0
                }

                    // certificateRequestQueryResponseAPIModelPreparer prepares a request to retrieve the next set of results.
                    // It returns nil if no more results exist.
                    func (crqram CertificateRequestQueryResponseAPIModel) certificateRequestQueryResponseAPIModelPreparer(ctx context.Context) (*http.Request, error) {
                    if crqram.NextPageLink == nil || len(to.String(crqram.NextPageLink)) < 1 {
                    return nil, nil
                    }
                    return autorest.Prepare((&http.Request{}).WithContext(ctx),
                    autorest.AsJSON(),
                    autorest.AsGet(),
                    autorest.WithBaseURL(to.String( crqram.NextPageLink)));
                    }

            // CertificateRequestQueryResponseAPIModelPage contains a page of
            // CertificateRequestRecordAPIModel values.
            type CertificateRequestQueryResponseAPIModelPage struct {
                fn func(context.Context, CertificateRequestQueryResponseAPIModel) (CertificateRequestQueryResponseAPIModel, error)
                crqram CertificateRequestQueryResponseAPIModel
            }

        // NextWithContext advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        func (page * CertificateRequestQueryResponseAPIModelPage) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/CertificateRequestQueryResponseAPIModelPage.NextWithContext")
        defer func() {
        sc := -1
        if page.Response().Response.Response != nil {
        sc = page.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        next, err := page.fn(ctx, page.crqram)
        if err != nil {
        return err
        }
        page.crqram = next
        return nil
        }

        // Next advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        // Deprecated: Use NextWithContext() instead.
        func (page * CertificateRequestQueryResponseAPIModelPage) Next() error {
        return page.NextWithContext(context.Background())
        }
        // NotDone returns true if the page enumeration should be started or is not yet complete.
        func (page CertificateRequestQueryResponseAPIModelPage) NotDone() bool {
        return !page.crqram.IsEmpty()
        }
        // Response returns the raw server response from the last page request.
        func (page CertificateRequestQueryResponseAPIModelPage) Response() CertificateRequestQueryResponseAPIModel {
        return page.crqram
        }
        // Values returns the slice of values for the current page or nil if there are no values.
        func (page CertificateRequestQueryResponseAPIModelPage) Values() []CertificateRequestRecordAPIModel {
        if page.crqram.IsEmpty() {
        return nil
        }
        return *page.crqram.Value
        }
        // Creates a new instance of the CertificateRequestQueryResponseAPIModelPage type.
        func NewCertificateRequestQueryResponseAPIModelPage (getNextPage func(context.Context, CertificateRequestQueryResponseAPIModel) (CertificateRequestQueryResponseAPIModel, error)) CertificateRequestQueryResponseAPIModelPage {
            return CertificateRequestQueryResponseAPIModelPage{fn: getNextPage}
        }

            // CertificateRequestRecordAPIModel certificate request record
            // model
            type CertificateRequestRecordAPIModel struct {
            autorest.Response `json:"-"`
            // RequestID - Request id
            RequestID *string `json:"requestId,omitempty"`
            // EntityID - Application id
            EntityID *string `json:"entityId,omitempty"`
            // GroupID - Trust group
            GroupID *string `json:"groupId,omitempty"`
            // State - Request state. Possible values include: 'CertificateRequestStateNew', 'CertificateRequestStateApproved', 'CertificateRequestStateRejected', 'CertificateRequestStateFailure', 'CertificateRequestStateCompleted', 'CertificateRequestStateAccepted'
            State CertificateRequestState `json:"state,omitempty"`
            // Type - Request type. Possible values include: 'SigningRequest', 'KeyPairRequest'
            Type CertificateRequestType `json:"type,omitempty"`
            // ErrorInfo - Error diagnostics
            ErrorInfo interface{} `json:"errorInfo,omitempty"`
            // Submitted - Request time
            Submitted *VaultOperationContextAPIModel `json:"submitted,omitempty"`
            // Approved - Approved or rejected
            Approved *VaultOperationContextAPIModel `json:"approved,omitempty"`
            // Accepted - Finished
            Accepted *VaultOperationContextAPIModel `json:"accepted,omitempty"`
            }

            // FinishNewKeyPairRequestResponseAPIModel finish request results
            type FinishNewKeyPairRequestResponseAPIModel struct {
            autorest.Response `json:"-"`
            // Request - Request
            Request *CertificateRequestRecordAPIModel `json:"request,omitempty"`
            // Certificate - Signed certificate
            Certificate *X509CertificateAPIModel `json:"certificate,omitempty"`
            // PrivateKey - Private key
            PrivateKey *PrivateKeyAPIModel `json:"privateKey,omitempty"`
            }

            // FinishSigningRequestResponseAPIModel finish request results
            type FinishSigningRequestResponseAPIModel struct {
            autorest.Response `json:"-"`
            // Request - Request
            Request *CertificateRequestRecordAPIModel `json:"request,omitempty"`
            // Certificate - Signed certificate
            Certificate *X509CertificateAPIModel `json:"certificate,omitempty"`
            }

            // PrivateKeyAPIModel private key
            type PrivateKeyAPIModel struct {
            // Kty - Key type. Possible values include: 'RSA', 'ECC', 'AES'
            Kty PrivateKeyType `json:"kty,omitempty"`
            // N - RSA modulus.
            N *[]byte `json:"n,omitempty"`
            // E - RSA public exponent, in Base64.
            E *[]byte `json:"e,omitempty"`
            // Dp - RSA Private Key Parameter
            Dp *[]byte `json:"dp,omitempty"`
            // Dq - RSA Private Key Parameter
            Dq *[]byte `json:"dq,omitempty"`
            // Qi - RSA Private Key Parameter
            Qi *[]byte `json:"qi,omitempty"`
            // P - RSA secret prime
            P *[]byte `json:"p,omitempty"`
            // Q - RSA secret prime, with p &lt; q
            Q *[]byte `json:"q,omitempty"`
            // Crv - The curve for ECC algorithms
            Crv *string `json:"crv,omitempty"`
            // X - X coordinate for the Elliptic Curve point.
            X *[]byte `json:"x,omitempty"`
            // Y - Y coordinate for the Elliptic Curve point.
            Y *[]byte `json:"y,omitempty"`
            // D - RSA private exponent or ECC private key.
            D *[]byte `json:"d,omitempty"`
            // K - Symmetric key
            K *[]byte `json:"k,omitempty"`
            // KeyHsm - HSM Token, used with "Bring Your Own Key"
            KeyHsm *[]byte `json:"key_hsm,omitempty"`
            }

            // StartNewKeyPairRequestAPIModel new key pair request
            type StartNewKeyPairRequestAPIModel struct {
            // EntityID - Entity id
            EntityID *string `json:"entityId,omitempty"`
            // GroupID - Certificate group
            GroupID *string `json:"groupId,omitempty"`
            // CertificateType - Type. Possible values include: 'ApplicationInstanceCertificate', 'HTTPSCertificate', 'UserCredentialCertificate'
            CertificateType TrustGroupType `json:"certificateType,omitempty"`
            // SubjectName - Subject name
            SubjectName *string `json:"subjectName,omitempty"`
            // DomainNames - Domain names
            DomainNames *[]string `json:"domainNames,omitempty"`
            }

            // StartNewKeyPairRequestResponseAPIModel new key pair response
            type StartNewKeyPairRequestResponseAPIModel struct {
            autorest.Response `json:"-"`
            // RequestID - Request id
            RequestID *string `json:"requestId,omitempty"`
            }

            // StartSigningRequestAPIModel signing request
            type StartSigningRequestAPIModel struct {
            // EntityID - Id of entity to sign a certificate for
            EntityID *string `json:"entityId,omitempty"`
            // GroupID - Certificate group id
            GroupID *string `json:"groupId,omitempty"`
            // CertificateRequest - Request
            CertificateRequest interface{} `json:"certificateRequest,omitempty"`
            }

            // StartSigningRequestResponseAPIModel signing request response
            type StartSigningRequestResponseAPIModel struct {
            autorest.Response `json:"-"`
            // RequestID - Request id
            RequestID *string `json:"requestId,omitempty"`
            }

            // StatusResponseAPIModel status model
            type StatusResponseAPIModel struct {
            autorest.Response `json:"-"`
            // Name - Name of this service
            Name *string `json:"name,omitempty"`
            // Status - Operational status
            Status *string `json:"status,omitempty"`
            // CurrentTime - READ-ONLY; Current time
            CurrentTime *string `json:"currentTime,omitempty"`
            // StartTime - READ-ONLY; Start time of service
            StartTime *string `json:"startTime,omitempty"`
            // UpTime - READ-ONLY; Up time of service
            UpTime *int64 `json:"upTime,omitempty"`
            // UID - READ-ONLY; Value generated at bootstrap by each instance of the service and
            // used to correlate logs coming from the same instance. The value
            // changes every time the service starts.
            UID *string `json:"uid,omitempty"`
            // Properties - READ-ONLY; A property bag with details about the service
            Properties map[string]*string `json:"properties"`
            // Dependencies - READ-ONLY; A property bag with details about the internal dependencies
            Dependencies map[string]*string `json:"dependencies"`
            // Metadata - READ-ONLY; Optional meta data.
            Metadata map[string]*string `json:"$metadata"`
            }

        // MarshalJSON is the custom marshaler for StatusResponseAPIModel.
        func (sram StatusResponseAPIModel)MarshalJSON() ([]byte, error){
        objectMap := make(map[string]interface{})
                if(sram.Name != nil) {
                objectMap["name"] = sram.Name
                }
                if(sram.Status != nil) {
                objectMap["status"] = sram.Status
                }
                return json.Marshal(objectMap)
        }

            // TrustGroupAPIModel trust group model
            type TrustGroupAPIModel struct {
            // Name - The name of the trust group.
            Name *string `json:"name,omitempty"`
            // ParentID - The identifer of the parent trust group.
            ParentID *string `json:"parentId,omitempty"`
            // Type - The trust group type. Possible values include: 'ApplicationInstanceCertificate', 'HTTPSCertificate', 'UserCredentialCertificate'
            Type TrustGroupType `json:"type,omitempty"`
            // SubjectName - The subject name of the group as distinguished name.
            SubjectName *string `json:"subjectName,omitempty"`
            // Lifetime - The lifetime of the trust group certificate.
            Lifetime *string `json:"lifetime,omitempty"`
            // KeySize - The trust group certificate key size in bits.
            KeySize *int32 `json:"keySize,omitempty"`
            // SignatureAlgorithm - The certificate signature algorithm. Possible values include: 'Rsa256', 'Rsa384', 'Rsa512', 'Rsa256Pss', 'Rsa384Pss', 'Rsa512Pss'
            SignatureAlgorithm SignatureAlgorithm `json:"signatureAlgorithm,omitempty"`
            // IssuedLifetime - The issued certificate lifetime in months.
            IssuedLifetime *string `json:"issuedLifetime,omitempty"`
            // IssuedKeySize - The issued certificate key size in bits.
            IssuedKeySize *int32 `json:"issuedKeySize,omitempty"`
            // IssuedSignatureAlgorithm - The Signature algorithm for issued certificates. Possible values include: 'Rsa256', 'Rsa384', 'Rsa512', 'Rsa256Pss', 'Rsa384Pss', 'Rsa512Pss'
            IssuedSignatureAlgorithm SignatureAlgorithm `json:"issuedSignatureAlgorithm,omitempty"`
            }

            // TrustGroupRegistrationAPIModel trust group registration model
            type TrustGroupRegistrationAPIModel struct {
            autorest.Response `json:"-"`
            // ID - The registered id of the trust group
            ID *string `json:"id,omitempty"`
            // Group - Trust group
            Group *TrustGroupAPIModel `json:"group,omitempty"`
            }

            // TrustGroupRegistrationListAPIModel trust group registration
            // collection model
            type TrustGroupRegistrationListAPIModel struct {
            autorest.Response `json:"-"`
            // Registrations - Group registrations
            Registrations *[]TrustGroupRegistrationAPIModel `json:"registrations,omitempty"`
            // NextPageLink - Next link
            NextPageLink *string `json:"nextPageLink,omitempty"`
            }

            // TrustGroupRegistrationListAPIModelIterator provides access to a
            // complete listing of TrustGroupRegistrationAPIModel values.
            type TrustGroupRegistrationListAPIModelIterator struct {
                i int
                page TrustGroupRegistrationListAPIModelPage
            }
        // NextWithContext advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        func (iter * TrustGroupRegistrationListAPIModelIterator) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/TrustGroupRegistrationListAPIModelIterator.NextWithContext")
        defer func() {
        sc := -1
        if iter.Response().Response.Response != nil {
        sc = iter.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        iter.i++
        if iter.i < len(iter. page.Values()) {
        return nil
        }
        err = iter.page.NextWithContext(ctx)
        if err != nil {
        iter. i--
        return err
        }
        iter.i = 0
        return nil
        }
        // Next advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        // Deprecated: Use NextWithContext() instead.
        func (iter * TrustGroupRegistrationListAPIModelIterator) Next() error {
        return iter.NextWithContext(context.Background())
        }
        // NotDone returns true if the enumeration should be started or is not yet complete.
        func (iter TrustGroupRegistrationListAPIModelIterator) NotDone() bool {
        return iter.page.NotDone() && iter.i < len(iter. page.Values())
        }
        // Response returns the raw server response from the last page request.
        func (iter TrustGroupRegistrationListAPIModelIterator) Response() TrustGroupRegistrationListAPIModel {
        return iter.page.Response()
        }
        // Value returns the current value or a zero-initialized value if the
        // iterator has advanced beyond the end of the collection.
        func (iter TrustGroupRegistrationListAPIModelIterator) Value() TrustGroupRegistrationAPIModel {
        if !iter.page.NotDone() {
        return TrustGroupRegistrationAPIModel{}
        }
        return iter.page.Values()[iter.i]
        }
        // Creates a new instance of the TrustGroupRegistrationListAPIModelIterator type.
        func NewTrustGroupRegistrationListAPIModelIterator (page TrustGroupRegistrationListAPIModelPage) TrustGroupRegistrationListAPIModelIterator {
            return TrustGroupRegistrationListAPIModelIterator{page: page}
        }


                // IsEmpty returns true if the ListResult contains no values.
                func (tgrlam TrustGroupRegistrationListAPIModel) IsEmpty() bool {
                return tgrlam.Value == nil || len(*tgrlam.Value) == 0
                }

                    // trustGroupRegistrationListAPIModelPreparer prepares a request to retrieve the next set of results.
                    // It returns nil if no more results exist.
                    func (tgrlam TrustGroupRegistrationListAPIModel) trustGroupRegistrationListAPIModelPreparer(ctx context.Context) (*http.Request, error) {
                    if tgrlam.NextPageLink == nil || len(to.String(tgrlam.NextPageLink)) < 1 {
                    return nil, nil
                    }
                    return autorest.Prepare((&http.Request{}).WithContext(ctx),
                    autorest.AsJSON(),
                    autorest.AsGet(),
                    autorest.WithBaseURL(to.String( tgrlam.NextPageLink)));
                    }

            // TrustGroupRegistrationListAPIModelPage contains a page of
            // TrustGroupRegistrationAPIModel values.
            type TrustGroupRegistrationListAPIModelPage struct {
                fn func(context.Context, TrustGroupRegistrationListAPIModel) (TrustGroupRegistrationListAPIModel, error)
                tgrlam TrustGroupRegistrationListAPIModel
            }

        // NextWithContext advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        func (page * TrustGroupRegistrationListAPIModelPage) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/TrustGroupRegistrationListAPIModelPage.NextWithContext")
        defer func() {
        sc := -1
        if page.Response().Response.Response != nil {
        sc = page.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        next, err := page.fn(ctx, page.tgrlam)
        if err != nil {
        return err
        }
        page.tgrlam = next
        return nil
        }

        // Next advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        // Deprecated: Use NextWithContext() instead.
        func (page * TrustGroupRegistrationListAPIModelPage) Next() error {
        return page.NextWithContext(context.Background())
        }
        // NotDone returns true if the page enumeration should be started or is not yet complete.
        func (page TrustGroupRegistrationListAPIModelPage) NotDone() bool {
        return !page.tgrlam.IsEmpty()
        }
        // Response returns the raw server response from the last page request.
        func (page TrustGroupRegistrationListAPIModelPage) Response() TrustGroupRegistrationListAPIModel {
        return page.tgrlam
        }
        // Values returns the slice of values for the current page or nil if there are no values.
        func (page TrustGroupRegistrationListAPIModelPage) Values() []TrustGroupRegistrationAPIModel {
        if page.tgrlam.IsEmpty() {
        return nil
        }
        return *page.tgrlam.Value
        }
        // Creates a new instance of the TrustGroupRegistrationListAPIModelPage type.
        func NewTrustGroupRegistrationListAPIModelPage (getNextPage func(context.Context, TrustGroupRegistrationListAPIModel) (TrustGroupRegistrationListAPIModel, error)) TrustGroupRegistrationListAPIModelPage {
            return TrustGroupRegistrationListAPIModelPage{fn: getNextPage}
        }

            // TrustGroupRegistrationRequestAPIModel trust group registration
            // request model
            type TrustGroupRegistrationRequestAPIModel struct {
            // Name - The new name of the trust group
            Name *string `json:"name,omitempty"`
            // ParentID - The identifer of the parent trust group.
            ParentID *string `json:"parentId,omitempty"`
            // SubjectName - The subject name of the group as distinguished name.
            SubjectName *string `json:"subjectName,omitempty"`
            // IssuedLifetime - The lifetime of certificates issued in the group.
            IssuedLifetime *string `json:"issuedLifetime,omitempty"`
            // IssuedKeySize - The issued certificate key size in bits.
            IssuedKeySize *int32 `json:"issuedKeySize,omitempty"`
            // IssuedSignatureAlgorithm - The issued certificate signature algorithm. Possible values include: 'Rsa256', 'Rsa384', 'Rsa512', 'Rsa256Pss', 'Rsa384Pss', 'Rsa512Pss'
            IssuedSignatureAlgorithm SignatureAlgorithm `json:"issuedSignatureAlgorithm,omitempty"`
            }

            // TrustGroupRegistrationResponseAPIModel trust group registration
            // response model
            type TrustGroupRegistrationResponseAPIModel struct {
            autorest.Response `json:"-"`
            // ID - The id of the trust group
            ID *string `json:"id,omitempty"`
            }

            // TrustGroupRootCreateRequestAPIModel trust group root
            // registration model
            type TrustGroupRootCreateRequestAPIModel struct {
            // Name - The new name of the trust group root
            Name *string `json:"name,omitempty"`
            // Type - The trust group type. Possible values include: 'ApplicationInstanceCertificate', 'HTTPSCertificate', 'UserCredentialCertificate'
            Type TrustGroupType `json:"type,omitempty"`
            // SubjectName - The subject name of the group as distinguished name.
            SubjectName *string `json:"subjectName,omitempty"`
            // Lifetime - The lifetime of the trust group root certificate.
            Lifetime *string `json:"lifetime,omitempty"`
            // KeySize - The certificate key size in bits.
            KeySize *int32 `json:"keySize,omitempty"`
            // SignatureAlgorithm - The certificate signature algorithm. Possible values include: 'Rsa256', 'Rsa384', 'Rsa512', 'Rsa256Pss', 'Rsa384Pss', 'Rsa512Pss'
            SignatureAlgorithm SignatureAlgorithm `json:"signatureAlgorithm,omitempty"`
            // IssuedLifetime - The issued certificate lifetime.
            IssuedLifetime *string `json:"issuedLifetime,omitempty"`
            // IssuedKeySize - The issued certificate key size in bits.
            IssuedKeySize *int32 `json:"issuedKeySize,omitempty"`
            // IssuedSignatureAlgorithm - The issued certificate signature algorithm. Possible values include: 'Rsa256', 'Rsa384', 'Rsa512', 'Rsa256Pss', 'Rsa384Pss', 'Rsa512Pss'
            IssuedSignatureAlgorithm SignatureAlgorithm `json:"issuedSignatureAlgorithm,omitempty"`
            }

            // TrustGroupUpdateRequestAPIModel trust group update model
            type TrustGroupUpdateRequestAPIModel struct {
            // Name - The name of the trust group
            Name *string `json:"name,omitempty"`
            // IssuedLifetime - The issued certificate lifetime.
            IssuedLifetime *string `json:"issuedLifetime,omitempty"`
            // IssuedKeySize - The issued certificate key size in bits.
            IssuedKeySize *int32 `json:"issuedKeySize,omitempty"`
            // IssuedSignatureAlgorithm - The issued certificate key size in bits. Possible values include: 'Rsa256', 'Rsa384', 'Rsa512', 'Rsa256Pss', 'Rsa384Pss', 'Rsa512Pss'
            IssuedSignatureAlgorithm SignatureAlgorithm `json:"issuedSignatureAlgorithm,omitempty"`
            }

            // VaultOperationContextAPIModel vault operation log model
            type VaultOperationContextAPIModel struct {
            // AuthorityID - User
            AuthorityID *string `json:"authorityId,omitempty"`
            // Time - Operation time
            Time *date.Time `json:"time,omitempty"`
            }

            // X509CertificateAPIModel certificate model
            type X509CertificateAPIModel struct {
            // Subject - Subject
            Subject *string `json:"subject,omitempty"`
            // Thumbprint - Thumbprint
            Thumbprint *string `json:"thumbprint,omitempty"`
            // SerialNumber - Serial number
            SerialNumber *string `json:"serialNumber,omitempty"`
            // NotBeforeUtc - Not before validity
            NotBeforeUtc *date.Time `json:"notBeforeUtc,omitempty"`
            // NotAfterUtc - Not after validity
            NotAfterUtc *date.Time `json:"notAfterUtc,omitempty"`
            // Certificate - Raw data
            Certificate interface{} `json:"certificate,omitempty"`
            }

            // X509CertificateChainAPIModel certificate chain
            type X509CertificateChainAPIModel struct {
            autorest.Response `json:"-"`
            // Chain - Chain
            Chain *[]X509CertificateAPIModel `json:"chain,omitempty"`
            }

            // X509CertificateChainAPIModelIterator provides access to a
            // complete listing of X509CertificateAPIModel values.
            type X509CertificateChainAPIModelIterator struct {
                i int
                page X509CertificateChainAPIModelPage
            }
        // NextWithContext advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        func (iter * X509CertificateChainAPIModelIterator) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/X509CertificateChainAPIModelIterator.NextWithContext")
        defer func() {
        sc := -1
        if iter.Response().Response.Response != nil {
        sc = iter.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        iter.i++
        if iter.i < len(iter. page.Values()) {
        return nil
        }
        err = iter.page.NextWithContext(ctx)
        if err != nil {
        iter. i--
        return err
        }
        iter.i = 0
        return nil
        }
        // Next advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        // Deprecated: Use NextWithContext() instead.
        func (iter * X509CertificateChainAPIModelIterator) Next() error {
        return iter.NextWithContext(context.Background())
        }
        // NotDone returns true if the enumeration should be started or is not yet complete.
        func (iter X509CertificateChainAPIModelIterator) NotDone() bool {
        return iter.page.NotDone() && iter.i < len(iter. page.Values())
        }
        // Response returns the raw server response from the last page request.
        func (iter X509CertificateChainAPIModelIterator) Response() X509CertificateChainAPIModel {
        return iter.page.Response()
        }
        // Value returns the current value or a zero-initialized value if the
        // iterator has advanced beyond the end of the collection.
        func (iter X509CertificateChainAPIModelIterator) Value() X509CertificateAPIModel {
        if !iter.page.NotDone() {
        return X509CertificateAPIModel{}
        }
        return iter.page.Values()[iter.i]
        }
        // Creates a new instance of the X509CertificateChainAPIModelIterator type.
        func NewX509CertificateChainAPIModelIterator (page X509CertificateChainAPIModelPage) X509CertificateChainAPIModelIterator {
            return X509CertificateChainAPIModelIterator{page: page}
        }


                // IsEmpty returns true if the ListResult contains no values.
                func (xccam X509CertificateChainAPIModel) IsEmpty() bool {
                return xccam.Value == nil || len(*xccam.Value) == 0
                }

                    // x509CertificateChainAPIModelPreparer prepares a request to retrieve the next set of results.
                    // It returns nil if no more results exist.
                    func (xccam X509CertificateChainAPIModel) x509CertificateChainAPIModelPreparer(ctx context.Context) (*http.Request, error) {
                    if xccam.NextPageLink == nil || len(to.String(xccam.NextPageLink)) < 1 {
                    return nil, nil
                    }
                    return autorest.Prepare((&http.Request{}).WithContext(ctx),
                    autorest.AsJSON(),
                    autorest.AsGet(),
                    autorest.WithBaseURL(to.String( xccam.NextPageLink)));
                    }

            // X509CertificateChainAPIModelPage contains a page of
            // X509CertificateAPIModel values.
            type X509CertificateChainAPIModelPage struct {
                fn func(context.Context, X509CertificateChainAPIModel) (X509CertificateChainAPIModel, error)
                xccam X509CertificateChainAPIModel
            }

        // NextWithContext advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        func (page * X509CertificateChainAPIModelPage) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/X509CertificateChainAPIModelPage.NextWithContext")
        defer func() {
        sc := -1
        if page.Response().Response.Response != nil {
        sc = page.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        next, err := page.fn(ctx, page.xccam)
        if err != nil {
        return err
        }
        page.xccam = next
        return nil
        }

        // Next advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        // Deprecated: Use NextWithContext() instead.
        func (page * X509CertificateChainAPIModelPage) Next() error {
        return page.NextWithContext(context.Background())
        }
        // NotDone returns true if the page enumeration should be started or is not yet complete.
        func (page X509CertificateChainAPIModelPage) NotDone() bool {
        return !page.xccam.IsEmpty()
        }
        // Response returns the raw server response from the last page request.
        func (page X509CertificateChainAPIModelPage) Response() X509CertificateChainAPIModel {
        return page.xccam
        }
        // Values returns the slice of values for the current page or nil if there are no values.
        func (page X509CertificateChainAPIModelPage) Values() []X509CertificateAPIModel {
        if page.xccam.IsEmpty() {
        return nil
        }
        return *page.xccam.Value
        }
        // Creates a new instance of the X509CertificateChainAPIModelPage type.
        func NewX509CertificateChainAPIModelPage (getNextPage func(context.Context, X509CertificateChainAPIModel) (X509CertificateChainAPIModel, error)) X509CertificateChainAPIModelPage {
            return X509CertificateChainAPIModelPage{fn: getNextPage}
        }

            // X509CertificateListAPIModel certificate list
            type X509CertificateListAPIModel struct {
            autorest.Response `json:"-"`
            // Certificates - Certificates
            Certificates *[]X509CertificateAPIModel `json:"certificates,omitempty"`
            // NextPageLink - Next link
            NextPageLink *string `json:"nextPageLink,omitempty"`
            }

            // X509CertificateListAPIModelIterator provides access to a
            // complete listing of X509CertificateAPIModel values.
            type X509CertificateListAPIModelIterator struct {
                i int
                page X509CertificateListAPIModelPage
            }
        // NextWithContext advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        func (iter * X509CertificateListAPIModelIterator) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/X509CertificateListAPIModelIterator.NextWithContext")
        defer func() {
        sc := -1
        if iter.Response().Response.Response != nil {
        sc = iter.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        iter.i++
        if iter.i < len(iter. page.Values()) {
        return nil
        }
        err = iter.page.NextWithContext(ctx)
        if err != nil {
        iter. i--
        return err
        }
        iter.i = 0
        return nil
        }
        // Next advances to the next value.  If there was an error making
        // the request the iterator does not advance and the error is returned.
        // Deprecated: Use NextWithContext() instead.
        func (iter * X509CertificateListAPIModelIterator) Next() error {
        return iter.NextWithContext(context.Background())
        }
        // NotDone returns true if the enumeration should be started or is not yet complete.
        func (iter X509CertificateListAPIModelIterator) NotDone() bool {
        return iter.page.NotDone() && iter.i < len(iter. page.Values())
        }
        // Response returns the raw server response from the last page request.
        func (iter X509CertificateListAPIModelIterator) Response() X509CertificateListAPIModel {
        return iter.page.Response()
        }
        // Value returns the current value or a zero-initialized value if the
        // iterator has advanced beyond the end of the collection.
        func (iter X509CertificateListAPIModelIterator) Value() X509CertificateAPIModel {
        if !iter.page.NotDone() {
        return X509CertificateAPIModel{}
        }
        return iter.page.Values()[iter.i]
        }
        // Creates a new instance of the X509CertificateListAPIModelIterator type.
        func NewX509CertificateListAPIModelIterator (page X509CertificateListAPIModelPage) X509CertificateListAPIModelIterator {
            return X509CertificateListAPIModelIterator{page: page}
        }


                // IsEmpty returns true if the ListResult contains no values.
                func (xclam X509CertificateListAPIModel) IsEmpty() bool {
                return xclam.Value == nil || len(*xclam.Value) == 0
                }

                    // x509CertificateListAPIModelPreparer prepares a request to retrieve the next set of results.
                    // It returns nil if no more results exist.
                    func (xclam X509CertificateListAPIModel) x509CertificateListAPIModelPreparer(ctx context.Context) (*http.Request, error) {
                    if xclam.NextPageLink == nil || len(to.String(xclam.NextPageLink)) < 1 {
                    return nil, nil
                    }
                    return autorest.Prepare((&http.Request{}).WithContext(ctx),
                    autorest.AsJSON(),
                    autorest.AsGet(),
                    autorest.WithBaseURL(to.String( xclam.NextPageLink)));
                    }

            // X509CertificateListAPIModelPage contains a page of
            // X509CertificateAPIModel values.
            type X509CertificateListAPIModelPage struct {
                fn func(context.Context, X509CertificateListAPIModel) (X509CertificateListAPIModel, error)
                xclam X509CertificateListAPIModel
            }

        // NextWithContext advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        func (page * X509CertificateListAPIModelPage) NextWithContext(ctx context.Context) (err error) {
        if tracing.IsEnabled() {
        ctx = tracing.StartSpan(ctx, fqdn + "/X509CertificateListAPIModelPage.NextWithContext")
        defer func() {
        sc := -1
        if page.Response().Response.Response != nil {
        sc = page.Response().Response.Response.StatusCode
        }
        tracing.EndSpan(ctx, sc, err)
        }()
        }
        next, err := page.fn(ctx, page.xclam)
        if err != nil {
        return err
        }
        page.xclam = next
        return nil
        }

        // Next advances to the next page of values.  If there was an error making
        // the request the page does not advance and the error is returned.
        // Deprecated: Use NextWithContext() instead.
        func (page * X509CertificateListAPIModelPage) Next() error {
        return page.NextWithContext(context.Background())
        }
        // NotDone returns true if the page enumeration should be started or is not yet complete.
        func (page X509CertificateListAPIModelPage) NotDone() bool {
        return !page.xclam.IsEmpty()
        }
        // Response returns the raw server response from the last page request.
        func (page X509CertificateListAPIModelPage) Response() X509CertificateListAPIModel {
        return page.xclam
        }
        // Values returns the slice of values for the current page or nil if there are no values.
        func (page X509CertificateListAPIModelPage) Values() []X509CertificateAPIModel {
        if page.xclam.IsEmpty() {
        return nil
        }
        return *page.xclam.Value
        }
        // Creates a new instance of the X509CertificateListAPIModelPage type.
        func NewX509CertificateListAPIModelPage (getNextPage func(context.Context, X509CertificateListAPIModel) (X509CertificateListAPIModel, error)) X509CertificateListAPIModelPage {
            return X509CertificateListAPIModelPage{fn: getNextPage}
        }

            // X509CrlAPIModel a X509 certificate revocation list.
            type X509CrlAPIModel struct {
            // Issuer - The Issuer name of the revocation list.
            Issuer *string `json:"issuer,omitempty"`
            // Crl - The certificate revocation list.
            Crl interface{} `json:"crl,omitempty"`
            }

            // X509CrlChainAPIModel crl collection model
            type X509CrlChainAPIModel struct {
            autorest.Response `json:"-"`
            // Chain - Chain
            Chain *[]X509CrlAPIModel `json:"chain,omitempty"`
            }

