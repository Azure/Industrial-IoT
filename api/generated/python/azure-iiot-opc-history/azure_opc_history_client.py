# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator 2.3.33.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.service_client import ServiceClient
from msrest import Configuration, Serializer, Deserializer
from .version import VERSION
from msrest.pipeline import ClientRawResponse
from msrest.exceptions import HttpOperationError
from . import models


class AzureOpcHistoryClientConfiguration(Configuration):
    """Configuration for AzureOpcHistoryClient
    Note that all parameters used to create this instance are saved as instance
    attributes.

    :param credentials: Subscription credentials which uniquely identify
     client subscription.
    :type credentials: None
    :param str base_url: Service URL
    """

    def __init__(
            self, credentials, base_url=None):

        if credentials is None:
            raise ValueError("Parameter 'credentials' must not be None.")
        if not base_url:
            base_url = '/history'

        super(AzureOpcHistoryClientConfiguration, self).__init__(base_url)

        self.add_user_agent('azureopchistoryclient/{}'.format(VERSION))

        self.credentials = credentials


class AzureOpcHistoryClient(object):
    """Azure Industrial IoT OPC UA Historic Access Service

    :ivar config: Configuration for client.
    :vartype config: AzureOpcHistoryClientConfiguration

    :param credentials: Subscription credentials which uniquely identify
     client subscription.
    :type credentials: None
    :param str base_url: Service URL
    """

    def __init__(
            self, credentials, base_url=None):

        self.config = AzureOpcHistoryClientConfiguration(credentials, base_url)
        self._client = ServiceClient(self.config.credentials, self.config)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self.api_version = 'v2'
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)


    def history_delete_values_at_times(
            self, endpoint_id, request, custom_headers=None, raw=False, **operation_config):
        """Delete value history at specified times.

        Delete value history using historic access.
        The endpoint must be activated and connected and the module client
        and server must trust each other.

        :param endpoint_id: The identifier of the activated endpoint.
        :type endpoint_id: str
        :param request: The history update request
        :type request:
         ~azure-iiot-opc-history.models.HistoryUpdateRequestApiModelDeleteValuesAtTimesDetailsApiModel
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: HistoryUpdateResponseApiModel or ClientRawResponse if
         raw=true
        :rtype: ~azure-iiot-opc-history.models.HistoryUpdateResponseApiModel
         or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.history_delete_values_at_times.metadata['url']
        path_format_arguments = {
            'endpointId': self._serialize.url("endpoint_id", endpoint_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(request, 'HistoryUpdateRequestApiModelDeleteValuesAtTimesDetailsApiModel')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('HistoryUpdateResponseApiModel', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    history_delete_values_at_times.metadata = {'url': '/v2/delete/{endpointId}/values/pick'}

    def history_delete_values(
            self, endpoint_id, request, custom_headers=None, raw=False, **operation_config):
        """Delete historic values.

        Delete historic values using historic access.
        The endpoint must be activated and connected and the module client
        and server must trust each other.

        :param endpoint_id: The identifier of the activated endpoint.
        :type endpoint_id: str
        :param request: The history update request
        :type request:
         ~azure-iiot-opc-history.models.HistoryUpdateRequestApiModelDeleteValuesDetailsApiModel
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: HistoryUpdateResponseApiModel or ClientRawResponse if
         raw=true
        :rtype: ~azure-iiot-opc-history.models.HistoryUpdateResponseApiModel
         or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.history_delete_values.metadata['url']
        path_format_arguments = {
            'endpointId': self._serialize.url("endpoint_id", endpoint_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(request, 'HistoryUpdateRequestApiModelDeleteValuesDetailsApiModel')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('HistoryUpdateResponseApiModel', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    history_delete_values.metadata = {'url': '/v2/delete/{endpointId}/values'}

    def history_delete_modified_values(
            self, endpoint_id, request, custom_headers=None, raw=False, **operation_config):
        """Delete historic values.

        Delete historic values using historic access.
        The endpoint must be activated and connected and the module client
        and server must trust each other.

        :param endpoint_id: The identifier of the activated endpoint.
        :type endpoint_id: str
        :param request: The history update request
        :type request:
         ~azure-iiot-opc-history.models.HistoryUpdateRequestApiModelDeleteModifiedValuesDetailsApiModel
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: HistoryUpdateResponseApiModel or ClientRawResponse if
         raw=true
        :rtype: ~azure-iiot-opc-history.models.HistoryUpdateResponseApiModel
         or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.history_delete_modified_values.metadata['url']
        path_format_arguments = {
            'endpointId': self._serialize.url("endpoint_id", endpoint_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(request, 'HistoryUpdateRequestApiModelDeleteModifiedValuesDetailsApiModel')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('HistoryUpdateResponseApiModel', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    history_delete_modified_values.metadata = {'url': '/v2/delete/{endpointId}/values/modified'}

    def history_delete_events(
            self, endpoint_id, request, custom_headers=None, raw=False, **operation_config):
        """Delete historic events.

        Delete historic events using historic access.
        The endpoint must be activated and connected and the module client
        and server must trust each other.

        :param endpoint_id: The identifier of the activated endpoint.
        :type endpoint_id: str
        :param request: The history update request
        :type request:
         ~azure-iiot-opc-history.models.HistoryUpdateRequestApiModelDeleteEventsDetailsApiModel
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: HistoryUpdateResponseApiModel or ClientRawResponse if
         raw=true
        :rtype: ~azure-iiot-opc-history.models.HistoryUpdateResponseApiModel
         or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.history_delete_events.metadata['url']
        path_format_arguments = {
            'endpointId': self._serialize.url("endpoint_id", endpoint_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(request, 'HistoryUpdateRequestApiModelDeleteEventsDetailsApiModel')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('HistoryUpdateResponseApiModel', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    history_delete_events.metadata = {'url': '/v2/delete/{endpointId}/events'}

    def history_read_raw(
            self, endpoint_id, request, custom_headers=None, raw=False, **operation_config):
        """Read history using json details.

        Read node history if available using historic access.
        The endpoint must be activated and connected and the module client
        and server must trust each other.

        :param endpoint_id: The identifier of the activated endpoint.
        :type endpoint_id: str
        :param request: The history read request
        :type request:
         ~azure-iiot-opc-history.models.HistoryReadRequestApiModelJToken
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: HistoryReadResponseApiModelJToken or ClientRawResponse if
         raw=true
        :rtype:
         ~azure-iiot-opc-history.models.HistoryReadResponseApiModelJToken or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.history_read_raw.metadata['url']
        path_format_arguments = {
            'endpointId': self._serialize.url("endpoint_id", endpoint_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(request, 'HistoryReadRequestApiModelJToken')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('HistoryReadResponseApiModelJToken', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    history_read_raw.metadata = {'url': '/v2/history/read/{endpointId}'}

    def history_read_raw_next(
            self, endpoint_id, request, custom_headers=None, raw=False, **operation_config):
        """Read next batch of history as json.

        Read next batch of node history values using historic access.
        The endpoint must be activated and connected and the module client
        and server must trust each other.

        :param endpoint_id: The identifier of the activated endpoint.
        :type endpoint_id: str
        :param request: The history read next request
        :type request:
         ~azure-iiot-opc-history.models.HistoryReadNextRequestApiModel
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: HistoryReadNextResponseApiModelJToken or ClientRawResponse if
         raw=true
        :rtype:
         ~azure-iiot-opc-history.models.HistoryReadNextResponseApiModelJToken
         or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.history_read_raw_next.metadata['url']
        path_format_arguments = {
            'endpointId': self._serialize.url("endpoint_id", endpoint_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(request, 'HistoryReadNextRequestApiModel')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('HistoryReadNextResponseApiModelJToken', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    history_read_raw_next.metadata = {'url': '/v2/history/read/{endpointId}/next'}

    def history_update_raw(
            self, endpoint_id, request, custom_headers=None, raw=False, **operation_config):
        """Update node history using raw json.

        Update node history using historic access.
        The endpoint must be activated and connected and the module client
        and server must trust each other.

        :param endpoint_id: The identifier of the activated endpoint.
        :type endpoint_id: str
        :param request: The history update request
        :type request:
         ~azure-iiot-opc-history.models.HistoryUpdateRequestApiModelJToken
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: HistoryUpdateResponseApiModel or ClientRawResponse if
         raw=true
        :rtype: ~azure-iiot-opc-history.models.HistoryUpdateResponseApiModel
         or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.history_update_raw.metadata['url']
        path_format_arguments = {
            'endpointId': self._serialize.url("endpoint_id", endpoint_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(request, 'HistoryUpdateRequestApiModelJToken')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('HistoryUpdateResponseApiModel', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    history_update_raw.metadata = {'url': '/v2/history/update/{endpointId}'}

    def history_insert_values(
            self, endpoint_id, request, custom_headers=None, raw=False, **operation_config):
        """Insert historic values.

        Insert historic values using historic access.
        The endpoint must be activated and connected and the module client
        and server must trust each other.

        :param endpoint_id: The identifier of the activated endpoint.
        :type endpoint_id: str
        :param request: The history insert request
        :type request:
         ~azure-iiot-opc-history.models.HistoryUpdateRequestApiModelInsertValuesDetailsApiModel
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: HistoryUpdateResponseApiModel or ClientRawResponse if
         raw=true
        :rtype: ~azure-iiot-opc-history.models.HistoryUpdateResponseApiModel
         or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.history_insert_values.metadata['url']
        path_format_arguments = {
            'endpointId': self._serialize.url("endpoint_id", endpoint_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(request, 'HistoryUpdateRequestApiModelInsertValuesDetailsApiModel')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('HistoryUpdateResponseApiModel', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    history_insert_values.metadata = {'url': '/v2/insert/{endpointId}/values'}

    def history_insert_events(
            self, endpoint_id, request, custom_headers=None, raw=False, **operation_config):
        """Insert historic events.

        Insert historic events using historic access.
        The endpoint must be activated and connected and the module client
        and server must trust each other.

        :param endpoint_id: The identifier of the activated endpoint.
        :type endpoint_id: str
        :param request: The history insert request
        :type request:
         ~azure-iiot-opc-history.models.HistoryUpdateRequestApiModelInsertEventsDetailsApiModel
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: HistoryUpdateResponseApiModel or ClientRawResponse if
         raw=true
        :rtype: ~azure-iiot-opc-history.models.HistoryUpdateResponseApiModel
         or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.history_insert_events.metadata['url']
        path_format_arguments = {
            'endpointId': self._serialize.url("endpoint_id", endpoint_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(request, 'HistoryUpdateRequestApiModelInsertEventsDetailsApiModel')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('HistoryUpdateResponseApiModel', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    history_insert_events.metadata = {'url': '/v2/insert/{endpointId}/events'}

    def history_read_events(
            self, endpoint_id, request, custom_headers=None, raw=False, **operation_config):
        """Read historic events.

        Read historic events of a node if available using historic access.
        The endpoint must be activated and connected and the module client
        and server must trust each other.

        :param endpoint_id: The identifier of the activated endpoint.
        :type endpoint_id: str
        :param request: The history read request
        :type request:
         ~azure-iiot-opc-history.models.HistoryReadRequestApiModelReadEventsDetailsApiModel
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: HistoryReadResponseApiModelHistoricEventApiModel or
         ClientRawResponse if raw=true
        :rtype:
         ~azure-iiot-opc-history.models.HistoryReadResponseApiModelHistoricEventApiModel
         or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.history_read_events.metadata['url']
        path_format_arguments = {
            'endpointId': self._serialize.url("endpoint_id", endpoint_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(request, 'HistoryReadRequestApiModelReadEventsDetailsApiModel')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('HistoryReadResponseApiModelHistoricEventApiModel', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    history_read_events.metadata = {'url': '/v2/read/{endpointId}/events'}

    def history_read_events_next(
            self, endpoint_id, request, custom_headers=None, raw=False, **operation_config):
        """Read next batch of historic events.

        Read next batch of historic events of a node using historic access.
        The endpoint must be activated and connected and the module client
        and server must trust each other.

        :param endpoint_id: The identifier of the activated endpoint.
        :type endpoint_id: str
        :param request: The history read next request
        :type request:
         ~azure-iiot-opc-history.models.HistoryReadNextRequestApiModel
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: HistoryReadNextResponseApiModelHistoricEventApiModel or
         ClientRawResponse if raw=true
        :rtype:
         ~azure-iiot-opc-history.models.HistoryReadNextResponseApiModelHistoricEventApiModel
         or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.history_read_events_next.metadata['url']
        path_format_arguments = {
            'endpointId': self._serialize.url("endpoint_id", endpoint_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(request, 'HistoryReadNextRequestApiModel')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('HistoryReadNextResponseApiModelHistoricEventApiModel', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    history_read_events_next.metadata = {'url': '/v2/read/{endpointId}/events/next'}

    def history_read_values(
            self, endpoint_id, request, custom_headers=None, raw=False, **operation_config):
        """Read historic processed values at specified times.

        Read processed history values of a node if available using historic
        access.
        The endpoint must be activated and connected and the module client
        and server must trust each other.

        :param endpoint_id: The identifier of the activated endpoint.
        :type endpoint_id: str
        :param request: The history read request
        :type request:
         ~azure-iiot-opc-history.models.HistoryReadRequestApiModelReadValuesDetailsApiModel
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: HistoryReadResponseApiModelHistoricValueApiModel or
         ClientRawResponse if raw=true
        :rtype:
         ~azure-iiot-opc-history.models.HistoryReadResponseApiModelHistoricValueApiModel
         or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.history_read_values.metadata['url']
        path_format_arguments = {
            'endpointId': self._serialize.url("endpoint_id", endpoint_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(request, 'HistoryReadRequestApiModelReadValuesDetailsApiModel')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('HistoryReadResponseApiModelHistoricValueApiModel', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    history_read_values.metadata = {'url': '/v2/read/{endpointId}/values'}

    def history_read_values_at_times(
            self, endpoint_id, request, custom_headers=None, raw=False, **operation_config):
        """Read historic values at specified times.

        Read historic values of a node if available using historic access.
        The endpoint must be activated and connected and the module client
        and server must trust each other.

        :param endpoint_id: The identifier of the activated endpoint.
        :type endpoint_id: str
        :param request: The history read request
        :type request:
         ~azure-iiot-opc-history.models.HistoryReadRequestApiModelReadValuesAtTimesDetailsApiModel
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: HistoryReadResponseApiModelHistoricValueApiModel or
         ClientRawResponse if raw=true
        :rtype:
         ~azure-iiot-opc-history.models.HistoryReadResponseApiModelHistoricValueApiModel
         or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.history_read_values_at_times.metadata['url']
        path_format_arguments = {
            'endpointId': self._serialize.url("endpoint_id", endpoint_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(request, 'HistoryReadRequestApiModelReadValuesAtTimesDetailsApiModel')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('HistoryReadResponseApiModelHistoricValueApiModel', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    history_read_values_at_times.metadata = {'url': '/v2/read/{endpointId}/values/pick'}

    def history_read_processed_values(
            self, endpoint_id, request, custom_headers=None, raw=False, **operation_config):
        """Read historic processed values at specified times.

        Read processed history values of a node if available using historic
        access.
        The endpoint must be activated and connected and the module client
        and server must trust each other.

        :param endpoint_id: The identifier of the activated endpoint.
        :type endpoint_id: str
        :param request: The history read request
        :type request:
         ~azure-iiot-opc-history.models.HistoryReadRequestApiModelReadProcessedValuesDetailsApiModel
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: HistoryReadResponseApiModelHistoricValueApiModel or
         ClientRawResponse if raw=true
        :rtype:
         ~azure-iiot-opc-history.models.HistoryReadResponseApiModelHistoricValueApiModel
         or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.history_read_processed_values.metadata['url']
        path_format_arguments = {
            'endpointId': self._serialize.url("endpoint_id", endpoint_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(request, 'HistoryReadRequestApiModelReadProcessedValuesDetailsApiModel')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('HistoryReadResponseApiModelHistoricValueApiModel', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    history_read_processed_values.metadata = {'url': '/v2/read/{endpointId}/values/processed'}

    def history_read_modified_values(
            self, endpoint_id, request, custom_headers=None, raw=False, **operation_config):
        """Read historic modified values at specified times.

        Read processed history values of a node if available using historic
        access.
        The endpoint must be activated and connected and the module client
        and server must trust each other.

        :param endpoint_id: The identifier of the activated endpoint.
        :type endpoint_id: str
        :param request: The history read request
        :type request:
         ~azure-iiot-opc-history.models.HistoryReadRequestApiModelReadModifiedValuesDetailsApiModel
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: HistoryReadResponseApiModelHistoricValueApiModel or
         ClientRawResponse if raw=true
        :rtype:
         ~azure-iiot-opc-history.models.HistoryReadResponseApiModelHistoricValueApiModel
         or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.history_read_modified_values.metadata['url']
        path_format_arguments = {
            'endpointId': self._serialize.url("endpoint_id", endpoint_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(request, 'HistoryReadRequestApiModelReadModifiedValuesDetailsApiModel')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('HistoryReadResponseApiModelHistoricValueApiModel', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    history_read_modified_values.metadata = {'url': '/v2/read/{endpointId}/values/modified'}

    def history_read_value_next(
            self, endpoint_id, request, custom_headers=None, raw=False, **operation_config):
        """Read next batch of historic values.

        Read next batch of historic values of a node using historic access.
        The endpoint must be activated and connected and the module client
        and server must trust each other.

        :param endpoint_id: The identifier of the activated endpoint.
        :type endpoint_id: str
        :param request: The history read next request
        :type request:
         ~azure-iiot-opc-history.models.HistoryReadNextRequestApiModel
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: HistoryReadNextResponseApiModelHistoricValueApiModel or
         ClientRawResponse if raw=true
        :rtype:
         ~azure-iiot-opc-history.models.HistoryReadNextResponseApiModelHistoricValueApiModel
         or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.history_read_value_next.metadata['url']
        path_format_arguments = {
            'endpointId': self._serialize.url("endpoint_id", endpoint_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(request, 'HistoryReadNextRequestApiModel')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('HistoryReadNextResponseApiModelHistoricValueApiModel', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    history_read_value_next.metadata = {'url': '/v2/read/{endpointId}/values/next'}

    def history_replace_values(
            self, endpoint_id, request, custom_headers=None, raw=False, **operation_config):
        """Replace historic values.

        Replace historic values using historic access.
        The endpoint must be activated and connected and the module client
        and server must trust each other.

        :param endpoint_id: The identifier of the activated endpoint.
        :type endpoint_id: str
        :param request: The history replace request
        :type request:
         ~azure-iiot-opc-history.models.HistoryUpdateRequestApiModelReplaceValuesDetailsApiModel
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: HistoryUpdateResponseApiModel or ClientRawResponse if
         raw=true
        :rtype: ~azure-iiot-opc-history.models.HistoryUpdateResponseApiModel
         or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.history_replace_values.metadata['url']
        path_format_arguments = {
            'endpointId': self._serialize.url("endpoint_id", endpoint_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(request, 'HistoryUpdateRequestApiModelReplaceValuesDetailsApiModel')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('HistoryUpdateResponseApiModel', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    history_replace_values.metadata = {'url': '/v2/replace/{endpointId}/values'}

    def history_replace_events(
            self, endpoint_id, request, custom_headers=None, raw=False, **operation_config):
        """Replace historic events.

        Replace historic events using historic access.
        The endpoint must be activated and connected and the module client
        and server must trust each other.

        :param endpoint_id: The identifier of the activated endpoint.
        :type endpoint_id: str
        :param request: The history replace request
        :type request:
         ~azure-iiot-opc-history.models.HistoryUpdateRequestApiModelReplaceEventsDetailsApiModel
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: HistoryUpdateResponseApiModel or ClientRawResponse if
         raw=true
        :rtype: ~azure-iiot-opc-history.models.HistoryUpdateResponseApiModel
         or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.history_replace_events.metadata['url']
        path_format_arguments = {
            'endpointId': self._serialize.url("endpoint_id", endpoint_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(request, 'HistoryUpdateRequestApiModelReplaceEventsDetailsApiModel')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('HistoryUpdateResponseApiModel', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    history_replace_events.metadata = {'url': '/v2/replace/{endpointId}/events'}

    def get_status(
            self, custom_headers=None, raw=False, **operation_config):
        """Return the service status in the form of the service status
        api model.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: StatusResponseApiModel or ClientRawResponse if raw=true
        :rtype: ~azure-iiot-opc-history.models.StatusResponseApiModel or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.get_status.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('StatusResponseApiModel', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_status.metadata = {'url': '/v2/status'}
