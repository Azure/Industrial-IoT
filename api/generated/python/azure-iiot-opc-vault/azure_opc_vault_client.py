# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator 2.3.33.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.service_client import ServiceClient
from msrest import Configuration, Serializer, Deserializer
from .version import VERSION
from msrest.pipeline import ClientRawResponse
from msrest.exceptions import HttpOperationError
from . import models


class AzureOpcVaultClientConfiguration(Configuration):
    """Configuration for AzureOpcVaultClient
    Note that all parameters used to create this instance are saved as instance
    attributes.

    :param credentials: Subscription credentials which uniquely identify
     client subscription.
    :type credentials: None
    :param str base_url: Service URL
    """

    def __init__(
            self, credentials, base_url=None):

        if credentials is None:
            raise ValueError("Parameter 'credentials' must not be None.")
        if not base_url:
            base_url = '/vault'

        super(AzureOpcVaultClientConfiguration, self).__init__(base_url)

        self.add_user_agent('azureopcvaultclient/{}'.format(VERSION))

        self.credentials = credentials


class AzureOpcVaultClient(object):
    """Azure Industrial IoT OPC UA Vault Service

    :ivar config: Configuration for client.
    :vartype config: AzureOpcVaultClientConfiguration

    :param credentials: Subscription credentials which uniquely identify
     client subscription.
    :type credentials: None
    :param str base_url: Service URL
    """

    def __init__(
            self, credentials, base_url=None):

        self.config = AzureOpcVaultClientConfiguration(credentials, base_url)
        self._client = ServiceClient(self.config.credentials, self.config)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self.api_version = 'v2'
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)


    def get_issuer_certificate_chain(
            self, serial_number, custom_headers=None, raw=False, **operation_config):
        """Get Issuer CA Certificate chain.

        :param serial_number: the serial number of the
         Issuer CA Certificate
        :type serial_number: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: X509CertificateChainApiModel or ClientRawResponse if raw=true
        :rtype: ~azure-iiot-opc-vault.models.X509CertificateChainApiModel or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.get_issuer_certificate_chain.metadata['url']
        path_format_arguments = {
            'serialNumber': self._serialize.url("serial_number", serial_number, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('X509CertificateChainApiModel', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_issuer_certificate_chain.metadata = {'url': '/v2/certificates/{serialNumber}'}

    def get_issuer_crl_chain(
            self, serial_number, custom_headers=None, raw=False, **operation_config):
        """Get Issuer CA CRL chain.

        :param serial_number: the serial number of the Issuer
         CA Certificate
        :type serial_number: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: X509CrlChainApiModel or ClientRawResponse if raw=true
        :rtype: ~azure-iiot-opc-vault.models.X509CrlChainApiModel or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.get_issuer_crl_chain.metadata['url']
        path_format_arguments = {
            'serialNumber': self._serialize.url("serial_number", serial_number, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('X509CrlChainApiModel', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_issuer_crl_chain.metadata = {'url': '/v2/certificates/{serialNumber}/crl'}

    def get_issuer_certificate_chain1(
            self, serial_number, custom_headers=None, raw=False, **operation_config):
        """Get Issuer Certificate for Authority Information
        Access endpoint.

        :param serial_number:
        :type serial_number: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.get_issuer_certificate_chain1.metadata['url']
        path_format_arguments = {
            'serialNumber': self._serialize.url("serial_number", serial_number, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    get_issuer_certificate_chain1.metadata = {'url': '/v2/issuer/{serialNumber}'}

    def get_issuer_crl_chain1(
            self, serial_number, custom_headers=None, raw=False, **operation_config):
        """Get Issuer CRL in CRL Distribution Endpoint.

        :param serial_number:
        :type serial_number: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.get_issuer_crl_chain1.metadata['url']
        path_format_arguments = {
            'serialNumber': self._serialize.url("serial_number", serial_number, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    get_issuer_crl_chain1.metadata = {'url': '/v2/crl/{serialNumber}'}

    def start_signing_request(
            self, signing_request, custom_headers=None, raw=False, **operation_config):
        """Create a certificate request with a certificate signing request (CSR).

        The request is in the 'New' state after this call.
        Requires Writer or Manager role.

        :param signing_request: The signing request parameters
        :type signing_request:
         ~azure-iiot-opc-vault.models.StartSigningRequestApiModel
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: StartSigningRequestResponseApiModel or ClientRawResponse if
         raw=true
        :rtype:
         ~azure-iiot-opc-vault.models.StartSigningRequestResponseApiModel or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.start_signing_request.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(signing_request, 'StartSigningRequestApiModel')

        # Construct and send request
        request = self._client.put(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('StartSigningRequestResponseApiModel', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    start_signing_request.metadata = {'url': '/v2/requests/sign'}

    def finish_signing_request(
            self, request_id, custom_headers=None, raw=False, **operation_config):
        """Fetch signing request results.

        Can be called in any state.
        After a successful fetch in 'Completed' state, the request is
        moved into 'Accepted' state.
        Requires Writer role.

        :param request_id:
        :type request_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: FinishSigningRequestResponseApiModel or ClientRawResponse if
         raw=true
        :rtype:
         ~azure-iiot-opc-vault.models.FinishSigningRequestResponseApiModel or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.finish_signing_request.metadata['url']
        path_format_arguments = {
            'requestId': self._serialize.url("request_id", request_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('FinishSigningRequestResponseApiModel', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    finish_signing_request.metadata = {'url': '/v2/requests/sign/{requestId}'}

    def start_new_key_pair_request(
            self, new_key_pair_request, custom_headers=None, raw=False, **operation_config):
        """Create a certificate request with a new key pair.

        The request is in the 'New' state after this call.
        Requires Writer or Manager role.

        :param new_key_pair_request: The new key pair request parameters
        :type new_key_pair_request:
         ~azure-iiot-opc-vault.models.StartNewKeyPairRequestApiModel
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: StartNewKeyPairRequestResponseApiModel or ClientRawResponse
         if raw=true
        :rtype:
         ~azure-iiot-opc-vault.models.StartNewKeyPairRequestResponseApiModel or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.start_new_key_pair_request.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(new_key_pair_request, 'StartNewKeyPairRequestApiModel')

        # Construct and send request
        request = self._client.put(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('StartNewKeyPairRequestResponseApiModel', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    start_new_key_pair_request.metadata = {'url': '/v2/requests/keypair'}

    def finish_new_key_pair_request(
            self, request_id, custom_headers=None, raw=False, **operation_config):
        """Fetch certificate request result.

        Can be called in any state.
        Fetches private key in 'Completed' state.
        After a successful fetch in 'Completed' state, the request is
        moved into 'Accepted' state.
        Requires Writer role.

        :param request_id:
        :type request_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: FinishNewKeyPairRequestResponseApiModel or ClientRawResponse
         if raw=true
        :rtype:
         ~azure-iiot-opc-vault.models.FinishNewKeyPairRequestResponseApiModel
         or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.finish_new_key_pair_request.metadata['url']
        path_format_arguments = {
            'requestId': self._serialize.url("request_id", request_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('FinishNewKeyPairRequestResponseApiModel', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    finish_new_key_pair_request.metadata = {'url': '/v2/requests/keypair/{requestId}'}

    def approve_request(
            self, request_id, custom_headers=None, raw=False, **operation_config):
        """Approve the certificate request.

        Validates the request with the application database.
        - If Approved:
        - New Key Pair request: Creates the new key pair
        in the requested format, signs the certificate and stores the
        private key for later securely in KeyVault.
        - Cert Signing Request: Creates and signs the certificate.
        Deletes the CSR from the database.
        Stores the signed certificate for later use in the Database.
        The request is in the 'Approved' or 'Rejected' state after this call.
        Requires Approver role.
        Approver needs signing rights in KeyVault.

        :param request_id: The certificate request id
        :type request_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.approve_request.metadata['url']
        path_format_arguments = {
            'requestId': self._serialize.url("request_id", request_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    approve_request.metadata = {'url': '/v2/requests/{requestId}/approve'}

    def reject_request(
            self, request_id, custom_headers=None, raw=False, **operation_config):
        """Reject the certificate request.

        The request is in the 'Rejected' state after this call.
        Requires Approver role.
        Approver needs signing rights in KeyVault.

        :param request_id: The certificate request id
        :type request_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.reject_request.metadata['url']
        path_format_arguments = {
            'requestId': self._serialize.url("request_id", request_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    reject_request.metadata = {'url': '/v2/requests/{requestId}/reject'}

    def accept_request(
            self, request_id, custom_headers=None, raw=False, **operation_config):
        """Cancel request.

        The request is in the 'Accepted' state after this call.
        Requires Writer role.

        :param request_id: The certificate request id
        :type request_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.accept_request.metadata['url']
        path_format_arguments = {
            'requestId': self._serialize.url("request_id", request_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    accept_request.metadata = {'url': '/v2/requests/{requestId}/accept'}

    def get_request(
            self, request_id, custom_headers=None, raw=False, **operation_config):
        """Get a specific certificate request.

        :param request_id: The certificate request id
        :type request_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: CertificateRequestRecordApiModel or ClientRawResponse if
         raw=true
        :rtype: ~azure-iiot-opc-vault.models.CertificateRequestRecordApiModel
         or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.get_request.metadata['url']
        path_format_arguments = {
            'requestId': self._serialize.url("request_id", request_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('CertificateRequestRecordApiModel', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_request.metadata = {'url': '/v2/requests/{requestId}'}

    def delete_request(
            self, request_id, custom_headers=None, raw=False, **operation_config):
        """Delete request. Physically delete the request.

        By purging the request it is actually physically deleted from the
        database, including the public key and other information.
        Requires Manager role.

        :param request_id: The certificate request id
        :type request_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.delete_request.metadata['url']
        path_format_arguments = {
            'requestId': self._serialize.url("request_id", request_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.delete(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_request.metadata = {'url': '/v2/requests/{requestId}'}

    def query_requests(
            self, query=None, page_size=None, custom_headers=None, raw=False, **operation_config):
        """Query for certificate requests.

        Get all certificate requests in paged form.
        The returned model can contain a link to the next page if more results
        are
        available.  Use ListRequests to continue.

        :param query: optional, query filter
        :type query:
         ~azure-iiot-opc-vault.models.CertificateRequestQueryRequestApiModel
        :param page_size: optional, the maximum number of result per page
        :type page_size: int
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: CertificateRequestQueryResponseApiModel or ClientRawResponse
         if raw=true
        :rtype:
         ~azure-iiot-opc-vault.models.CertificateRequestQueryResponseApiModel
         or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.query_requests.metadata['url']

        # Construct parameters
        query_parameters = {}
        if page_size is not None:
            query_parameters['pageSize'] = self._serialize.query("page_size", page_size, 'int')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        if query is not None:
            body_content = self._serialize.body(query, 'CertificateRequestQueryRequestApiModel')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('CertificateRequestQueryResponseApiModel', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    query_requests.metadata = {'url': '/v2/requests/query'}

    def list_requests(
            self, next_page_link=None, page_size=None, custom_headers=None, raw=False, **operation_config):
        """Lists certificate requests.

        Get all certificate requests in paged form or continue a current
        listing or
        query.
        The returned model can contain a link to the next page if more results
        are
        available.

        :param next_page_link: optional, link to next page
        :type next_page_link: str
        :param page_size: optional, the maximum number of result per page
        :type page_size: int
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: CertificateRequestQueryResponseApiModel or ClientRawResponse
         if raw=true
        :rtype:
         ~azure-iiot-opc-vault.models.CertificateRequestQueryResponseApiModel
         or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.list_requests.metadata['url']

        # Construct parameters
        query_parameters = {}
        if next_page_link is not None:
            query_parameters['nextPageLink'] = self._serialize.query("next_page_link", next_page_link, 'str')
        if page_size is not None:
            query_parameters['pageSize'] = self._serialize.query("page_size", page_size, 'int')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('CertificateRequestQueryResponseApiModel', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    list_requests.metadata = {'url': '/v2/requests'}

    def get_status(
            self, custom_headers=None, raw=False, **operation_config):
        """Return the service status in the form of the service status
        api model.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: StatusResponseApiModel or ClientRawResponse if raw=true
        :rtype: ~azure-iiot-opc-vault.models.StatusResponseApiModel or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.get_status.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('StatusResponseApiModel', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_status.metadata = {'url': '/v2/status'}

    def list_groups(
            self, next_page_link=None, page_size=None, custom_headers=None, raw=False, **operation_config):
        """Get information about all groups.

        A trust group has a root certificate which issues certificates
        to entities.  Entities can be part of a trust group and thus
        trust the root certificate and all entities that the root has
        issued certificates for.

        :param next_page_link: optional, link to next page
        :type next_page_link: str
        :param page_size: optional, the maximum number of result per page
        :type page_size: int
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: TrustGroupRegistrationListApiModel or ClientRawResponse if
         raw=true
        :rtype:
         ~azure-iiot-opc-vault.models.TrustGroupRegistrationListApiModel or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.list_groups.metadata['url']

        # Construct parameters
        query_parameters = {}
        if next_page_link is not None:
            query_parameters['nextPageLink'] = self._serialize.query("next_page_link", next_page_link, 'str')
        if page_size is not None:
            query_parameters['pageSize'] = self._serialize.query("page_size", page_size, 'int')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('TrustGroupRegistrationListApiModel', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    list_groups.metadata = {'url': '/v2/groups'}

    def create_group(
            self, request, custom_headers=None, raw=False, **operation_config):
        """Create new sub-group of an existing group.

        Requires manager role.

        :param request: The create request
        :type request:
         ~azure-iiot-opc-vault.models.TrustGroupRegistrationRequestApiModel
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: TrustGroupRegistrationResponseApiModel or ClientRawResponse
         if raw=true
        :rtype:
         ~azure-iiot-opc-vault.models.TrustGroupRegistrationResponseApiModel or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.create_group.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(request, 'TrustGroupRegistrationRequestApiModel')

        # Construct and send request
        request = self._client.put(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('TrustGroupRegistrationResponseApiModel', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    create_group.metadata = {'url': '/v2/groups'}

    def get_group(
            self, group_id, custom_headers=None, raw=False, **operation_config):
        """Get group information.

        A trust group has a root certificate which issues certificates
        to entities.  Entities can be part of a trust group and thus
        trust the root certificate and all entities that the root has
        issued certificates for.

        :param group_id: The group id
        :type group_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: TrustGroupRegistrationApiModel or ClientRawResponse if
         raw=true
        :rtype: ~azure-iiot-opc-vault.models.TrustGroupRegistrationApiModel or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.get_group.metadata['url']
        path_format_arguments = {
            'groupId': self._serialize.url("group_id", group_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('TrustGroupRegistrationApiModel', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_group.metadata = {'url': '/v2/groups/{groupId}'}

    def update_group(
            self, group_id, request, custom_headers=None, raw=False, **operation_config):
        """Update group registration.

        Use this function with care and only if you are aware of
        the security implications.
        Requires manager role.

        :param group_id: The group id
        :type group_id: str
        :param request: The group configuration
        :type request:
         ~azure-iiot-opc-vault.models.TrustGroupUpdateRequestApiModel
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.update_group.metadata['url']
        path_format_arguments = {
            'groupId': self._serialize.url("group_id", group_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(request, 'TrustGroupUpdateRequestApiModel')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    update_group.metadata = {'url': '/v2/groups/{groupId}'}

    def delete_group(
            self, group_id, custom_headers=None, raw=False, **operation_config):
        """Delete a group.

        After this operation the Issuer CA, CRLs and keys become inaccessible.
        Use this function with extreme caution.
        Requires manager role.

        :param group_id: The group id
        :type group_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.delete_group.metadata['url']
        path_format_arguments = {
            'groupId': self._serialize.url("group_id", group_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.delete(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    delete_group.metadata = {'url': '/v2/groups/{groupId}'}

    def create_root(
            self, request, custom_headers=None, raw=False, **operation_config):
        """Create new root group.

        Requires manager role.

        :param request: The create request
        :type request:
         ~azure-iiot-opc-vault.models.TrustGroupRootCreateRequestApiModel
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: TrustGroupRegistrationResponseApiModel or ClientRawResponse
         if raw=true
        :rtype:
         ~azure-iiot-opc-vault.models.TrustGroupRegistrationResponseApiModel or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.create_root.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json-patch+json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(request, 'TrustGroupRootCreateRequestApiModel')

        # Construct and send request
        request = self._client.put(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('TrustGroupRegistrationResponseApiModel', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    create_root.metadata = {'url': '/v2/groups/root'}

    def renew_issuer_certificate(
            self, group_id, custom_headers=None, raw=False, **operation_config):
        """Renew a group CA Certificate.

        :param group_id:
        :type group_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.renew_issuer_certificate.metadata['url']
        path_format_arguments = {
            'groupId': self._serialize.url("group_id", group_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    renew_issuer_certificate.metadata = {'url': '/v2/groups/{groupId}/renew'}

    def add_trust_relationship(
            self, entity_id, trusted_entity_id, custom_headers=None, raw=False, **operation_config):
        """Add trust relationship.

        Define trust between two entities.  The entities are identifiers
        of application, groups, or endpoints.

        :param entity_id: The entity identifier, e.g. group, etc.
        :type entity_id: str
        :param trusted_entity_id: The trusted entity identifier
        :type trusted_entity_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.add_trust_relationship.metadata['url']
        path_format_arguments = {
            'entityId': self._serialize.url("entity_id", entity_id, 'str'),
            'trustedEntityId': self._serialize.url("trusted_entity_id", trusted_entity_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.put(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    add_trust_relationship.metadata = {'url': '/v2/trustlists/{entityId}/{trustedEntityId}'}

    def list_trusted_certificates(
            self, entity_id, next_page_link=None, page_size=None, custom_headers=None, raw=False, **operation_config):
        """List trusted certificates.

        Returns all certificates the entity should trust based on the
        applied trust configuration.

        :param entity_id:
        :type entity_id: str
        :param next_page_link: optional, link to next page
        :type next_page_link: str
        :param page_size: optional, the maximum number of result per page
        :type page_size: int
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: X509CertificateListApiModel or ClientRawResponse if raw=true
        :rtype: ~azure-iiot-opc-vault.models.X509CertificateListApiModel or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.list_trusted_certificates.metadata['url']
        path_format_arguments = {
            'entityId': self._serialize.url("entity_id", entity_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        if next_page_link is not None:
            query_parameters['nextPageLink'] = self._serialize.query("next_page_link", next_page_link, 'str')
        if page_size is not None:
            query_parameters['pageSize'] = self._serialize.query("page_size", page_size, 'int')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('X509CertificateListApiModel', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    list_trusted_certificates.metadata = {'url': '/v2/trustlists/{entityId}'}

    def remove_trust_relationship(
            self, entity_id, untrusted_entity_id, custom_headers=None, raw=False, **operation_config):
        """Remove a trust relationship.

        Removes trust between two entities.  The entities are identifiers
        of application, groups, or endpoints.

        :param entity_id: The entity identifier, e.g. group, etc.
        :type entity_id: str
        :param untrusted_entity_id: The trusted entity identifier
        :type untrusted_entity_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.remove_trust_relationship.metadata['url']
        path_format_arguments = {
            'entityId': self._serialize.url("entity_id", entity_id, 'str'),
            'untrustedEntityId': self._serialize.url("untrusted_entity_id", untrusted_entity_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.delete(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise HttpOperationError(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    remove_trust_relationship.metadata = {'url': '/v2/trustlists/{entityId}/{untrustedEntityId}'}
