// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.IIoT.Opc.Publisher
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for AzureOpcPublisherClient.
    /// </summary>
    public static partial class AzureOpcPublisherClientExtensions
    {
            /// <summary>
            /// Subscribe to receive samples
            /// </summary>
            /// <remarks>
            /// Register a client to receive publisher samples through SignalR.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The endpoint to subscribe to
            /// </param>
            /// <param name='body'>
            /// The user id that will receive publisher samples.
            /// </param>
            public static void Subscribe(this IAzureOpcPublisherClient operations, string endpointId, string body = default(string))
            {
                operations.SubscribeAsync(endpointId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Subscribe to receive samples
            /// </summary>
            /// <remarks>
            /// Register a client to receive publisher samples through SignalR.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The endpoint to subscribe to
            /// </param>
            /// <param name='body'>
            /// The user id that will receive publisher samples.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SubscribeAsync(this IAzureOpcPublisherClient operations, string endpointId, string body = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SubscribeWithHttpMessagesAsync(endpointId, body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Unsubscribe from receiving samples.
            /// </summary>
            /// <remarks>
            /// Unregister a client and stop it from receiving samples.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The endpoint to unsubscribe from
            /// </param>
            /// <param name='userId'>
            /// The user id that will not receive any more published samples
            /// </param>
            public static void Unsubscribe(this IAzureOpcPublisherClient operations, string endpointId, string userId)
            {
                operations.UnsubscribeAsync(endpointId, userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Unsubscribe from receiving samples.
            /// </summary>
            /// <remarks>
            /// Unregister a client and stop it from receiving samples.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The endpoint to unsubscribe from
            /// </param>
            /// <param name='userId'>
            /// The user id that will not receive any more published samples
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UnsubscribeAsync(this IAzureOpcPublisherClient operations, string endpointId, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UnsubscribeWithHttpMessagesAsync(endpointId, userId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Start publishing node values
            /// </summary>
            /// <remarks>
            /// Start publishing variable node values to IoT Hub. The endpoint must be
            /// activated and connected and the module client and server must trust each
            /// other.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The identifier of the activated endpoint.
            /// </param>
            /// <param name='body'>
            /// The publish request
            /// </param>
            public static PublishStartResponseApiModel StartPublishingValues(this IAzureOpcPublisherClient operations, string endpointId, PublishStartRequestApiModel body)
            {
                return operations.StartPublishingValuesAsync(endpointId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Start publishing node values
            /// </summary>
            /// <remarks>
            /// Start publishing variable node values to IoT Hub. The endpoint must be
            /// activated and connected and the module client and server must trust each
            /// other.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The identifier of the activated endpoint.
            /// </param>
            /// <param name='body'>
            /// The publish request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PublishStartResponseApiModel> StartPublishingValuesAsync(this IAzureOpcPublisherClient operations, string endpointId, PublishStartRequestApiModel body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StartPublishingValuesWithHttpMessagesAsync(endpointId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Stop publishing node values
            /// </summary>
            /// <remarks>
            /// Stop publishing variable node values to IoT Hub. The endpoint must be
            /// activated and connected and the module client and server must trust each
            /// other.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The identifier of the activated endpoint.
            /// </param>
            /// <param name='body'>
            /// The unpublish request
            /// </param>
            public static PublishStopResponseApiModel StopPublishingValues(this IAzureOpcPublisherClient operations, string endpointId, PublishStopRequestApiModel body)
            {
                return operations.StopPublishingValuesAsync(endpointId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stop publishing node values
            /// </summary>
            /// <remarks>
            /// Stop publishing variable node values to IoT Hub. The endpoint must be
            /// activated and connected and the module client and server must trust each
            /// other.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The identifier of the activated endpoint.
            /// </param>
            /// <param name='body'>
            /// The unpublish request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PublishStopResponseApiModel> StopPublishingValuesAsync(this IAzureOpcPublisherClient operations, string endpointId, PublishStopRequestApiModel body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StopPublishingValuesWithHttpMessagesAsync(endpointId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get currently published nodes
            /// </summary>
            /// <remarks>
            /// Returns currently published node ids for an endpoint. The endpoint must be
            /// activated and connected and the module client and server must trust each
            /// other.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The identifier of the activated endpoint.
            /// </param>
            /// <param name='body'>
            /// The list request
            /// </param>
            public static PublishedItemListResponseApiModel GetFirstListOfPublishedNodes(this IAzureOpcPublisherClient operations, string endpointId, PublishedItemListRequestApiModel body)
            {
                return operations.GetFirstListOfPublishedNodesAsync(endpointId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get currently published nodes
            /// </summary>
            /// <remarks>
            /// Returns currently published node ids for an endpoint. The endpoint must be
            /// activated and connected and the module client and server must trust each
            /// other.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The identifier of the activated endpoint.
            /// </param>
            /// <param name='body'>
            /// The list request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PublishedItemListResponseApiModel> GetFirstListOfPublishedNodesAsync(this IAzureOpcPublisherClient operations, string endpointId, PublishedItemListRequestApiModel body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFirstListOfPublishedNodesWithHttpMessagesAsync(endpointId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get next set of published nodes
            /// </summary>
            /// <remarks>
            /// Returns next set of currently published node ids for an endpoint. The
            /// endpoint must be activated and connected and the module client and server
            /// must trust each other.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The identifier of the activated endpoint.
            /// </param>
            /// <param name='continuationToken'>
            /// The continuation token to continue with
            /// </param>
            public static PublishedItemListResponseApiModel GetNextListOfPublishedNodes(this IAzureOpcPublisherClient operations, string endpointId, string continuationToken)
            {
                return operations.GetNextListOfPublishedNodesAsync(endpointId, continuationToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get next set of published nodes
            /// </summary>
            /// <remarks>
            /// Returns next set of currently published node ids for an endpoint. The
            /// endpoint must be activated and connected and the module client and server
            /// must trust each other.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The identifier of the activated endpoint.
            /// </param>
            /// <param name='continuationToken'>
            /// The continuation token to continue with
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PublishedItemListResponseApiModel> GetNextListOfPublishedNodesAsync(this IAzureOpcPublisherClient operations, string endpointId, string continuationToken, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNextListOfPublishedNodesWithHttpMessagesAsync(endpointId, continuationToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Return the service status in the form of the service status
            /// api model.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static StatusResponseApiModel GetStatus(this IAzureOpcPublisherClient operations)
            {
                return operations.GetStatusAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return the service status in the form of the service status
            /// api model.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StatusResponseApiModel> GetStatusAsync(this IAzureOpcPublisherClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStatusWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
