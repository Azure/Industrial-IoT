// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.IIoT.Opc.Twin
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for AzureOpcTwinClient.
    /// </summary>
    public static partial class AzureOpcTwinClientExtensions
    {
            /// <summary>
            /// Browse node references
            /// </summary>
            /// <remarks>
            /// Browse a node on the specified endpoint. The endpoint must be activated and
            /// connected and the module client and server must trust each other.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The identifier of the activated endpoint.
            /// </param>
            /// <param name='body'>
            /// The browse request
            /// </param>
            public static BrowseResponseApiModel Browse(this IAzureOpcTwinClient operations, string endpointId, BrowseRequestApiModel body)
            {
                return operations.BrowseAsync(endpointId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Browse node references
            /// </summary>
            /// <remarks>
            /// Browse a node on the specified endpoint. The endpoint must be activated and
            /// connected and the module client and server must trust each other.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The identifier of the activated endpoint.
            /// </param>
            /// <param name='body'>
            /// The browse request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BrowseResponseApiModel> BrowseAsync(this IAzureOpcTwinClient operations, string endpointId, BrowseRequestApiModel body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BrowseWithHttpMessagesAsync(endpointId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Browse set of unique target nodes
            /// </summary>
            /// <remarks>
            /// Browse the set of unique hierarchically referenced target nodes on the
            /// endpoint. The endpoint must be activated and connected and the module
            /// client and server must trust each other. The root node id to browse from
            /// can be provided as part of the query parameters. If it is not provided, the
            /// RootFolder node is browsed. Note that this is the same as the POST method
            /// with the model containing the node id and the targetNodesOnly flag set to
            /// true.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The identifier of the activated endpoint.
            /// </param>
            /// <param name='nodeId'>
            /// The node to browse or omit to browse the root node (i=84)
            /// </param>
            public static BrowseResponseApiModel GetSetOfUniqueNodes(this IAzureOpcTwinClient operations, string endpointId, string nodeId = default(string))
            {
                return operations.GetSetOfUniqueNodesAsync(endpointId, nodeId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Browse set of unique target nodes
            /// </summary>
            /// <remarks>
            /// Browse the set of unique hierarchically referenced target nodes on the
            /// endpoint. The endpoint must be activated and connected and the module
            /// client and server must trust each other. The root node id to browse from
            /// can be provided as part of the query parameters. If it is not provided, the
            /// RootFolder node is browsed. Note that this is the same as the POST method
            /// with the model containing the node id and the targetNodesOnly flag set to
            /// true.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The identifier of the activated endpoint.
            /// </param>
            /// <param name='nodeId'>
            /// The node to browse or omit to browse the root node (i=84)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BrowseResponseApiModel> GetSetOfUniqueNodesAsync(this IAzureOpcTwinClient operations, string endpointId, string nodeId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSetOfUniqueNodesWithHttpMessagesAsync(endpointId, nodeId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Browse next set of references
            /// </summary>
            /// <remarks>
            /// Browse next set of references on the endpoint. The endpoint must be
            /// activated and connected and the module client and server must trust each
            /// other.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The identifier of the activated endpoint.
            /// </param>
            /// <param name='body'>
            /// The request body with continuation token.
            /// </param>
            public static BrowseNextResponseApiModel BrowseNext(this IAzureOpcTwinClient operations, string endpointId, BrowseNextRequestApiModel body)
            {
                return operations.BrowseNextAsync(endpointId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Browse next set of references
            /// </summary>
            /// <remarks>
            /// Browse next set of references on the endpoint. The endpoint must be
            /// activated and connected and the module client and server must trust each
            /// other.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The identifier of the activated endpoint.
            /// </param>
            /// <param name='body'>
            /// The request body with continuation token.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BrowseNextResponseApiModel> BrowseNextAsync(this IAzureOpcTwinClient operations, string endpointId, BrowseNextRequestApiModel body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BrowseNextWithHttpMessagesAsync(endpointId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Browse next set of unique target nodes
            /// </summary>
            /// <remarks>
            /// Browse the next set of unique hierarchically referenced target nodes on the
            /// endpoint. The endpoint must be activated and connected and the module
            /// client and server must trust each other. Note that this is the same as the
            /// POST method with the model containing the continuation token and the
            /// targetNodesOnly flag set to true.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The identifier of the activated endpoint.
            /// </param>
            /// <param name='continuationToken'>
            /// Continuation token from GetSetOfUniqueNodes operation
            /// </param>
            public static BrowseNextResponseApiModel GetNextSetOfUniqueNodes(this IAzureOpcTwinClient operations, string endpointId, string continuationToken)
            {
                return operations.GetNextSetOfUniqueNodesAsync(endpointId, continuationToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Browse next set of unique target nodes
            /// </summary>
            /// <remarks>
            /// Browse the next set of unique hierarchically referenced target nodes on the
            /// endpoint. The endpoint must be activated and connected and the module
            /// client and server must trust each other. Note that this is the same as the
            /// POST method with the model containing the continuation token and the
            /// targetNodesOnly flag set to true.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The identifier of the activated endpoint.
            /// </param>
            /// <param name='continuationToken'>
            /// Continuation token from GetSetOfUniqueNodes operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BrowseNextResponseApiModel> GetNextSetOfUniqueNodesAsync(this IAzureOpcTwinClient operations, string endpointId, string continuationToken, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetNextSetOfUniqueNodesWithHttpMessagesAsync(endpointId, continuationToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Browse using a browse path
            /// </summary>
            /// <remarks>
            /// Browse using a path from the specified node id. This call uses
            /// TranslateBrowsePathsToNodeIds service under the hood. The endpoint must be
            /// activated and connected and the module client and server must trust each
            /// other.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The identifier of the activated endpoint.
            /// </param>
            /// <param name='body'>
            /// The browse path request
            /// </param>
            public static BrowsePathResponseApiModel BrowseUsingPath(this IAzureOpcTwinClient operations, string endpointId, BrowsePathRequestApiModel body)
            {
                return operations.BrowseUsingPathAsync(endpointId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Browse using a browse path
            /// </summary>
            /// <remarks>
            /// Browse using a path from the specified node id. This call uses
            /// TranslateBrowsePathsToNodeIds service under the hood. The endpoint must be
            /// activated and connected and the module client and server must trust each
            /// other.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The identifier of the activated endpoint.
            /// </param>
            /// <param name='body'>
            /// The browse path request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BrowsePathResponseApiModel> BrowseUsingPathAsync(this IAzureOpcTwinClient operations, string endpointId, BrowsePathRequestApiModel body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BrowseUsingPathWithHttpMessagesAsync(endpointId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get method meta data
            /// </summary>
            /// <remarks>
            /// Return method meta data to support a user interface displaying forms to
            /// input and output arguments. The endpoint must be activated and connected
            /// and the module client and server must trust each other.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The identifier of the activated endpoint.
            /// </param>
            /// <param name='body'>
            /// The method metadata request
            /// </param>
            public static MethodMetadataResponseApiModel GetCallMetadata(this IAzureOpcTwinClient operations, string endpointId, MethodMetadataRequestApiModel body)
            {
                return operations.GetCallMetadataAsync(endpointId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get method meta data
            /// </summary>
            /// <remarks>
            /// Return method meta data to support a user interface displaying forms to
            /// input and output arguments. The endpoint must be activated and connected
            /// and the module client and server must trust each other.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The identifier of the activated endpoint.
            /// </param>
            /// <param name='body'>
            /// The method metadata request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MethodMetadataResponseApiModel> GetCallMetadataAsync(this IAzureOpcTwinClient operations, string endpointId, MethodMetadataRequestApiModel body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCallMetadataWithHttpMessagesAsync(endpointId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Call a method
            /// </summary>
            /// <remarks>
            /// Invoke method node with specified input arguments. The endpoint must be
            /// activated and connected and the module client and server must trust each
            /// other.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The identifier of the activated endpoint.
            /// </param>
            /// <param name='body'>
            /// The method call request
            /// </param>
            public static MethodCallResponseApiModel CallMethod(this IAzureOpcTwinClient operations, string endpointId, MethodCallRequestApiModel body)
            {
                return operations.CallMethodAsync(endpointId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Call a method
            /// </summary>
            /// <remarks>
            /// Invoke method node with specified input arguments. The endpoint must be
            /// activated and connected and the module client and server must trust each
            /// other.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The identifier of the activated endpoint.
            /// </param>
            /// <param name='body'>
            /// The method call request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MethodCallResponseApiModel> CallMethodAsync(this IAzureOpcTwinClient operations, string endpointId, MethodCallRequestApiModel body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CallMethodWithHttpMessagesAsync(endpointId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Read variable value
            /// </summary>
            /// <remarks>
            /// Read a variable node's value. The endpoint must be activated and connected
            /// and the module client and server must trust each other.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The identifier of the activated endpoint.
            /// </param>
            /// <param name='body'>
            /// The read value request
            /// </param>
            public static ValueReadResponseApiModel ReadValue(this IAzureOpcTwinClient operations, string endpointId, ValueReadRequestApiModel body)
            {
                return operations.ReadValueAsync(endpointId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Read variable value
            /// </summary>
            /// <remarks>
            /// Read a variable node's value. The endpoint must be activated and connected
            /// and the module client and server must trust each other.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The identifier of the activated endpoint.
            /// </param>
            /// <param name='body'>
            /// The read value request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ValueReadResponseApiModel> ReadValueAsync(this IAzureOpcTwinClient operations, string endpointId, ValueReadRequestApiModel body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadValueWithHttpMessagesAsync(endpointId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get variable value
            /// </summary>
            /// <remarks>
            /// Get a variable node's value using its node id. The endpoint must be
            /// activated and connected and the module client and server must trust each
            /// other.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The identifier of the activated endpoint.
            /// </param>
            /// <param name='nodeId'>
            /// The node to read
            /// </param>
            public static ValueReadResponseApiModel GetValue(this IAzureOpcTwinClient operations, string endpointId, string nodeId)
            {
                return operations.GetValueAsync(endpointId, nodeId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get variable value
            /// </summary>
            /// <remarks>
            /// Get a variable node's value using its node id. The endpoint must be
            /// activated and connected and the module client and server must trust each
            /// other.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The identifier of the activated endpoint.
            /// </param>
            /// <param name='nodeId'>
            /// The node to read
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ValueReadResponseApiModel> GetValueAsync(this IAzureOpcTwinClient operations, string endpointId, string nodeId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetValueWithHttpMessagesAsync(endpointId, nodeId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Read node attributes
            /// </summary>
            /// <remarks>
            /// Read attributes of a node. The endpoint must be activated and connected and
            /// the module client and server must trust each other.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The identifier of the activated endpoint.
            /// </param>
            /// <param name='body'>
            /// The read request
            /// </param>
            public static ReadResponseApiModel ReadAttributes(this IAzureOpcTwinClient operations, string endpointId, ReadRequestApiModel body)
            {
                return operations.ReadAttributesAsync(endpointId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Read node attributes
            /// </summary>
            /// <remarks>
            /// Read attributes of a node. The endpoint must be activated and connected and
            /// the module client and server must trust each other.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The identifier of the activated endpoint.
            /// </param>
            /// <param name='body'>
            /// The read request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReadResponseApiModel> ReadAttributesAsync(this IAzureOpcTwinClient operations, string endpointId, ReadRequestApiModel body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReadAttributesWithHttpMessagesAsync(endpointId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Write variable value
            /// </summary>
            /// <remarks>
            /// Write variable node's value. The endpoint must be activated and connected
            /// and the module client and server must trust each other.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The identifier of the activated endpoint.
            /// </param>
            /// <param name='body'>
            /// The write value request
            /// </param>
            public static ValueWriteResponseApiModel WriteValue(this IAzureOpcTwinClient operations, string endpointId, ValueWriteRequestApiModel body)
            {
                return operations.WriteValueAsync(endpointId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Write variable value
            /// </summary>
            /// <remarks>
            /// Write variable node's value. The endpoint must be activated and connected
            /// and the module client and server must trust each other.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The identifier of the activated endpoint.
            /// </param>
            /// <param name='body'>
            /// The write value request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ValueWriteResponseApiModel> WriteValueAsync(this IAzureOpcTwinClient operations, string endpointId, ValueWriteRequestApiModel body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WriteValueWithHttpMessagesAsync(endpointId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Write node attributes
            /// </summary>
            /// <remarks>
            /// Write any attribute of a node. The endpoint must be activated and connected
            /// and the module client and server must trust each other.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The identifier of the activated endpoint.
            /// </param>
            /// <param name='body'>
            /// The batch write request
            /// </param>
            public static WriteResponseApiModel WriteAttributes(this IAzureOpcTwinClient operations, string endpointId, WriteRequestApiModel body)
            {
                return operations.WriteAttributesAsync(endpointId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Write node attributes
            /// </summary>
            /// <remarks>
            /// Write any attribute of a node. The endpoint must be activated and connected
            /// and the module client and server must trust each other.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// The identifier of the activated endpoint.
            /// </param>
            /// <param name='body'>
            /// The batch write request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WriteResponseApiModel> WriteAttributesAsync(this IAzureOpcTwinClient operations, string endpointId, WriteRequestApiModel body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.WriteAttributesWithHttpMessagesAsync(endpointId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
