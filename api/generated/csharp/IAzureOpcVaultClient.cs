// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.IIoT.Opc.Vault
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Azure Industrial IoT OPC UA Vault Service
    /// </summary>
    public partial interface IAzureOpcVaultClient : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// Subscription credentials which uniquely identify client
        /// subscription.
        /// </summary>
        ServiceClientCredentials Credentials { get; }


        /// <summary>
        /// Get Issuer CA Certificate chain.
        /// </summary>
        /// <param name='serialNumber'>
        /// the serial number of the
        /// Issuer CA Certificate
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<X509CertificateChainApiModel>> GetIssuerCertificateChainWithHttpMessagesAsync(string serialNumber, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Issuer CA CRL chain.
        /// </summary>
        /// <param name='serialNumber'>
        /// the serial number of the Issuer
        /// CA Certificate
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<X509CrlChainApiModel>> GetIssuerCrlChainWithHttpMessagesAsync(string serialNumber, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Issuer Certificate for Authority Information
        /// Access endpoint.
        /// </summary>
        /// <param name='serialNumber'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetIssuerCertificateChain1WithHttpMessagesAsync(string serialNumber, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Issuer CRL in CRL Distribution Endpoint.
        /// </summary>
        /// <param name='serialNumber'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> GetIssuerCrlChain1WithHttpMessagesAsync(string serialNumber, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a certificate request with a certificate signing request
        /// (CSR).
        /// </summary>
        /// <remarks>
        /// The request is in the 'New' state after this call.
        /// Requires Writer or Manager role.
        /// </remarks>
        /// <param name='signingRequest'>
        /// The signing request parameters
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<StartSigningRequestResponseApiModel>> StartSigningRequestWithHttpMessagesAsync(StartSigningRequestApiModel signingRequest, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Fetch signing request results.
        /// </summary>
        /// <remarks>
        /// Can be called in any state.
        /// After a successful fetch in 'Completed' state, the request is
        /// moved into 'Accepted' state.
        /// Requires Writer role.
        /// </remarks>
        /// <param name='requestId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<FinishSigningRequestResponseApiModel>> FinishSigningRequestWithHttpMessagesAsync(string requestId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a certificate request with a new key pair.
        /// </summary>
        /// <remarks>
        /// The request is in the 'New' state after this call.
        /// Requires Writer or Manager role.
        /// </remarks>
        /// <param name='newKeyPairRequest'>
        /// The new key pair request parameters
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<StartNewKeyPairRequestResponseApiModel>> StartNewKeyPairRequestWithHttpMessagesAsync(StartNewKeyPairRequestApiModel newKeyPairRequest, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Fetch certificate request result.
        /// </summary>
        /// <remarks>
        /// Can be called in any state.
        /// Fetches private key in 'Completed' state.
        /// After a successful fetch in 'Completed' state, the request is
        /// moved into 'Accepted' state.
        /// Requires Writer role.
        /// </remarks>
        /// <param name='requestId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<FinishNewKeyPairRequestResponseApiModel>> FinishNewKeyPairRequestWithHttpMessagesAsync(string requestId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Approve the certificate request.
        /// </summary>
        /// <remarks>
        /// Validates the request with the application database.
        /// - If Approved:
        /// - New Key Pair request: Creates the new key pair
        /// in the requested format, signs the certificate and stores the
        /// private key for later securely in KeyVault.
        /// - Cert Signing Request: Creates and signs the certificate.
        /// Deletes the CSR from the database.
        /// Stores the signed certificate for later use in the Database.
        /// The request is in the 'Approved' or 'Rejected' state after this
        /// call.
        /// Requires Approver role.
        /// Approver needs signing rights in KeyVault.
        /// </remarks>
        /// <param name='requestId'>
        /// The certificate request id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ApproveRequestWithHttpMessagesAsync(string requestId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Reject the certificate request.
        /// </summary>
        /// <remarks>
        /// The request is in the 'Rejected' state after this call.
        /// Requires Approver role.
        /// Approver needs signing rights in KeyVault.
        /// </remarks>
        /// <param name='requestId'>
        /// The certificate request id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> RejectRequestWithHttpMessagesAsync(string requestId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancel request
        /// </summary>
        /// <remarks>
        /// The request is in the 'Accepted' state after this call.
        /// Requires Writer role.
        /// </remarks>
        /// <param name='requestId'>
        /// The certificate request id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> AcceptRequestWithHttpMessagesAsync(string requestId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a specific certificate request.
        /// </summary>
        /// <param name='requestId'>
        /// The certificate request id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<CertificateRequestRecordApiModel>> GetRequestWithHttpMessagesAsync(string requestId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete request. Physically delete the request.
        /// </summary>
        /// <remarks>
        /// By purging the request it is actually physically deleted from the
        /// database, including the public key and other information.
        /// Requires Manager role.
        /// </remarks>
        /// <param name='requestId'>
        /// The certificate request id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteRequestWithHttpMessagesAsync(string requestId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Query for certificate requests.
        /// </summary>
        /// <remarks>
        /// Get all certificate requests in paged form.
        /// The returned model can contain a link to the next page if more
        /// results are
        /// available.  Use ListRequests to continue.
        /// </remarks>
        /// <param name='query'>
        /// optional, query filter
        /// </param>
        /// <param name='pageSize'>
        /// optional, the maximum number of result per page
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<CertificateRequestQueryResponseApiModel>> QueryRequestsWithHttpMessagesAsync(CertificateRequestQueryRequestApiModel query = default(CertificateRequestQueryRequestApiModel), int? pageSize = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Lists certificate requests.
        /// </summary>
        /// <remarks>
        /// Get all certificate requests in paged form or continue a current
        /// listing or
        /// query.
        /// The returned model can contain a link to the next page if more
        /// results are
        /// available.
        /// </remarks>
        /// <param name='nextPageLink'>
        /// optional, link to next page
        /// </param>
        /// <param name='pageSize'>
        /// optional, the maximum number of result per page
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<CertificateRequestQueryResponseApiModel>> ListRequestsWithHttpMessagesAsync(string nextPageLink = default(string), int? pageSize = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Return the service status in the form of the service status
        /// api model.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<StatusResponseApiModel>> GetStatusWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get information about all groups.
        /// </summary>
        /// <remarks>
        /// A trust group has a root certificate which issues certificates
        /// to entities.  Entities can be part of a trust group and thus
        /// trust the root certificate and all entities that the root has
        /// issued certificates for.
        /// </remarks>
        /// <param name='nextPageLink'>
        /// optional, link to next page
        /// </param>
        /// <param name='pageSize'>
        /// optional, the maximum number of result per page
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TrustGroupRegistrationListApiModel>> ListGroupsWithHttpMessagesAsync(string nextPageLink = default(string), int? pageSize = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create new sub-group of an existing group.
        /// </summary>
        /// <remarks>
        /// Requires manager role.
        /// </remarks>
        /// <param name='request'>
        /// The create request
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TrustGroupRegistrationResponseApiModel>> CreateGroupWithHttpMessagesAsync(TrustGroupRegistrationRequestApiModel request, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get group information.
        /// </summary>
        /// <remarks>
        /// A trust group has a root certificate which issues certificates
        /// to entities.  Entities can be part of a trust group and thus
        /// trust the root certificate and all entities that the root has
        /// issued certificates for.
        /// </remarks>
        /// <param name='groupId'>
        /// The group id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TrustGroupRegistrationApiModel>> GetGroupWithHttpMessagesAsync(string groupId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update group registration.
        /// </summary>
        /// <remarks>
        /// Use this function with care and only if you are aware of
        /// the security implications.
        /// Requires manager role.
        /// </remarks>
        /// <param name='groupId'>
        /// The group id
        /// </param>
        /// <param name='request'>
        /// The group configuration
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> UpdateGroupWithHttpMessagesAsync(string groupId, TrustGroupUpdateRequestApiModel request, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a group.
        /// </summary>
        /// <remarks>
        /// After this operation the Issuer CA, CRLs and keys become
        /// inaccessible.
        /// Use this function with extreme caution.
        /// Requires manager role.
        /// </remarks>
        /// <param name='groupId'>
        /// The group id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteGroupWithHttpMessagesAsync(string groupId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create new root group.
        /// </summary>
        /// <remarks>
        /// Requires manager role.
        /// </remarks>
        /// <param name='request'>
        /// The create request
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<TrustGroupRegistrationResponseApiModel>> CreateRootWithHttpMessagesAsync(TrustGroupRootCreateRequestApiModel request, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Renew a group CA Certificate.
        /// </summary>
        /// <param name='groupId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> RenewIssuerCertificateWithHttpMessagesAsync(string groupId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add trust relationship
        /// </summary>
        /// <remarks>
        /// Define trust between two entities.  The entities are identifiers
        /// of application, groups, or endpoints.
        /// </remarks>
        /// <param name='entityId'>
        /// The entity identifier, e.g. group, etc.
        /// </param>
        /// <param name='trustedEntityId'>
        /// The trusted entity identifier
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> AddTrustRelationshipWithHttpMessagesAsync(string entityId, string trustedEntityId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List trusted certificates
        /// </summary>
        /// <remarks>
        /// Returns all certificates the entity should trust based on the
        /// applied trust configuration.
        /// </remarks>
        /// <param name='entityId'>
        /// </param>
        /// <param name='nextPageLink'>
        /// optional, link to next page
        /// </param>
        /// <param name='pageSize'>
        /// optional, the maximum number of result per page
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<X509CertificateListApiModel>> ListTrustedCertificatesWithHttpMessagesAsync(string entityId, string nextPageLink = default(string), int? pageSize = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Remove a trust relationship
        /// </summary>
        /// <remarks>
        /// Removes trust between two entities.  The entities are identifiers
        /// of application, groups, or endpoints.
        /// </remarks>
        /// <param name='entityId'>
        /// The entity identifier, e.g. group, etc.
        /// </param>
        /// <param name='untrustedEntityId'>
        /// The trusted entity identifier
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> RemoveTrustRelationshipWithHttpMessagesAsync(string entityId, string untrustedEntityId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
