// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.IIoT.Opc.Vault.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Status model
    /// </summary>
    public partial class StatusResponseApiModel
    {
        /// <summary>
        /// Initializes a new instance of the StatusResponseApiModel class.
        /// </summary>
        public StatusResponseApiModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the StatusResponseApiModel class.
        /// </summary>
        /// <param name="name">Service name</param>
        /// <param name="status">Status</param>
        /// <param name="currentTime">Current time</param>
        /// <param name="startTime">Service start time</param>
        /// <param name="upTime">Uptime</param>
        /// <param name="uid">Value generated at bootstrap by each instance of
        /// the service and
        /// used to correlate logs coming from the same instance. The value
        /// changes every time the service starts.</param>
        /// <param name="properties">A property bag with details about the
        /// service</param>
        /// <param name="dependencies">A property bag with details about the
        /// internal dependencies</param>
        /// <param name="metadata">Meta data</param>
        public StatusResponseApiModel(string name = default(string), string status = default(string), string currentTime = default(string), string startTime = default(string), long? upTime = default(long?), string uid = default(string), IDictionary<string, string> properties = default(IDictionary<string, string>), IDictionary<string, string> dependencies = default(IDictionary<string, string>), IDictionary<string, string> metadata = default(IDictionary<string, string>))
        {
            Name = name;
            Status = status;
            CurrentTime = currentTime;
            StartTime = startTime;
            UpTime = upTime;
            Uid = uid;
            Properties = properties;
            Dependencies = dependencies;
            Metadata = metadata;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets service name
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets status
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets current time
        /// </summary>
        [JsonProperty(PropertyName = "currentTime")]
        public string CurrentTime { get; private set; }

        /// <summary>
        /// Gets service start time
        /// </summary>
        [JsonProperty(PropertyName = "startTime")]
        public string StartTime { get; private set; }

        /// <summary>
        /// Gets uptime
        /// </summary>
        [JsonProperty(PropertyName = "upTime")]
        public long? UpTime { get; private set; }

        /// <summary>
        /// Gets value generated at bootstrap by each instance of the service
        /// and
        /// used to correlate logs coming from the same instance. The value
        /// changes every time the service starts.
        /// </summary>
        [JsonProperty(PropertyName = "uid")]
        public string Uid { get; private set; }

        /// <summary>
        /// Gets a property bag with details about the service
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public IDictionary<string, string> Properties { get; private set; }

        /// <summary>
        /// Gets a property bag with details about the internal dependencies
        /// </summary>
        [JsonProperty(PropertyName = "dependencies")]
        public IDictionary<string, string> Dependencies { get; private set; }

        /// <summary>
        /// Gets meta data
        /// </summary>
        [JsonProperty(PropertyName = "$metadata")]
        public IDictionary<string, string> Metadata { get; private set; }

    }
}
