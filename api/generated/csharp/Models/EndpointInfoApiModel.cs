// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.IIoT.Opc.Registry.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Endpoint registration model
    /// </summary>
    public partial class EndpointInfoApiModel
    {
        /// <summary>
        /// Initializes a new instance of the EndpointInfoApiModel class.
        /// </summary>
        public EndpointInfoApiModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EndpointInfoApiModel class.
        /// </summary>
        /// <param name="applicationId">Application id endpoint is registered
        /// under.</param>
        /// <param name="activationState">Possible values include:
        /// 'Deactivated', 'Activated', 'ActivatedAndConnected'</param>
        /// <param name="endpointState">Possible values include: 'Connecting',
        /// 'NotReachable', 'Busy', 'NoTrust', 'CertificateInvalid', 'Ready',
        /// 'Error'</param>
        /// <param name="outOfSync">Whether the registration is out of
        /// sync</param>
        /// <param name="notSeenSince">Last time endpoint was seen</param>
        public EndpointInfoApiModel(EndpointRegistrationApiModel registration, string applicationId, EndpointActivationState? activationState = default(EndpointActivationState?), EndpointConnectivityState? endpointState = default(EndpointConnectivityState?), bool? outOfSync = default(bool?), System.DateTime? notSeenSince = default(System.DateTime?))
        {
            Registration = registration;
            ApplicationId = applicationId;
            ActivationState = activationState;
            EndpointState = endpointState;
            OutOfSync = outOfSync;
            NotSeenSince = notSeenSince;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "registration")]
        public EndpointRegistrationApiModel Registration { get; set; }

        /// <summary>
        /// Gets or sets application id endpoint is registered under.
        /// </summary>
        [JsonProperty(PropertyName = "applicationId")]
        public string ApplicationId { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Deactivated', 'Activated',
        /// 'ActivatedAndConnected'
        /// </summary>
        [JsonProperty(PropertyName = "activationState")]
        public EndpointActivationState? ActivationState { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Connecting', 'NotReachable',
        /// 'Busy', 'NoTrust', 'CertificateInvalid', 'Ready', 'Error'
        /// </summary>
        [JsonProperty(PropertyName = "endpointState")]
        public EndpointConnectivityState? EndpointState { get; set; }

        /// <summary>
        /// Gets or sets whether the registration is out of sync
        /// </summary>
        [JsonProperty(PropertyName = "outOfSync")]
        public bool? OutOfSync { get; set; }

        /// <summary>
        /// Gets or sets last time endpoint was seen
        /// </summary>
        [JsonProperty(PropertyName = "notSeenSince")]
        public System.DateTime? NotSeenSince { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Registration == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Registration");
            }
            if (ApplicationId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ApplicationId");
            }
            if (Registration != null)
            {
                Registration.Validate();
            }
        }
    }
}
