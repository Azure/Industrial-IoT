// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.IIoT.Opc.Registry.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Application with optional list of endpoints
    /// </summary>
    public partial class ApplicationRecordApiModel
    {
        /// <summary>
        /// Initializes a new instance of the ApplicationRecordApiModel class.
        /// </summary>
        public ApplicationRecordApiModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ApplicationRecordApiModel class.
        /// </summary>
        /// <param name="recordId">Record id</param>
        public ApplicationRecordApiModel(int recordId, ApplicationInfoApiModel application)
        {
            RecordId = recordId;
            Application = application;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets record id
        /// </summary>
        [JsonProperty(PropertyName = "recordId")]
        public int RecordId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "application")]
        public ApplicationInfoApiModel Application { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Application == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Application");
            }
            if (Application != null)
            {
                Application.Validate();
            }
        }
    }
}
