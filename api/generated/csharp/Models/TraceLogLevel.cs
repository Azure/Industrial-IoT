// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.IIoT.Opc.Registry.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for TraceLogLevel.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum TraceLogLevel
    {
        [EnumMember(Value = "Error")]
        Error,
        [EnumMember(Value = "Information")]
        Information,
        [EnumMember(Value = "Debug")]
        Debug,
        [EnumMember(Value = "Verbose")]
        Verbose
    }
    internal static class TraceLogLevelEnumExtension
    {
        internal static string ToSerializedValue(this TraceLogLevel? value)
        {
            return value == null ? null : ((TraceLogLevel)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this TraceLogLevel value)
        {
            switch( value )
            {
                case TraceLogLevel.Error:
                    return "Error";
                case TraceLogLevel.Information:
                    return "Information";
                case TraceLogLevel.Debug:
                    return "Debug";
                case TraceLogLevel.Verbose:
                    return "Verbose";
            }
            return null;
        }

        internal static TraceLogLevel? ParseTraceLogLevel(this string value)
        {
            switch( value )
            {
                case "Error":
                    return TraceLogLevel.Error;
                case "Information":
                    return TraceLogLevel.Information;
                case "Debug":
                    return TraceLogLevel.Debug;
                case "Verbose":
                    return TraceLogLevel.Verbose;
            }
            return null;
        }
    }
}
