// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.IIoT.Opc.Registry.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Gateway registration model
    /// </summary>
    public partial class GatewayApiModel
    {
        /// <summary>
        /// Initializes a new instance of the GatewayApiModel class.
        /// </summary>
        public GatewayApiModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GatewayApiModel class.
        /// </summary>
        /// <param name="id">Gateway id</param>
        /// <param name="siteId">Site of the Gateway</param>
        /// <param name="connected">Whether Gateway is connected on this
        /// registration</param>
        public GatewayApiModel(string id, string siteId = default(string), bool? connected = default(bool?))
        {
            Id = id;
            SiteId = siteId;
            Connected = connected;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets gateway id
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets site of the Gateway
        /// </summary>
        [JsonProperty(PropertyName = "siteId")]
        public string SiteId { get; set; }

        /// <summary>
        /// Gets or sets whether Gateway is connected on this registration
        /// </summary>
        [JsonProperty(PropertyName = "connected")]
        public bool? Connected { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
        }
    }
}
