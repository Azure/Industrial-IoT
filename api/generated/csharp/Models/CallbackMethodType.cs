// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.IIoT.Opc.Registry.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for CallbackMethodType.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum CallbackMethodType
    {
        [EnumMember(Value = "Get")]
        Get,
        [EnumMember(Value = "Post")]
        Post,
        [EnumMember(Value = "Put")]
        Put,
        [EnumMember(Value = "Delete")]
        Delete
    }
    internal static class CallbackMethodTypeEnumExtension
    {
        internal static string ToSerializedValue(this CallbackMethodType? value)
        {
            return value == null ? null : ((CallbackMethodType)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this CallbackMethodType value)
        {
            switch( value )
            {
                case CallbackMethodType.Get:
                    return "Get";
                case CallbackMethodType.Post:
                    return "Post";
                case CallbackMethodType.Put:
                    return "Put";
                case CallbackMethodType.Delete:
                    return "Delete";
            }
            return null;
        }

        internal static CallbackMethodType? ParseCallbackMethodType(this string value)
        {
            switch( value )
            {
                case "Get":
                    return CallbackMethodType.Get;
                case "Post":
                    return CallbackMethodType.Post;
                case "Put":
                    return CallbackMethodType.Put;
                case "Delete":
                    return CallbackMethodType.Delete;
            }
            return null;
        }
    }
}
