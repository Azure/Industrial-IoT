// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.IIoT.Opc.Registry.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for DiscoveryMode.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum DiscoveryMode
    {
        [EnumMember(Value = "Off")]
        Off,
        [EnumMember(Value = "Local")]
        Local,
        [EnumMember(Value = "Network")]
        Network,
        [EnumMember(Value = "Fast")]
        Fast,
        [EnumMember(Value = "Scan")]
        Scan
    }
    internal static class DiscoveryModeEnumExtension
    {
        internal static string ToSerializedValue(this DiscoveryMode? value)
        {
            return value == null ? null : ((DiscoveryMode)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this DiscoveryMode value)
        {
            switch( value )
            {
                case DiscoveryMode.Off:
                    return "Off";
                case DiscoveryMode.Local:
                    return "Local";
                case DiscoveryMode.Network:
                    return "Network";
                case DiscoveryMode.Fast:
                    return "Fast";
                case DiscoveryMode.Scan:
                    return "Scan";
            }
            return null;
        }

        internal static DiscoveryMode? ParseDiscoveryMode(this string value)
        {
            switch( value )
            {
                case "Off":
                    return DiscoveryMode.Off;
                case "Local":
                    return DiscoveryMode.Local;
                case "Network":
                    return DiscoveryMode.Network;
                case "Fast":
                    return DiscoveryMode.Fast;
                case "Scan":
                    return DiscoveryMode.Scan;
            }
            return null;
        }
    }
}
