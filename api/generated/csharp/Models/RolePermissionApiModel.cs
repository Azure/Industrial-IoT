// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.IIoT.Opc.Twin.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Role permission model
    /// </summary>
    public partial class RolePermissionApiModel
    {
        /// <summary>
        /// Initializes a new instance of the RolePermissionApiModel class.
        /// </summary>
        public RolePermissionApiModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RolePermissionApiModel class.
        /// </summary>
        /// <param name="roleId">Identifier of the role object.</param>
        /// <param name="permissions">Possible values include: 'Browse',
        /// 'ReadRolePermissions', 'WriteAttribute', 'WriteRolePermissions',
        /// 'WriteHistorizing', 'Read', 'Write', 'ReadHistory',
        /// 'InsertHistory', 'ModifyHistory', 'DeleteHistory', 'ReceiveEvents',
        /// 'Call', 'AddReference', 'RemoveReference', 'DeleteNode',
        /// 'AddNode'</param>
        public RolePermissionApiModel(string roleId, RolePermissions? permissions = default(RolePermissions?))
        {
            RoleId = roleId;
            Permissions = permissions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets identifier of the role object.
        /// </summary>
        [JsonProperty(PropertyName = "roleId")]
        public string RoleId { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Browse',
        /// 'ReadRolePermissions', 'WriteAttribute', 'WriteRolePermissions',
        /// 'WriteHistorizing', 'Read', 'Write', 'ReadHistory',
        /// 'InsertHistory', 'ModifyHistory', 'DeleteHistory', 'ReceiveEvents',
        /// 'Call', 'AddReference', 'RemoveReference', 'DeleteNode', 'AddNode'
        /// </summary>
        [JsonProperty(PropertyName = "permissions")]
        public RolePermissions? Permissions { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (RoleId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RoleId");
            }
        }
    }
}
