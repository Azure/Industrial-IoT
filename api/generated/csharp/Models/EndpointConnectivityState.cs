// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.IIoT.Opc.Registry.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for EndpointConnectivityState.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum EndpointConnectivityState
    {
        [EnumMember(Value = "Connecting")]
        Connecting,
        [EnumMember(Value = "NotReachable")]
        NotReachable,
        [EnumMember(Value = "Busy")]
        Busy,
        [EnumMember(Value = "NoTrust")]
        NoTrust,
        [EnumMember(Value = "CertificateInvalid")]
        CertificateInvalid,
        [EnumMember(Value = "Ready")]
        Ready,
        [EnumMember(Value = "Error")]
        Error
    }
    internal static class EndpointConnectivityStateEnumExtension
    {
        internal static string ToSerializedValue(this EndpointConnectivityState? value)
        {
            return value == null ? null : ((EndpointConnectivityState)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this EndpointConnectivityState value)
        {
            switch( value )
            {
                case EndpointConnectivityState.Connecting:
                    return "Connecting";
                case EndpointConnectivityState.NotReachable:
                    return "NotReachable";
                case EndpointConnectivityState.Busy:
                    return "Busy";
                case EndpointConnectivityState.NoTrust:
                    return "NoTrust";
                case EndpointConnectivityState.CertificateInvalid:
                    return "CertificateInvalid";
                case EndpointConnectivityState.Ready:
                    return "Ready";
                case EndpointConnectivityState.Error:
                    return "Error";
            }
            return null;
        }

        internal static EndpointConnectivityState? ParseEndpointConnectivityState(this string value)
        {
            switch( value )
            {
                case "Connecting":
                    return EndpointConnectivityState.Connecting;
                case "NotReachable":
                    return EndpointConnectivityState.NotReachable;
                case "Busy":
                    return EndpointConnectivityState.Busy;
                case "NoTrust":
                    return EndpointConnectivityState.NoTrust;
                case "CertificateInvalid":
                    return EndpointConnectivityState.CertificateInvalid;
                case "Ready":
                    return EndpointConnectivityState.Ready;
                case "Error":
                    return EndpointConnectivityState.Error;
            }
            return null;
        }
    }
}
