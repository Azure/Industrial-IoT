// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.IIoT.Opc.History.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for HistoryUpdateOperation.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum HistoryUpdateOperation
    {
        [EnumMember(Value = "Insert")]
        Insert,
        [EnumMember(Value = "Replace")]
        Replace,
        [EnumMember(Value = "Update")]
        Update,
        [EnumMember(Value = "Delete")]
        Delete
    }
    internal static class HistoryUpdateOperationEnumExtension
    {
        internal static string ToSerializedValue(this HistoryUpdateOperation? value)
        {
            return value == null ? null : ((HistoryUpdateOperation)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this HistoryUpdateOperation value)
        {
            switch( value )
            {
                case HistoryUpdateOperation.Insert:
                    return "Insert";
                case HistoryUpdateOperation.Replace:
                    return "Replace";
                case HistoryUpdateOperation.Update:
                    return "Update";
                case HistoryUpdateOperation.Delete:
                    return "Delete";
            }
            return null;
        }

        internal static HistoryUpdateOperation? ParseHistoryUpdateOperation(this string value)
        {
            switch( value )
            {
                case "Insert":
                    return HistoryUpdateOperation.Insert;
                case "Replace":
                    return HistoryUpdateOperation.Replace;
                case "Update":
                    return HistoryUpdateOperation.Update;
                case "Delete":
                    return HistoryUpdateOperation.Delete;
            }
            return null;
        }
    }
}
