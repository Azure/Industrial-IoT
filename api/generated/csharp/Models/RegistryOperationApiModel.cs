// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.IIoT.Opc.Registry.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Registry operation log model
    /// </summary>
    public partial class RegistryOperationApiModel
    {
        /// <summary>
        /// Initializes a new instance of the RegistryOperationApiModel class.
        /// </summary>
        public RegistryOperationApiModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RegistryOperationApiModel class.
        /// </summary>
        /// <param name="authorityId">Operation User</param>
        /// <param name="time">Operation time</param>
        public RegistryOperationApiModel(string authorityId, System.DateTime time)
        {
            AuthorityId = authorityId;
            Time = time;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets operation User
        /// </summary>
        [JsonProperty(PropertyName = "authorityId")]
        public string AuthorityId { get; set; }

        /// <summary>
        /// Gets or sets operation time
        /// </summary>
        [JsonProperty(PropertyName = "time")]
        public System.DateTime Time { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (AuthorityId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AuthorityId");
            }
        }
    }
}
