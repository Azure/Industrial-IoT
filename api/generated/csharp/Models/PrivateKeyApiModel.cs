// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.IIoT.Opc.Vault.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Private key
    /// </summary>
    public partial class PrivateKeyApiModel
    {
        /// <summary>
        /// Initializes a new instance of the PrivateKeyApiModel class.
        /// </summary>
        public PrivateKeyApiModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PrivateKeyApiModel class.
        /// </summary>
        /// <param name="kty">Key type. Possible values include: 'RSA', 'ECC',
        /// 'AES'</param>
        /// <param name="n">RSA modulus.</param>
        /// <param name="e">RSA public exponent, in Base64.</param>
        /// <param name="dp">RSA Private Key Parameter</param>
        /// <param name="dq">RSA Private Key Parameter</param>
        /// <param name="qi">RSA Private Key Parameter</param>
        /// <param name="p">RSA secret prime</param>
        /// <param name="q">RSA secret prime, with p &amp;lt; q</param>
        /// <param name="crv">The curve for ECC algorithms</param>
        /// <param name="x">X coordinate for the Elliptic Curve point.</param>
        /// <param name="y">Y coordinate for the Elliptic Curve point.</param>
        /// <param name="d">RSA private exponent or ECC private key.</param>
        /// <param name="k">Symmetric key</param>
        /// <param name="keyHsm">HSM Token, used with "Bring Your Own
        /// Key"</param>
        public PrivateKeyApiModel(PrivateKeyType? kty = default(PrivateKeyType?), byte[] n = default(byte[]), byte[] e = default(byte[]), byte[] dp = default(byte[]), byte[] dq = default(byte[]), byte[] qi = default(byte[]), byte[] p = default(byte[]), byte[] q = default(byte[]), string crv = default(string), byte[] x = default(byte[]), byte[] y = default(byte[]), byte[] d = default(byte[]), byte[] k = default(byte[]), byte[] keyHsm = default(byte[]))
        {
            Kty = kty;
            N = n;
            E = e;
            Dp = dp;
            Dq = dq;
            Qi = qi;
            P = p;
            Q = q;
            Crv = crv;
            X = x;
            Y = y;
            D = d;
            K = k;
            KeyHsm = keyHsm;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets key type. Possible values include: 'RSA', 'ECC', 'AES'
        /// </summary>
        [JsonProperty(PropertyName = "kty")]
        public PrivateKeyType? Kty { get; set; }

        /// <summary>
        /// Gets or sets RSA modulus.
        /// </summary>
        [JsonProperty(PropertyName = "n")]
        public byte[] N { get; set; }

        /// <summary>
        /// Gets or sets RSA public exponent, in Base64.
        /// </summary>
        [JsonProperty(PropertyName = "e")]
        public byte[] E { get; set; }

        /// <summary>
        /// Gets or sets RSA Private Key Parameter
        /// </summary>
        [JsonProperty(PropertyName = "dp")]
        public byte[] Dp { get; set; }

        /// <summary>
        /// Gets or sets RSA Private Key Parameter
        /// </summary>
        [JsonProperty(PropertyName = "dq")]
        public byte[] Dq { get; set; }

        /// <summary>
        /// Gets or sets RSA Private Key Parameter
        /// </summary>
        [JsonProperty(PropertyName = "qi")]
        public byte[] Qi { get; set; }

        /// <summary>
        /// Gets or sets RSA secret prime
        /// </summary>
        [JsonProperty(PropertyName = "p")]
        public byte[] P { get; set; }

        /// <summary>
        /// Gets or sets RSA secret prime, with p &amp;amp;lt; q
        /// </summary>
        [JsonProperty(PropertyName = "q")]
        public byte[] Q { get; set; }

        /// <summary>
        /// Gets or sets the curve for ECC algorithms
        /// </summary>
        [JsonProperty(PropertyName = "crv")]
        public string Crv { get; set; }

        /// <summary>
        /// Gets or sets x coordinate for the Elliptic Curve point.
        /// </summary>
        [JsonProperty(PropertyName = "x")]
        public byte[] X { get; set; }

        /// <summary>
        /// Gets or sets y coordinate for the Elliptic Curve point.
        /// </summary>
        [JsonProperty(PropertyName = "y")]
        public byte[] Y { get; set; }

        /// <summary>
        /// Gets or sets RSA private exponent or ECC private key.
        /// </summary>
        [JsonProperty(PropertyName = "d")]
        public byte[] D { get; set; }

        /// <summary>
        /// Gets or sets symmetric key
        /// </summary>
        [JsonProperty(PropertyName = "k")]
        public byte[] K { get; set; }

        /// <summary>
        /// Gets or sets HSM Token, used with "Bring Your Own Key"
        /// </summary>
        [JsonProperty(PropertyName = "key_hsm")]
        public byte[] KeyHsm { get; set; }

    }
}
