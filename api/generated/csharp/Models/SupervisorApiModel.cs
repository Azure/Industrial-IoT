// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.IIoT.Opc.Registry.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Supervisor registration model
    /// </summary>
    public partial class SupervisorApiModel
    {
        /// <summary>
        /// Initializes a new instance of the SupervisorApiModel class.
        /// </summary>
        public SupervisorApiModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SupervisorApiModel class.
        /// </summary>
        /// <param name="id">Supervisor id</param>
        /// <param name="siteId">Site of the supervisor</param>
        /// <param name="discovery">Whether the supervisor is in discovery
        /// mode. Possible values include: 'Off', 'Local', 'Network', 'Fast',
        /// 'Scan'</param>
        /// <param name="discoveryConfig">Supervisor configuration</param>
        /// <param name="certificate">Supervisor public client cert</param>
        /// <param name="logLevel">Current log level. Possible values include:
        /// 'Error', 'Information', 'Debug', 'Verbose'</param>
        /// <param name="outOfSync">Whether the registration is out of sync
        /// between
        /// client (module) and server (service) (default: false).</param>
        /// <param name="connected">Whether supervisor is connected on this
        /// registration</param>
        public SupervisorApiModel(string id, string siteId = default(string), DiscoveryMode? discovery = default(DiscoveryMode?), DiscoveryConfigApiModel discoveryConfig = default(DiscoveryConfigApiModel), byte[] certificate = default(byte[]), TraceLogLevel? logLevel = default(TraceLogLevel?), bool? outOfSync = default(bool?), bool? connected = default(bool?))
        {
            Id = id;
            SiteId = siteId;
            Discovery = discovery;
            DiscoveryConfig = discoveryConfig;
            Certificate = certificate;
            LogLevel = logLevel;
            OutOfSync = outOfSync;
            Connected = connected;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets supervisor id
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets site of the supervisor
        /// </summary>
        [JsonProperty(PropertyName = "siteId")]
        public string SiteId { get; set; }

        /// <summary>
        /// Gets or sets whether the supervisor is in discovery mode. Possible
        /// values include: 'Off', 'Local', 'Network', 'Fast', 'Scan'
        /// </summary>
        [JsonProperty(PropertyName = "discovery")]
        public DiscoveryMode? Discovery { get; set; }

        /// <summary>
        /// Gets or sets supervisor configuration
        /// </summary>
        [JsonProperty(PropertyName = "discoveryConfig")]
        public DiscoveryConfigApiModel DiscoveryConfig { get; set; }

        /// <summary>
        /// Gets or sets supervisor public client cert
        /// </summary>
        [JsonProperty(PropertyName = "certificate")]
        public byte[] Certificate { get; set; }

        /// <summary>
        /// Gets or sets current log level. Possible values include: 'Error',
        /// 'Information', 'Debug', 'Verbose'
        /// </summary>
        [JsonProperty(PropertyName = "logLevel")]
        public TraceLogLevel? LogLevel { get; set; }

        /// <summary>
        /// Gets or sets whether the registration is out of sync between
        /// client (module) and server (service) (default: false).
        /// </summary>
        [JsonProperty(PropertyName = "outOfSync")]
        public bool? OutOfSync { get; set; }

        /// <summary>
        /// Gets or sets whether supervisor is connected on this registration
        /// </summary>
        [JsonProperty(PropertyName = "connected")]
        public bool? Connected { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
        }
    }
}
