// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.IIoT.Opc.Vault.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A X509 certificate revocation list.
    /// </summary>
    public partial class X509CrlApiModel
    {
        /// <summary>
        /// Initializes a new instance of the X509CrlApiModel class.
        /// </summary>
        public X509CrlApiModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the X509CrlApiModel class.
        /// </summary>
        /// <param name="crl">The certificate revocation list.</param>
        /// <param name="issuer">The Issuer name of the revocation
        /// list.</param>
        public X509CrlApiModel(object crl, string issuer = default(string))
        {
            Issuer = issuer;
            Crl = crl;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the Issuer name of the revocation list.
        /// </summary>
        [JsonProperty(PropertyName = "issuer")]
        public string Issuer { get; set; }

        /// <summary>
        /// Gets or sets the certificate revocation list.
        /// </summary>
        [JsonProperty(PropertyName = "crl")]
        public object Crl { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Crl == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Crl");
            }
        }
    }
}
