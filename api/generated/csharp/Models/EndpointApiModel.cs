// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.IIoT.Opc.Registry.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Endpoint model
    /// </summary>
    public partial class EndpointApiModel
    {
        /// <summary>
        /// Initializes a new instance of the EndpointApiModel class.
        /// </summary>
        public EndpointApiModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EndpointApiModel class.
        /// </summary>
        /// <param name="url">Endpoint url to use to connect with</param>
        /// <param name="alternativeUrls">Alternative endpoint urls that can be
        /// used for
        /// accessing and validating the server</param>
        /// <param name="user">User Authentication</param>
        /// <param name="securityMode">Security Mode to use for communication
        /// default to best. Possible values include: 'Best', 'Sign',
        /// 'SignAndEncrypt', 'None'</param>
        /// <param name="securityPolicy">Security policy uri to use for
        /// communication
        /// default to best.</param>
        /// <param name="certificate">Endpoint certificate that was
        /// registered.</param>
        public EndpointApiModel(string url, IList<string> alternativeUrls = default(IList<string>), CredentialApiModel user = default(CredentialApiModel), SecurityMode? securityMode = default(SecurityMode?), string securityPolicy = default(string), byte[] certificate = default(byte[]))
        {
            Url = url;
            AlternativeUrls = alternativeUrls;
            User = user;
            SecurityMode = securityMode;
            SecurityPolicy = securityPolicy;
            Certificate = certificate;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets endpoint url to use to connect with
        /// </summary>
        [JsonProperty(PropertyName = "url")]
        public string Url { get; set; }

        /// <summary>
        /// Gets or sets alternative endpoint urls that can be used for
        /// accessing and validating the server
        /// </summary>
        [JsonProperty(PropertyName = "alternativeUrls")]
        public IList<string> AlternativeUrls { get; set; }

        /// <summary>
        /// Gets or sets user Authentication
        /// </summary>
        [JsonProperty(PropertyName = "user")]
        public CredentialApiModel User { get; set; }

        /// <summary>
        /// Gets or sets security Mode to use for communication
        /// default to best. Possible values include: 'Best', 'Sign',
        /// 'SignAndEncrypt', 'None'
        /// </summary>
        [JsonProperty(PropertyName = "securityMode")]
        public SecurityMode? SecurityMode { get; set; }

        /// <summary>
        /// Gets or sets security policy uri to use for communication
        /// default to best.
        /// </summary>
        [JsonProperty(PropertyName = "securityPolicy")]
        public string SecurityPolicy { get; set; }

        /// <summary>
        /// Gets or sets endpoint certificate that was registered.
        /// </summary>
        [JsonProperty(PropertyName = "certificate")]
        public byte[] Certificate { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Url == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Url");
            }
            if (AlternativeUrls != null)
            {
                if (AlternativeUrls.Count != System.Linq.Enumerable.Count(System.Linq.Enumerable.Distinct(AlternativeUrls)))
                {
                    throw new ValidationException(ValidationRules.UniqueItems, "AlternativeUrls");
                }
            }
        }
    }
}
