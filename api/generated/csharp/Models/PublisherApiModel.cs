// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.IIoT.Opc.Registry.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Publisher registration model
    /// </summary>
    public partial class PublisherApiModel
    {
        /// <summary>
        /// Initializes a new instance of the PublisherApiModel class.
        /// </summary>
        public PublisherApiModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PublisherApiModel class.
        /// </summary>
        /// <param name="id">Publisher id</param>
        /// <param name="siteId">Site of the publisher</param>
        /// <param name="certificate">Publisher public client cert</param>
        /// <param name="logLevel">Possible values include: 'Error',
        /// 'Information', 'Debug', 'Verbose'</param>
        /// <param name="outOfSync">Whether the registration is out of sync
        /// between
        /// client (module) and server (service) (default: false).</param>
        /// <param name="connected">Whether publisher is connected on this
        /// registration</param>
        public PublisherApiModel(string id, string siteId = default(string), byte[] certificate = default(byte[]), TraceLogLevel? logLevel = default(TraceLogLevel?), PublisherConfigApiModel configuration = default(PublisherConfigApiModel), bool? outOfSync = default(bool?), bool? connected = default(bool?))
        {
            Id = id;
            SiteId = siteId;
            Certificate = certificate;
            LogLevel = logLevel;
            Configuration = configuration;
            OutOfSync = outOfSync;
            Connected = connected;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets publisher id
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets site of the publisher
        /// </summary>
        [JsonProperty(PropertyName = "siteId")]
        public string SiteId { get; set; }

        /// <summary>
        /// Gets or sets publisher public client cert
        /// </summary>
        [JsonProperty(PropertyName = "certificate")]
        public byte[] Certificate { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Error', 'Information',
        /// 'Debug', 'Verbose'
        /// </summary>
        [JsonProperty(PropertyName = "logLevel")]
        public TraceLogLevel? LogLevel { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "configuration")]
        public PublisherConfigApiModel Configuration { get; set; }

        /// <summary>
        /// Gets or sets whether the registration is out of sync between
        /// client (module) and server (service) (default: false).
        /// </summary>
        [JsonProperty(PropertyName = "outOfSync")]
        public bool? OutOfSync { get; set; }

        /// <summary>
        /// Gets or sets whether publisher is connected on this registration
        /// </summary>
        [JsonProperty(PropertyName = "connected")]
        public bool? Connected { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
        }
    }
}
