// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.IIoT.Opc.Twin.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Node model
    /// </summary>
    public partial class NodeApiModel
    {
        /// <summary>
        /// Initializes a new instance of the NodeApiModel class.
        /// </summary>
        public NodeApiModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NodeApiModel class.
        /// </summary>
        /// <param name="nodeId">Id of node.
        /// (Mandatory).</param>
        /// <param name="nodeClass">Possible values include: 'Object',
        /// 'Variable', 'Method', 'ObjectType', 'VariableType',
        /// 'ReferenceType', 'DataType', 'View'</param>
        /// <param name="displayName">Display name</param>
        /// <param name="description">Description if any</param>
        /// <param name="browseName">Browse name</param>
        /// <param name="accessRestrictions">Possible values include:
        /// 'SigningRequired', 'EncryptionRequired', 'SessionRequired'</param>
        /// <param name="writeMask">Default write mask for the node
        /// (default: 0)</param>
        /// <param name="userWriteMask">User write mask for the node
        /// (default: 0)</param>
        /// <param name="isAbstract">Whether type is abstract, if type can
        /// be abstract.  Null if not type node.
        /// (default: false)</param>
        /// <param name="containsNoLoops">Whether a view contains loops. Null
        /// if
        /// not a view.</param>
        /// <param name="eventNotifier">Possible values include:
        /// 'SubscribeToEvents', 'HistoryRead', 'HistoryWrite'</param>
        /// <param name="executable">If method node class, whether method can
        /// be called.</param>
        /// <param name="userExecutable">If method node class, whether method
        /// can
        /// be called by current user.
        /// (default: false if not executable)</param>
        /// <param name="dataTypeDefinition">Data type definition in case node
        /// is a
        /// data type node and definition is available,
        /// otherwise null.</param>
        /// <param name="accessLevel">Possible values include: 'CurrentRead',
        /// 'CurrentWrite', 'HistoryRead', 'HistoryWrite', 'SemanticChange',
        /// 'StatusWrite', 'TimestampWrite', 'NonatomicRead', 'NonatomicWrite',
        /// 'WriteFullArrayOnly'</param>
        /// <param name="userAccessLevel">Possible values include:
        /// 'CurrentRead', 'CurrentWrite', 'HistoryRead', 'HistoryWrite',
        /// 'SemanticChange', 'StatusWrite', 'TimestampWrite', 'NonatomicRead',
        /// 'NonatomicWrite', 'WriteFullArrayOnly'</param>
        /// <param name="dataType">If variable the datatype of the variable.
        /// (default: null)</param>
        /// <param name="valueRank">Possible values include:
        /// 'OneOrMoreDimensions', 'OneDimension', 'TwoDimensions',
        /// 'ScalarOrOneDimension', 'Any', 'Scalar'</param>
        /// <param name="arrayDimensions">Array dimensions of variable or
        /// variable type.
        /// (default: empty array)</param>
        /// <param name="historizing">Whether the value of a variable is
        /// historizing.
        /// (default: false)</param>
        /// <param name="minimumSamplingInterval">Minimum sampling interval for
        /// the variable
        /// value, otherwise null if not a variable node.
        /// (default: null)</param>
        /// <param name="value">Value of variable or default value of the
        /// subtyped variable in case node is a variable
        /// type, otherwise null.</param>
        /// <param name="inverseName">Inverse name of the reference if the node
        /// is
        /// a reference type, otherwise null.</param>
        /// <param name="symmetric">Whether the reference is symmetric in case
        /// the node is a reference type, otherwise
        /// null.</param>
        /// <param name="rolePermissions">Role permissions</param>
        /// <param name="userRolePermissions">User Role permissions</param>
        /// <param name="typeDefinitionId">Optional type definition of the
        /// node</param>
        /// <param name="children">Whether node has children which are defined
        /// as
        /// any forward hierarchical references.
        /// (default: unknown)</param>
        public NodeApiModel(string nodeId, NodeClass? nodeClass = default(NodeClass?), string displayName = default(string), string description = default(string), string browseName = default(string), NodeAccessRestrictions? accessRestrictions = default(NodeAccessRestrictions?), int? writeMask = default(int?), int? userWriteMask = default(int?), bool? isAbstract = default(bool?), bool? containsNoLoops = default(bool?), NodeEventNotifier? eventNotifier = default(NodeEventNotifier?), bool? executable = default(bool?), bool? userExecutable = default(bool?), object dataTypeDefinition = default(object), NodeAccessLevel? accessLevel = default(NodeAccessLevel?), NodeAccessLevel? userAccessLevel = default(NodeAccessLevel?), string dataType = default(string), NodeValueRank? valueRank = default(NodeValueRank?), IList<int?> arrayDimensions = default(IList<int?>), bool? historizing = default(bool?), double? minimumSamplingInterval = default(double?), object value = default(object), string inverseName = default(string), bool? symmetric = default(bool?), IList<RolePermissionApiModel> rolePermissions = default(IList<RolePermissionApiModel>), IList<RolePermissionApiModel> userRolePermissions = default(IList<RolePermissionApiModel>), string typeDefinitionId = default(string), bool? children = default(bool?))
        {
            NodeClass = nodeClass;
            DisplayName = displayName;
            NodeId = nodeId;
            Description = description;
            BrowseName = browseName;
            AccessRestrictions = accessRestrictions;
            WriteMask = writeMask;
            UserWriteMask = userWriteMask;
            IsAbstract = isAbstract;
            ContainsNoLoops = containsNoLoops;
            EventNotifier = eventNotifier;
            Executable = executable;
            UserExecutable = userExecutable;
            DataTypeDefinition = dataTypeDefinition;
            AccessLevel = accessLevel;
            UserAccessLevel = userAccessLevel;
            DataType = dataType;
            ValueRank = valueRank;
            ArrayDimensions = arrayDimensions;
            Historizing = historizing;
            MinimumSamplingInterval = minimumSamplingInterval;
            Value = value;
            InverseName = inverseName;
            Symmetric = symmetric;
            RolePermissions = rolePermissions;
            UserRolePermissions = userRolePermissions;
            TypeDefinitionId = typeDefinitionId;
            Children = children;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'Object', 'Variable',
        /// 'Method', 'ObjectType', 'VariableType', 'ReferenceType',
        /// 'DataType', 'View'
        /// </summary>
        [JsonProperty(PropertyName = "nodeClass")]
        public NodeClass? NodeClass { get; set; }

        /// <summary>
        /// Gets or sets display name
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or sets id of node.
        /// (Mandatory).
        /// </summary>
        [JsonProperty(PropertyName = "nodeId")]
        public string NodeId { get; set; }

        /// <summary>
        /// Gets or sets description if any
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets browse name
        /// </summary>
        [JsonProperty(PropertyName = "browseName")]
        public string BrowseName { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'SigningRequired',
        /// 'EncryptionRequired', 'SessionRequired'
        /// </summary>
        [JsonProperty(PropertyName = "accessRestrictions")]
        public NodeAccessRestrictions? AccessRestrictions { get; set; }

        /// <summary>
        /// Gets or sets default write mask for the node
        /// (default: 0)
        /// </summary>
        [JsonProperty(PropertyName = "writeMask")]
        public int? WriteMask { get; set; }

        /// <summary>
        /// Gets or sets user write mask for the node
        /// (default: 0)
        /// </summary>
        [JsonProperty(PropertyName = "userWriteMask")]
        public int? UserWriteMask { get; set; }

        /// <summary>
        /// Gets or sets whether type is abstract, if type can
        /// be abstract.  Null if not type node.
        /// (default: false)
        /// </summary>
        [JsonProperty(PropertyName = "isAbstract")]
        public bool? IsAbstract { get; set; }

        /// <summary>
        /// Gets or sets whether a view contains loops. Null if
        /// not a view.
        /// </summary>
        [JsonProperty(PropertyName = "containsNoLoops")]
        public bool? ContainsNoLoops { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'SubscribeToEvents',
        /// 'HistoryRead', 'HistoryWrite'
        /// </summary>
        [JsonProperty(PropertyName = "eventNotifier")]
        public NodeEventNotifier? EventNotifier { get; set; }

        /// <summary>
        /// Gets or sets if method node class, whether method can
        /// be called.
        /// </summary>
        [JsonProperty(PropertyName = "executable")]
        public bool? Executable { get; set; }

        /// <summary>
        /// Gets or sets if method node class, whether method can
        /// be called by current user.
        /// (default: false if not executable)
        /// </summary>
        [JsonProperty(PropertyName = "userExecutable")]
        public bool? UserExecutable { get; set; }

        /// <summary>
        /// Gets or sets data type definition in case node is a
        /// data type node and definition is available,
        /// otherwise null.
        /// </summary>
        [JsonProperty(PropertyName = "dataTypeDefinition")]
        public object DataTypeDefinition { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'CurrentRead',
        /// 'CurrentWrite', 'HistoryRead', 'HistoryWrite', 'SemanticChange',
        /// 'StatusWrite', 'TimestampWrite', 'NonatomicRead', 'NonatomicWrite',
        /// 'WriteFullArrayOnly'
        /// </summary>
        [JsonProperty(PropertyName = "accessLevel")]
        public NodeAccessLevel? AccessLevel { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'CurrentRead',
        /// 'CurrentWrite', 'HistoryRead', 'HistoryWrite', 'SemanticChange',
        /// 'StatusWrite', 'TimestampWrite', 'NonatomicRead', 'NonatomicWrite',
        /// 'WriteFullArrayOnly'
        /// </summary>
        [JsonProperty(PropertyName = "userAccessLevel")]
        public NodeAccessLevel? UserAccessLevel { get; set; }

        /// <summary>
        /// Gets or sets if variable the datatype of the variable.
        /// (default: null)
        /// </summary>
        [JsonProperty(PropertyName = "dataType")]
        public string DataType { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'OneOrMoreDimensions',
        /// 'OneDimension', 'TwoDimensions', 'ScalarOrOneDimension', 'Any',
        /// 'Scalar'
        /// </summary>
        [JsonProperty(PropertyName = "valueRank")]
        public NodeValueRank? ValueRank { get; set; }

        /// <summary>
        /// Gets or sets array dimensions of variable or variable type.
        /// (default: empty array)
        /// </summary>
        [JsonProperty(PropertyName = "arrayDimensions")]
        public IList<int?> ArrayDimensions { get; set; }

        /// <summary>
        /// Gets or sets whether the value of a variable is historizing.
        /// (default: false)
        /// </summary>
        [JsonProperty(PropertyName = "historizing")]
        public bool? Historizing { get; set; }

        /// <summary>
        /// Gets or sets minimum sampling interval for the variable
        /// value, otherwise null if not a variable node.
        /// (default: null)
        /// </summary>
        [JsonProperty(PropertyName = "minimumSamplingInterval")]
        public double? MinimumSamplingInterval { get; set; }

        /// <summary>
        /// Gets or sets value of variable or default value of the
        /// subtyped variable in case node is a variable
        /// type, otherwise null.
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public object Value { get; set; }

        /// <summary>
        /// Gets or sets inverse name of the reference if the node is
        /// a reference type, otherwise null.
        /// </summary>
        [JsonProperty(PropertyName = "inverseName")]
        public string InverseName { get; set; }

        /// <summary>
        /// Gets or sets whether the reference is symmetric in case
        /// the node is a reference type, otherwise
        /// null.
        /// </summary>
        [JsonProperty(PropertyName = "symmetric")]
        public bool? Symmetric { get; set; }

        /// <summary>
        /// Gets or sets role permissions
        /// </summary>
        [JsonProperty(PropertyName = "rolePermissions")]
        public IList<RolePermissionApiModel> RolePermissions { get; set; }

        /// <summary>
        /// Gets or sets user Role permissions
        /// </summary>
        [JsonProperty(PropertyName = "userRolePermissions")]
        public IList<RolePermissionApiModel> UserRolePermissions { get; set; }

        /// <summary>
        /// Gets or sets optional type definition of the node
        /// </summary>
        [JsonProperty(PropertyName = "typeDefinitionId")]
        public string TypeDefinitionId { get; set; }

        /// <summary>
        /// Gets or sets whether node has children which are defined as
        /// any forward hierarchical references.
        /// (default: unknown)
        /// </summary>
        [JsonProperty(PropertyName = "children")]
        public bool? Children { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (NodeId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "NodeId");
            }
            if (RolePermissions != null)
            {
                foreach (var element in RolePermissions)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (UserRolePermissions != null)
            {
                foreach (var element1 in UserRolePermissions)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
