// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.IIoT.Opc.Twin.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Attribute and value to write to it
    /// </summary>
    public partial class AttributeWriteRequestApiModel
    {
        /// <summary>
        /// Initializes a new instance of the AttributeWriteRequestApiModel
        /// class.
        /// </summary>
        public AttributeWriteRequestApiModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AttributeWriteRequestApiModel
        /// class.
        /// </summary>
        /// <param name="nodeId">Node to write to (mandatory)</param>
        /// <param name="attribute">Possible values include: 'NodeClass',
        /// 'BrowseName', 'DisplayName', 'Description', 'WriteMask',
        /// 'UserWriteMask', 'IsAbstract', 'Symmetric', 'InverseName',
        /// 'ContainsNoLoops', 'EventNotifier', 'Value', 'DataType',
        /// 'ValueRank', 'ArrayDimensions', 'AccessLevel', 'UserAccessLevel',
        /// 'MinimumSamplingInterval', 'Historizing', 'Executable',
        /// 'UserExecutable', 'DataTypeDefinition', 'RolePermissions',
        /// 'UserRolePermissions', 'AccessRestrictions'</param>
        /// <param name="value">Value to write (mandatory)</param>
        public AttributeWriteRequestApiModel(string nodeId, NodeAttribute attribute, object value)
        {
            NodeId = nodeId;
            Attribute = attribute;
            Value = value;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets node to write to (mandatory)
        /// </summary>
        [JsonProperty(PropertyName = "nodeId")]
        public string NodeId { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'NodeClass', 'BrowseName',
        /// 'DisplayName', 'Description', 'WriteMask', 'UserWriteMask',
        /// 'IsAbstract', 'Symmetric', 'InverseName', 'ContainsNoLoops',
        /// 'EventNotifier', 'Value', 'DataType', 'ValueRank',
        /// 'ArrayDimensions', 'AccessLevel', 'UserAccessLevel',
        /// 'MinimumSamplingInterval', 'Historizing', 'Executable',
        /// 'UserExecutable', 'DataTypeDefinition', 'RolePermissions',
        /// 'UserRolePermissions', 'AccessRestrictions'
        /// </summary>
        [JsonProperty(PropertyName = "attribute")]
        public NodeAttribute Attribute { get; set; }

        /// <summary>
        /// Gets or sets value to write (mandatory)
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public object Value { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (NodeId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "NodeId");
            }
            if (Value == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Value");
            }
        }
    }
}
