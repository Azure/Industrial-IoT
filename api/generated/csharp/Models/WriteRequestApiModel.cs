// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.IIoT.Opc.Twin.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Request node attribute write
    /// </summary>
    public partial class WriteRequestApiModel
    {
        /// <summary>
        /// Initializes a new instance of the WriteRequestApiModel class.
        /// </summary>
        public WriteRequestApiModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the WriteRequestApiModel class.
        /// </summary>
        /// <param name="attributes">Attributes to update</param>
        public WriteRequestApiModel(IList<AttributeWriteRequestApiModel> attributes, RequestHeaderApiModel header = default(RequestHeaderApiModel))
        {
            Attributes = attributes;
            Header = header;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets attributes to update
        /// </summary>
        [JsonProperty(PropertyName = "attributes")]
        public IList<AttributeWriteRequestApiModel> Attributes { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "header")]
        public RequestHeaderApiModel Header { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Attributes == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Attributes");
            }
            if (Attributes != null)
            {
                foreach (var element in Attributes)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
