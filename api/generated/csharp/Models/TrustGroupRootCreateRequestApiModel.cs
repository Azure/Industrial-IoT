// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.IIoT.Opc.Vault.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Trust group root registration model
    /// </summary>
    public partial class TrustGroupRootCreateRequestApiModel
    {
        /// <summary>
        /// Initializes a new instance of the
        /// TrustGroupRootCreateRequestApiModel class.
        /// </summary>
        public TrustGroupRootCreateRequestApiModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// TrustGroupRootCreateRequestApiModel class.
        /// </summary>
        /// <param name="name">The new name of the trust group root</param>
        /// <param name="type">Possible values include:
        /// 'ApplicationInstanceCertificate', 'HttpsCertificate',
        /// 'UserCredentialCertificate'</param>
        /// <param name="subjectName">The subject name of the group as
        /// distinguished name.</param>
        /// <param name="lifetime">The lifetime of the trust group root
        /// certificate.</param>
        /// <param name="keySize">The certificate key size in bits.</param>
        /// <param name="signatureAlgorithm">Possible values include: 'Rsa256',
        /// 'Rsa384', 'Rsa512', 'Rsa256Pss', 'Rsa384Pss', 'Rsa512Pss'</param>
        /// <param name="issuedLifetime">The issued certificate
        /// lifetime.</param>
        /// <param name="issuedKeySize">The issued certificate key size in
        /// bits.</param>
        /// <param name="issuedSignatureAlgorithm">Possible values include:
        /// 'Rsa256', 'Rsa384', 'Rsa512', 'Rsa256Pss', 'Rsa384Pss',
        /// 'Rsa512Pss'</param>
        public TrustGroupRootCreateRequestApiModel(string name = default(string), TrustGroupType? type = default(TrustGroupType?), string subjectName = default(string), string lifetime = default(string), int? keySize = default(int?), SignatureAlgorithm? signatureAlgorithm = default(SignatureAlgorithm?), string issuedLifetime = default(string), int? issuedKeySize = default(int?), SignatureAlgorithm? issuedSignatureAlgorithm = default(SignatureAlgorithm?))
        {
            Name = name;
            Type = type;
            SubjectName = subjectName;
            Lifetime = lifetime;
            KeySize = keySize;
            SignatureAlgorithm = signatureAlgorithm;
            IssuedLifetime = issuedLifetime;
            IssuedKeySize = issuedKeySize;
            IssuedSignatureAlgorithm = issuedSignatureAlgorithm;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the new name of the trust group root
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets possible values include:
        /// 'ApplicationInstanceCertificate', 'HttpsCertificate',
        /// 'UserCredentialCertificate'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public TrustGroupType? Type { get; set; }

        /// <summary>
        /// Gets or sets the subject name of the group as distinguished name.
        /// </summary>
        [JsonProperty(PropertyName = "subjectName")]
        public string SubjectName { get; set; }

        /// <summary>
        /// Gets or sets the lifetime of the trust group root certificate.
        /// </summary>
        [JsonProperty(PropertyName = "lifetime")]
        public string Lifetime { get; set; }

        /// <summary>
        /// Gets or sets the certificate key size in bits.
        /// </summary>
        [JsonProperty(PropertyName = "keySize")]
        public int? KeySize { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Rsa256', 'Rsa384', 'Rsa512',
        /// 'Rsa256Pss', 'Rsa384Pss', 'Rsa512Pss'
        /// </summary>
        [JsonProperty(PropertyName = "signatureAlgorithm")]
        public SignatureAlgorithm? SignatureAlgorithm { get; set; }

        /// <summary>
        /// Gets or sets the issued certificate lifetime.
        /// </summary>
        [JsonProperty(PropertyName = "issuedLifetime")]
        public string IssuedLifetime { get; set; }

        /// <summary>
        /// Gets or sets the issued certificate key size in bits.
        /// </summary>
        [JsonProperty(PropertyName = "issuedKeySize")]
        public int? IssuedKeySize { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Rsa256', 'Rsa384', 'Rsa512',
        /// 'Rsa256Pss', 'Rsa384Pss', 'Rsa512Pss'
        /// </summary>
        [JsonProperty(PropertyName = "issuedSignatureAlgorithm")]
        public SignatureAlgorithm? IssuedSignatureAlgorithm { get; set; }

    }
}
