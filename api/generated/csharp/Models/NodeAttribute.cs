// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.IIoT.Opc.History.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for NodeAttribute.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum NodeAttribute
    {
        [EnumMember(Value = "NodeClass")]
        NodeClass,
        [EnumMember(Value = "BrowseName")]
        BrowseName,
        [EnumMember(Value = "DisplayName")]
        DisplayName,
        [EnumMember(Value = "Description")]
        Description,
        [EnumMember(Value = "WriteMask")]
        WriteMask,
        [EnumMember(Value = "UserWriteMask")]
        UserWriteMask,
        [EnumMember(Value = "IsAbstract")]
        IsAbstract,
        [EnumMember(Value = "Symmetric")]
        Symmetric,
        [EnumMember(Value = "InverseName")]
        InverseName,
        [EnumMember(Value = "ContainsNoLoops")]
        ContainsNoLoops,
        [EnumMember(Value = "EventNotifier")]
        EventNotifier,
        [EnumMember(Value = "Value")]
        Value,
        [EnumMember(Value = "DataType")]
        DataType,
        [EnumMember(Value = "ValueRank")]
        ValueRank,
        [EnumMember(Value = "ArrayDimensions")]
        ArrayDimensions,
        [EnumMember(Value = "AccessLevel")]
        AccessLevel,
        [EnumMember(Value = "UserAccessLevel")]
        UserAccessLevel,
        [EnumMember(Value = "MinimumSamplingInterval")]
        MinimumSamplingInterval,
        [EnumMember(Value = "Historizing")]
        Historizing,
        [EnumMember(Value = "Executable")]
        Executable,
        [EnumMember(Value = "UserExecutable")]
        UserExecutable,
        [EnumMember(Value = "DataTypeDefinition")]
        DataTypeDefinition,
        [EnumMember(Value = "RolePermissions")]
        RolePermissions,
        [EnumMember(Value = "UserRolePermissions")]
        UserRolePermissions,
        [EnumMember(Value = "AccessRestrictions")]
        AccessRestrictions
    }
    internal static class NodeAttributeEnumExtension
    {
        internal static string ToSerializedValue(this NodeAttribute? value)
        {
            return value == null ? null : ((NodeAttribute)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this NodeAttribute value)
        {
            switch( value )
            {
                case NodeAttribute.NodeClass:
                    return "NodeClass";
                case NodeAttribute.BrowseName:
                    return "BrowseName";
                case NodeAttribute.DisplayName:
                    return "DisplayName";
                case NodeAttribute.Description:
                    return "Description";
                case NodeAttribute.WriteMask:
                    return "WriteMask";
                case NodeAttribute.UserWriteMask:
                    return "UserWriteMask";
                case NodeAttribute.IsAbstract:
                    return "IsAbstract";
                case NodeAttribute.Symmetric:
                    return "Symmetric";
                case NodeAttribute.InverseName:
                    return "InverseName";
                case NodeAttribute.ContainsNoLoops:
                    return "ContainsNoLoops";
                case NodeAttribute.EventNotifier:
                    return "EventNotifier";
                case NodeAttribute.Value:
                    return "Value";
                case NodeAttribute.DataType:
                    return "DataType";
                case NodeAttribute.ValueRank:
                    return "ValueRank";
                case NodeAttribute.ArrayDimensions:
                    return "ArrayDimensions";
                case NodeAttribute.AccessLevel:
                    return "AccessLevel";
                case NodeAttribute.UserAccessLevel:
                    return "UserAccessLevel";
                case NodeAttribute.MinimumSamplingInterval:
                    return "MinimumSamplingInterval";
                case NodeAttribute.Historizing:
                    return "Historizing";
                case NodeAttribute.Executable:
                    return "Executable";
                case NodeAttribute.UserExecutable:
                    return "UserExecutable";
                case NodeAttribute.DataTypeDefinition:
                    return "DataTypeDefinition";
                case NodeAttribute.RolePermissions:
                    return "RolePermissions";
                case NodeAttribute.UserRolePermissions:
                    return "UserRolePermissions";
                case NodeAttribute.AccessRestrictions:
                    return "AccessRestrictions";
            }
            return null;
        }

        internal static NodeAttribute? ParseNodeAttribute(this string value)
        {
            switch( value )
            {
                case "NodeClass":
                    return NodeAttribute.NodeClass;
                case "BrowseName":
                    return NodeAttribute.BrowseName;
                case "DisplayName":
                    return NodeAttribute.DisplayName;
                case "Description":
                    return NodeAttribute.Description;
                case "WriteMask":
                    return NodeAttribute.WriteMask;
                case "UserWriteMask":
                    return NodeAttribute.UserWriteMask;
                case "IsAbstract":
                    return NodeAttribute.IsAbstract;
                case "Symmetric":
                    return NodeAttribute.Symmetric;
                case "InverseName":
                    return NodeAttribute.InverseName;
                case "ContainsNoLoops":
                    return NodeAttribute.ContainsNoLoops;
                case "EventNotifier":
                    return NodeAttribute.EventNotifier;
                case "Value":
                    return NodeAttribute.Value;
                case "DataType":
                    return NodeAttribute.DataType;
                case "ValueRank":
                    return NodeAttribute.ValueRank;
                case "ArrayDimensions":
                    return NodeAttribute.ArrayDimensions;
                case "AccessLevel":
                    return NodeAttribute.AccessLevel;
                case "UserAccessLevel":
                    return NodeAttribute.UserAccessLevel;
                case "MinimumSamplingInterval":
                    return NodeAttribute.MinimumSamplingInterval;
                case "Historizing":
                    return NodeAttribute.Historizing;
                case "Executable":
                    return NodeAttribute.Executable;
                case "UserExecutable":
                    return NodeAttribute.UserExecutable;
                case "DataTypeDefinition":
                    return NodeAttribute.DataTypeDefinition;
                case "RolePermissions":
                    return NodeAttribute.RolePermissions;
                case "UserRolePermissions":
                    return NodeAttribute.UserRolePermissions;
                case "AccessRestrictions":
                    return NodeAttribute.AccessRestrictions;
            }
            return null;
        }
    }
}
