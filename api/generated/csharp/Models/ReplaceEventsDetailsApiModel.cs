// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.IIoT.Opc.History.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Replace historic events
    /// </summary>
    public partial class ReplaceEventsDetailsApiModel
    {
        /// <summary>
        /// Initializes a new instance of the ReplaceEventsDetailsApiModel
        /// class.
        /// </summary>
        public ReplaceEventsDetailsApiModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ReplaceEventsDetailsApiModel
        /// class.
        /// </summary>
        /// <param name="events">The events to replace</param>
        /// <param name="filter">The filter to use to select the events</param>
        public ReplaceEventsDetailsApiModel(IList<HistoricEventApiModel> events, object filter = default(object))
        {
            Filter = filter;
            Events = events;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the filter to use to select the events
        /// </summary>
        [JsonProperty(PropertyName = "filter")]
        public object Filter { get; set; }

        /// <summary>
        /// Gets or sets the events to replace
        /// </summary>
        [JsonProperty(PropertyName = "events")]
        public IList<HistoricEventApiModel> Events { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Events == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Events");
            }
        }
    }
}
