// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.IIoT.Opc.Twin.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Value write request model
    /// </summary>
    public partial class ValueWriteRequestApiModel
    {
        /// <summary>
        /// Initializes a new instance of the ValueWriteRequestApiModel class.
        /// </summary>
        public ValueWriteRequestApiModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ValueWriteRequestApiModel class.
        /// </summary>
        /// <param name="value">Value to write. The system tries to convert
        /// the value according to the data type value,
        /// e.g. convert comma seperated value strings
        /// into arrays.  (Mandatory)</param>
        /// <param name="nodeId">Node id to to write value to.</param>
        /// <param name="browsePath">An optional path from NodeId instance to
        /// the actual node.</param>
        /// <param name="dataType">A built in datatype for the value. This can
        /// be a data type from browse, or a built in
        /// type.
        /// (default: best effort)</param>
        /// <param name="indexRange">Index range to write</param>
        /// <param name="header">Optional request header</param>
        public ValueWriteRequestApiModel(object value, string nodeId = default(string), IList<string> browsePath = default(IList<string>), string dataType = default(string), string indexRange = default(string), RequestHeaderApiModel header = default(RequestHeaderApiModel))
        {
            NodeId = nodeId;
            BrowsePath = browsePath;
            Value = value;
            DataType = dataType;
            IndexRange = indexRange;
            Header = header;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets node id to to write value to.
        /// </summary>
        [JsonProperty(PropertyName = "nodeId")]
        public string NodeId { get; set; }

        /// <summary>
        /// Gets or sets an optional path from NodeId instance to
        /// the actual node.
        /// </summary>
        [JsonProperty(PropertyName = "browsePath")]
        public IList<string> BrowsePath { get; set; }

        /// <summary>
        /// Gets or sets value to write. The system tries to convert
        /// the value according to the data type value,
        /// e.g. convert comma seperated value strings
        /// into arrays.  (Mandatory)
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public object Value { get; set; }

        /// <summary>
        /// Gets or sets a built in datatype for the value. This can
        /// be a data type from browse, or a built in
        /// type.
        /// (default: best effort)
        /// </summary>
        [JsonProperty(PropertyName = "dataType")]
        public string DataType { get; set; }

        /// <summary>
        /// Gets or sets index range to write
        /// </summary>
        [JsonProperty(PropertyName = "indexRange")]
        public string IndexRange { get; set; }

        /// <summary>
        /// Gets or sets optional request header
        /// </summary>
        [JsonProperty(PropertyName = "header")]
        public RequestHeaderApiModel Header { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Value == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Value");
            }
        }
    }
}
