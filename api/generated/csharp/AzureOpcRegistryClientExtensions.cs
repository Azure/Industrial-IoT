// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.IIoT.Opc.Registry
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for AzureOpcRegistryClient.
    /// </summary>
    public static partial class AzureOpcRegistryClientExtensions
    {
            /// <summary>
            /// Register new server
            /// </summary>
            /// <remarks>
            /// Registers a server solely using a discovery url. Requires that the
            /// onboarding agent service is running and the server can be located by a
            /// supervisor in its network using the discovery url.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Server registration request
            /// </param>
            public static void RegisterServer(this IAzureOpcRegistryClient operations, ServerRegistrationRequestApiModel body)
            {
                operations.RegisterServerAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Register new server
            /// </summary>
            /// <remarks>
            /// Registers a server solely using a discovery url. Requires that the
            /// onboarding agent service is running and the server can be located by a
            /// supervisor in its network using the discovery url.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Server registration request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RegisterServerAsync(this IAzureOpcRegistryClient operations, ServerRegistrationRequestApiModel body, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RegisterServerWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create new application
            /// </summary>
            /// <remarks>
            /// The application is registered using the provided information, but it is not
            /// associated with a supervisor. This is useful for when you need to register
            /// clients or you want to register a server that is located in a network not
            /// reachable through a Twin module.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Application registration request
            /// </param>
            public static ApplicationRegistrationResponseApiModel CreateApplication(this IAzureOpcRegistryClient operations, ApplicationRegistrationRequestApiModel body)
            {
                return operations.CreateApplicationAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create new application
            /// </summary>
            /// <remarks>
            /// The application is registered using the provided information, but it is not
            /// associated with a supervisor. This is useful for when you need to register
            /// clients or you want to register a server that is located in a network not
            /// reachable through a Twin module.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Application registration request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApplicationRegistrationResponseApiModel> CreateApplicationAsync(this IAzureOpcRegistryClient operations, ApplicationRegistrationRequestApiModel body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateApplicationWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Purge applications
            /// </summary>
            /// <remarks>
            /// Purges all applications that have not been seen for a specified amount of
            /// time.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='notSeenFor'>
            /// A duration in milliseconds
            /// </param>
            public static void DeleteAllDisabledApplications(this IAzureOpcRegistryClient operations, string notSeenFor = default(string))
            {
                operations.DeleteAllDisabledApplicationsAsync(notSeenFor).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Purge applications
            /// </summary>
            /// <remarks>
            /// Purges all applications that have not been seen for a specified amount of
            /// time.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='notSeenFor'>
            /// A duration in milliseconds
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAllDisabledApplicationsAsync(this IAzureOpcRegistryClient operations, string notSeenFor = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteAllDisabledApplicationsWithHttpMessagesAsync(notSeenFor, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get list of applications
            /// </summary>
            /// <remarks>
            /// Get all registered applications in paged form. The returned model can
            /// contain a continuation token if more results are available. Call this
            /// operation again using the token to retrieve more results.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continuationToken'>
            /// Optional Continuation token
            /// </param>
            /// <param name='pageSize'>
            /// Optional number of results to return
            /// </param>
            public static ApplicationInfoListApiModel GetListOfApplications(this IAzureOpcRegistryClient operations, string continuationToken = default(string), int? pageSize = default(int?))
            {
                return operations.GetListOfApplicationsAsync(continuationToken, pageSize).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get list of applications
            /// </summary>
            /// <remarks>
            /// Get all registered applications in paged form. The returned model can
            /// contain a continuation token if more results are available. Call this
            /// operation again using the token to retrieve more results.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continuationToken'>
            /// Optional Continuation token
            /// </param>
            /// <param name='pageSize'>
            /// Optional number of results to return
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApplicationInfoListApiModel> GetListOfApplicationsAsync(this IAzureOpcRegistryClient operations, string continuationToken = default(string), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetListOfApplicationsWithHttpMessagesAsync(continuationToken, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Disable an enabled application.
            /// </summary>
            /// <remarks>
            /// A manager can disable an application.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationId'>
            /// The application id
            /// </param>
            public static void DisableApplication(this IAzureOpcRegistryClient operations, string applicationId)
            {
                operations.DisableApplicationAsync(applicationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Disable an enabled application.
            /// </summary>
            /// <remarks>
            /// A manager can disable an application.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationId'>
            /// The application id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DisableApplicationAsync(this IAzureOpcRegistryClient operations, string applicationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DisableApplicationWithHttpMessagesAsync(applicationId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Re-enable a disabled application.
            /// </summary>
            /// <remarks>
            /// A manager can enable an application.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationId'>
            /// The application id
            /// </param>
            public static void EnableApplication(this IAzureOpcRegistryClient operations, string applicationId)
            {
                operations.EnableApplicationAsync(applicationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Re-enable a disabled application.
            /// </summary>
            /// <remarks>
            /// A manager can enable an application.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationId'>
            /// The application id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task EnableApplicationAsync(this IAzureOpcRegistryClient operations, string applicationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.EnableApplicationWithHttpMessagesAsync(applicationId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Discover servers
            /// </summary>
            /// <remarks>
            /// Registers servers by running a discovery scan in a supervisor's network.
            /// Requires that the onboarding agent service is running.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Discovery request
            /// </param>
            public static void DiscoverServer(this IAzureOpcRegistryClient operations, DiscoveryRequestApiModel body)
            {
                operations.DiscoverServerAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Discover servers
            /// </summary>
            /// <remarks>
            /// Registers servers by running a discovery scan in a supervisor's network.
            /// Requires that the onboarding agent service is running.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Discovery request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DiscoverServerAsync(this IAzureOpcRegistryClient operations, DiscoveryRequestApiModel body, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DiscoverServerWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Cancel discovery
            /// </summary>
            /// <remarks>
            /// Cancels a discovery request using the request identifier.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestId'>
            /// Discovery request
            /// </param>
            public static void Cancel(this IAzureOpcRegistryClient operations, string requestId)
            {
                operations.CancelAsync(requestId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancel discovery
            /// </summary>
            /// <remarks>
            /// Cancels a discovery request using the request identifier.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestId'>
            /// Discovery request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CancelAsync(this IAzureOpcRegistryClient operations, string requestId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CancelWithHttpMessagesAsync(requestId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get application registration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationId'>
            /// Application id for the server
            /// </param>
            public static ApplicationRegistrationApiModel GetApplicationRegistration(this IAzureOpcRegistryClient operations, string applicationId)
            {
                return operations.GetApplicationRegistrationAsync(applicationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get application registration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationId'>
            /// Application id for the server
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApplicationRegistrationApiModel> GetApplicationRegistrationAsync(this IAzureOpcRegistryClient operations, string applicationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetApplicationRegistrationWithHttpMessagesAsync(applicationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update application registration
            /// </summary>
            /// <remarks>
            /// The application information is updated with new properties. Note that this
            /// information might be overridden if the application is re-discovered during
            /// a discovery run (recurring or one-time).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationId'>
            /// The identifier of the application
            /// </param>
            /// <param name='body'>
            /// Application update request
            /// </param>
            public static void UpdateApplicationRegistration(this IAzureOpcRegistryClient operations, string applicationId, ApplicationRegistrationUpdateApiModel body)
            {
                operations.UpdateApplicationRegistrationAsync(applicationId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update application registration
            /// </summary>
            /// <remarks>
            /// The application information is updated with new properties. Note that this
            /// information might be overridden if the application is re-discovered during
            /// a discovery run (recurring or one-time).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationId'>
            /// The identifier of the application
            /// </param>
            /// <param name='body'>
            /// Application update request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateApplicationRegistrationAsync(this IAzureOpcRegistryClient operations, string applicationId, ApplicationRegistrationUpdateApiModel body, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateApplicationRegistrationWithHttpMessagesAsync(applicationId, body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Unregister application
            /// </summary>
            /// <remarks>
            /// Unregisters and deletes application and all its associated endpoints.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationId'>
            /// The identifier of the application
            /// </param>
            public static void DeleteApplication(this IAzureOpcRegistryClient operations, string applicationId)
            {
                operations.DeleteApplicationAsync(applicationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Unregister application
            /// </summary>
            /// <remarks>
            /// Unregisters and deletes application and all its associated endpoints.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationId'>
            /// The identifier of the application
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteApplicationAsync(this IAzureOpcRegistryClient operations, string applicationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteApplicationWithHttpMessagesAsync(applicationId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get list of sites
            /// </summary>
            /// <remarks>
            /// List all sites applications are registered in.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continuationToken'>
            /// Optional Continuation token
            /// </param>
            /// <param name='pageSize'>
            /// Optional number of results to return
            /// </param>
            public static ApplicationSiteListApiModel GetListOfSites(this IAzureOpcRegistryClient operations, string continuationToken = default(string), int? pageSize = default(int?))
            {
                return operations.GetListOfSitesAsync(continuationToken, pageSize).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get list of sites
            /// </summary>
            /// <remarks>
            /// List all sites applications are registered in.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continuationToken'>
            /// Optional Continuation token
            /// </param>
            /// <param name='pageSize'>
            /// Optional number of results to return
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApplicationSiteListApiModel> GetListOfSitesAsync(this IAzureOpcRegistryClient operations, string continuationToken = default(string), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetListOfSitesWithHttpMessagesAsync(continuationToken, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Query applications
            /// </summary>
            /// <remarks>
            /// List applications that match a query model. The returned model can contain
            /// a continuation token if more results are available. Call the
            /// GetListOfApplications operation using the token to retrieve more results.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Application query
            /// </param>
            /// <param name='pageSize'>
            /// Optional number of results to return
            /// </param>
            public static ApplicationInfoListApiModel QueryApplications(this IAzureOpcRegistryClient operations, ApplicationRegistrationQueryApiModel body, int? pageSize = default(int?))
            {
                return operations.QueryApplicationsAsync(body, pageSize).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query applications
            /// </summary>
            /// <remarks>
            /// List applications that match a query model. The returned model can contain
            /// a continuation token if more results are available. Call the
            /// GetListOfApplications operation using the token to retrieve more results.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Application query
            /// </param>
            /// <param name='pageSize'>
            /// Optional number of results to return
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApplicationInfoListApiModel> QueryApplicationsAsync(this IAzureOpcRegistryClient operations, ApplicationRegistrationQueryApiModel body, int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryApplicationsWithHttpMessagesAsync(body, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get filtered list of applications
            /// </summary>
            /// <remarks>
            /// Get a list of applications filtered using the specified query parameters.
            /// The returned model can contain a continuation token if more results are
            /// available. Call the GetListOfApplications operation using the token to
            /// retrieve more results.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Applications Query model
            /// </param>
            /// <param name='pageSize'>
            /// Number of results to return
            /// </param>
            public static ApplicationInfoListApiModel GetFilteredListOfApplications(this IAzureOpcRegistryClient operations, ApplicationRegistrationQueryApiModel body, int? pageSize = default(int?))
            {
                return operations.GetFilteredListOfApplicationsAsync(body, pageSize).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get filtered list of applications
            /// </summary>
            /// <remarks>
            /// Get a list of applications filtered using the specified query parameters.
            /// The returned model can contain a continuation token if more results are
            /// available. Call the GetListOfApplications operation using the token to
            /// retrieve more results.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Applications Query model
            /// </param>
            /// <param name='pageSize'>
            /// Number of results to return
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApplicationInfoListApiModel> GetFilteredListOfApplicationsAsync(this IAzureOpcRegistryClient operations, ApplicationRegistrationQueryApiModel body, int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFilteredListOfApplicationsWithHttpMessagesAsync(body, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Query applications by id.
            /// </summary>
            /// <remarks>
            /// A query model which supports the OPC UA Global Discovery Server query.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ApplicationRecordListApiModel QueryApplicationsById(this IAzureOpcRegistryClient operations, ApplicationRecordQueryApiModel body = default(ApplicationRecordQueryApiModel))
            {
                return operations.QueryApplicationsByIdAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query applications by id.
            /// </summary>
            /// <remarks>
            /// A query model which supports the OPC UA Global Discovery Server query.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApplicationRecordListApiModel> QueryApplicationsByIdAsync(this IAzureOpcRegistryClient operations, ApplicationRecordQueryApiModel body = default(ApplicationRecordQueryApiModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryApplicationsByIdWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Subscribe for application events
            /// </summary>
            /// <remarks>
            /// Register a client to receive application events through SignalR.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The user that will receive application events.
            /// </param>
            public static void Subscribe(this IAzureOpcRegistryClient operations, string body = default(string))
            {
                operations.SubscribeAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Subscribe for application events
            /// </summary>
            /// <remarks>
            /// Register a client to receive application events through SignalR.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The user that will receive application events.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SubscribeAsync(this IAzureOpcRegistryClient operations, string body = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SubscribeWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Unsubscribe from application events
            /// </summary>
            /// <remarks>
            /// Unregister a user and stop it from receiving events.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The user id that will not receive any more events
            /// </param>
            public static void Unsubscribe(this IAzureOpcRegistryClient operations, string userId)
            {
                operations.UnsubscribeAsync(userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Unsubscribe from application events
            /// </summary>
            /// <remarks>
            /// Unregister a user and stop it from receiving events.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The user id that will not receive any more events
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UnsubscribeAsync(this IAzureOpcRegistryClient operations, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UnsubscribeWithHttpMessagesAsync(userId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get discoverer registration information
            /// </summary>
            /// <remarks>
            /// Returns a discoverer's registration and connectivity information. A
            /// discoverer id corresponds to the twin modules module identity.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='discovererId'>
            /// Discoverer identifier
            /// </param>
            /// <param name='onlyServerState'>
            /// Whether to include only server state, or display current client state of
            /// the endpoint if available
            /// </param>
            public static DiscovererApiModel GetDiscoverer(this IAzureOpcRegistryClient operations, string discovererId, bool? onlyServerState = default(bool?))
            {
                return operations.GetDiscovererAsync(discovererId, onlyServerState).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get discoverer registration information
            /// </summary>
            /// <remarks>
            /// Returns a discoverer's registration and connectivity information. A
            /// discoverer id corresponds to the twin modules module identity.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='discovererId'>
            /// Discoverer identifier
            /// </param>
            /// <param name='onlyServerState'>
            /// Whether to include only server state, or display current client state of
            /// the endpoint if available
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DiscovererApiModel> GetDiscovererAsync(this IAzureOpcRegistryClient operations, string discovererId, bool? onlyServerState = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDiscovererWithHttpMessagesAsync(discovererId, onlyServerState, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update discoverer information
            /// </summary>
            /// <remarks>
            /// Allows a caller to configure recurring discovery runs on the twin module
            /// identified by the discoverer id or update site information.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='discovererId'>
            /// discoverer identifier
            /// </param>
            /// <param name='body'>
            /// Patch request
            /// </param>
            public static void UpdateDiscoverer(this IAzureOpcRegistryClient operations, string discovererId, DiscovererUpdateApiModel body)
            {
                operations.UpdateDiscovererAsync(discovererId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update discoverer information
            /// </summary>
            /// <remarks>
            /// Allows a caller to configure recurring discovery runs on the twin module
            /// identified by the discoverer id or update site information.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='discovererId'>
            /// discoverer identifier
            /// </param>
            /// <param name='body'>
            /// Patch request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateDiscovererAsync(this IAzureOpcRegistryClient operations, string discovererId, DiscovererUpdateApiModel body, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateDiscovererWithHttpMessagesAsync(discovererId, body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Enable server discovery
            /// </summary>
            /// <remarks>
            /// Allows a caller to configure recurring discovery runs on the discovery
            /// module identified by the module id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='discovererId'>
            /// discoverer identifier
            /// </param>
            /// <param name='mode'>
            /// Discovery mode. Possible values include: 'Off', 'Local', 'Network', 'Fast',
            /// 'Scan'
            /// </param>
            /// <param name='body'>
            /// Discovery configuration
            /// </param>
            public static void SetDiscoveryMode(this IAzureOpcRegistryClient operations, string discovererId, DiscoveryMode mode, DiscoveryConfigApiModel body = default(DiscoveryConfigApiModel))
            {
                operations.SetDiscoveryModeAsync(discovererId, mode, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Enable server discovery
            /// </summary>
            /// <remarks>
            /// Allows a caller to configure recurring discovery runs on the discovery
            /// module identified by the module id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='discovererId'>
            /// discoverer identifier
            /// </param>
            /// <param name='mode'>
            /// Discovery mode. Possible values include: 'Off', 'Local', 'Network', 'Fast',
            /// 'Scan'
            /// </param>
            /// <param name='body'>
            /// Discovery configuration
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SetDiscoveryModeAsync(this IAzureOpcRegistryClient operations, string discovererId, DiscoveryMode mode, DiscoveryConfigApiModel body = default(DiscoveryConfigApiModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SetDiscoveryModeWithHttpMessagesAsync(discovererId, mode, body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get list of discoverers
            /// </summary>
            /// <remarks>
            /// Get all registered discoverers and therefore twin modules in paged form.
            /// The returned model can contain a continuation token if more results are
            /// available. Call this operation again using the token to retrieve more
            /// results.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='onlyServerState'>
            /// Whether to include only server state, or display current client state of
            /// the endpoint if available
            /// </param>
            /// <param name='continuationToken'>
            /// Optional Continuation token
            /// </param>
            /// <param name='pageSize'>
            /// Optional number of results to return
            /// </param>
            public static DiscovererListApiModel GetListOfDiscoverers(this IAzureOpcRegistryClient operations, bool? onlyServerState = default(bool?), string continuationToken = default(string), int? pageSize = default(int?))
            {
                return operations.GetListOfDiscoverersAsync(onlyServerState, continuationToken, pageSize).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get list of discoverers
            /// </summary>
            /// <remarks>
            /// Get all registered discoverers and therefore twin modules in paged form.
            /// The returned model can contain a continuation token if more results are
            /// available. Call this operation again using the token to retrieve more
            /// results.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='onlyServerState'>
            /// Whether to include only server state, or display current client state of
            /// the endpoint if available
            /// </param>
            /// <param name='continuationToken'>
            /// Optional Continuation token
            /// </param>
            /// <param name='pageSize'>
            /// Optional number of results to return
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DiscovererListApiModel> GetListOfDiscoverersAsync(this IAzureOpcRegistryClient operations, bool? onlyServerState = default(bool?), string continuationToken = default(string), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetListOfDiscoverersWithHttpMessagesAsync(onlyServerState, continuationToken, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Query discoverers
            /// </summary>
            /// <remarks>
            /// Get all discoverers that match a specified query. The returned model can
            /// contain a continuation token if more results are available. Call the
            /// GetListOfDiscoverers operation using the token to retrieve more results.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Discoverers query model
            /// </param>
            /// <param name='onlyServerState'>
            /// Whether to include only server state, or display current client state of
            /// the endpoint if available
            /// </param>
            /// <param name='pageSize'>
            /// Number of results to return
            /// </param>
            public static DiscovererListApiModel QueryDiscoverers(this IAzureOpcRegistryClient operations, DiscovererQueryApiModel body, bool? onlyServerState = default(bool?), int? pageSize = default(int?))
            {
                return operations.QueryDiscoverersAsync(body, onlyServerState, pageSize).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query discoverers
            /// </summary>
            /// <remarks>
            /// Get all discoverers that match a specified query. The returned model can
            /// contain a continuation token if more results are available. Call the
            /// GetListOfDiscoverers operation using the token to retrieve more results.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Discoverers query model
            /// </param>
            /// <param name='onlyServerState'>
            /// Whether to include only server state, or display current client state of
            /// the endpoint if available
            /// </param>
            /// <param name='pageSize'>
            /// Number of results to return
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DiscovererListApiModel> QueryDiscoverersAsync(this IAzureOpcRegistryClient operations, DiscovererQueryApiModel body, bool? onlyServerState = default(bool?), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryDiscoverersWithHttpMessagesAsync(body, onlyServerState, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get filtered list of discoverers
            /// </summary>
            /// <remarks>
            /// Get a list of discoverers filtered using the specified query parameters.
            /// The returned model can contain a continuation token if more results are
            /// available. Call the GetListOfDiscoverers operation using the token to
            /// retrieve more results.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='siteId'>
            /// Site of the discoverer
            /// </param>
            /// <param name='discovery'>
            /// Discovery mode of discoverer. Possible values include: 'Off', 'Local',
            /// 'Network', 'Fast', 'Scan'
            /// </param>
            /// <param name='connected'>
            /// Included connected or disconnected
            /// </param>
            /// <param name='onlyServerState'>
            /// Whether to include only server state, or display current client state of
            /// the endpoint if available
            /// </param>
            /// <param name='pageSize'>
            /// Number of results to return
            /// </param>
            public static DiscovererListApiModel GetFilteredListOfDiscoverers(this IAzureOpcRegistryClient operations, string siteId = default(string), DiscoveryMode? discovery = default(DiscoveryMode?), bool? connected = default(bool?), bool? onlyServerState = default(bool?), int? pageSize = default(int?))
            {
                return operations.GetFilteredListOfDiscoverersAsync(siteId, discovery, connected, onlyServerState, pageSize).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get filtered list of discoverers
            /// </summary>
            /// <remarks>
            /// Get a list of discoverers filtered using the specified query parameters.
            /// The returned model can contain a continuation token if more results are
            /// available. Call the GetListOfDiscoverers operation using the token to
            /// retrieve more results.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='siteId'>
            /// Site of the discoverer
            /// </param>
            /// <param name='discovery'>
            /// Discovery mode of discoverer. Possible values include: 'Off', 'Local',
            /// 'Network', 'Fast', 'Scan'
            /// </param>
            /// <param name='connected'>
            /// Included connected or disconnected
            /// </param>
            /// <param name='onlyServerState'>
            /// Whether to include only server state, or display current client state of
            /// the endpoint if available
            /// </param>
            /// <param name='pageSize'>
            /// Number of results to return
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DiscovererListApiModel> GetFilteredListOfDiscoverersAsync(this IAzureOpcRegistryClient operations, string siteId = default(string), DiscoveryMode? discovery = default(DiscoveryMode?), bool? connected = default(bool?), bool? onlyServerState = default(bool?), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFilteredListOfDiscoverersWithHttpMessagesAsync(siteId, discovery, connected, onlyServerState, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Subscribe to discoverer registry events
            /// </summary>
            /// <remarks>
            /// Register a user to receive discoverer events through SignalR.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The user id that will receive discoverer events.
            /// </param>
            public static void Subscribe1(this IAzureOpcRegistryClient operations, string body = default(string))
            {
                operations.Subscribe1Async(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Subscribe to discoverer registry events
            /// </summary>
            /// <remarks>
            /// Register a user to receive discoverer events through SignalR.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The user id that will receive discoverer events.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task Subscribe1Async(this IAzureOpcRegistryClient operations, string body = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.Subscribe1WithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Unsubscribe registry events
            /// </summary>
            /// <remarks>
            /// Unregister a user and stop it from receiving discoverer events.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The user id that will not receive any more discoverer events
            /// </param>
            public static void Unsubscribe1(this IAzureOpcRegistryClient operations, string userId)
            {
                operations.Unsubscribe1Async(userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Unsubscribe registry events
            /// </summary>
            /// <remarks>
            /// Unregister a user and stop it from receiving discoverer events.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The user id that will not receive any more discoverer events
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task Unsubscribe1Async(this IAzureOpcRegistryClient operations, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.Unsubscribe1WithHttpMessagesAsync(userId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Subscribe to discovery progress from discoverer
            /// </summary>
            /// <remarks>
            /// Register a client to receive discovery progress events through SignalR from
            /// a particular discoverer.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='discovererId'>
            /// The discoverer to subscribe to
            /// </param>
            /// <param name='body'>
            /// The user id that will receive discovery events.
            /// </param>
            public static void SubscribeByDiscovererId(this IAzureOpcRegistryClient operations, string discovererId, string body = default(string))
            {
                operations.SubscribeByDiscovererIdAsync(discovererId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Subscribe to discovery progress from discoverer
            /// </summary>
            /// <remarks>
            /// Register a client to receive discovery progress events through SignalR from
            /// a particular discoverer.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='discovererId'>
            /// The discoverer to subscribe to
            /// </param>
            /// <param name='body'>
            /// The user id that will receive discovery events.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SubscribeByDiscovererIdAsync(this IAzureOpcRegistryClient operations, string discovererId, string body = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SubscribeByDiscovererIdWithHttpMessagesAsync(discovererId, body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Subscribe to discovery progress for a request
            /// </summary>
            /// <remarks>
            /// Register a client to receive discovery progress events through SignalR for
            /// a particular request.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestId'>
            /// The request to monitor
            /// </param>
            /// <param name='body'>
            /// The user id that will receive discovery events.
            /// </param>
            public static void SubscribeByRequestId(this IAzureOpcRegistryClient operations, string requestId, string body = default(string))
            {
                operations.SubscribeByRequestIdAsync(requestId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Subscribe to discovery progress for a request
            /// </summary>
            /// <remarks>
            /// Register a client to receive discovery progress events through SignalR for
            /// a particular request.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestId'>
            /// The request to monitor
            /// </param>
            /// <param name='body'>
            /// The user id that will receive discovery events.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SubscribeByRequestIdAsync(this IAzureOpcRegistryClient operations, string requestId, string body = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SubscribeByRequestIdWithHttpMessagesAsync(requestId, body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Unsubscribe from discovery progress for a request.
            /// </summary>
            /// <remarks>
            /// Unregister a client and stop it from receiving discovery events for a
            /// particular request.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestId'>
            /// The request to unsubscribe from
            /// </param>
            /// <param name='userId'>
            /// The user id that will not receive any more discovery progress
            /// </param>
            public static void UnsubscribeByRequestId(this IAzureOpcRegistryClient operations, string requestId, string userId)
            {
                operations.UnsubscribeByRequestIdAsync(requestId, userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Unsubscribe from discovery progress for a request.
            /// </summary>
            /// <remarks>
            /// Unregister a client and stop it from receiving discovery events for a
            /// particular request.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestId'>
            /// The request to unsubscribe from
            /// </param>
            /// <param name='userId'>
            /// The user id that will not receive any more discovery progress
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UnsubscribeByRequestIdAsync(this IAzureOpcRegistryClient operations, string requestId, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UnsubscribeByRequestIdWithHttpMessagesAsync(requestId, userId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Unsubscribe from discovery progress from discoverer.
            /// </summary>
            /// <remarks>
            /// Unregister a client and stop it from receiving discovery events.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='discovererId'>
            /// The discoverer to unsubscribe from
            /// </param>
            /// <param name='userId'>
            /// The user id that will not receive any more discovery progress
            /// </param>
            public static void UnsubscribeByDiscovererId(this IAzureOpcRegistryClient operations, string discovererId, string userId)
            {
                operations.UnsubscribeByDiscovererIdAsync(discovererId, userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Unsubscribe from discovery progress from discoverer.
            /// </summary>
            /// <remarks>
            /// Unregister a client and stop it from receiving discovery events.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='discovererId'>
            /// The discoverer to unsubscribe from
            /// </param>
            /// <param name='userId'>
            /// The user id that will not receive any more discovery progress
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UnsubscribeByDiscovererIdAsync(this IAzureOpcRegistryClient operations, string discovererId, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UnsubscribeByDiscovererIdWithHttpMessagesAsync(discovererId, userId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Activate endpoint
            /// </summary>
            /// <remarks>
            /// Activates an endpoint for subsequent use in twin service. All endpoints
            /// must be activated using this API or through a activation filter during
            /// application registration or discovery.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// endpoint identifier
            /// </param>
            public static void ActivateEndpoint(this IAzureOpcRegistryClient operations, string endpointId)
            {
                operations.ActivateEndpointAsync(endpointId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Activate endpoint
            /// </summary>
            /// <remarks>
            /// Activates an endpoint for subsequent use in twin service. All endpoints
            /// must be activated using this API or through a activation filter during
            /// application registration or discovery.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// endpoint identifier
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ActivateEndpointAsync(this IAzureOpcRegistryClient operations, string endpointId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ActivateEndpointWithHttpMessagesAsync(endpointId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get endpoint information
            /// </summary>
            /// <remarks>
            /// Gets information about an endpoint.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// endpoint identifier
            /// </param>
            /// <param name='onlyServerState'>
            /// Whether to include only server state, or display current client state of
            /// the endpoint if available
            /// </param>
            public static EndpointInfoApiModel GetEndpoint(this IAzureOpcRegistryClient operations, string endpointId, bool? onlyServerState = default(bool?))
            {
                return operations.GetEndpointAsync(endpointId, onlyServerState).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get endpoint information
            /// </summary>
            /// <remarks>
            /// Gets information about an endpoint.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// endpoint identifier
            /// </param>
            /// <param name='onlyServerState'>
            /// Whether to include only server state, or display current client state of
            /// the endpoint if available
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EndpointInfoApiModel> GetEndpointAsync(this IAzureOpcRegistryClient operations, string endpointId, bool? onlyServerState = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEndpointWithHttpMessagesAsync(endpointId, onlyServerState, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get list of endpoints
            /// </summary>
            /// <remarks>
            /// Get all registered endpoints in paged form. The returned model can contain
            /// a continuation token if more results are available. Call this operation
            /// again using the token to retrieve more results.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='onlyServerState'>
            /// Whether to include only server state, or display current client state of
            /// the endpoint if available
            /// </param>
            /// <param name='continuationToken'>
            /// Optional Continuation token
            /// </param>
            /// <param name='pageSize'>
            /// Optional number of results to return
            /// </param>
            public static EndpointInfoListApiModel GetListOfEndpoints(this IAzureOpcRegistryClient operations, bool? onlyServerState = default(bool?), string continuationToken = default(string), int? pageSize = default(int?))
            {
                return operations.GetListOfEndpointsAsync(onlyServerState, continuationToken, pageSize).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get list of endpoints
            /// </summary>
            /// <remarks>
            /// Get all registered endpoints in paged form. The returned model can contain
            /// a continuation token if more results are available. Call this operation
            /// again using the token to retrieve more results.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='onlyServerState'>
            /// Whether to include only server state, or display current client state of
            /// the endpoint if available
            /// </param>
            /// <param name='continuationToken'>
            /// Optional Continuation token
            /// </param>
            /// <param name='pageSize'>
            /// Optional number of results to return
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EndpointInfoListApiModel> GetListOfEndpointsAsync(this IAzureOpcRegistryClient operations, bool? onlyServerState = default(bool?), string continuationToken = default(string), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetListOfEndpointsWithHttpMessagesAsync(onlyServerState, continuationToken, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Query endpoints
            /// </summary>
            /// <remarks>
            /// Return endpoints that match the specified query. The returned model can
            /// contain a continuation token if more results are available. Call the
            /// GetListOfEndpoints operation using the token to retrieve more results.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Query to match
            /// </param>
            /// <param name='onlyServerState'>
            /// Whether to include only server state, or display current client state of
            /// the endpoint if available
            /// </param>
            /// <param name='pageSize'>
            /// Optional number of results to return
            /// </param>
            public static EndpointInfoListApiModel QueryEndpoints(this IAzureOpcRegistryClient operations, EndpointRegistrationQueryApiModel body, bool? onlyServerState = default(bool?), int? pageSize = default(int?))
            {
                return operations.QueryEndpointsAsync(body, onlyServerState, pageSize).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query endpoints
            /// </summary>
            /// <remarks>
            /// Return endpoints that match the specified query. The returned model can
            /// contain a continuation token if more results are available. Call the
            /// GetListOfEndpoints operation using the token to retrieve more results.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Query to match
            /// </param>
            /// <param name='onlyServerState'>
            /// Whether to include only server state, or display current client state of
            /// the endpoint if available
            /// </param>
            /// <param name='pageSize'>
            /// Optional number of results to return
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EndpointInfoListApiModel> QueryEndpointsAsync(this IAzureOpcRegistryClient operations, EndpointRegistrationQueryApiModel body, bool? onlyServerState = default(bool?), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryEndpointsWithHttpMessagesAsync(body, onlyServerState, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get filtered list of endpoints
            /// </summary>
            /// <remarks>
            /// Get a list of endpoints filtered using the specified query parameters. The
            /// returned model can contain a continuation token if more results are
            /// available. Call the GetListOfEndpoints operation using the token to
            /// retrieve more results.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='url'>
            /// Endoint url for direct server access
            /// </param>
            /// <param name='certificate'>
            /// Certificate of the endpoint
            /// </param>
            /// <param name='securityMode'>
            /// Security Mode. Possible values include: 'Best', 'Sign', 'SignAndEncrypt',
            /// 'None'
            /// </param>
            /// <param name='securityPolicy'>
            /// Security policy uri
            /// </param>
            /// <param name='activated'>
            /// Whether the endpoint was activated
            /// </param>
            /// <param name='connected'>
            /// Whether the endpoint is connected on supervisor.
            /// </param>
            /// <param name='endpointState'>
            /// The last state of the the activated endpoint. Possible values include:
            /// 'Connecting', 'NotReachable', 'Busy', 'NoTrust', 'CertificateInvalid',
            /// 'Ready', 'Error'
            /// </param>
            /// <param name='includeNotSeenSince'>
            /// Whether to include endpoints that were soft deleted
            /// </param>
            /// <param name='discovererId'>
            /// Discoverer id to filter with
            /// </param>
            /// <param name='applicationId'>
            /// Application id to filter
            /// </param>
            /// <param name='supervisorId'>
            /// Supervisor id to filter with
            /// </param>
            /// <param name='siteOrGatewayId'>
            /// Site or gateway id to filter with
            /// </param>
            /// <param name='onlyServerState'>
            /// Whether to include only server state, or display current client state of
            /// the endpoint if available
            /// </param>
            /// <param name='pageSize'>
            /// Optional number of results to return
            /// </param>
            public static EndpointInfoListApiModel GetFilteredListOfEndpoints(this IAzureOpcRegistryClient operations, string url = default(string), byte[] certificate = default(byte[]), SecurityMode? securityMode = default(SecurityMode?), string securityPolicy = default(string), bool? activated = default(bool?), bool? connected = default(bool?), EndpointConnectivityState? endpointState = default(EndpointConnectivityState?), bool? includeNotSeenSince = default(bool?), string discovererId = default(string), string applicationId = default(string), string supervisorId = default(string), string siteOrGatewayId = default(string), bool? onlyServerState = default(bool?), int? pageSize = default(int?))
            {
                return operations.GetFilteredListOfEndpointsAsync(url, certificate, securityMode, securityPolicy, activated, connected, endpointState, includeNotSeenSince, discovererId, applicationId, supervisorId, siteOrGatewayId, onlyServerState, pageSize).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get filtered list of endpoints
            /// </summary>
            /// <remarks>
            /// Get a list of endpoints filtered using the specified query parameters. The
            /// returned model can contain a continuation token if more results are
            /// available. Call the GetListOfEndpoints operation using the token to
            /// retrieve more results.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='url'>
            /// Endoint url for direct server access
            /// </param>
            /// <param name='certificate'>
            /// Certificate of the endpoint
            /// </param>
            /// <param name='securityMode'>
            /// Security Mode. Possible values include: 'Best', 'Sign', 'SignAndEncrypt',
            /// 'None'
            /// </param>
            /// <param name='securityPolicy'>
            /// Security policy uri
            /// </param>
            /// <param name='activated'>
            /// Whether the endpoint was activated
            /// </param>
            /// <param name='connected'>
            /// Whether the endpoint is connected on supervisor.
            /// </param>
            /// <param name='endpointState'>
            /// The last state of the the activated endpoint. Possible values include:
            /// 'Connecting', 'NotReachable', 'Busy', 'NoTrust', 'CertificateInvalid',
            /// 'Ready', 'Error'
            /// </param>
            /// <param name='includeNotSeenSince'>
            /// Whether to include endpoints that were soft deleted
            /// </param>
            /// <param name='discovererId'>
            /// Discoverer id to filter with
            /// </param>
            /// <param name='applicationId'>
            /// Application id to filter
            /// </param>
            /// <param name='supervisorId'>
            /// Supervisor id to filter with
            /// </param>
            /// <param name='siteOrGatewayId'>
            /// Site or gateway id to filter with
            /// </param>
            /// <param name='onlyServerState'>
            /// Whether to include only server state, or display current client state of
            /// the endpoint if available
            /// </param>
            /// <param name='pageSize'>
            /// Optional number of results to return
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EndpointInfoListApiModel> GetFilteredListOfEndpointsAsync(this IAzureOpcRegistryClient operations, string url = default(string), byte[] certificate = default(byte[]), SecurityMode? securityMode = default(SecurityMode?), string securityPolicy = default(string), bool? activated = default(bool?), bool? connected = default(bool?), EndpointConnectivityState? endpointState = default(EndpointConnectivityState?), bool? includeNotSeenSince = default(bool?), string discovererId = default(string), string applicationId = default(string), string supervisorId = default(string), string siteOrGatewayId = default(string), bool? onlyServerState = default(bool?), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFilteredListOfEndpointsWithHttpMessagesAsync(url, certificate, securityMode, securityPolicy, activated, connected, endpointState, includeNotSeenSince, discovererId, applicationId, supervisorId, siteOrGatewayId, onlyServerState, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deactivate endpoint
            /// </summary>
            /// <remarks>
            /// Deactivates the endpoint and disable access through twin service.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// endpoint identifier
            /// </param>
            public static void DeactivateEndpoint(this IAzureOpcRegistryClient operations, string endpointId)
            {
                operations.DeactivateEndpointAsync(endpointId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deactivate endpoint
            /// </summary>
            /// <remarks>
            /// Deactivates the endpoint and disable access through twin service.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointId'>
            /// endpoint identifier
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeactivateEndpointAsync(this IAzureOpcRegistryClient operations, string endpointId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeactivateEndpointWithHttpMessagesAsync(endpointId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Subscribe for endpoint events
            /// </summary>
            /// <remarks>
            /// Register a user to receive endpoint events through SignalR.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The user id that will receive endpoint events.
            /// </param>
            public static void Subscribe2(this IAzureOpcRegistryClient operations, string body = default(string))
            {
                operations.Subscribe2Async(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Subscribe for endpoint events
            /// </summary>
            /// <remarks>
            /// Register a user to receive endpoint events through SignalR.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The user id that will receive endpoint events.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task Subscribe2Async(this IAzureOpcRegistryClient operations, string body = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.Subscribe2WithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Unsubscribe from endpoint events
            /// </summary>
            /// <remarks>
            /// Unregister a user and stop it from receiving endpoint events.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The user id that will not receive any more endpoint events
            /// </param>
            public static void Unsubscribe2(this IAzureOpcRegistryClient operations, string userId)
            {
                operations.Unsubscribe2Async(userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Unsubscribe from endpoint events
            /// </summary>
            /// <remarks>
            /// Unregister a user and stop it from receiving endpoint events.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The user id that will not receive any more endpoint events
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task Unsubscribe2Async(this IAzureOpcRegistryClient operations, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.Unsubscribe2WithHttpMessagesAsync(userId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get Gateway registration information
            /// </summary>
            /// <remarks>
            /// Returns a Gateway's registration and connectivity information. A Gateway id
            /// corresponds to the twin modules module identity.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='gatewayId'>
            /// Gateway identifier
            /// </param>
            public static GatewayInfoApiModel GetGateway(this IAzureOpcRegistryClient operations, string gatewayId)
            {
                return operations.GetGatewayAsync(gatewayId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Gateway registration information
            /// </summary>
            /// <remarks>
            /// Returns a Gateway's registration and connectivity information. A Gateway id
            /// corresponds to the twin modules module identity.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='gatewayId'>
            /// Gateway identifier
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GatewayInfoApiModel> GetGatewayAsync(this IAzureOpcRegistryClient operations, string gatewayId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGatewayWithHttpMessagesAsync(gatewayId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update Gateway configuration
            /// </summary>
            /// <remarks>
            /// Allows a caller to configure operations on the Gateway module identified by
            /// the Gateway id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='gatewayId'>
            /// Gateway identifier
            /// </param>
            /// <param name='body'>
            /// Patch request
            /// </param>
            public static void UpdateGateway(this IAzureOpcRegistryClient operations, string gatewayId, GatewayUpdateApiModel body)
            {
                operations.UpdateGatewayAsync(gatewayId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update Gateway configuration
            /// </summary>
            /// <remarks>
            /// Allows a caller to configure operations on the Gateway module identified by
            /// the Gateway id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='gatewayId'>
            /// Gateway identifier
            /// </param>
            /// <param name='body'>
            /// Patch request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateGatewayAsync(this IAzureOpcRegistryClient operations, string gatewayId, GatewayUpdateApiModel body, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateGatewayWithHttpMessagesAsync(gatewayId, body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get list of Gateways
            /// </summary>
            /// <remarks>
            /// Get all registered Gateways and therefore twin modules in paged form. The
            /// returned model can contain a continuation token if more results are
            /// available. Call this operation again using the token to retrieve more
            /// results.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continuationToken'>
            /// Optional Continuation token
            /// </param>
            /// <param name='pageSize'>
            /// Optional number of results to return
            /// </param>
            public static GatewayListApiModel GetListOfGateway(this IAzureOpcRegistryClient operations, string continuationToken = default(string), int? pageSize = default(int?))
            {
                return operations.GetListOfGatewayAsync(continuationToken, pageSize).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get list of Gateways
            /// </summary>
            /// <remarks>
            /// Get all registered Gateways and therefore twin modules in paged form. The
            /// returned model can contain a continuation token if more results are
            /// available. Call this operation again using the token to retrieve more
            /// results.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='continuationToken'>
            /// Optional Continuation token
            /// </param>
            /// <param name='pageSize'>
            /// Optional number of results to return
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GatewayListApiModel> GetListOfGatewayAsync(this IAzureOpcRegistryClient operations, string continuationToken = default(string), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetListOfGatewayWithHttpMessagesAsync(continuationToken, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Query Gateways
            /// </summary>
            /// <remarks>
            /// Get all Gateways that match a specified query. The returned model can
            /// contain a continuation token if more results are available. Call the
            /// GetListOfGateway operation using the token to retrieve more results.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Gateway query model
            /// </param>
            /// <param name='pageSize'>
            /// Number of results to return
            /// </param>
            public static GatewayListApiModel QueryGateway(this IAzureOpcRegistryClient operations, GatewayQueryApiModel body, int? pageSize = default(int?))
            {
                return operations.QueryGatewayAsync(body, pageSize).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query Gateways
            /// </summary>
            /// <remarks>
            /// Get all Gateways that match a specified query. The returned model can
            /// contain a continuation token if more results are available. Call the
            /// GetListOfGateway operation using the token to retrieve more results.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Gateway query model
            /// </param>
            /// <param name='pageSize'>
            /// Number of results to return
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GatewayListApiModel> QueryGatewayAsync(this IAzureOpcRegistryClient operations, GatewayQueryApiModel body, int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryGatewayWithHttpMessagesAsync(body, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get filtered list of Gateways
            /// </summary>
            /// <remarks>
            /// Get a list of Gateways filtered using the specified query parameters. The
            /// returned model can contain a continuation token if more results are
            /// available. Call the GetListOfGateway operation using the token to retrieve
            /// more results.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='siteId'>
            /// Site of the Gateway
            /// </param>
            /// <param name='connected'>
            /// Included connected or disconnected
            /// </param>
            /// <param name='pageSize'>
            /// Number of results to return
            /// </param>
            public static GatewayListApiModel GetFilteredListOfGateway(this IAzureOpcRegistryClient operations, string siteId = default(string), bool? connected = default(bool?), int? pageSize = default(int?))
            {
                return operations.GetFilteredListOfGatewayAsync(siteId, connected, pageSize).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get filtered list of Gateways
            /// </summary>
            /// <remarks>
            /// Get a list of Gateways filtered using the specified query parameters. The
            /// returned model can contain a continuation token if more results are
            /// available. Call the GetListOfGateway operation using the token to retrieve
            /// more results.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='siteId'>
            /// Site of the Gateway
            /// </param>
            /// <param name='connected'>
            /// Included connected or disconnected
            /// </param>
            /// <param name='pageSize'>
            /// Number of results to return
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GatewayListApiModel> GetFilteredListOfGatewayAsync(this IAzureOpcRegistryClient operations, string siteId = default(string), bool? connected = default(bool?), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFilteredListOfGatewayWithHttpMessagesAsync(siteId, connected, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Subscribe to Gateway registry events
            /// </summary>
            /// <remarks>
            /// Register a user to receive Gateway events through SignalR.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The user id that will receive Gateway events.
            /// </param>
            public static void Subscribe3(this IAzureOpcRegistryClient operations, string body = default(string))
            {
                operations.Subscribe3Async(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Subscribe to Gateway registry events
            /// </summary>
            /// <remarks>
            /// Register a user to receive Gateway events through SignalR.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The user id that will receive Gateway events.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task Subscribe3Async(this IAzureOpcRegistryClient operations, string body = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.Subscribe3WithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Unsubscribe registry events
            /// </summary>
            /// <remarks>
            /// Unregister a user and stop it from receiving Gateway events.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The user id that will not receive any more Gateway events
            /// </param>
            public static void Unsubscribe3(this IAzureOpcRegistryClient operations, string userId)
            {
                operations.Unsubscribe3Async(userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Unsubscribe registry events
            /// </summary>
            /// <remarks>
            /// Unregister a user and stop it from receiving Gateway events.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The user id that will not receive any more Gateway events
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task Unsubscribe3Async(this IAzureOpcRegistryClient operations, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.Unsubscribe3WithHttpMessagesAsync(userId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get publisher registration information
            /// </summary>
            /// <remarks>
            /// Returns a publisher's registration and connectivity information. A
            /// publisher id corresponds to the twin modules module identity.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='publisherId'>
            /// Publisher identifier
            /// </param>
            /// <param name='onlyServerState'>
            /// Whether to include only server state, or display current client state of
            /// the endpoint if available
            /// </param>
            public static PublisherApiModel GetPublisher(this IAzureOpcRegistryClient operations, string publisherId, bool? onlyServerState = default(bool?))
            {
                return operations.GetPublisherAsync(publisherId, onlyServerState).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get publisher registration information
            /// </summary>
            /// <remarks>
            /// Returns a publisher's registration and connectivity information. A
            /// publisher id corresponds to the twin modules module identity.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='publisherId'>
            /// Publisher identifier
            /// </param>
            /// <param name='onlyServerState'>
            /// Whether to include only server state, or display current client state of
            /// the endpoint if available
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PublisherApiModel> GetPublisherAsync(this IAzureOpcRegistryClient operations, string publisherId, bool? onlyServerState = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPublisherWithHttpMessagesAsync(publisherId, onlyServerState, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update publisher configuration
            /// </summary>
            /// <remarks>
            /// Allows a caller to configure operations on the publisher module identified
            /// by the publisher id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='publisherId'>
            /// Publisher identifier
            /// </param>
            /// <param name='body'>
            /// Patch request
            /// </param>
            public static void UpdatePublisher(this IAzureOpcRegistryClient operations, string publisherId, PublisherUpdateApiModel body)
            {
                operations.UpdatePublisherAsync(publisherId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update publisher configuration
            /// </summary>
            /// <remarks>
            /// Allows a caller to configure operations on the publisher module identified
            /// by the publisher id.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='publisherId'>
            /// Publisher identifier
            /// </param>
            /// <param name='body'>
            /// Patch request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdatePublisherAsync(this IAzureOpcRegistryClient operations, string publisherId, PublisherUpdateApiModel body, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdatePublisherWithHttpMessagesAsync(publisherId, body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get list of publishers
            /// </summary>
            /// <remarks>
            /// Get all registered publishers and therefore twin modules in paged form. The
            /// returned model can contain a continuation token if more results are
            /// available. Call this operation again using the token to retrieve more
            /// results.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='onlyServerState'>
            /// Whether to include only server state, or display current client state of
            /// the endpoint if available
            /// </param>
            /// <param name='continuationToken'>
            /// Optional Continuation token
            /// </param>
            /// <param name='pageSize'>
            /// Optional number of results to return
            /// </param>
            public static PublisherListApiModel GetListOfPublisher(this IAzureOpcRegistryClient operations, bool? onlyServerState = default(bool?), string continuationToken = default(string), int? pageSize = default(int?))
            {
                return operations.GetListOfPublisherAsync(onlyServerState, continuationToken, pageSize).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get list of publishers
            /// </summary>
            /// <remarks>
            /// Get all registered publishers and therefore twin modules in paged form. The
            /// returned model can contain a continuation token if more results are
            /// available. Call this operation again using the token to retrieve more
            /// results.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='onlyServerState'>
            /// Whether to include only server state, or display current client state of
            /// the endpoint if available
            /// </param>
            /// <param name='continuationToken'>
            /// Optional Continuation token
            /// </param>
            /// <param name='pageSize'>
            /// Optional number of results to return
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PublisherListApiModel> GetListOfPublisherAsync(this IAzureOpcRegistryClient operations, bool? onlyServerState = default(bool?), string continuationToken = default(string), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetListOfPublisherWithHttpMessagesAsync(onlyServerState, continuationToken, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Query publishers
            /// </summary>
            /// <remarks>
            /// Get all publishers that match a specified query. The returned model can
            /// contain a continuation token if more results are available. Call the
            /// GetListOfPublisher operation using the token to retrieve more results.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Publisher query model
            /// </param>
            /// <param name='onlyServerState'>
            /// Whether to include only server state, or display current client state of
            /// the endpoint if available
            /// </param>
            /// <param name='pageSize'>
            /// Number of results to return
            /// </param>
            public static PublisherListApiModel QueryPublisher(this IAzureOpcRegistryClient operations, PublisherQueryApiModel body, bool? onlyServerState = default(bool?), int? pageSize = default(int?))
            {
                return operations.QueryPublisherAsync(body, onlyServerState, pageSize).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query publishers
            /// </summary>
            /// <remarks>
            /// Get all publishers that match a specified query. The returned model can
            /// contain a continuation token if more results are available. Call the
            /// GetListOfPublisher operation using the token to retrieve more results.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Publisher query model
            /// </param>
            /// <param name='onlyServerState'>
            /// Whether to include only server state, or display current client state of
            /// the endpoint if available
            /// </param>
            /// <param name='pageSize'>
            /// Number of results to return
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PublisherListApiModel> QueryPublisherAsync(this IAzureOpcRegistryClient operations, PublisherQueryApiModel body, bool? onlyServerState = default(bool?), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QueryPublisherWithHttpMessagesAsync(body, onlyServerState, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get filtered list of publishers
            /// </summary>
            /// <remarks>
            /// Get a list of publishers filtered using the specified query parameters. The
            /// returned model can contain a continuation token if more results are
            /// available. Call the GetListOfPublisher operation using the token to
            /// retrieve more results.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='siteId'>
            /// Site of the publisher
            /// </param>
            /// <param name='connected'>
            /// Included connected or disconnected
            /// </param>
            /// <param name='onlyServerState'>
            /// Whether to include only server state, or display current client state of
            /// the endpoint if available
            /// </param>
            /// <param name='pageSize'>
            /// Number of results to return
            /// </param>
            public static PublisherListApiModel GetFilteredListOfPublisher(this IAzureOpcRegistryClient operations, string siteId = default(string), bool? connected = default(bool?), bool? onlyServerState = default(bool?), int? pageSize = default(int?))
            {
                return operations.GetFilteredListOfPublisherAsync(siteId, connected, onlyServerState, pageSize).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get filtered list of publishers
            /// </summary>
            /// <remarks>
            /// Get a list of publishers filtered using the specified query parameters. The
            /// returned model can contain a continuation token if more results are
            /// available. Call the GetListOfPublisher operation using the token to
            /// retrieve more results.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='siteId'>
            /// Site of the publisher
            /// </param>
            /// <param name='connected'>
            /// Included connected or disconnected
            /// </param>
            /// <param name='onlyServerState'>
            /// Whether to include only server state, or display current client state of
            /// the endpoint if available
            /// </param>
            /// <param name='pageSize'>
            /// Number of results to return
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PublisherListApiModel> GetFilteredListOfPublisherAsync(this IAzureOpcRegistryClient operations, string siteId = default(string), bool? connected = default(bool?), bool? onlyServerState = default(bool?), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFilteredListOfPublisherWithHttpMessagesAsync(siteId, connected, onlyServerState, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Subscribe to publisher registry events
            /// </summary>
            /// <remarks>
            /// Register a user to receive publisher events through SignalR.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The user id that will receive publisher events.
            /// </param>
            public static void Subscribe4(this IAzureOpcRegistryClient operations, string body = default(string))
            {
                operations.Subscribe4Async(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Subscribe to publisher registry events
            /// </summary>
            /// <remarks>
            /// Register a user to receive publisher events through SignalR.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The user id that will receive publisher events.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task Subscribe4Async(this IAzureOpcRegistryClient operations, string body = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.Subscribe4WithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Unsubscribe registry events
            /// </summary>
            /// <remarks>
            /// Unregister a user and stop it from receiving publisher events.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The user id that will not receive any more publisher events
            /// </param>
            public static void Unsubscribe4(this IAzureOpcRegistryClient operations, string userId)
            {
                operations.Unsubscribe4Async(userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Unsubscribe registry events
            /// </summary>
            /// <remarks>
            /// Unregister a user and stop it from receiving publisher events.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The user id that will not receive any more publisher events
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task Unsubscribe4Async(this IAzureOpcRegistryClient operations, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.Unsubscribe4WithHttpMessagesAsync(userId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Return the service status in the form of the service status
            /// api model.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static StatusResponseApiModel GetStatus(this IAzureOpcRegistryClient operations)
            {
                return operations.GetStatusAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Return the service status in the form of the service status
            /// api model.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StatusResponseApiModel> GetStatusAsync(this IAzureOpcRegistryClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStatusWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get supervisor registration information
            /// </summary>
            /// <remarks>
            /// Returns a supervisor's registration and connectivity information. A
            /// supervisor id corresponds to the twin modules module identity.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supervisorId'>
            /// Supervisor identifier
            /// </param>
            /// <param name='onlyServerState'>
            /// Whether to include only server state, or display current client state of
            /// the endpoint if available
            /// </param>
            public static SupervisorApiModel GetSupervisor(this IAzureOpcRegistryClient operations, string supervisorId, bool? onlyServerState = default(bool?))
            {
                return operations.GetSupervisorAsync(supervisorId, onlyServerState).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get supervisor registration information
            /// </summary>
            /// <remarks>
            /// Returns a supervisor's registration and connectivity information. A
            /// supervisor id corresponds to the twin modules module identity.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supervisorId'>
            /// Supervisor identifier
            /// </param>
            /// <param name='onlyServerState'>
            /// Whether to include only server state, or display current client state of
            /// the endpoint if available
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SupervisorApiModel> GetSupervisorAsync(this IAzureOpcRegistryClient operations, string supervisorId, bool? onlyServerState = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSupervisorWithHttpMessagesAsync(supervisorId, onlyServerState, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update supervisor information
            /// </summary>
            /// <remarks>
            /// Allows a caller to configure recurring discovery runs on the twin module
            /// identified by the supervisor id or update site information.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supervisorId'>
            /// supervisor identifier
            /// </param>
            /// <param name='body'>
            /// Patch request
            /// </param>
            public static void UpdateSupervisor(this IAzureOpcRegistryClient operations, string supervisorId, SupervisorUpdateApiModel body)
            {
                operations.UpdateSupervisorAsync(supervisorId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update supervisor information
            /// </summary>
            /// <remarks>
            /// Allows a caller to configure recurring discovery runs on the twin module
            /// identified by the supervisor id or update site information.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supervisorId'>
            /// supervisor identifier
            /// </param>
            /// <param name='body'>
            /// Patch request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateSupervisorAsync(this IAzureOpcRegistryClient operations, string supervisorId, SupervisorUpdateApiModel body, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateSupervisorWithHttpMessagesAsync(supervisorId, body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get runtime status of supervisor
            /// </summary>
            /// <remarks>
            /// Allows a caller to get runtime status for a supervisor.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supervisorId'>
            /// supervisor identifier
            /// </param>
            public static SupervisorStatusApiModel GetSupervisorStatus(this IAzureOpcRegistryClient operations, string supervisorId)
            {
                return operations.GetSupervisorStatusAsync(supervisorId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get runtime status of supervisor
            /// </summary>
            /// <remarks>
            /// Allows a caller to get runtime status for a supervisor.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supervisorId'>
            /// supervisor identifier
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SupervisorStatusApiModel> GetSupervisorStatusAsync(this IAzureOpcRegistryClient operations, string supervisorId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSupervisorStatusWithHttpMessagesAsync(supervisorId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Reset supervisor
            /// </summary>
            /// <remarks>
            /// Allows a caller to reset the twin module using its supervisor identity
            /// identifier.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supervisorId'>
            /// supervisor identifier
            /// </param>
            public static void ResetSupervisor(this IAzureOpcRegistryClient operations, string supervisorId)
            {
                operations.ResetSupervisorAsync(supervisorId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Reset supervisor
            /// </summary>
            /// <remarks>
            /// Allows a caller to reset the twin module using its supervisor identity
            /// identifier.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='supervisorId'>
            /// supervisor identifier
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ResetSupervisorAsync(this IAzureOpcRegistryClient operations, string supervisorId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ResetSupervisorWithHttpMessagesAsync(supervisorId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get list of supervisors
            /// </summary>
            /// <remarks>
            /// Get all registered supervisors and therefore twin modules in paged form.
            /// The returned model can contain a continuation token if more results are
            /// available. Call this operation again using the token to retrieve more
            /// results.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='onlyServerState'>
            /// Whether to include only server state, or display current client state of
            /// the endpoint if available
            /// </param>
            /// <param name='continuationToken'>
            /// Optional Continuation token
            /// </param>
            /// <param name='pageSize'>
            /// Optional number of results to return
            /// </param>
            public static SupervisorListApiModel GetListOfSupervisors(this IAzureOpcRegistryClient operations, bool? onlyServerState = default(bool?), string continuationToken = default(string), int? pageSize = default(int?))
            {
                return operations.GetListOfSupervisorsAsync(onlyServerState, continuationToken, pageSize).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get list of supervisors
            /// </summary>
            /// <remarks>
            /// Get all registered supervisors and therefore twin modules in paged form.
            /// The returned model can contain a continuation token if more results are
            /// available. Call this operation again using the token to retrieve more
            /// results.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='onlyServerState'>
            /// Whether to include only server state, or display current client state of
            /// the endpoint if available
            /// </param>
            /// <param name='continuationToken'>
            /// Optional Continuation token
            /// </param>
            /// <param name='pageSize'>
            /// Optional number of results to return
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SupervisorListApiModel> GetListOfSupervisorsAsync(this IAzureOpcRegistryClient operations, bool? onlyServerState = default(bool?), string continuationToken = default(string), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetListOfSupervisorsWithHttpMessagesAsync(onlyServerState, continuationToken, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Query supervisors
            /// </summary>
            /// <remarks>
            /// Get all supervisors that match a specified query. The returned model can
            /// contain a continuation token if more results are available. Call the
            /// GetListOfSupervisors operation using the token to retrieve more results.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Supervisors query model
            /// </param>
            /// <param name='onlyServerState'>
            /// Whether to include only server state, or display current client state of
            /// the endpoint if available
            /// </param>
            /// <param name='pageSize'>
            /// Number of results to return
            /// </param>
            public static SupervisorListApiModel QuerySupervisors(this IAzureOpcRegistryClient operations, SupervisorQueryApiModel body, bool? onlyServerState = default(bool?), int? pageSize = default(int?))
            {
                return operations.QuerySupervisorsAsync(body, onlyServerState, pageSize).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Query supervisors
            /// </summary>
            /// <remarks>
            /// Get all supervisors that match a specified query. The returned model can
            /// contain a continuation token if more results are available. Call the
            /// GetListOfSupervisors operation using the token to retrieve more results.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// Supervisors query model
            /// </param>
            /// <param name='onlyServerState'>
            /// Whether to include only server state, or display current client state of
            /// the endpoint if available
            /// </param>
            /// <param name='pageSize'>
            /// Number of results to return
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SupervisorListApiModel> QuerySupervisorsAsync(this IAzureOpcRegistryClient operations, SupervisorQueryApiModel body, bool? onlyServerState = default(bool?), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.QuerySupervisorsWithHttpMessagesAsync(body, onlyServerState, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get filtered list of supervisors
            /// </summary>
            /// <remarks>
            /// Get a list of supervisors filtered using the specified query parameters.
            /// The returned model can contain a continuation token if more results are
            /// available. Call the GetListOfSupervisors operation using the token to
            /// retrieve more results.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='siteId'>
            /// Site of the supervisor
            /// </param>
            /// <param name='connected'>
            /// Included connected or disconnected
            /// </param>
            /// <param name='onlyServerState'>
            /// Whether to include only server state, or display current client state of
            /// the endpoint if available
            /// </param>
            /// <param name='pageSize'>
            /// Number of results to return
            /// </param>
            public static SupervisorListApiModel GetFilteredListOfSupervisors(this IAzureOpcRegistryClient operations, string siteId = default(string), bool? connected = default(bool?), bool? onlyServerState = default(bool?), int? pageSize = default(int?))
            {
                return operations.GetFilteredListOfSupervisorsAsync(siteId, connected, onlyServerState, pageSize).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get filtered list of supervisors
            /// </summary>
            /// <remarks>
            /// Get a list of supervisors filtered using the specified query parameters.
            /// The returned model can contain a continuation token if more results are
            /// available. Call the GetListOfSupervisors operation using the token to
            /// retrieve more results.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='siteId'>
            /// Site of the supervisor
            /// </param>
            /// <param name='connected'>
            /// Included connected or disconnected
            /// </param>
            /// <param name='onlyServerState'>
            /// Whether to include only server state, or display current client state of
            /// the endpoint if available
            /// </param>
            /// <param name='pageSize'>
            /// Number of results to return
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SupervisorListApiModel> GetFilteredListOfSupervisorsAsync(this IAzureOpcRegistryClient operations, string siteId = default(string), bool? connected = default(bool?), bool? onlyServerState = default(bool?), int? pageSize = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFilteredListOfSupervisorsWithHttpMessagesAsync(siteId, connected, onlyServerState, pageSize, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Subscribe to supervisor registry events
            /// </summary>
            /// <remarks>
            /// Register a user to receive supervisor events through SignalR.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The user id that will receive supervisor events.
            /// </param>
            public static void Subscribe5(this IAzureOpcRegistryClient operations, string body = default(string))
            {
                operations.Subscribe5Async(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Subscribe to supervisor registry events
            /// </summary>
            /// <remarks>
            /// Register a user to receive supervisor events through SignalR.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// The user id that will receive supervisor events.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task Subscribe5Async(this IAzureOpcRegistryClient operations, string body = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.Subscribe5WithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Unsubscribe registry events
            /// </summary>
            /// <remarks>
            /// Unregister a user and stop it from receiving supervisor events.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The user id that will not receive any more supervisor events
            /// </param>
            public static void Unsubscribe5(this IAzureOpcRegistryClient operations, string userId)
            {
                operations.Unsubscribe5Async(userId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Unsubscribe registry events
            /// </summary>
            /// <remarks>
            /// Unregister a user and stop it from receiving supervisor events.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// The user id that will not receive any more supervisor events
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task Unsubscribe5Async(this IAzureOpcRegistryClient operations, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.Unsubscribe5WithHttpMessagesAsync(userId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
