// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.IIoT.Opc.Registry
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Azure Industrial IoT OPC UA Registry Service
    /// </summary>
    public partial interface IAzureOpcRegistryClient : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// Subscription credentials which uniquely identify client
        /// subscription.
        /// </summary>
        ServiceClientCredentials Credentials { get; }


        /// <summary>
        /// Register new server
        /// </summary>
        /// <remarks>
        /// Registers a server solely using a discovery url. Requires that the
        /// onboarding agent service is running and the server can be located
        /// by a supervisor in its network using the discovery url.
        /// </remarks>
        /// <param name='body'>
        /// Server registration request
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> RegisterServerWithHttpMessagesAsync(ServerRegistrationRequestApiModel body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create new application
        /// </summary>
        /// <remarks>
        /// The application is registered using the provided information, but
        /// it is not associated with a supervisor. This is useful for when you
        /// need to register clients or you want to register a server that is
        /// located in a network not reachable through a Twin module.
        /// </remarks>
        /// <param name='body'>
        /// Application registration request
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ApplicationRegistrationResponseApiModel>> CreateApplicationWithHttpMessagesAsync(ApplicationRegistrationRequestApiModel body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Purge applications
        /// </summary>
        /// <remarks>
        /// Purges all applications that have not been seen for a specified
        /// amount of time.
        /// </remarks>
        /// <param name='notSeenFor'>
        /// A duration in milliseconds
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteAllDisabledApplicationsWithHttpMessagesAsync(string notSeenFor = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get list of applications
        /// </summary>
        /// <remarks>
        /// Get all registered applications in paged form. The returned model
        /// can contain a continuation token if more results are available.
        /// Call this operation again using the token to retrieve more results.
        /// </remarks>
        /// <param name='continuationToken'>
        /// Optional Continuation token
        /// </param>
        /// <param name='pageSize'>
        /// Optional number of results to return
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ApplicationInfoListApiModel>> GetListOfApplicationsWithHttpMessagesAsync(string continuationToken = default(string), int? pageSize = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Disable an enabled application.
        /// </summary>
        /// <remarks>
        /// A manager can disable an application.
        /// </remarks>
        /// <param name='applicationId'>
        /// The application id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DisableApplicationWithHttpMessagesAsync(string applicationId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Re-enable a disabled application.
        /// </summary>
        /// <remarks>
        /// A manager can enable an application.
        /// </remarks>
        /// <param name='applicationId'>
        /// The application id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> EnableApplicationWithHttpMessagesAsync(string applicationId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Discover servers
        /// </summary>
        /// <remarks>
        /// Registers servers by running a discovery scan in a supervisor's
        /// network. Requires that the onboarding agent service is running.
        /// </remarks>
        /// <param name='body'>
        /// Discovery request
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DiscoverServerWithHttpMessagesAsync(DiscoveryRequestApiModel body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancel discovery
        /// </summary>
        /// <remarks>
        /// Cancels a discovery request using the request identifier.
        /// </remarks>
        /// <param name='requestId'>
        /// Discovery request
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> CancelWithHttpMessagesAsync(string requestId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get application registration
        /// </summary>
        /// <param name='applicationId'>
        /// Application id for the server
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ApplicationRegistrationApiModel>> GetApplicationRegistrationWithHttpMessagesAsync(string applicationId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update application registration
        /// </summary>
        /// <remarks>
        /// The application information is updated with new properties. Note
        /// that this information might be overridden if the application is
        /// re-discovered during a discovery run (recurring or one-time).
        /// </remarks>
        /// <param name='applicationId'>
        /// The identifier of the application
        /// </param>
        /// <param name='body'>
        /// Application update request
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> UpdateApplicationRegistrationWithHttpMessagesAsync(string applicationId, ApplicationRegistrationUpdateApiModel body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Unregister application
        /// </summary>
        /// <remarks>
        /// Unregisters and deletes application and all its associated
        /// endpoints.
        /// </remarks>
        /// <param name='applicationId'>
        /// The identifier of the application
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteApplicationWithHttpMessagesAsync(string applicationId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get list of sites
        /// </summary>
        /// <remarks>
        /// List all sites applications are registered in.
        /// </remarks>
        /// <param name='continuationToken'>
        /// Optional Continuation token
        /// </param>
        /// <param name='pageSize'>
        /// Optional number of results to return
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ApplicationSiteListApiModel>> GetListOfSitesWithHttpMessagesAsync(string continuationToken = default(string), int? pageSize = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Query applications
        /// </summary>
        /// <remarks>
        /// List applications that match a query model. The returned model can
        /// contain a continuation token if more results are available. Call
        /// the GetListOfApplications operation using the token to retrieve
        /// more results.
        /// </remarks>
        /// <param name='body'>
        /// Application query
        /// </param>
        /// <param name='pageSize'>
        /// Optional number of results to return
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ApplicationInfoListApiModel>> QueryApplicationsWithHttpMessagesAsync(ApplicationRegistrationQueryApiModel body, int? pageSize = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get filtered list of applications
        /// </summary>
        /// <remarks>
        /// Get a list of applications filtered using the specified query
        /// parameters. The returned model can contain a continuation token if
        /// more results are available. Call the GetListOfApplications
        /// operation using the token to retrieve more results.
        /// </remarks>
        /// <param name='body'>
        /// Applications Query model
        /// </param>
        /// <param name='pageSize'>
        /// Number of results to return
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ApplicationInfoListApiModel>> GetFilteredListOfApplicationsWithHttpMessagesAsync(ApplicationRegistrationQueryApiModel body, int? pageSize = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Query applications by id.
        /// </summary>
        /// <remarks>
        /// A query model which supports the OPC UA Global Discovery Server
        /// query.
        /// </remarks>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ApplicationRecordListApiModel>> QueryApplicationsByIdWithHttpMessagesAsync(ApplicationRecordQueryApiModel body = default(ApplicationRecordQueryApiModel), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Subscribe for application events
        /// </summary>
        /// <remarks>
        /// Register a client to receive application events through SignalR.
        /// </remarks>
        /// <param name='body'>
        /// The user that will receive application events.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> SubscribeWithHttpMessagesAsync(string body = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Unsubscribe from application events
        /// </summary>
        /// <remarks>
        /// Unregister a user and stop it from receiving events.
        /// </remarks>
        /// <param name='userId'>
        /// The user id that will not receive any more events
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> UnsubscribeWithHttpMessagesAsync(string userId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get discoverer registration information
        /// </summary>
        /// <remarks>
        /// Returns a discoverer's registration and connectivity information. A
        /// discoverer id corresponds to the twin modules module identity.
        /// </remarks>
        /// <param name='discovererId'>
        /// Discoverer identifier
        /// </param>
        /// <param name='onlyServerState'>
        /// Whether to include only server state, or display current client
        /// state of the endpoint if available
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DiscovererApiModel>> GetDiscovererWithHttpMessagesAsync(string discovererId, bool? onlyServerState = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update discoverer information
        /// </summary>
        /// <remarks>
        /// Allows a caller to configure recurring discovery runs on the twin
        /// module identified by the discoverer id or update site information.
        /// </remarks>
        /// <param name='discovererId'>
        /// discoverer identifier
        /// </param>
        /// <param name='body'>
        /// Patch request
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> UpdateDiscovererWithHttpMessagesAsync(string discovererId, DiscovererUpdateApiModel body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Enable server discovery
        /// </summary>
        /// <remarks>
        /// Allows a caller to configure recurring discovery runs on the
        /// discovery module identified by the module id.
        /// </remarks>
        /// <param name='discovererId'>
        /// discoverer identifier
        /// </param>
        /// <param name='mode'>
        /// Discovery mode. Possible values include: 'Off', 'Local', 'Network',
        /// 'Fast', 'Scan'
        /// </param>
        /// <param name='body'>
        /// Discovery configuration
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> SetDiscoveryModeWithHttpMessagesAsync(string discovererId, DiscoveryMode mode, DiscoveryConfigApiModel body = default(DiscoveryConfigApiModel), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get list of discoverers
        /// </summary>
        /// <remarks>
        /// Get all registered discoverers and therefore twin modules in paged
        /// form. The returned model can contain a continuation token if more
        /// results are available. Call this operation again using the token to
        /// retrieve more results.
        /// </remarks>
        /// <param name='onlyServerState'>
        /// Whether to include only server state, or display current client
        /// state of the endpoint if available
        /// </param>
        /// <param name='continuationToken'>
        /// Optional Continuation token
        /// </param>
        /// <param name='pageSize'>
        /// Optional number of results to return
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DiscovererListApiModel>> GetListOfDiscoverersWithHttpMessagesAsync(bool? onlyServerState = default(bool?), string continuationToken = default(string), int? pageSize = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Query discoverers
        /// </summary>
        /// <remarks>
        /// Get all discoverers that match a specified query. The returned
        /// model can contain a continuation token if more results are
        /// available. Call the GetListOfDiscoverers operation using the token
        /// to retrieve more results.
        /// </remarks>
        /// <param name='body'>
        /// Discoverers query model
        /// </param>
        /// <param name='onlyServerState'>
        /// Whether to include only server state, or display current client
        /// state of the endpoint if available
        /// </param>
        /// <param name='pageSize'>
        /// Number of results to return
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DiscovererListApiModel>> QueryDiscoverersWithHttpMessagesAsync(DiscovererQueryApiModel body, bool? onlyServerState = default(bool?), int? pageSize = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get filtered list of discoverers
        /// </summary>
        /// <remarks>
        /// Get a list of discoverers filtered using the specified query
        /// parameters. The returned model can contain a continuation token if
        /// more results are available. Call the GetListOfDiscoverers operation
        /// using the token to retrieve more results.
        /// </remarks>
        /// <param name='siteId'>
        /// Site of the discoverer
        /// </param>
        /// <param name='discovery'>
        /// Discovery mode of discoverer. Possible values include: 'Off',
        /// 'Local', 'Network', 'Fast', 'Scan'
        /// </param>
        /// <param name='connected'>
        /// Included connected or disconnected
        /// </param>
        /// <param name='onlyServerState'>
        /// Whether to include only server state, or display current client
        /// state of the endpoint if available
        /// </param>
        /// <param name='pageSize'>
        /// Number of results to return
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<DiscovererListApiModel>> GetFilteredListOfDiscoverersWithHttpMessagesAsync(string siteId = default(string), DiscoveryMode? discovery = default(DiscoveryMode?), bool? connected = default(bool?), bool? onlyServerState = default(bool?), int? pageSize = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Subscribe to discoverer registry events
        /// </summary>
        /// <remarks>
        /// Register a user to receive discoverer events through SignalR.
        /// </remarks>
        /// <param name='body'>
        /// The user id that will receive discoverer events.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> Subscribe1WithHttpMessagesAsync(string body = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Unsubscribe registry events
        /// </summary>
        /// <remarks>
        /// Unregister a user and stop it from receiving discoverer events.
        /// </remarks>
        /// <param name='userId'>
        /// The user id that will not receive any more discoverer events
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> Unsubscribe1WithHttpMessagesAsync(string userId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Subscribe to discovery progress from discoverer
        /// </summary>
        /// <remarks>
        /// Register a client to receive discovery progress events through
        /// SignalR from a particular discoverer.
        /// </remarks>
        /// <param name='discovererId'>
        /// The discoverer to subscribe to
        /// </param>
        /// <param name='body'>
        /// The user id that will receive discovery events.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> SubscribeByDiscovererIdWithHttpMessagesAsync(string discovererId, string body = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Subscribe to discovery progress for a request
        /// </summary>
        /// <remarks>
        /// Register a client to receive discovery progress events through
        /// SignalR for a particular request.
        /// </remarks>
        /// <param name='requestId'>
        /// The request to monitor
        /// </param>
        /// <param name='body'>
        /// The user id that will receive discovery events.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> SubscribeByRequestIdWithHttpMessagesAsync(string requestId, string body = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Unsubscribe from discovery progress for a request.
        /// </summary>
        /// <remarks>
        /// Unregister a client and stop it from receiving discovery events for
        /// a particular request.
        /// </remarks>
        /// <param name='requestId'>
        /// The request to unsubscribe from
        /// </param>
        /// <param name='userId'>
        /// The user id that will not receive any more discovery progress
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> UnsubscribeByRequestIdWithHttpMessagesAsync(string requestId, string userId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Unsubscribe from discovery progress from discoverer.
        /// </summary>
        /// <remarks>
        /// Unregister a client and stop it from receiving discovery events.
        /// </remarks>
        /// <param name='discovererId'>
        /// The discoverer to unsubscribe from
        /// </param>
        /// <param name='userId'>
        /// The user id that will not receive any more discovery progress
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> UnsubscribeByDiscovererIdWithHttpMessagesAsync(string discovererId, string userId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Activate endpoint
        /// </summary>
        /// <remarks>
        /// Activates an endpoint for subsequent use in twin service. All
        /// endpoints must be activated using this API or through a activation
        /// filter during application registration or discovery.
        /// </remarks>
        /// <param name='endpointId'>
        /// endpoint identifier
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ActivateEndpointWithHttpMessagesAsync(string endpointId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get endpoint information
        /// </summary>
        /// <remarks>
        /// Gets information about an endpoint.
        /// </remarks>
        /// <param name='endpointId'>
        /// endpoint identifier
        /// </param>
        /// <param name='onlyServerState'>
        /// Whether to include only server state, or display current client
        /// state of the endpoint if available
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<EndpointInfoApiModel>> GetEndpointWithHttpMessagesAsync(string endpointId, bool? onlyServerState = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get list of endpoints
        /// </summary>
        /// <remarks>
        /// Get all registered endpoints in paged form. The returned model can
        /// contain a continuation token if more results are available. Call
        /// this operation again using the token to retrieve more results.
        /// </remarks>
        /// <param name='onlyServerState'>
        /// Whether to include only server state, or display current client
        /// state of the endpoint if available
        /// </param>
        /// <param name='continuationToken'>
        /// Optional Continuation token
        /// </param>
        /// <param name='pageSize'>
        /// Optional number of results to return
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<EndpointInfoListApiModel>> GetListOfEndpointsWithHttpMessagesAsync(bool? onlyServerState = default(bool?), string continuationToken = default(string), int? pageSize = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Query endpoints
        /// </summary>
        /// <remarks>
        /// Return endpoints that match the specified query. The returned model
        /// can contain a continuation token if more results are available.
        /// Call the GetListOfEndpoints operation using the token to retrieve
        /// more results.
        /// </remarks>
        /// <param name='body'>
        /// Query to match
        /// </param>
        /// <param name='onlyServerState'>
        /// Whether to include only server state, or display current client
        /// state of the endpoint if available
        /// </param>
        /// <param name='pageSize'>
        /// Optional number of results to return
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<EndpointInfoListApiModel>> QueryEndpointsWithHttpMessagesAsync(EndpointRegistrationQueryApiModel body, bool? onlyServerState = default(bool?), int? pageSize = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get filtered list of endpoints
        /// </summary>
        /// <remarks>
        /// Get a list of endpoints filtered using the specified query
        /// parameters. The returned model can contain a continuation token if
        /// more results are available. Call the GetListOfEndpoints operation
        /// using the token to retrieve more results.
        /// </remarks>
        /// <param name='url'>
        /// Endoint url for direct server access
        /// </param>
        /// <param name='certificate'>
        /// Certificate of the endpoint
        /// </param>
        /// <param name='securityMode'>
        /// Security Mode. Possible values include: 'Best', 'Sign',
        /// 'SignAndEncrypt', 'None'
        /// </param>
        /// <param name='securityPolicy'>
        /// Security policy uri
        /// </param>
        /// <param name='activated'>
        /// Whether the endpoint was activated
        /// </param>
        /// <param name='connected'>
        /// Whether the endpoint is connected on supervisor.
        /// </param>
        /// <param name='endpointState'>
        /// The last state of the the activated endpoint. Possible values
        /// include: 'Connecting', 'NotReachable', 'Busy', 'NoTrust',
        /// 'CertificateInvalid', 'Ready', 'Error'
        /// </param>
        /// <param name='includeNotSeenSince'>
        /// Whether to include endpoints that were soft deleted
        /// </param>
        /// <param name='discovererId'>
        /// Discoverer id to filter with
        /// </param>
        /// <param name='applicationId'>
        /// Application id to filter
        /// </param>
        /// <param name='supervisorId'>
        /// Supervisor id to filter with
        /// </param>
        /// <param name='siteOrGatewayId'>
        /// Site or gateway id to filter with
        /// </param>
        /// <param name='onlyServerState'>
        /// Whether to include only server state, or display current client
        /// state of the endpoint if available
        /// </param>
        /// <param name='pageSize'>
        /// Optional number of results to return
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<EndpointInfoListApiModel>> GetFilteredListOfEndpointsWithHttpMessagesAsync(string url = default(string), byte[] certificate = default(byte[]), SecurityMode? securityMode = default(SecurityMode?), string securityPolicy = default(string), bool? activated = default(bool?), bool? connected = default(bool?), EndpointConnectivityState? endpointState = default(EndpointConnectivityState?), bool? includeNotSeenSince = default(bool?), string discovererId = default(string), string applicationId = default(string), string supervisorId = default(string), string siteOrGatewayId = default(string), bool? onlyServerState = default(bool?), int? pageSize = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deactivate endpoint
        /// </summary>
        /// <remarks>
        /// Deactivates the endpoint and disable access through twin service.
        /// </remarks>
        /// <param name='endpointId'>
        /// endpoint identifier
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeactivateEndpointWithHttpMessagesAsync(string endpointId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Subscribe for endpoint events
        /// </summary>
        /// <remarks>
        /// Register a user to receive endpoint events through SignalR.
        /// </remarks>
        /// <param name='body'>
        /// The user id that will receive endpoint events.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> Subscribe2WithHttpMessagesAsync(string body = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Unsubscribe from endpoint events
        /// </summary>
        /// <remarks>
        /// Unregister a user and stop it from receiving endpoint events.
        /// </remarks>
        /// <param name='userId'>
        /// The user id that will not receive any more endpoint events
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> Unsubscribe2WithHttpMessagesAsync(string userId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Gateway registration information
        /// </summary>
        /// <remarks>
        /// Returns a Gateway's registration and connectivity information. A
        /// Gateway id corresponds to the twin modules module identity.
        /// </remarks>
        /// <param name='gatewayId'>
        /// Gateway identifier
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<GatewayInfoApiModel>> GetGatewayWithHttpMessagesAsync(string gatewayId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update Gateway configuration
        /// </summary>
        /// <remarks>
        /// Allows a caller to configure operations on the Gateway module
        /// identified by the Gateway id.
        /// </remarks>
        /// <param name='gatewayId'>
        /// Gateway identifier
        /// </param>
        /// <param name='body'>
        /// Patch request
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> UpdateGatewayWithHttpMessagesAsync(string gatewayId, GatewayUpdateApiModel body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get list of Gateways
        /// </summary>
        /// <remarks>
        /// Get all registered Gateways and therefore twin modules in paged
        /// form. The returned model can contain a continuation token if more
        /// results are available. Call this operation again using the token to
        /// retrieve more results.
        /// </remarks>
        /// <param name='continuationToken'>
        /// Optional Continuation token
        /// </param>
        /// <param name='pageSize'>
        /// Optional number of results to return
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<GatewayListApiModel>> GetListOfGatewayWithHttpMessagesAsync(string continuationToken = default(string), int? pageSize = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Query Gateways
        /// </summary>
        /// <remarks>
        /// Get all Gateways that match a specified query. The returned model
        /// can contain a continuation token if more results are available.
        /// Call the GetListOfGateway operation using the token to retrieve
        /// more results.
        /// </remarks>
        /// <param name='body'>
        /// Gateway query model
        /// </param>
        /// <param name='pageSize'>
        /// Number of results to return
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<GatewayListApiModel>> QueryGatewayWithHttpMessagesAsync(GatewayQueryApiModel body, int? pageSize = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get filtered list of Gateways
        /// </summary>
        /// <remarks>
        /// Get a list of Gateways filtered using the specified query
        /// parameters. The returned model can contain a continuation token if
        /// more results are available. Call the GetListOfGateway operation
        /// using the token to retrieve more results.
        /// </remarks>
        /// <param name='siteId'>
        /// Site of the Gateway
        /// </param>
        /// <param name='connected'>
        /// Included connected or disconnected
        /// </param>
        /// <param name='pageSize'>
        /// Number of results to return
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<GatewayListApiModel>> GetFilteredListOfGatewayWithHttpMessagesAsync(string siteId = default(string), bool? connected = default(bool?), int? pageSize = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Subscribe to Gateway registry events
        /// </summary>
        /// <remarks>
        /// Register a user to receive Gateway events through SignalR.
        /// </remarks>
        /// <param name='body'>
        /// The user id that will receive Gateway events.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> Subscribe3WithHttpMessagesAsync(string body = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Unsubscribe registry events
        /// </summary>
        /// <remarks>
        /// Unregister a user and stop it from receiving Gateway events.
        /// </remarks>
        /// <param name='userId'>
        /// The user id that will not receive any more Gateway events
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> Unsubscribe3WithHttpMessagesAsync(string userId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get publisher registration information
        /// </summary>
        /// <remarks>
        /// Returns a publisher's registration and connectivity information. A
        /// publisher id corresponds to the twin modules module identity.
        /// </remarks>
        /// <param name='publisherId'>
        /// Publisher identifier
        /// </param>
        /// <param name='onlyServerState'>
        /// Whether to include only server state, or display current client
        /// state of the endpoint if available
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<PublisherApiModel>> GetPublisherWithHttpMessagesAsync(string publisherId, bool? onlyServerState = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update publisher configuration
        /// </summary>
        /// <remarks>
        /// Allows a caller to configure operations on the publisher module
        /// identified by the publisher id.
        /// </remarks>
        /// <param name='publisherId'>
        /// Publisher identifier
        /// </param>
        /// <param name='body'>
        /// Patch request
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> UpdatePublisherWithHttpMessagesAsync(string publisherId, PublisherUpdateApiModel body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get list of publishers
        /// </summary>
        /// <remarks>
        /// Get all registered publishers and therefore twin modules in paged
        /// form. The returned model can contain a continuation token if more
        /// results are available. Call this operation again using the token to
        /// retrieve more results.
        /// </remarks>
        /// <param name='onlyServerState'>
        /// Whether to include only server state, or display current client
        /// state of the endpoint if available
        /// </param>
        /// <param name='continuationToken'>
        /// Optional Continuation token
        /// </param>
        /// <param name='pageSize'>
        /// Optional number of results to return
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<PublisherListApiModel>> GetListOfPublisherWithHttpMessagesAsync(bool? onlyServerState = default(bool?), string continuationToken = default(string), int? pageSize = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Query publishers
        /// </summary>
        /// <remarks>
        /// Get all publishers that match a specified query. The returned model
        /// can contain a continuation token if more results are available.
        /// Call the GetListOfPublisher operation using the token to retrieve
        /// more results.
        /// </remarks>
        /// <param name='body'>
        /// Publisher query model
        /// </param>
        /// <param name='onlyServerState'>
        /// Whether to include only server state, or display current client
        /// state of the endpoint if available
        /// </param>
        /// <param name='pageSize'>
        /// Number of results to return
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<PublisherListApiModel>> QueryPublisherWithHttpMessagesAsync(PublisherQueryApiModel body, bool? onlyServerState = default(bool?), int? pageSize = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get filtered list of publishers
        /// </summary>
        /// <remarks>
        /// Get a list of publishers filtered using the specified query
        /// parameters. The returned model can contain a continuation token if
        /// more results are available. Call the GetListOfPublisher operation
        /// using the token to retrieve more results.
        /// </remarks>
        /// <param name='siteId'>
        /// Site of the publisher
        /// </param>
        /// <param name='connected'>
        /// Included connected or disconnected
        /// </param>
        /// <param name='onlyServerState'>
        /// Whether to include only server state, or display current client
        /// state of the endpoint if available
        /// </param>
        /// <param name='pageSize'>
        /// Number of results to return
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<PublisherListApiModel>> GetFilteredListOfPublisherWithHttpMessagesAsync(string siteId = default(string), bool? connected = default(bool?), bool? onlyServerState = default(bool?), int? pageSize = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Subscribe to publisher registry events
        /// </summary>
        /// <remarks>
        /// Register a user to receive publisher events through SignalR.
        /// </remarks>
        /// <param name='body'>
        /// The user id that will receive publisher events.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> Subscribe4WithHttpMessagesAsync(string body = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Unsubscribe registry events
        /// </summary>
        /// <remarks>
        /// Unregister a user and stop it from receiving publisher events.
        /// </remarks>
        /// <param name='userId'>
        /// The user id that will not receive any more publisher events
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> Unsubscribe4WithHttpMessagesAsync(string userId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Return the service status in the form of the service status
        /// api model.
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<StatusResponseApiModel>> GetStatusWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get supervisor registration information
        /// </summary>
        /// <remarks>
        /// Returns a supervisor's registration and connectivity information. A
        /// supervisor id corresponds to the twin modules module identity.
        /// </remarks>
        /// <param name='supervisorId'>
        /// Supervisor identifier
        /// </param>
        /// <param name='onlyServerState'>
        /// Whether to include only server state, or display current client
        /// state of the endpoint if available
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<SupervisorApiModel>> GetSupervisorWithHttpMessagesAsync(string supervisorId, bool? onlyServerState = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update supervisor information
        /// </summary>
        /// <remarks>
        /// Allows a caller to configure recurring discovery runs on the twin
        /// module identified by the supervisor id or update site information.
        /// </remarks>
        /// <param name='supervisorId'>
        /// supervisor identifier
        /// </param>
        /// <param name='body'>
        /// Patch request
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> UpdateSupervisorWithHttpMessagesAsync(string supervisorId, SupervisorUpdateApiModel body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get runtime status of supervisor
        /// </summary>
        /// <remarks>
        /// Allows a caller to get runtime status for a supervisor.
        /// </remarks>
        /// <param name='supervisorId'>
        /// supervisor identifier
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<SupervisorStatusApiModel>> GetSupervisorStatusWithHttpMessagesAsync(string supervisorId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Reset supervisor
        /// </summary>
        /// <remarks>
        /// Allows a caller to reset the twin module using its supervisor
        /// identity identifier.
        /// </remarks>
        /// <param name='supervisorId'>
        /// supervisor identifier
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> ResetSupervisorWithHttpMessagesAsync(string supervisorId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get list of supervisors
        /// </summary>
        /// <remarks>
        /// Get all registered supervisors and therefore twin modules in paged
        /// form. The returned model can contain a continuation token if more
        /// results are available. Call this operation again using the token to
        /// retrieve more results.
        /// </remarks>
        /// <param name='onlyServerState'>
        /// Whether to include only server state, or display current client
        /// state of the endpoint if available
        /// </param>
        /// <param name='continuationToken'>
        /// Optional Continuation token
        /// </param>
        /// <param name='pageSize'>
        /// Optional number of results to return
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<SupervisorListApiModel>> GetListOfSupervisorsWithHttpMessagesAsync(bool? onlyServerState = default(bool?), string continuationToken = default(string), int? pageSize = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Query supervisors
        /// </summary>
        /// <remarks>
        /// Get all supervisors that match a specified query. The returned
        /// model can contain a continuation token if more results are
        /// available. Call the GetListOfSupervisors operation using the token
        /// to retrieve more results.
        /// </remarks>
        /// <param name='body'>
        /// Supervisors query model
        /// </param>
        /// <param name='onlyServerState'>
        /// Whether to include only server state, or display current client
        /// state of the endpoint if available
        /// </param>
        /// <param name='pageSize'>
        /// Number of results to return
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<SupervisorListApiModel>> QuerySupervisorsWithHttpMessagesAsync(SupervisorQueryApiModel body, bool? onlyServerState = default(bool?), int? pageSize = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get filtered list of supervisors
        /// </summary>
        /// <remarks>
        /// Get a list of supervisors filtered using the specified query
        /// parameters. The returned model can contain a continuation token if
        /// more results are available. Call the GetListOfSupervisors operation
        /// using the token to retrieve more results.
        /// </remarks>
        /// <param name='siteId'>
        /// Site of the supervisor
        /// </param>
        /// <param name='connected'>
        /// Included connected or disconnected
        /// </param>
        /// <param name='onlyServerState'>
        /// Whether to include only server state, or display current client
        /// state of the endpoint if available
        /// </param>
        /// <param name='pageSize'>
        /// Number of results to return
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<SupervisorListApiModel>> GetFilteredListOfSupervisorsWithHttpMessagesAsync(string siteId = default(string), bool? connected = default(bool?), bool? onlyServerState = default(bool?), int? pageSize = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Subscribe to supervisor registry events
        /// </summary>
        /// <remarks>
        /// Register a user to receive supervisor events through SignalR.
        /// </remarks>
        /// <param name='body'>
        /// The user id that will receive supervisor events.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> Subscribe5WithHttpMessagesAsync(string body = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Unsubscribe registry events
        /// </summary>
        /// <remarks>
        /// Unregister a user and stop it from receiving supervisor events.
        /// </remarks>
        /// <param name='userId'>
        /// The user id that will not receive any more supervisor events
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> Unsubscribe5WithHttpMessagesAsync(string userId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
