/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.microsoft.azure.iiot.opc.vault;

import com.microsoft.azure.iiot.opc.vault.models.CertificateRequestQueryRequestApiModel;
import com.microsoft.azure.iiot.opc.vault.models.CertificateRequestQueryResponseApiModel;
import com.microsoft.azure.iiot.opc.vault.models.CertificateRequestRecordApiModel;
import com.microsoft.azure.iiot.opc.vault.models.FinishNewKeyPairRequestResponseApiModel;
import com.microsoft.azure.iiot.opc.vault.models.FinishSigningRequestResponseApiModel;
import com.microsoft.azure.iiot.opc.vault.models.StartNewKeyPairRequestApiModel;
import com.microsoft.azure.iiot.opc.vault.models.StartNewKeyPairRequestResponseApiModel;
import com.microsoft.azure.iiot.opc.vault.models.StartSigningRequestApiModel;
import com.microsoft.azure.iiot.opc.vault.models.StartSigningRequestResponseApiModel;
import com.microsoft.azure.iiot.opc.vault.models.StatusResponseApiModel;
import com.microsoft.azure.iiot.opc.vault.models.TrustGroupRegistrationApiModel;
import com.microsoft.azure.iiot.opc.vault.models.TrustGroupRegistrationListApiModel;
import com.microsoft.azure.iiot.opc.vault.models.TrustGroupRegistrationRequestApiModel;
import com.microsoft.azure.iiot.opc.vault.models.TrustGroupRegistrationResponseApiModel;
import com.microsoft.azure.iiot.opc.vault.models.TrustGroupRootCreateRequestApiModel;
import com.microsoft.azure.iiot.opc.vault.models.TrustGroupUpdateRequestApiModel;
import com.microsoft.azure.iiot.opc.vault.models.X509CertificateChainApiModel;
import com.microsoft.azure.iiot.opc.vault.models.X509CertificateListApiModel;
import com.microsoft.azure.iiot.opc.vault.models.X509CrlChainApiModel;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import rx.Observable;
import com.microsoft.rest.RestClient;

/**
 * The interface for AzureOpcVaultClient class.
 */
public interface AzureOpcVaultClient {
    /**
     * Gets the REST client.
     *
     * @return the {@link RestClient} object.
    */
    RestClient restClient();

    /**
     * The default base URL.
     */
    String DEFAULT_BASE_URL = "http://localhost:9080";

    /**
     * Get Issuer CA Certificate chain.
     *
     * @param serialNumber the serial number of the Issuer CA Certificate
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the X509CertificateChainApiModel object if successful.
     */
    X509CertificateChainApiModel getIssuerCertificateChain(String serialNumber);

    /**
     * Get Issuer CA Certificate chain.
     *
     * @param serialNumber the serial number of the Issuer CA Certificate
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<X509CertificateChainApiModel> getIssuerCertificateChainAsync(String serialNumber, final ServiceCallback<X509CertificateChainApiModel> serviceCallback);

    /**
     * Get Issuer CA Certificate chain.
     *
     * @param serialNumber the serial number of the Issuer CA Certificate
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the X509CertificateChainApiModel object
     */
    Observable<X509CertificateChainApiModel> getIssuerCertificateChainAsync(String serialNumber);

    /**
     * Get Issuer CA Certificate chain.
     *
     * @param serialNumber the serial number of the Issuer CA Certificate
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the X509CertificateChainApiModel object
     */
    Observable<ServiceResponse<X509CertificateChainApiModel>> getIssuerCertificateChainWithServiceResponseAsync(String serialNumber);

    /**
     * Get Issuer CA CRL chain.
     *
     * @param serialNumber the serial number of the Issuer CA Certificate
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the X509CrlChainApiModel object if successful.
     */
    X509CrlChainApiModel getIssuerCrlChain(String serialNumber);

    /**
     * Get Issuer CA CRL chain.
     *
     * @param serialNumber the serial number of the Issuer CA Certificate
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<X509CrlChainApiModel> getIssuerCrlChainAsync(String serialNumber, final ServiceCallback<X509CrlChainApiModel> serviceCallback);

    /**
     * Get Issuer CA CRL chain.
     *
     * @param serialNumber the serial number of the Issuer CA Certificate
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the X509CrlChainApiModel object
     */
    Observable<X509CrlChainApiModel> getIssuerCrlChainAsync(String serialNumber);

    /**
     * Get Issuer CA CRL chain.
     *
     * @param serialNumber the serial number of the Issuer CA Certificate
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the X509CrlChainApiModel object
     */
    Observable<ServiceResponse<X509CrlChainApiModel>> getIssuerCrlChainWithServiceResponseAsync(String serialNumber);

    /**
     * Get Issuer Certificate for Authority Information
     Access endpoint.
     *
     * @param serialNumber the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String getIssuerCertificateChain1(String serialNumber);

    /**
     * Get Issuer Certificate for Authority Information
     Access endpoint.
     *
     * @param serialNumber the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> getIssuerCertificateChain1Async(String serialNumber, final ServiceCallback<String> serviceCallback);

    /**
     * Get Issuer Certificate for Authority Information
     Access endpoint.
     *
     * @param serialNumber the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> getIssuerCertificateChain1Async(String serialNumber);

    /**
     * Get Issuer Certificate for Authority Information
     Access endpoint.
     *
     * @param serialNumber the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> getIssuerCertificateChain1WithServiceResponseAsync(String serialNumber);

    /**
     * Get Issuer CRL in CRL Distribution Endpoint.
     *
     * @param serialNumber the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the String object if successful.
     */
    String getIssuerCrlChain1(String serialNumber);

    /**
     * Get Issuer CRL in CRL Distribution Endpoint.
     *
     * @param serialNumber the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<String> getIssuerCrlChain1Async(String serialNumber, final ServiceCallback<String> serviceCallback);

    /**
     * Get Issuer CRL in CRL Distribution Endpoint.
     *
     * @param serialNumber the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<String> getIssuerCrlChain1Async(String serialNumber);

    /**
     * Get Issuer CRL in CRL Distribution Endpoint.
     *
     * @param serialNumber the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the String object
     */
    Observable<ServiceResponse<String>> getIssuerCrlChain1WithServiceResponseAsync(String serialNumber);

    /**
     * Create a certificate request with a certificate signing request (CSR).
     * The request is in the 'New' state after this call. Requires Writer or Manager role.
     *
     * @param body The signing request parameters
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the StartSigningRequestResponseApiModel object if successful.
     */
    StartSigningRequestResponseApiModel startSigningRequest(StartSigningRequestApiModel body);

    /**
     * Create a certificate request with a certificate signing request (CSR).
     * The request is in the 'New' state after this call. Requires Writer or Manager role.
     *
     * @param body The signing request parameters
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<StartSigningRequestResponseApiModel> startSigningRequestAsync(StartSigningRequestApiModel body, final ServiceCallback<StartSigningRequestResponseApiModel> serviceCallback);

    /**
     * Create a certificate request with a certificate signing request (CSR).
     * The request is in the 'New' state after this call. Requires Writer or Manager role.
     *
     * @param body The signing request parameters
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StartSigningRequestResponseApiModel object
     */
    Observable<StartSigningRequestResponseApiModel> startSigningRequestAsync(StartSigningRequestApiModel body);

    /**
     * Create a certificate request with a certificate signing request (CSR).
     * The request is in the 'New' state after this call. Requires Writer or Manager role.
     *
     * @param body The signing request parameters
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StartSigningRequestResponseApiModel object
     */
    Observable<ServiceResponse<StartSigningRequestResponseApiModel>> startSigningRequestWithServiceResponseAsync(StartSigningRequestApiModel body);

    /**
     * Fetch signing request results.
     * Can be called in any state. After a successful fetch in 'Completed' state, the request is moved into 'Accepted' state. Requires Writer role.
     *
     * @param requestId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the FinishSigningRequestResponseApiModel object if successful.
     */
    FinishSigningRequestResponseApiModel finishSigningRequest(String requestId);

    /**
     * Fetch signing request results.
     * Can be called in any state. After a successful fetch in 'Completed' state, the request is moved into 'Accepted' state. Requires Writer role.
     *
     * @param requestId the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<FinishSigningRequestResponseApiModel> finishSigningRequestAsync(String requestId, final ServiceCallback<FinishSigningRequestResponseApiModel> serviceCallback);

    /**
     * Fetch signing request results.
     * Can be called in any state. After a successful fetch in 'Completed' state, the request is moved into 'Accepted' state. Requires Writer role.
     *
     * @param requestId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FinishSigningRequestResponseApiModel object
     */
    Observable<FinishSigningRequestResponseApiModel> finishSigningRequestAsync(String requestId);

    /**
     * Fetch signing request results.
     * Can be called in any state. After a successful fetch in 'Completed' state, the request is moved into 'Accepted' state. Requires Writer role.
     *
     * @param requestId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FinishSigningRequestResponseApiModel object
     */
    Observable<ServiceResponse<FinishSigningRequestResponseApiModel>> finishSigningRequestWithServiceResponseAsync(String requestId);

    /**
     * Create a certificate request with a new key pair.
     * The request is in the 'New' state after this call. Requires Writer or Manager role.
     *
     * @param body The new key pair request parameters
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the StartNewKeyPairRequestResponseApiModel object if successful.
     */
    StartNewKeyPairRequestResponseApiModel startNewKeyPairRequest(StartNewKeyPairRequestApiModel body);

    /**
     * Create a certificate request with a new key pair.
     * The request is in the 'New' state after this call. Requires Writer or Manager role.
     *
     * @param body The new key pair request parameters
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<StartNewKeyPairRequestResponseApiModel> startNewKeyPairRequestAsync(StartNewKeyPairRequestApiModel body, final ServiceCallback<StartNewKeyPairRequestResponseApiModel> serviceCallback);

    /**
     * Create a certificate request with a new key pair.
     * The request is in the 'New' state after this call. Requires Writer or Manager role.
     *
     * @param body The new key pair request parameters
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StartNewKeyPairRequestResponseApiModel object
     */
    Observable<StartNewKeyPairRequestResponseApiModel> startNewKeyPairRequestAsync(StartNewKeyPairRequestApiModel body);

    /**
     * Create a certificate request with a new key pair.
     * The request is in the 'New' state after this call. Requires Writer or Manager role.
     *
     * @param body The new key pair request parameters
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StartNewKeyPairRequestResponseApiModel object
     */
    Observable<ServiceResponse<StartNewKeyPairRequestResponseApiModel>> startNewKeyPairRequestWithServiceResponseAsync(StartNewKeyPairRequestApiModel body);

    /**
     * Fetch certificate request result.
     * Can be called in any state. Fetches private key in 'Completed' state. After a successful fetch in 'Completed' state, the request is moved into 'Accepted' state. Requires Writer role.
     *
     * @param requestId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the FinishNewKeyPairRequestResponseApiModel object if successful.
     */
    FinishNewKeyPairRequestResponseApiModel finishNewKeyPairRequest(String requestId);

    /**
     * Fetch certificate request result.
     * Can be called in any state. Fetches private key in 'Completed' state. After a successful fetch in 'Completed' state, the request is moved into 'Accepted' state. Requires Writer role.
     *
     * @param requestId the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<FinishNewKeyPairRequestResponseApiModel> finishNewKeyPairRequestAsync(String requestId, final ServiceCallback<FinishNewKeyPairRequestResponseApiModel> serviceCallback);

    /**
     * Fetch certificate request result.
     * Can be called in any state. Fetches private key in 'Completed' state. After a successful fetch in 'Completed' state, the request is moved into 'Accepted' state. Requires Writer role.
     *
     * @param requestId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FinishNewKeyPairRequestResponseApiModel object
     */
    Observable<FinishNewKeyPairRequestResponseApiModel> finishNewKeyPairRequestAsync(String requestId);

    /**
     * Fetch certificate request result.
     * Can be called in any state. Fetches private key in 'Completed' state. After a successful fetch in 'Completed' state, the request is moved into 'Accepted' state. Requires Writer role.
     *
     * @param requestId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the FinishNewKeyPairRequestResponseApiModel object
     */
    Observable<ServiceResponse<FinishNewKeyPairRequestResponseApiModel>> finishNewKeyPairRequestWithServiceResponseAsync(String requestId);

    /**
     * Approve the certificate request.
     * Validates the request with the application database. - If Approved: - New Key Pair request: Creates the new key pair in the requested format, signs the certificate and stores the private key for later securely in KeyVault. - Cert Signing Request: Creates and signs the certificate. Deletes the CSR from the database. Stores the signed certificate for later use in the Database. The request is in the 'Approved' or 'Rejected' state after this call. Requires Approver role. Approver needs signing rights in KeyVault.
     *
     * @param requestId The certificate request id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void approveRequest(String requestId);

    /**
     * Approve the certificate request.
     * Validates the request with the application database. - If Approved: - New Key Pair request: Creates the new key pair in the requested format, signs the certificate and stores the private key for later securely in KeyVault. - Cert Signing Request: Creates and signs the certificate. Deletes the CSR from the database. Stores the signed certificate for later use in the Database. The request is in the 'Approved' or 'Rejected' state after this call. Requires Approver role. Approver needs signing rights in KeyVault.
     *
     * @param requestId The certificate request id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> approveRequestAsync(String requestId, final ServiceCallback<Void> serviceCallback);

    /**
     * Approve the certificate request.
     * Validates the request with the application database. - If Approved: - New Key Pair request: Creates the new key pair in the requested format, signs the certificate and stores the private key for later securely in KeyVault. - Cert Signing Request: Creates and signs the certificate. Deletes the CSR from the database. Stores the signed certificate for later use in the Database. The request is in the 'Approved' or 'Rejected' state after this call. Requires Approver role. Approver needs signing rights in KeyVault.
     *
     * @param requestId The certificate request id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> approveRequestAsync(String requestId);

    /**
     * Approve the certificate request.
     * Validates the request with the application database. - If Approved: - New Key Pair request: Creates the new key pair in the requested format, signs the certificate and stores the private key for later securely in KeyVault. - Cert Signing Request: Creates and signs the certificate. Deletes the CSR from the database. Stores the signed certificate for later use in the Database. The request is in the 'Approved' or 'Rejected' state after this call. Requires Approver role. Approver needs signing rights in KeyVault.
     *
     * @param requestId The certificate request id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> approveRequestWithServiceResponseAsync(String requestId);

    /**
     * Reject the certificate request.
     * The request is in the 'Rejected' state after this call. Requires Approver role. Approver needs signing rights in KeyVault.
     *
     * @param requestId The certificate request id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void rejectRequest(String requestId);

    /**
     * Reject the certificate request.
     * The request is in the 'Rejected' state after this call. Requires Approver role. Approver needs signing rights in KeyVault.
     *
     * @param requestId The certificate request id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> rejectRequestAsync(String requestId, final ServiceCallback<Void> serviceCallback);

    /**
     * Reject the certificate request.
     * The request is in the 'Rejected' state after this call. Requires Approver role. Approver needs signing rights in KeyVault.
     *
     * @param requestId The certificate request id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> rejectRequestAsync(String requestId);

    /**
     * Reject the certificate request.
     * The request is in the 'Rejected' state after this call. Requires Approver role. Approver needs signing rights in KeyVault.
     *
     * @param requestId The certificate request id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> rejectRequestWithServiceResponseAsync(String requestId);

    /**
     * Cancel request.
     * The request is in the 'Accepted' state after this call. Requires Writer role.
     *
     * @param requestId The certificate request id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void acceptRequest(String requestId);

    /**
     * Cancel request.
     * The request is in the 'Accepted' state after this call. Requires Writer role.
     *
     * @param requestId The certificate request id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> acceptRequestAsync(String requestId, final ServiceCallback<Void> serviceCallback);

    /**
     * Cancel request.
     * The request is in the 'Accepted' state after this call. Requires Writer role.
     *
     * @param requestId The certificate request id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> acceptRequestAsync(String requestId);

    /**
     * Cancel request.
     * The request is in the 'Accepted' state after this call. Requires Writer role.
     *
     * @param requestId The certificate request id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> acceptRequestWithServiceResponseAsync(String requestId);

    /**
     * Delete request. Physically delete the request.
     * By purging the request it is actually physically deleted from the database, including the public key and other information. Requires Manager role.
     *
     * @param requestId The certificate request id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void deleteRequest(String requestId);

    /**
     * Delete request. Physically delete the request.
     * By purging the request it is actually physically deleted from the database, including the public key and other information. Requires Manager role.
     *
     * @param requestId The certificate request id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteRequestAsync(String requestId, final ServiceCallback<Void> serviceCallback);

    /**
     * Delete request. Physically delete the request.
     * By purging the request it is actually physically deleted from the database, including the public key and other information. Requires Manager role.
     *
     * @param requestId The certificate request id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteRequestAsync(String requestId);

    /**
     * Delete request. Physically delete the request.
     * By purging the request it is actually physically deleted from the database, including the public key and other information. Requires Manager role.
     *
     * @param requestId The certificate request id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteRequestWithServiceResponseAsync(String requestId);

    /**
     * Get a specific certificate request.
     *
     * @param requestId The certificate request id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CertificateRequestRecordApiModel object if successful.
     */
    CertificateRequestRecordApiModel getRequest(String requestId);

    /**
     * Get a specific certificate request.
     *
     * @param requestId The certificate request id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<CertificateRequestRecordApiModel> getRequestAsync(String requestId, final ServiceCallback<CertificateRequestRecordApiModel> serviceCallback);

    /**
     * Get a specific certificate request.
     *
     * @param requestId The certificate request id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CertificateRequestRecordApiModel object
     */
    Observable<CertificateRequestRecordApiModel> getRequestAsync(String requestId);

    /**
     * Get a specific certificate request.
     *
     * @param requestId The certificate request id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CertificateRequestRecordApiModel object
     */
    Observable<ServiceResponse<CertificateRequestRecordApiModel>> getRequestWithServiceResponseAsync(String requestId);

    /**
     * Query for certificate requests.
     * Get all certificate requests in paged form. The returned model can contain a link to the next page if more results are available. Use ListRequests to continue.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CertificateRequestQueryResponseApiModel object if successful.
     */
    CertificateRequestQueryResponseApiModel queryRequests();

    /**
     * Query for certificate requests.
     * Get all certificate requests in paged form. The returned model can contain a link to the next page if more results are available. Use ListRequests to continue.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<CertificateRequestQueryResponseApiModel> queryRequestsAsync(final ServiceCallback<CertificateRequestQueryResponseApiModel> serviceCallback);

    /**
     * Query for certificate requests.
     * Get all certificate requests in paged form. The returned model can contain a link to the next page if more results are available. Use ListRequests to continue.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CertificateRequestQueryResponseApiModel object
     */
    Observable<CertificateRequestQueryResponseApiModel> queryRequestsAsync();

    /**
     * Query for certificate requests.
     * Get all certificate requests in paged form. The returned model can contain a link to the next page if more results are available. Use ListRequests to continue.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CertificateRequestQueryResponseApiModel object
     */
    Observable<ServiceResponse<CertificateRequestQueryResponseApiModel>> queryRequestsWithServiceResponseAsync();
    /**
     * Query for certificate requests.
     * Get all certificate requests in paged form. The returned model can contain a link to the next page if more results are available. Use ListRequests to continue.
     *
     * @param pageSize optional, the maximum number of result per page
     * @param body optional, query filter
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CertificateRequestQueryResponseApiModel object if successful.
     */
    CertificateRequestQueryResponseApiModel queryRequests(Integer pageSize, CertificateRequestQueryRequestApiModel body);

    /**
     * Query for certificate requests.
     * Get all certificate requests in paged form. The returned model can contain a link to the next page if more results are available. Use ListRequests to continue.
     *
     * @param pageSize optional, the maximum number of result per page
     * @param body optional, query filter
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<CertificateRequestQueryResponseApiModel> queryRequestsAsync(Integer pageSize, CertificateRequestQueryRequestApiModel body, final ServiceCallback<CertificateRequestQueryResponseApiModel> serviceCallback);

    /**
     * Query for certificate requests.
     * Get all certificate requests in paged form. The returned model can contain a link to the next page if more results are available. Use ListRequests to continue.
     *
     * @param pageSize optional, the maximum number of result per page
     * @param body optional, query filter
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CertificateRequestQueryResponseApiModel object
     */
    Observable<CertificateRequestQueryResponseApiModel> queryRequestsAsync(Integer pageSize, CertificateRequestQueryRequestApiModel body);

    /**
     * Query for certificate requests.
     * Get all certificate requests in paged form. The returned model can contain a link to the next page if more results are available. Use ListRequests to continue.
     *
     * @param pageSize optional, the maximum number of result per page
     * @param body optional, query filter
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CertificateRequestQueryResponseApiModel object
     */
    Observable<ServiceResponse<CertificateRequestQueryResponseApiModel>> queryRequestsWithServiceResponseAsync(Integer pageSize, CertificateRequestQueryRequestApiModel body);

    /**
     * Lists certificate requests.
     * Get all certificate requests in paged form or continue a current listing or query. The returned model can contain a link to the next page if more results are available.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CertificateRequestQueryResponseApiModel object if successful.
     */
    CertificateRequestQueryResponseApiModel listRequests();

    /**
     * Lists certificate requests.
     * Get all certificate requests in paged form or continue a current listing or query. The returned model can contain a link to the next page if more results are available.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<CertificateRequestQueryResponseApiModel> listRequestsAsync(final ServiceCallback<CertificateRequestQueryResponseApiModel> serviceCallback);

    /**
     * Lists certificate requests.
     * Get all certificate requests in paged form or continue a current listing or query. The returned model can contain a link to the next page if more results are available.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CertificateRequestQueryResponseApiModel object
     */
    Observable<CertificateRequestQueryResponseApiModel> listRequestsAsync();

    /**
     * Lists certificate requests.
     * Get all certificate requests in paged form or continue a current listing or query. The returned model can contain a link to the next page if more results are available.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CertificateRequestQueryResponseApiModel object
     */
    Observable<ServiceResponse<CertificateRequestQueryResponseApiModel>> listRequestsWithServiceResponseAsync();
    /**
     * Lists certificate requests.
     * Get all certificate requests in paged form or continue a current listing or query. The returned model can contain a link to the next page if more results are available.
     *
     * @param nextPageLink optional, link to next page
     * @param pageSize optional, the maximum number of result per page
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CertificateRequestQueryResponseApiModel object if successful.
     */
    CertificateRequestQueryResponseApiModel listRequests(String nextPageLink, Integer pageSize);

    /**
     * Lists certificate requests.
     * Get all certificate requests in paged form or continue a current listing or query. The returned model can contain a link to the next page if more results are available.
     *
     * @param nextPageLink optional, link to next page
     * @param pageSize optional, the maximum number of result per page
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<CertificateRequestQueryResponseApiModel> listRequestsAsync(String nextPageLink, Integer pageSize, final ServiceCallback<CertificateRequestQueryResponseApiModel> serviceCallback);

    /**
     * Lists certificate requests.
     * Get all certificate requests in paged form or continue a current listing or query. The returned model can contain a link to the next page if more results are available.
     *
     * @param nextPageLink optional, link to next page
     * @param pageSize optional, the maximum number of result per page
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CertificateRequestQueryResponseApiModel object
     */
    Observable<CertificateRequestQueryResponseApiModel> listRequestsAsync(String nextPageLink, Integer pageSize);

    /**
     * Lists certificate requests.
     * Get all certificate requests in paged form or continue a current listing or query. The returned model can contain a link to the next page if more results are available.
     *
     * @param nextPageLink optional, link to next page
     * @param pageSize optional, the maximum number of result per page
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CertificateRequestQueryResponseApiModel object
     */
    Observable<ServiceResponse<CertificateRequestQueryResponseApiModel>> listRequestsWithServiceResponseAsync(String nextPageLink, Integer pageSize);

    /**
     * Return the service status in the form of the service status
     api model.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the StatusResponseApiModel object if successful.
     */
    StatusResponseApiModel getStatus();

    /**
     * Return the service status in the form of the service status
     api model.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<StatusResponseApiModel> getStatusAsync(final ServiceCallback<StatusResponseApiModel> serviceCallback);

    /**
     * Return the service status in the form of the service status
     api model.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StatusResponseApiModel object
     */
    Observable<StatusResponseApiModel> getStatusAsync();

    /**
     * Return the service status in the form of the service status
     api model.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StatusResponseApiModel object
     */
    Observable<ServiceResponse<StatusResponseApiModel>> getStatusWithServiceResponseAsync();

    /**
     * Get information about all groups.
     * A trust group has a root certificate which issues certificates to entities. Entities can be part of a trust group and thus trust the root certificate and all entities that the root has issued certificates for.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TrustGroupRegistrationListApiModel object if successful.
     */
    TrustGroupRegistrationListApiModel listGroups();

    /**
     * Get information about all groups.
     * A trust group has a root certificate which issues certificates to entities. Entities can be part of a trust group and thus trust the root certificate and all entities that the root has issued certificates for.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TrustGroupRegistrationListApiModel> listGroupsAsync(final ServiceCallback<TrustGroupRegistrationListApiModel> serviceCallback);

    /**
     * Get information about all groups.
     * A trust group has a root certificate which issues certificates to entities. Entities can be part of a trust group and thus trust the root certificate and all entities that the root has issued certificates for.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrustGroupRegistrationListApiModel object
     */
    Observable<TrustGroupRegistrationListApiModel> listGroupsAsync();

    /**
     * Get information about all groups.
     * A trust group has a root certificate which issues certificates to entities. Entities can be part of a trust group and thus trust the root certificate and all entities that the root has issued certificates for.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrustGroupRegistrationListApiModel object
     */
    Observable<ServiceResponse<TrustGroupRegistrationListApiModel>> listGroupsWithServiceResponseAsync();
    /**
     * Get information about all groups.
     * A trust group has a root certificate which issues certificates to entities. Entities can be part of a trust group and thus trust the root certificate and all entities that the root has issued certificates for.
     *
     * @param nextPageLink optional, link to next page
     * @param pageSize optional, the maximum number of result per page
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TrustGroupRegistrationListApiModel object if successful.
     */
    TrustGroupRegistrationListApiModel listGroups(String nextPageLink, Integer pageSize);

    /**
     * Get information about all groups.
     * A trust group has a root certificate which issues certificates to entities. Entities can be part of a trust group and thus trust the root certificate and all entities that the root has issued certificates for.
     *
     * @param nextPageLink optional, link to next page
     * @param pageSize optional, the maximum number of result per page
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TrustGroupRegistrationListApiModel> listGroupsAsync(String nextPageLink, Integer pageSize, final ServiceCallback<TrustGroupRegistrationListApiModel> serviceCallback);

    /**
     * Get information about all groups.
     * A trust group has a root certificate which issues certificates to entities. Entities can be part of a trust group and thus trust the root certificate and all entities that the root has issued certificates for.
     *
     * @param nextPageLink optional, link to next page
     * @param pageSize optional, the maximum number of result per page
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrustGroupRegistrationListApiModel object
     */
    Observable<TrustGroupRegistrationListApiModel> listGroupsAsync(String nextPageLink, Integer pageSize);

    /**
     * Get information about all groups.
     * A trust group has a root certificate which issues certificates to entities. Entities can be part of a trust group and thus trust the root certificate and all entities that the root has issued certificates for.
     *
     * @param nextPageLink optional, link to next page
     * @param pageSize optional, the maximum number of result per page
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrustGroupRegistrationListApiModel object
     */
    Observable<ServiceResponse<TrustGroupRegistrationListApiModel>> listGroupsWithServiceResponseAsync(String nextPageLink, Integer pageSize);

    /**
     * Create new sub-group of an existing group.
     * Requires manager role.
     *
     * @param body The create request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TrustGroupRegistrationResponseApiModel object if successful.
     */
    TrustGroupRegistrationResponseApiModel createGroup(TrustGroupRegistrationRequestApiModel body);

    /**
     * Create new sub-group of an existing group.
     * Requires manager role.
     *
     * @param body The create request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TrustGroupRegistrationResponseApiModel> createGroupAsync(TrustGroupRegistrationRequestApiModel body, final ServiceCallback<TrustGroupRegistrationResponseApiModel> serviceCallback);

    /**
     * Create new sub-group of an existing group.
     * Requires manager role.
     *
     * @param body The create request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrustGroupRegistrationResponseApiModel object
     */
    Observable<TrustGroupRegistrationResponseApiModel> createGroupAsync(TrustGroupRegistrationRequestApiModel body);

    /**
     * Create new sub-group of an existing group.
     * Requires manager role.
     *
     * @param body The create request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrustGroupRegistrationResponseApiModel object
     */
    Observable<ServiceResponse<TrustGroupRegistrationResponseApiModel>> createGroupWithServiceResponseAsync(TrustGroupRegistrationRequestApiModel body);

    /**
     * Get group information.
     * A trust group has a root certificate which issues certificates to entities. Entities can be part of a trust group and thus trust the root certificate and all entities that the root has issued certificates for.
     *
     * @param groupId The group id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TrustGroupRegistrationApiModel object if successful.
     */
    TrustGroupRegistrationApiModel getGroup(String groupId);

    /**
     * Get group information.
     * A trust group has a root certificate which issues certificates to entities. Entities can be part of a trust group and thus trust the root certificate and all entities that the root has issued certificates for.
     *
     * @param groupId The group id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TrustGroupRegistrationApiModel> getGroupAsync(String groupId, final ServiceCallback<TrustGroupRegistrationApiModel> serviceCallback);

    /**
     * Get group information.
     * A trust group has a root certificate which issues certificates to entities. Entities can be part of a trust group and thus trust the root certificate and all entities that the root has issued certificates for.
     *
     * @param groupId The group id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrustGroupRegistrationApiModel object
     */
    Observable<TrustGroupRegistrationApiModel> getGroupAsync(String groupId);

    /**
     * Get group information.
     * A trust group has a root certificate which issues certificates to entities. Entities can be part of a trust group and thus trust the root certificate and all entities that the root has issued certificates for.
     *
     * @param groupId The group id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrustGroupRegistrationApiModel object
     */
    Observable<ServiceResponse<TrustGroupRegistrationApiModel>> getGroupWithServiceResponseAsync(String groupId);

    /**
     * Update group registration.
     * Use this function with care and only if you are aware of the security implications. Requires manager role.
     *
     * @param groupId The group id
     * @param body The group configuration
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void updateGroup(String groupId, TrustGroupUpdateRequestApiModel body);

    /**
     * Update group registration.
     * Use this function with care and only if you are aware of the security implications. Requires manager role.
     *
     * @param groupId The group id
     * @param body The group configuration
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> updateGroupAsync(String groupId, TrustGroupUpdateRequestApiModel body, final ServiceCallback<Void> serviceCallback);

    /**
     * Update group registration.
     * Use this function with care and only if you are aware of the security implications. Requires manager role.
     *
     * @param groupId The group id
     * @param body The group configuration
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> updateGroupAsync(String groupId, TrustGroupUpdateRequestApiModel body);

    /**
     * Update group registration.
     * Use this function with care and only if you are aware of the security implications. Requires manager role.
     *
     * @param groupId The group id
     * @param body The group configuration
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> updateGroupWithServiceResponseAsync(String groupId, TrustGroupUpdateRequestApiModel body);

    /**
     * Delete a group.
     * After this operation the Issuer CA, CRLs and keys become inaccessible. Use this function with extreme caution. Requires manager role.
     *
     * @param groupId The group id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void deleteGroup(String groupId);

    /**
     * Delete a group.
     * After this operation the Issuer CA, CRLs and keys become inaccessible. Use this function with extreme caution. Requires manager role.
     *
     * @param groupId The group id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteGroupAsync(String groupId, final ServiceCallback<Void> serviceCallback);

    /**
     * Delete a group.
     * After this operation the Issuer CA, CRLs and keys become inaccessible. Use this function with extreme caution. Requires manager role.
     *
     * @param groupId The group id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteGroupAsync(String groupId);

    /**
     * Delete a group.
     * After this operation the Issuer CA, CRLs and keys become inaccessible. Use this function with extreme caution. Requires manager role.
     *
     * @param groupId The group id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteGroupWithServiceResponseAsync(String groupId);

    /**
     * Create new root group.
     * Requires manager role.
     *
     * @param body The create request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TrustGroupRegistrationResponseApiModel object if successful.
     */
    TrustGroupRegistrationResponseApiModel createRoot(TrustGroupRootCreateRequestApiModel body);

    /**
     * Create new root group.
     * Requires manager role.
     *
     * @param body The create request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TrustGroupRegistrationResponseApiModel> createRootAsync(TrustGroupRootCreateRequestApiModel body, final ServiceCallback<TrustGroupRegistrationResponseApiModel> serviceCallback);

    /**
     * Create new root group.
     * Requires manager role.
     *
     * @param body The create request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrustGroupRegistrationResponseApiModel object
     */
    Observable<TrustGroupRegistrationResponseApiModel> createRootAsync(TrustGroupRootCreateRequestApiModel body);

    /**
     * Create new root group.
     * Requires manager role.
     *
     * @param body The create request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TrustGroupRegistrationResponseApiModel object
     */
    Observable<ServiceResponse<TrustGroupRegistrationResponseApiModel>> createRootWithServiceResponseAsync(TrustGroupRootCreateRequestApiModel body);

    /**
     * Renew a group CA Certificate.
     *
     * @param groupId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void renewIssuerCertificate(String groupId);

    /**
     * Renew a group CA Certificate.
     *
     * @param groupId the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> renewIssuerCertificateAsync(String groupId, final ServiceCallback<Void> serviceCallback);

    /**
     * Renew a group CA Certificate.
     *
     * @param groupId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> renewIssuerCertificateAsync(String groupId);

    /**
     * Renew a group CA Certificate.
     *
     * @param groupId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> renewIssuerCertificateWithServiceResponseAsync(String groupId);

    /**
     * Add trust relationship.
     * Define trust between two entities. The entities are identifiers of application, groups, or endpoints.
     *
     * @param entityId The entity identifier, e.g. group, etc.
     * @param trustedEntityId The trusted entity identifier
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void addTrustRelationship(String entityId, String trustedEntityId);

    /**
     * Add trust relationship.
     * Define trust between two entities. The entities are identifiers of application, groups, or endpoints.
     *
     * @param entityId The entity identifier, e.g. group, etc.
     * @param trustedEntityId The trusted entity identifier
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> addTrustRelationshipAsync(String entityId, String trustedEntityId, final ServiceCallback<Void> serviceCallback);

    /**
     * Add trust relationship.
     * Define trust between two entities. The entities are identifiers of application, groups, or endpoints.
     *
     * @param entityId The entity identifier, e.g. group, etc.
     * @param trustedEntityId The trusted entity identifier
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> addTrustRelationshipAsync(String entityId, String trustedEntityId);

    /**
     * Add trust relationship.
     * Define trust between two entities. The entities are identifiers of application, groups, or endpoints.
     *
     * @param entityId The entity identifier, e.g. group, etc.
     * @param trustedEntityId The trusted entity identifier
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> addTrustRelationshipWithServiceResponseAsync(String entityId, String trustedEntityId);

    /**
     * List trusted certificates.
     * Returns all certificates the entity should trust based on the applied trust configuration.
     *
     * @param entityId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the X509CertificateListApiModel object if successful.
     */
    X509CertificateListApiModel listTrustedCertificates(String entityId);

    /**
     * List trusted certificates.
     * Returns all certificates the entity should trust based on the applied trust configuration.
     *
     * @param entityId the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<X509CertificateListApiModel> listTrustedCertificatesAsync(String entityId, final ServiceCallback<X509CertificateListApiModel> serviceCallback);

    /**
     * List trusted certificates.
     * Returns all certificates the entity should trust based on the applied trust configuration.
     *
     * @param entityId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the X509CertificateListApiModel object
     */
    Observable<X509CertificateListApiModel> listTrustedCertificatesAsync(String entityId);

    /**
     * List trusted certificates.
     * Returns all certificates the entity should trust based on the applied trust configuration.
     *
     * @param entityId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the X509CertificateListApiModel object
     */
    Observable<ServiceResponse<X509CertificateListApiModel>> listTrustedCertificatesWithServiceResponseAsync(String entityId);
    /**
     * List trusted certificates.
     * Returns all certificates the entity should trust based on the applied trust configuration.
     *
     * @param entityId the String value
     * @param nextPageLink optional, link to next page
     * @param pageSize optional, the maximum number of result per page
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the X509CertificateListApiModel object if successful.
     */
    X509CertificateListApiModel listTrustedCertificates(String entityId, String nextPageLink, Integer pageSize);

    /**
     * List trusted certificates.
     * Returns all certificates the entity should trust based on the applied trust configuration.
     *
     * @param entityId the String value
     * @param nextPageLink optional, link to next page
     * @param pageSize optional, the maximum number of result per page
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<X509CertificateListApiModel> listTrustedCertificatesAsync(String entityId, String nextPageLink, Integer pageSize, final ServiceCallback<X509CertificateListApiModel> serviceCallback);

    /**
     * List trusted certificates.
     * Returns all certificates the entity should trust based on the applied trust configuration.
     *
     * @param entityId the String value
     * @param nextPageLink optional, link to next page
     * @param pageSize optional, the maximum number of result per page
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the X509CertificateListApiModel object
     */
    Observable<X509CertificateListApiModel> listTrustedCertificatesAsync(String entityId, String nextPageLink, Integer pageSize);

    /**
     * List trusted certificates.
     * Returns all certificates the entity should trust based on the applied trust configuration.
     *
     * @param entityId the String value
     * @param nextPageLink optional, link to next page
     * @param pageSize optional, the maximum number of result per page
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the X509CertificateListApiModel object
     */
    Observable<ServiceResponse<X509CertificateListApiModel>> listTrustedCertificatesWithServiceResponseAsync(String entityId, String nextPageLink, Integer pageSize);

    /**
     * Remove a trust relationship.
     * Removes trust between two entities. The entities are identifiers of application, groups, or endpoints.
     *
     * @param entityId The entity identifier, e.g. group, etc.
     * @param untrustedEntityId The trusted entity identifier
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void removeTrustRelationship(String entityId, String untrustedEntityId);

    /**
     * Remove a trust relationship.
     * Removes trust between two entities. The entities are identifiers of application, groups, or endpoints.
     *
     * @param entityId The entity identifier, e.g. group, etc.
     * @param untrustedEntityId The trusted entity identifier
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> removeTrustRelationshipAsync(String entityId, String untrustedEntityId, final ServiceCallback<Void> serviceCallback);

    /**
     * Remove a trust relationship.
     * Removes trust between two entities. The entities are identifiers of application, groups, or endpoints.
     *
     * @param entityId The entity identifier, e.g. group, etc.
     * @param untrustedEntityId The trusted entity identifier
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> removeTrustRelationshipAsync(String entityId, String untrustedEntityId);

    /**
     * Remove a trust relationship.
     * Removes trust between two entities. The entities are identifiers of application, groups, or endpoints.
     *
     * @param entityId The entity identifier, e.g. group, etc.
     * @param untrustedEntityId The trusted entity identifier
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> removeTrustRelationshipWithServiceResponseAsync(String entityId, String untrustedEntityId);

}
