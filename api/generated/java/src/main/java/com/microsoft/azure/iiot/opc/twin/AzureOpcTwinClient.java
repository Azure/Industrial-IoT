/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.microsoft.azure.iiot.opc.twin;

import com.microsoft.azure.iiot.opc.twin.models.BrowseNextRequestApiModel;
import com.microsoft.azure.iiot.opc.twin.models.BrowseNextResponseApiModel;
import com.microsoft.azure.iiot.opc.twin.models.BrowsePathRequestApiModel;
import com.microsoft.azure.iiot.opc.twin.models.BrowsePathResponseApiModel;
import com.microsoft.azure.iiot.opc.twin.models.BrowseRequestApiModel;
import com.microsoft.azure.iiot.opc.twin.models.BrowseResponseApiModel;
import com.microsoft.azure.iiot.opc.twin.models.MethodCallRequestApiModel;
import com.microsoft.azure.iiot.opc.twin.models.MethodCallResponseApiModel;
import com.microsoft.azure.iiot.opc.twin.models.MethodMetadataRequestApiModel;
import com.microsoft.azure.iiot.opc.twin.models.MethodMetadataResponseApiModel;
import com.microsoft.azure.iiot.opc.twin.models.ReadRequestApiModel;
import com.microsoft.azure.iiot.opc.twin.models.ReadResponseApiModel;
import com.microsoft.azure.iiot.opc.twin.models.StatusResponseApiModel;
import com.microsoft.azure.iiot.opc.twin.models.ValueReadRequestApiModel;
import com.microsoft.azure.iiot.opc.twin.models.ValueReadResponseApiModel;
import com.microsoft.azure.iiot.opc.twin.models.ValueWriteRequestApiModel;
import com.microsoft.azure.iiot.opc.twin.models.ValueWriteResponseApiModel;
import com.microsoft.azure.iiot.opc.twin.models.WriteRequestApiModel;
import com.microsoft.azure.iiot.opc.twin.models.WriteResponseApiModel;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import rx.Observable;
import com.microsoft.rest.RestClient;

/**
 * The interface for AzureOpcTwinClient class.
 */
public interface AzureOpcTwinClient {
    /**
     * Gets the REST client.
     *
     * @return the {@link RestClient} object.
    */
    RestClient restClient();

    /**
     * The default base URL.
     */
    String DEFAULT_BASE_URL = "http://localhost:9080";

    /**
     * Browse node references.
     * Browse a node on the specified endpoint. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The browse request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BrowseResponseApiModel object if successful.
     */
    BrowseResponseApiModel browse(String endpointId, BrowseRequestApiModel body);

    /**
     * Browse node references.
     * Browse a node on the specified endpoint. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The browse request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<BrowseResponseApiModel> browseAsync(String endpointId, BrowseRequestApiModel body, final ServiceCallback<BrowseResponseApiModel> serviceCallback);

    /**
     * Browse node references.
     * Browse a node on the specified endpoint. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The browse request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BrowseResponseApiModel object
     */
    Observable<BrowseResponseApiModel> browseAsync(String endpointId, BrowseRequestApiModel body);

    /**
     * Browse node references.
     * Browse a node on the specified endpoint. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The browse request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BrowseResponseApiModel object
     */
    Observable<ServiceResponse<BrowseResponseApiModel>> browseWithServiceResponseAsync(String endpointId, BrowseRequestApiModel body);

    /**
     * Browse set of unique target nodes.
     * Browse the set of unique hierarchically referenced target nodes on the endpoint. The endpoint must be activated and connected and the module client and server must trust each other. The root node id to browse from can be provided as part of the query parameters. If it is not provided, the RootFolder node is browsed. Note that this is the same as the POST method with the model containing the node id and the targetNodesOnly flag set to true.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BrowseResponseApiModel object if successful.
     */
    BrowseResponseApiModel getSetOfUniqueNodes(String endpointId);

    /**
     * Browse set of unique target nodes.
     * Browse the set of unique hierarchically referenced target nodes on the endpoint. The endpoint must be activated and connected and the module client and server must trust each other. The root node id to browse from can be provided as part of the query parameters. If it is not provided, the RootFolder node is browsed. Note that this is the same as the POST method with the model containing the node id and the targetNodesOnly flag set to true.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<BrowseResponseApiModel> getSetOfUniqueNodesAsync(String endpointId, final ServiceCallback<BrowseResponseApiModel> serviceCallback);

    /**
     * Browse set of unique target nodes.
     * Browse the set of unique hierarchically referenced target nodes on the endpoint. The endpoint must be activated and connected and the module client and server must trust each other. The root node id to browse from can be provided as part of the query parameters. If it is not provided, the RootFolder node is browsed. Note that this is the same as the POST method with the model containing the node id and the targetNodesOnly flag set to true.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BrowseResponseApiModel object
     */
    Observable<BrowseResponseApiModel> getSetOfUniqueNodesAsync(String endpointId);

    /**
     * Browse set of unique target nodes.
     * Browse the set of unique hierarchically referenced target nodes on the endpoint. The endpoint must be activated and connected and the module client and server must trust each other. The root node id to browse from can be provided as part of the query parameters. If it is not provided, the RootFolder node is browsed. Note that this is the same as the POST method with the model containing the node id and the targetNodesOnly flag set to true.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BrowseResponseApiModel object
     */
    Observable<ServiceResponse<BrowseResponseApiModel>> getSetOfUniqueNodesWithServiceResponseAsync(String endpointId);
    /**
     * Browse set of unique target nodes.
     * Browse the set of unique hierarchically referenced target nodes on the endpoint. The endpoint must be activated and connected and the module client and server must trust each other. The root node id to browse from can be provided as part of the query parameters. If it is not provided, the RootFolder node is browsed. Note that this is the same as the POST method with the model containing the node id and the targetNodesOnly flag set to true.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param nodeId The node to browse or omit to browse the root node (i=84)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BrowseResponseApiModel object if successful.
     */
    BrowseResponseApiModel getSetOfUniqueNodes(String endpointId, String nodeId);

    /**
     * Browse set of unique target nodes.
     * Browse the set of unique hierarchically referenced target nodes on the endpoint. The endpoint must be activated and connected and the module client and server must trust each other. The root node id to browse from can be provided as part of the query parameters. If it is not provided, the RootFolder node is browsed. Note that this is the same as the POST method with the model containing the node id and the targetNodesOnly flag set to true.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param nodeId The node to browse or omit to browse the root node (i=84)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<BrowseResponseApiModel> getSetOfUniqueNodesAsync(String endpointId, String nodeId, final ServiceCallback<BrowseResponseApiModel> serviceCallback);

    /**
     * Browse set of unique target nodes.
     * Browse the set of unique hierarchically referenced target nodes on the endpoint. The endpoint must be activated and connected and the module client and server must trust each other. The root node id to browse from can be provided as part of the query parameters. If it is not provided, the RootFolder node is browsed. Note that this is the same as the POST method with the model containing the node id and the targetNodesOnly flag set to true.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param nodeId The node to browse or omit to browse the root node (i=84)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BrowseResponseApiModel object
     */
    Observable<BrowseResponseApiModel> getSetOfUniqueNodesAsync(String endpointId, String nodeId);

    /**
     * Browse set of unique target nodes.
     * Browse the set of unique hierarchically referenced target nodes on the endpoint. The endpoint must be activated and connected and the module client and server must trust each other. The root node id to browse from can be provided as part of the query parameters. If it is not provided, the RootFolder node is browsed. Note that this is the same as the POST method with the model containing the node id and the targetNodesOnly flag set to true.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param nodeId The node to browse or omit to browse the root node (i=84)
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BrowseResponseApiModel object
     */
    Observable<ServiceResponse<BrowseResponseApiModel>> getSetOfUniqueNodesWithServiceResponseAsync(String endpointId, String nodeId);

    /**
     * Browse next set of references.
     * Browse next set of references on the endpoint. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The request body with continuation token.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BrowseNextResponseApiModel object if successful.
     */
    BrowseNextResponseApiModel browseNext(String endpointId, BrowseNextRequestApiModel body);

    /**
     * Browse next set of references.
     * Browse next set of references on the endpoint. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The request body with continuation token.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<BrowseNextResponseApiModel> browseNextAsync(String endpointId, BrowseNextRequestApiModel body, final ServiceCallback<BrowseNextResponseApiModel> serviceCallback);

    /**
     * Browse next set of references.
     * Browse next set of references on the endpoint. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The request body with continuation token.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BrowseNextResponseApiModel object
     */
    Observable<BrowseNextResponseApiModel> browseNextAsync(String endpointId, BrowseNextRequestApiModel body);

    /**
     * Browse next set of references.
     * Browse next set of references on the endpoint. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The request body with continuation token.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BrowseNextResponseApiModel object
     */
    Observable<ServiceResponse<BrowseNextResponseApiModel>> browseNextWithServiceResponseAsync(String endpointId, BrowseNextRequestApiModel body);

    /**
     * Browse next set of unique target nodes.
     * Browse the next set of unique hierarchically referenced target nodes on the endpoint. The endpoint must be activated and connected and the module client and server must trust each other. Note that this is the same as the POST method with the model containing the continuation token and the targetNodesOnly flag set to true.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param continuationToken Continuation token from GetSetOfUniqueNodes operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BrowseNextResponseApiModel object if successful.
     */
    BrowseNextResponseApiModel getNextSetOfUniqueNodes(String endpointId, String continuationToken);

    /**
     * Browse next set of unique target nodes.
     * Browse the next set of unique hierarchically referenced target nodes on the endpoint. The endpoint must be activated and connected and the module client and server must trust each other. Note that this is the same as the POST method with the model containing the continuation token and the targetNodesOnly flag set to true.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param continuationToken Continuation token from GetSetOfUniqueNodes operation
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<BrowseNextResponseApiModel> getNextSetOfUniqueNodesAsync(String endpointId, String continuationToken, final ServiceCallback<BrowseNextResponseApiModel> serviceCallback);

    /**
     * Browse next set of unique target nodes.
     * Browse the next set of unique hierarchically referenced target nodes on the endpoint. The endpoint must be activated and connected and the module client and server must trust each other. Note that this is the same as the POST method with the model containing the continuation token and the targetNodesOnly flag set to true.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param continuationToken Continuation token from GetSetOfUniqueNodes operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BrowseNextResponseApiModel object
     */
    Observable<BrowseNextResponseApiModel> getNextSetOfUniqueNodesAsync(String endpointId, String continuationToken);

    /**
     * Browse next set of unique target nodes.
     * Browse the next set of unique hierarchically referenced target nodes on the endpoint. The endpoint must be activated and connected and the module client and server must trust each other. Note that this is the same as the POST method with the model containing the continuation token and the targetNodesOnly flag set to true.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param continuationToken Continuation token from GetSetOfUniqueNodes operation
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BrowseNextResponseApiModel object
     */
    Observable<ServiceResponse<BrowseNextResponseApiModel>> getNextSetOfUniqueNodesWithServiceResponseAsync(String endpointId, String continuationToken);

    /**
     * Browse using a browse path.
     * Browse using a path from the specified node id. This call uses TranslateBrowsePathsToNodeIds service under the hood. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The browse path request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BrowsePathResponseApiModel object if successful.
     */
    BrowsePathResponseApiModel browseUsingPath(String endpointId, BrowsePathRequestApiModel body);

    /**
     * Browse using a browse path.
     * Browse using a path from the specified node id. This call uses TranslateBrowsePathsToNodeIds service under the hood. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The browse path request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<BrowsePathResponseApiModel> browseUsingPathAsync(String endpointId, BrowsePathRequestApiModel body, final ServiceCallback<BrowsePathResponseApiModel> serviceCallback);

    /**
     * Browse using a browse path.
     * Browse using a path from the specified node id. This call uses TranslateBrowsePathsToNodeIds service under the hood. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The browse path request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BrowsePathResponseApiModel object
     */
    Observable<BrowsePathResponseApiModel> browseUsingPathAsync(String endpointId, BrowsePathRequestApiModel body);

    /**
     * Browse using a browse path.
     * Browse using a path from the specified node id. This call uses TranslateBrowsePathsToNodeIds service under the hood. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The browse path request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BrowsePathResponseApiModel object
     */
    Observable<ServiceResponse<BrowsePathResponseApiModel>> browseUsingPathWithServiceResponseAsync(String endpointId, BrowsePathRequestApiModel body);

    /**
     * Get method meta data.
     * Return method meta data to support a user interface displaying forms to input and output arguments. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The method metadata request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the MethodMetadataResponseApiModel object if successful.
     */
    MethodMetadataResponseApiModel getCallMetadata(String endpointId, MethodMetadataRequestApiModel body);

    /**
     * Get method meta data.
     * Return method meta data to support a user interface displaying forms to input and output arguments. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The method metadata request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<MethodMetadataResponseApiModel> getCallMetadataAsync(String endpointId, MethodMetadataRequestApiModel body, final ServiceCallback<MethodMetadataResponseApiModel> serviceCallback);

    /**
     * Get method meta data.
     * Return method meta data to support a user interface displaying forms to input and output arguments. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The method metadata request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MethodMetadataResponseApiModel object
     */
    Observable<MethodMetadataResponseApiModel> getCallMetadataAsync(String endpointId, MethodMetadataRequestApiModel body);

    /**
     * Get method meta data.
     * Return method meta data to support a user interface displaying forms to input and output arguments. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The method metadata request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MethodMetadataResponseApiModel object
     */
    Observable<ServiceResponse<MethodMetadataResponseApiModel>> getCallMetadataWithServiceResponseAsync(String endpointId, MethodMetadataRequestApiModel body);

    /**
     * Call a method.
     * Invoke method node with specified input arguments. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The method call request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the MethodCallResponseApiModel object if successful.
     */
    MethodCallResponseApiModel callMethod(String endpointId, MethodCallRequestApiModel body);

    /**
     * Call a method.
     * Invoke method node with specified input arguments. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The method call request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<MethodCallResponseApiModel> callMethodAsync(String endpointId, MethodCallRequestApiModel body, final ServiceCallback<MethodCallResponseApiModel> serviceCallback);

    /**
     * Call a method.
     * Invoke method node with specified input arguments. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The method call request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MethodCallResponseApiModel object
     */
    Observable<MethodCallResponseApiModel> callMethodAsync(String endpointId, MethodCallRequestApiModel body);

    /**
     * Call a method.
     * Invoke method node with specified input arguments. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The method call request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the MethodCallResponseApiModel object
     */
    Observable<ServiceResponse<MethodCallResponseApiModel>> callMethodWithServiceResponseAsync(String endpointId, MethodCallRequestApiModel body);

    /**
     * Read variable value.
     * Read a variable node's value. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The read value request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ValueReadResponseApiModel object if successful.
     */
    ValueReadResponseApiModel readValue(String endpointId, ValueReadRequestApiModel body);

    /**
     * Read variable value.
     * Read a variable node's value. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The read value request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ValueReadResponseApiModel> readValueAsync(String endpointId, ValueReadRequestApiModel body, final ServiceCallback<ValueReadResponseApiModel> serviceCallback);

    /**
     * Read variable value.
     * Read a variable node's value. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The read value request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ValueReadResponseApiModel object
     */
    Observable<ValueReadResponseApiModel> readValueAsync(String endpointId, ValueReadRequestApiModel body);

    /**
     * Read variable value.
     * Read a variable node's value. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The read value request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ValueReadResponseApiModel object
     */
    Observable<ServiceResponse<ValueReadResponseApiModel>> readValueWithServiceResponseAsync(String endpointId, ValueReadRequestApiModel body);

    /**
     * Get variable value.
     * Get a variable node's value using its node id. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param nodeId The node to read
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ValueReadResponseApiModel object if successful.
     */
    ValueReadResponseApiModel getValue(String endpointId, String nodeId);

    /**
     * Get variable value.
     * Get a variable node's value using its node id. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param nodeId The node to read
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ValueReadResponseApiModel> getValueAsync(String endpointId, String nodeId, final ServiceCallback<ValueReadResponseApiModel> serviceCallback);

    /**
     * Get variable value.
     * Get a variable node's value using its node id. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param nodeId The node to read
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ValueReadResponseApiModel object
     */
    Observable<ValueReadResponseApiModel> getValueAsync(String endpointId, String nodeId);

    /**
     * Get variable value.
     * Get a variable node's value using its node id. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param nodeId The node to read
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ValueReadResponseApiModel object
     */
    Observable<ServiceResponse<ValueReadResponseApiModel>> getValueWithServiceResponseAsync(String endpointId, String nodeId);

    /**
     * Read node attributes.
     * Read attributes of a node. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The read request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ReadResponseApiModel object if successful.
     */
    ReadResponseApiModel readAttributes(String endpointId, ReadRequestApiModel body);

    /**
     * Read node attributes.
     * Read attributes of a node. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The read request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ReadResponseApiModel> readAttributesAsync(String endpointId, ReadRequestApiModel body, final ServiceCallback<ReadResponseApiModel> serviceCallback);

    /**
     * Read node attributes.
     * Read attributes of a node. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The read request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReadResponseApiModel object
     */
    Observable<ReadResponseApiModel> readAttributesAsync(String endpointId, ReadRequestApiModel body);

    /**
     * Read node attributes.
     * Read attributes of a node. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The read request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ReadResponseApiModel object
     */
    Observable<ServiceResponse<ReadResponseApiModel>> readAttributesWithServiceResponseAsync(String endpointId, ReadRequestApiModel body);

    /**
     * Return the service status in the form of the service status
     api model.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the StatusResponseApiModel object if successful.
     */
    StatusResponseApiModel getStatus();

    /**
     * Return the service status in the form of the service status
     api model.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<StatusResponseApiModel> getStatusAsync(final ServiceCallback<StatusResponseApiModel> serviceCallback);

    /**
     * Return the service status in the form of the service status
     api model.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StatusResponseApiModel object
     */
    Observable<StatusResponseApiModel> getStatusAsync();

    /**
     * Return the service status in the form of the service status
     api model.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StatusResponseApiModel object
     */
    Observable<ServiceResponse<StatusResponseApiModel>> getStatusWithServiceResponseAsync();

    /**
     * Write variable value.
     * Write variable node's value. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The write value request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ValueWriteResponseApiModel object if successful.
     */
    ValueWriteResponseApiModel writeValue(String endpointId, ValueWriteRequestApiModel body);

    /**
     * Write variable value.
     * Write variable node's value. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The write value request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ValueWriteResponseApiModel> writeValueAsync(String endpointId, ValueWriteRequestApiModel body, final ServiceCallback<ValueWriteResponseApiModel> serviceCallback);

    /**
     * Write variable value.
     * Write variable node's value. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The write value request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ValueWriteResponseApiModel object
     */
    Observable<ValueWriteResponseApiModel> writeValueAsync(String endpointId, ValueWriteRequestApiModel body);

    /**
     * Write variable value.
     * Write variable node's value. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The write value request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ValueWriteResponseApiModel object
     */
    Observable<ServiceResponse<ValueWriteResponseApiModel>> writeValueWithServiceResponseAsync(String endpointId, ValueWriteRequestApiModel body);

    /**
     * Write node attributes.
     * Write any attribute of a node. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The batch write request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WriteResponseApiModel object if successful.
     */
    WriteResponseApiModel writeAttributes(String endpointId, WriteRequestApiModel body);

    /**
     * Write node attributes.
     * Write any attribute of a node. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The batch write request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<WriteResponseApiModel> writeAttributesAsync(String endpointId, WriteRequestApiModel body, final ServiceCallback<WriteResponseApiModel> serviceCallback);

    /**
     * Write node attributes.
     * Write any attribute of a node. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The batch write request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WriteResponseApiModel object
     */
    Observable<WriteResponseApiModel> writeAttributesAsync(String endpointId, WriteRequestApiModel body);

    /**
     * Write node attributes.
     * Write any attribute of a node. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The batch write request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WriteResponseApiModel object
     */
    Observable<ServiceResponse<WriteResponseApiModel>> writeAttributesWithServiceResponseAsync(String endpointId, WriteRequestApiModel body);

}
