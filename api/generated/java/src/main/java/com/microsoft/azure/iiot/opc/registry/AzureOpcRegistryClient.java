/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.microsoft.azure.iiot.opc.registry;

import com.microsoft.azure.iiot.opc.registry.models.ApplicationInfoListApiModel;
import com.microsoft.azure.iiot.opc.registry.models.ApplicationRecordListApiModel;
import com.microsoft.azure.iiot.opc.registry.models.ApplicationRecordQueryApiModel;
import com.microsoft.azure.iiot.opc.registry.models.ApplicationRegistrationApiModel;
import com.microsoft.azure.iiot.opc.registry.models.ApplicationRegistrationQueryApiModel;
import com.microsoft.azure.iiot.opc.registry.models.ApplicationRegistrationRequestApiModel;
import com.microsoft.azure.iiot.opc.registry.models.ApplicationRegistrationResponseApiModel;
import com.microsoft.azure.iiot.opc.registry.models.ApplicationRegistrationUpdateApiModel;
import com.microsoft.azure.iiot.opc.registry.models.ApplicationSiteListApiModel;
import com.microsoft.azure.iiot.opc.registry.models.DiscoveryRequestApiModel;
import com.microsoft.azure.iiot.opc.registry.models.EndpointInfoApiModel;
import com.microsoft.azure.iiot.opc.registry.models.EndpointInfoListApiModel;
import com.microsoft.azure.iiot.opc.registry.models.EndpointRegistrationQueryApiModel;
import com.microsoft.azure.iiot.opc.registry.models.EndpointRegistrationUpdateApiModel;
import com.microsoft.azure.iiot.opc.registry.models.ServerRegistrationRequestApiModel;
import com.microsoft.azure.iiot.opc.registry.models.StatusResponseApiModel;
import com.microsoft.azure.iiot.opc.registry.models.SupervisorApiModel;
import com.microsoft.azure.iiot.opc.registry.models.SupervisorListApiModel;
import com.microsoft.azure.iiot.opc.registry.models.SupervisorQueryApiModel;
import com.microsoft.azure.iiot.opc.registry.models.SupervisorStatusApiModel;
import com.microsoft.azure.iiot.opc.registry.models.SupervisorUpdateApiModel;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import rx.Observable;
import com.microsoft.rest.RestClient;

/**
 * The interface for AzureOpcRegistryClient class.
 */
public interface AzureOpcRegistryClient {
    /**
     * Gets the REST client.
     *
     * @return the {@link RestClient} object.
    */
    RestClient restClient();

    /**
     * The default base URL.
     */
    String DEFAULT_BASE_URL = "http://localhost";

    /**
     * Get list of applications.
     * Get all registered applications in paged form.
     The returned model can contain a continuation token if more results are
     available.
     Call this operation again using the token to retrieve more results.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApplicationInfoListApiModel object if successful.
     */
    ApplicationInfoListApiModel getListOfApplications();

    /**
     * Get list of applications.
     * Get all registered applications in paged form.
     The returned model can contain a continuation token if more results are
     available.
     Call this operation again using the token to retrieve more results.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ApplicationInfoListApiModel> getListOfApplicationsAsync(final ServiceCallback<ApplicationInfoListApiModel> serviceCallback);

    /**
     * Get list of applications.
     * Get all registered applications in paged form.
     The returned model can contain a continuation token if more results are
     available.
     Call this operation again using the token to retrieve more results.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationInfoListApiModel object
     */
    Observable<ApplicationInfoListApiModel> getListOfApplicationsAsync();

    /**
     * Get list of applications.
     * Get all registered applications in paged form.
     The returned model can contain a continuation token if more results are
     available.
     Call this operation again using the token to retrieve more results.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationInfoListApiModel object
     */
    Observable<ServiceResponse<ApplicationInfoListApiModel>> getListOfApplicationsWithServiceResponseAsync();
    /**
     * Get list of applications.
     * Get all registered applications in paged form.
     The returned model can contain a continuation token if more results are
     available.
     Call this operation again using the token to retrieve more results.
     *
     * @param continuationToken Optional Continuation
                 token
     * @param pageSize Optional number of results to
                 return
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApplicationInfoListApiModel object if successful.
     */
    ApplicationInfoListApiModel getListOfApplications(String continuationToken, Integer pageSize);

    /**
     * Get list of applications.
     * Get all registered applications in paged form.
     The returned model can contain a continuation token if more results are
     available.
     Call this operation again using the token to retrieve more results.
     *
     * @param continuationToken Optional Continuation
                 token
     * @param pageSize Optional number of results to
                 return
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ApplicationInfoListApiModel> getListOfApplicationsAsync(String continuationToken, Integer pageSize, final ServiceCallback<ApplicationInfoListApiModel> serviceCallback);

    /**
     * Get list of applications.
     * Get all registered applications in paged form.
     The returned model can contain a continuation token if more results are
     available.
     Call this operation again using the token to retrieve more results.
     *
     * @param continuationToken Optional Continuation
                 token
     * @param pageSize Optional number of results to
                 return
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationInfoListApiModel object
     */
    Observable<ApplicationInfoListApiModel> getListOfApplicationsAsync(String continuationToken, Integer pageSize);

    /**
     * Get list of applications.
     * Get all registered applications in paged form.
     The returned model can contain a continuation token if more results are
     available.
     Call this operation again using the token to retrieve more results.
     *
     * @param continuationToken Optional Continuation
                 token
     * @param pageSize Optional number of results to
                 return
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationInfoListApiModel object
     */
    Observable<ServiceResponse<ApplicationInfoListApiModel>> getListOfApplicationsWithServiceResponseAsync(String continuationToken, Integer pageSize);

    /**
     * Create new application.
     * The application is registered using the provided information, but it
     is not associated with a supervisor.  This is useful for when you need
     to register clients or you want to register a server that is located
     in a network not reachable through a Twin module.
     *
     * @param request Application registration request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApplicationRegistrationResponseApiModel object if successful.
     */
    ApplicationRegistrationResponseApiModel createApplication(ApplicationRegistrationRequestApiModel request);

    /**
     * Create new application.
     * The application is registered using the provided information, but it
     is not associated with a supervisor.  This is useful for when you need
     to register clients or you want to register a server that is located
     in a network not reachable through a Twin module.
     *
     * @param request Application registration request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ApplicationRegistrationResponseApiModel> createApplicationAsync(ApplicationRegistrationRequestApiModel request, final ServiceCallback<ApplicationRegistrationResponseApiModel> serviceCallback);

    /**
     * Create new application.
     * The application is registered using the provided information, but it
     is not associated with a supervisor.  This is useful for when you need
     to register clients or you want to register a server that is located
     in a network not reachable through a Twin module.
     *
     * @param request Application registration request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationRegistrationResponseApiModel object
     */
    Observable<ApplicationRegistrationResponseApiModel> createApplicationAsync(ApplicationRegistrationRequestApiModel request);

    /**
     * Create new application.
     * The application is registered using the provided information, but it
     is not associated with a supervisor.  This is useful for when you need
     to register clients or you want to register a server that is located
     in a network not reachable through a Twin module.
     *
     * @param request Application registration request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationRegistrationResponseApiModel object
     */
    Observable<ServiceResponse<ApplicationRegistrationResponseApiModel>> createApplicationWithServiceResponseAsync(ApplicationRegistrationRequestApiModel request);

    /**
     * Register new server.
     * Registers a server solely using a discovery url. Requires that
     the onboarding agent service is running and the server can be
     located by a supervisor in its network using the discovery url.
     *
     * @param request Server registration request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void registerServer(ServerRegistrationRequestApiModel request);

    /**
     * Register new server.
     * Registers a server solely using a discovery url. Requires that
     the onboarding agent service is running and the server can be
     located by a supervisor in its network using the discovery url.
     *
     * @param request Server registration request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> registerServerAsync(ServerRegistrationRequestApiModel request, final ServiceCallback<Void> serviceCallback);

    /**
     * Register new server.
     * Registers a server solely using a discovery url. Requires that
     the onboarding agent service is running and the server can be
     located by a supervisor in its network using the discovery url.
     *
     * @param request Server registration request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> registerServerAsync(ServerRegistrationRequestApiModel request);

    /**
     * Register new server.
     * Registers a server solely using a discovery url. Requires that
     the onboarding agent service is running and the server can be
     located by a supervisor in its network using the discovery url.
     *
     * @param request Server registration request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> registerServerWithServiceResponseAsync(ServerRegistrationRequestApiModel request);

    /**
     * Purge applications.
     * Purges all applications that have not been seen for a specified amount of time.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void deleteAllDisabledApplications();

    /**
     * Purge applications.
     * Purges all applications that have not been seen for a specified amount of time.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteAllDisabledApplicationsAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Purge applications.
     * Purges all applications that have not been seen for a specified amount of time.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteAllDisabledApplicationsAsync();

    /**
     * Purge applications.
     * Purges all applications that have not been seen for a specified amount of time.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteAllDisabledApplicationsWithServiceResponseAsync();
    /**
     * Purge applications.
     * Purges all applications that have not been seen for a specified amount of time.
     *
     * @param notSeenFor A duration in milliseconds
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void deleteAllDisabledApplications(String notSeenFor);

    /**
     * Purge applications.
     * Purges all applications that have not been seen for a specified amount of time.
     *
     * @param notSeenFor A duration in milliseconds
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteAllDisabledApplicationsAsync(String notSeenFor, final ServiceCallback<Void> serviceCallback);

    /**
     * Purge applications.
     * Purges all applications that have not been seen for a specified amount of time.
     *
     * @param notSeenFor A duration in milliseconds
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteAllDisabledApplicationsAsync(String notSeenFor);

    /**
     * Purge applications.
     * Purges all applications that have not been seen for a specified amount of time.
     *
     * @param notSeenFor A duration in milliseconds
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteAllDisabledApplicationsWithServiceResponseAsync(String notSeenFor);

    /**
     * Disable an enabled application.
     * A manager can disable an application.
     *
     * @param applicationId The application id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void disableApplication(String applicationId);

    /**
     * Disable an enabled application.
     * A manager can disable an application.
     *
     * @param applicationId The application id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> disableApplicationAsync(String applicationId, final ServiceCallback<Void> serviceCallback);

    /**
     * Disable an enabled application.
     * A manager can disable an application.
     *
     * @param applicationId The application id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> disableApplicationAsync(String applicationId);

    /**
     * Disable an enabled application.
     * A manager can disable an application.
     *
     * @param applicationId The application id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> disableApplicationWithServiceResponseAsync(String applicationId);

    /**
     * Re-enable a disabled application.
     * A manager can enable an application.
     *
     * @param applicationId The application id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void enableApplication(String applicationId);

    /**
     * Re-enable a disabled application.
     * A manager can enable an application.
     *
     * @param applicationId The application id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> enableApplicationAsync(String applicationId, final ServiceCallback<Void> serviceCallback);

    /**
     * Re-enable a disabled application.
     * A manager can enable an application.
     *
     * @param applicationId The application id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> enableApplicationAsync(String applicationId);

    /**
     * Re-enable a disabled application.
     * A manager can enable an application.
     *
     * @param applicationId The application id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> enableApplicationWithServiceResponseAsync(String applicationId);

    /**
     * Discover servers.
     * Registers servers by running a discovery scan in a supervisor's
     network. Requires that the onboarding agent service is running.
     *
     * @param request Discovery request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void discoverServer(DiscoveryRequestApiModel request);

    /**
     * Discover servers.
     * Registers servers by running a discovery scan in a supervisor's
     network. Requires that the onboarding agent service is running.
     *
     * @param request Discovery request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> discoverServerAsync(DiscoveryRequestApiModel request, final ServiceCallback<Void> serviceCallback);

    /**
     * Discover servers.
     * Registers servers by running a discovery scan in a supervisor's
     network. Requires that the onboarding agent service is running.
     *
     * @param request Discovery request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> discoverServerAsync(DiscoveryRequestApiModel request);

    /**
     * Discover servers.
     * Registers servers by running a discovery scan in a supervisor's
     network. Requires that the onboarding agent service is running.
     *
     * @param request Discovery request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> discoverServerWithServiceResponseAsync(DiscoveryRequestApiModel request);

    /**
     * Get application registration.
     *
     * @param applicationId Application id for the server
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApplicationRegistrationApiModel object if successful.
     */
    ApplicationRegistrationApiModel getApplicationRegistration(String applicationId);

    /**
     * Get application registration.
     *
     * @param applicationId Application id for the server
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ApplicationRegistrationApiModel> getApplicationRegistrationAsync(String applicationId, final ServiceCallback<ApplicationRegistrationApiModel> serviceCallback);

    /**
     * Get application registration.
     *
     * @param applicationId Application id for the server
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationRegistrationApiModel object
     */
    Observable<ApplicationRegistrationApiModel> getApplicationRegistrationAsync(String applicationId);

    /**
     * Get application registration.
     *
     * @param applicationId Application id for the server
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationRegistrationApiModel object
     */
    Observable<ServiceResponse<ApplicationRegistrationApiModel>> getApplicationRegistrationWithServiceResponseAsync(String applicationId);

    /**
     * Unregister application.
     * Unregisters and deletes application and all its associated endpoints.
     *
     * @param applicationId The identifier of the application
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void deleteApplication(String applicationId);

    /**
     * Unregister application.
     * Unregisters and deletes application and all its associated endpoints.
     *
     * @param applicationId The identifier of the application
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteApplicationAsync(String applicationId, final ServiceCallback<Void> serviceCallback);

    /**
     * Unregister application.
     * Unregisters and deletes application and all its associated endpoints.
     *
     * @param applicationId The identifier of the application
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteApplicationAsync(String applicationId);

    /**
     * Unregister application.
     * Unregisters and deletes application and all its associated endpoints.
     *
     * @param applicationId The identifier of the application
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteApplicationWithServiceResponseAsync(String applicationId);

    /**
     * Update application registration.
     * The application information is updated with new properties.  Note that
     this information might be overridden if the application is re-discovered
     during a discovery run (recurring or one-time).
     *
     * @param applicationId The identifier of the application
     * @param request Application update request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void updateApplicationRegistration(String applicationId, ApplicationRegistrationUpdateApiModel request);

    /**
     * Update application registration.
     * The application information is updated with new properties.  Note that
     this information might be overridden if the application is re-discovered
     during a discovery run (recurring or one-time).
     *
     * @param applicationId The identifier of the application
     * @param request Application update request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> updateApplicationRegistrationAsync(String applicationId, ApplicationRegistrationUpdateApiModel request, final ServiceCallback<Void> serviceCallback);

    /**
     * Update application registration.
     * The application information is updated with new properties.  Note that
     this information might be overridden if the application is re-discovered
     during a discovery run (recurring or one-time).
     *
     * @param applicationId The identifier of the application
     * @param request Application update request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> updateApplicationRegistrationAsync(String applicationId, ApplicationRegistrationUpdateApiModel request);

    /**
     * Update application registration.
     * The application information is updated with new properties.  Note that
     this information might be overridden if the application is re-discovered
     during a discovery run (recurring or one-time).
     *
     * @param applicationId The identifier of the application
     * @param request Application update request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> updateApplicationRegistrationWithServiceResponseAsync(String applicationId, ApplicationRegistrationUpdateApiModel request);

    /**
     * Get list of sites.
     * List all sites applications are registered in.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApplicationSiteListApiModel object if successful.
     */
    ApplicationSiteListApiModel getListOfSites();

    /**
     * Get list of sites.
     * List all sites applications are registered in.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ApplicationSiteListApiModel> getListOfSitesAsync(final ServiceCallback<ApplicationSiteListApiModel> serviceCallback);

    /**
     * Get list of sites.
     * List all sites applications are registered in.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationSiteListApiModel object
     */
    Observable<ApplicationSiteListApiModel> getListOfSitesAsync();

    /**
     * Get list of sites.
     * List all sites applications are registered in.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationSiteListApiModel object
     */
    Observable<ServiceResponse<ApplicationSiteListApiModel>> getListOfSitesWithServiceResponseAsync();
    /**
     * Get list of sites.
     * List all sites applications are registered in.
     *
     * @param continuationToken Optional Continuation
                 token
     * @param pageSize Optional number of results to
                 return
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApplicationSiteListApiModel object if successful.
     */
    ApplicationSiteListApiModel getListOfSites(String continuationToken, Integer pageSize);

    /**
     * Get list of sites.
     * List all sites applications are registered in.
     *
     * @param continuationToken Optional Continuation
                 token
     * @param pageSize Optional number of results to
                 return
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ApplicationSiteListApiModel> getListOfSitesAsync(String continuationToken, Integer pageSize, final ServiceCallback<ApplicationSiteListApiModel> serviceCallback);

    /**
     * Get list of sites.
     * List all sites applications are registered in.
     *
     * @param continuationToken Optional Continuation
                 token
     * @param pageSize Optional number of results to
                 return
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationSiteListApiModel object
     */
    Observable<ApplicationSiteListApiModel> getListOfSitesAsync(String continuationToken, Integer pageSize);

    /**
     * Get list of sites.
     * List all sites applications are registered in.
     *
     * @param continuationToken Optional Continuation
                 token
     * @param pageSize Optional number of results to
                 return
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationSiteListApiModel object
     */
    Observable<ServiceResponse<ApplicationSiteListApiModel>> getListOfSitesWithServiceResponseAsync(String continuationToken, Integer pageSize);

    /**
     * Get filtered list of applications.
     * Get a list of applications filtered using the specified query parameters.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfApplications operation using the token to retrieve
     more results.
     *
     * @param query Applications Query model
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApplicationInfoListApiModel object if successful.
     */
    ApplicationInfoListApiModel getFilteredListOfApplications(ApplicationRegistrationQueryApiModel query);

    /**
     * Get filtered list of applications.
     * Get a list of applications filtered using the specified query parameters.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfApplications operation using the token to retrieve
     more results.
     *
     * @param query Applications Query model
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ApplicationInfoListApiModel> getFilteredListOfApplicationsAsync(ApplicationRegistrationQueryApiModel query, final ServiceCallback<ApplicationInfoListApiModel> serviceCallback);

    /**
     * Get filtered list of applications.
     * Get a list of applications filtered using the specified query parameters.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfApplications operation using the token to retrieve
     more results.
     *
     * @param query Applications Query model
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationInfoListApiModel object
     */
    Observable<ApplicationInfoListApiModel> getFilteredListOfApplicationsAsync(ApplicationRegistrationQueryApiModel query);

    /**
     * Get filtered list of applications.
     * Get a list of applications filtered using the specified query parameters.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfApplications operation using the token to retrieve
     more results.
     *
     * @param query Applications Query model
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationInfoListApiModel object
     */
    Observable<ServiceResponse<ApplicationInfoListApiModel>> getFilteredListOfApplicationsWithServiceResponseAsync(ApplicationRegistrationQueryApiModel query);
    /**
     * Get filtered list of applications.
     * Get a list of applications filtered using the specified query parameters.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfApplications operation using the token to retrieve
     more results.
     *
     * @param query Applications Query model
     * @param pageSize Number of results to return
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApplicationInfoListApiModel object if successful.
     */
    ApplicationInfoListApiModel getFilteredListOfApplications(ApplicationRegistrationQueryApiModel query, Integer pageSize);

    /**
     * Get filtered list of applications.
     * Get a list of applications filtered using the specified query parameters.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfApplications operation using the token to retrieve
     more results.
     *
     * @param query Applications Query model
     * @param pageSize Number of results to return
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ApplicationInfoListApiModel> getFilteredListOfApplicationsAsync(ApplicationRegistrationQueryApiModel query, Integer pageSize, final ServiceCallback<ApplicationInfoListApiModel> serviceCallback);

    /**
     * Get filtered list of applications.
     * Get a list of applications filtered using the specified query parameters.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfApplications operation using the token to retrieve
     more results.
     *
     * @param query Applications Query model
     * @param pageSize Number of results to return
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationInfoListApiModel object
     */
    Observable<ApplicationInfoListApiModel> getFilteredListOfApplicationsAsync(ApplicationRegistrationQueryApiModel query, Integer pageSize);

    /**
     * Get filtered list of applications.
     * Get a list of applications filtered using the specified query parameters.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfApplications operation using the token to retrieve
     more results.
     *
     * @param query Applications Query model
     * @param pageSize Number of results to return
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationInfoListApiModel object
     */
    Observable<ServiceResponse<ApplicationInfoListApiModel>> getFilteredListOfApplicationsWithServiceResponseAsync(ApplicationRegistrationQueryApiModel query, Integer pageSize);

    /**
     * Query applications.
     * List applications that match a query model.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfApplications operation using the token to retrieve
     more results.
     *
     * @param query Application query
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApplicationInfoListApiModel object if successful.
     */
    ApplicationInfoListApiModel queryApplications(ApplicationRegistrationQueryApiModel query);

    /**
     * Query applications.
     * List applications that match a query model.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfApplications operation using the token to retrieve
     more results.
     *
     * @param query Application query
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ApplicationInfoListApiModel> queryApplicationsAsync(ApplicationRegistrationQueryApiModel query, final ServiceCallback<ApplicationInfoListApiModel> serviceCallback);

    /**
     * Query applications.
     * List applications that match a query model.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfApplications operation using the token to retrieve
     more results.
     *
     * @param query Application query
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationInfoListApiModel object
     */
    Observable<ApplicationInfoListApiModel> queryApplicationsAsync(ApplicationRegistrationQueryApiModel query);

    /**
     * Query applications.
     * List applications that match a query model.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfApplications operation using the token to retrieve
     more results.
     *
     * @param query Application query
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationInfoListApiModel object
     */
    Observable<ServiceResponse<ApplicationInfoListApiModel>> queryApplicationsWithServiceResponseAsync(ApplicationRegistrationQueryApiModel query);
    /**
     * Query applications.
     * List applications that match a query model.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfApplications operation using the token to retrieve
     more results.
     *
     * @param query Application query
     * @param pageSize Optional number of results to
                 return
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApplicationInfoListApiModel object if successful.
     */
    ApplicationInfoListApiModel queryApplications(ApplicationRegistrationQueryApiModel query, Integer pageSize);

    /**
     * Query applications.
     * List applications that match a query model.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfApplications operation using the token to retrieve
     more results.
     *
     * @param query Application query
     * @param pageSize Optional number of results to
                 return
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ApplicationInfoListApiModel> queryApplicationsAsync(ApplicationRegistrationQueryApiModel query, Integer pageSize, final ServiceCallback<ApplicationInfoListApiModel> serviceCallback);

    /**
     * Query applications.
     * List applications that match a query model.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfApplications operation using the token to retrieve
     more results.
     *
     * @param query Application query
     * @param pageSize Optional number of results to
                 return
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationInfoListApiModel object
     */
    Observable<ApplicationInfoListApiModel> queryApplicationsAsync(ApplicationRegistrationQueryApiModel query, Integer pageSize);

    /**
     * Query applications.
     * List applications that match a query model.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfApplications operation using the token to retrieve
     more results.
     *
     * @param query Application query
     * @param pageSize Optional number of results to
                 return
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationInfoListApiModel object
     */
    Observable<ServiceResponse<ApplicationInfoListApiModel>> queryApplicationsWithServiceResponseAsync(ApplicationRegistrationQueryApiModel query, Integer pageSize);

    /**
     * Query applications by id.
     * A query model which supports the OPC UA Global Discovery Server query.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApplicationRecordListApiModel object if successful.
     */
    ApplicationRecordListApiModel queryApplicationsById();

    /**
     * Query applications by id.
     * A query model which supports the OPC UA Global Discovery Server query.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ApplicationRecordListApiModel> queryApplicationsByIdAsync(final ServiceCallback<ApplicationRecordListApiModel> serviceCallback);

    /**
     * Query applications by id.
     * A query model which supports the OPC UA Global Discovery Server query.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationRecordListApiModel object
     */
    Observable<ApplicationRecordListApiModel> queryApplicationsByIdAsync();

    /**
     * Query applications by id.
     * A query model which supports the OPC UA Global Discovery Server query.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationRecordListApiModel object
     */
    Observable<ServiceResponse<ApplicationRecordListApiModel>> queryApplicationsByIdWithServiceResponseAsync();
    /**
     * Query applications by id.
     * A query model which supports the OPC UA Global Discovery Server query.
     *
     * @param query the ApplicationRecordQueryApiModel value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ApplicationRecordListApiModel object if successful.
     */
    ApplicationRecordListApiModel queryApplicationsById(ApplicationRecordQueryApiModel query);

    /**
     * Query applications by id.
     * A query model which supports the OPC UA Global Discovery Server query.
     *
     * @param query the ApplicationRecordQueryApiModel value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ApplicationRecordListApiModel> queryApplicationsByIdAsync(ApplicationRecordQueryApiModel query, final ServiceCallback<ApplicationRecordListApiModel> serviceCallback);

    /**
     * Query applications by id.
     * A query model which supports the OPC UA Global Discovery Server query.
     *
     * @param query the ApplicationRecordQueryApiModel value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationRecordListApiModel object
     */
    Observable<ApplicationRecordListApiModel> queryApplicationsByIdAsync(ApplicationRecordQueryApiModel query);

    /**
     * Query applications by id.
     * A query model which supports the OPC UA Global Discovery Server query.
     *
     * @param query the ApplicationRecordQueryApiModel value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ApplicationRecordListApiModel object
     */
    Observable<ServiceResponse<ApplicationRecordListApiModel>> queryApplicationsByIdWithServiceResponseAsync(ApplicationRecordQueryApiModel query);

    /**
     * Activate endpoint.
     * Activates an endpoint for subsequent use in twin service.
     All endpoints must be activated using this API or through a
     activation filter during application registration or discovery.
     *
     * @param endpointId endpoint identifier
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void activateEndpoint(String endpointId);

    /**
     * Activate endpoint.
     * Activates an endpoint for subsequent use in twin service.
     All endpoints must be activated using this API or through a
     activation filter during application registration or discovery.
     *
     * @param endpointId endpoint identifier
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> activateEndpointAsync(String endpointId, final ServiceCallback<Void> serviceCallback);

    /**
     * Activate endpoint.
     * Activates an endpoint for subsequent use in twin service.
     All endpoints must be activated using this API or through a
     activation filter during application registration or discovery.
     *
     * @param endpointId endpoint identifier
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> activateEndpointAsync(String endpointId);

    /**
     * Activate endpoint.
     * Activates an endpoint for subsequent use in twin service.
     All endpoints must be activated using this API or through a
     activation filter during application registration or discovery.
     *
     * @param endpointId endpoint identifier
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> activateEndpointWithServiceResponseAsync(String endpointId);

    /**
     * Get endpoint information.
     * Gets information about an endpoint.
     *
     * @param endpointId endpoint identifier
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EndpointInfoApiModel object if successful.
     */
    EndpointInfoApiModel getEndpoint(String endpointId);

    /**
     * Get endpoint information.
     * Gets information about an endpoint.
     *
     * @param endpointId endpoint identifier
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<EndpointInfoApiModel> getEndpointAsync(String endpointId, final ServiceCallback<EndpointInfoApiModel> serviceCallback);

    /**
     * Get endpoint information.
     * Gets information about an endpoint.
     *
     * @param endpointId endpoint identifier
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EndpointInfoApiModel object
     */
    Observable<EndpointInfoApiModel> getEndpointAsync(String endpointId);

    /**
     * Get endpoint information.
     * Gets information about an endpoint.
     *
     * @param endpointId endpoint identifier
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EndpointInfoApiModel object
     */
    Observable<ServiceResponse<EndpointInfoApiModel>> getEndpointWithServiceResponseAsync(String endpointId);
    /**
     * Get endpoint information.
     * Gets information about an endpoint.
     *
     * @param endpointId endpoint identifier
     * @param onlyServerState Whether to include only server
                 state, or display current client state of the endpoint if
                 available
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EndpointInfoApiModel object if successful.
     */
    EndpointInfoApiModel getEndpoint(String endpointId, Boolean onlyServerState);

    /**
     * Get endpoint information.
     * Gets information about an endpoint.
     *
     * @param endpointId endpoint identifier
     * @param onlyServerState Whether to include only server
                 state, or display current client state of the endpoint if
                 available
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<EndpointInfoApiModel> getEndpointAsync(String endpointId, Boolean onlyServerState, final ServiceCallback<EndpointInfoApiModel> serviceCallback);

    /**
     * Get endpoint information.
     * Gets information about an endpoint.
     *
     * @param endpointId endpoint identifier
     * @param onlyServerState Whether to include only server
                 state, or display current client state of the endpoint if
                 available
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EndpointInfoApiModel object
     */
    Observable<EndpointInfoApiModel> getEndpointAsync(String endpointId, Boolean onlyServerState);

    /**
     * Get endpoint information.
     * Gets information about an endpoint.
     *
     * @param endpointId endpoint identifier
     * @param onlyServerState Whether to include only server
                 state, or display current client state of the endpoint if
                 available
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EndpointInfoApiModel object
     */
    Observable<ServiceResponse<EndpointInfoApiModel>> getEndpointWithServiceResponseAsync(String endpointId, Boolean onlyServerState);

    /**
     * Update endpoint information.
     *
     * @param endpointId endpoint identifier
     * @param request Endpoint update request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void updateEndpoint(String endpointId, EndpointRegistrationUpdateApiModel request);

    /**
     * Update endpoint information.
     *
     * @param endpointId endpoint identifier
     * @param request Endpoint update request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> updateEndpointAsync(String endpointId, EndpointRegistrationUpdateApiModel request, final ServiceCallback<Void> serviceCallback);

    /**
     * Update endpoint information.
     *
     * @param endpointId endpoint identifier
     * @param request Endpoint update request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> updateEndpointAsync(String endpointId, EndpointRegistrationUpdateApiModel request);

    /**
     * Update endpoint information.
     *
     * @param endpointId endpoint identifier
     * @param request Endpoint update request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> updateEndpointWithServiceResponseAsync(String endpointId, EndpointRegistrationUpdateApiModel request);

    /**
     * Get list of endpoints.
     * Get all registered endpoints in paged form.
     The returned model can contain a continuation token if more results are
     available.
     Call this operation again using the token to retrieve more results.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EndpointInfoListApiModel object if successful.
     */
    EndpointInfoListApiModel getListOfEndpoints();

    /**
     * Get list of endpoints.
     * Get all registered endpoints in paged form.
     The returned model can contain a continuation token if more results are
     available.
     Call this operation again using the token to retrieve more results.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<EndpointInfoListApiModel> getListOfEndpointsAsync(final ServiceCallback<EndpointInfoListApiModel> serviceCallback);

    /**
     * Get list of endpoints.
     * Get all registered endpoints in paged form.
     The returned model can contain a continuation token if more results are
     available.
     Call this operation again using the token to retrieve more results.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EndpointInfoListApiModel object
     */
    Observable<EndpointInfoListApiModel> getListOfEndpointsAsync();

    /**
     * Get list of endpoints.
     * Get all registered endpoints in paged form.
     The returned model can contain a continuation token if more results are
     available.
     Call this operation again using the token to retrieve more results.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EndpointInfoListApiModel object
     */
    Observable<ServiceResponse<EndpointInfoListApiModel>> getListOfEndpointsWithServiceResponseAsync();
    /**
     * Get list of endpoints.
     * Get all registered endpoints in paged form.
     The returned model can contain a continuation token if more results are
     available.
     Call this operation again using the token to retrieve more results.
     *
     * @param onlyServerState Whether to include only server
                 state, or display current client state of the endpoint if available
     * @param continuationToken Optional Continuation token
     * @param pageSize Optional number of results to return
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EndpointInfoListApiModel object if successful.
     */
    EndpointInfoListApiModel getListOfEndpoints(Boolean onlyServerState, String continuationToken, Integer pageSize);

    /**
     * Get list of endpoints.
     * Get all registered endpoints in paged form.
     The returned model can contain a continuation token if more results are
     available.
     Call this operation again using the token to retrieve more results.
     *
     * @param onlyServerState Whether to include only server
                 state, or display current client state of the endpoint if available
     * @param continuationToken Optional Continuation token
     * @param pageSize Optional number of results to return
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<EndpointInfoListApiModel> getListOfEndpointsAsync(Boolean onlyServerState, String continuationToken, Integer pageSize, final ServiceCallback<EndpointInfoListApiModel> serviceCallback);

    /**
     * Get list of endpoints.
     * Get all registered endpoints in paged form.
     The returned model can contain a continuation token if more results are
     available.
     Call this operation again using the token to retrieve more results.
     *
     * @param onlyServerState Whether to include only server
                 state, or display current client state of the endpoint if available
     * @param continuationToken Optional Continuation token
     * @param pageSize Optional number of results to return
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EndpointInfoListApiModel object
     */
    Observable<EndpointInfoListApiModel> getListOfEndpointsAsync(Boolean onlyServerState, String continuationToken, Integer pageSize);

    /**
     * Get list of endpoints.
     * Get all registered endpoints in paged form.
     The returned model can contain a continuation token if more results are
     available.
     Call this operation again using the token to retrieve more results.
     *
     * @param onlyServerState Whether to include only server
                 state, or display current client state of the endpoint if available
     * @param continuationToken Optional Continuation token
     * @param pageSize Optional number of results to return
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EndpointInfoListApiModel object
     */
    Observable<ServiceResponse<EndpointInfoListApiModel>> getListOfEndpointsWithServiceResponseAsync(Boolean onlyServerState, String continuationToken, Integer pageSize);

    /**
     * Get filtered list of endpoints.
     * Get a list of endpoints filtered using the specified query parameters.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfEndpoints operation using the token to retrieve
     more results.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EndpointInfoListApiModel object if successful.
     */
    EndpointInfoListApiModel getFilteredListOfEndpoints();

    /**
     * Get filtered list of endpoints.
     * Get a list of endpoints filtered using the specified query parameters.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfEndpoints operation using the token to retrieve
     more results.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<EndpointInfoListApiModel> getFilteredListOfEndpointsAsync(final ServiceCallback<EndpointInfoListApiModel> serviceCallback);

    /**
     * Get filtered list of endpoints.
     * Get a list of endpoints filtered using the specified query parameters.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfEndpoints operation using the token to retrieve
     more results.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EndpointInfoListApiModel object
     */
    Observable<EndpointInfoListApiModel> getFilteredListOfEndpointsAsync();

    /**
     * Get filtered list of endpoints.
     * Get a list of endpoints filtered using the specified query parameters.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfEndpoints operation using the token to retrieve
     more results.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EndpointInfoListApiModel object
     */
    Observable<ServiceResponse<EndpointInfoListApiModel>> getFilteredListOfEndpointsWithServiceResponseAsync();
    /**
     * Get filtered list of endpoints.
     * Get a list of endpoints filtered using the specified query parameters.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfEndpoints operation using the token to retrieve
     more results.
     *
     * @param url Endoint url for direct server access
     * @param userAuthentication Type of credential selected for authentication. Possible values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
     * @param certificate Certificate of the endpoint
     * @param securityMode Security Mode. Possible values include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
     * @param securityPolicy Security policy uri
     * @param activated Whether the endpoint was activated
     * @param connected Whether the endpoint is connected on supervisor.
     * @param endpointState The last state of the the activated endpoint. Possible values include: 'Connecting', 'NotReachable', 'Busy', 'NoTrust', 'CertificateInvalid', 'Ready', 'Error'
     * @param includeNotSeenSince Whether to include endpoints that were soft deleted
     * @param onlyServerState Whether to include only server state, or display
                 current client state of the endpoint if available
     * @param pageSize Optional number of results to
                 return
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EndpointInfoListApiModel object if successful.
     */
    EndpointInfoListApiModel getFilteredListOfEndpoints(String url, String userAuthentication, byte[] certificate, String securityMode, String securityPolicy, Boolean activated, Boolean connected, String endpointState, Boolean includeNotSeenSince, Boolean onlyServerState, Integer pageSize);

    /**
     * Get filtered list of endpoints.
     * Get a list of endpoints filtered using the specified query parameters.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfEndpoints operation using the token to retrieve
     more results.
     *
     * @param url Endoint url for direct server access
     * @param userAuthentication Type of credential selected for authentication. Possible values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
     * @param certificate Certificate of the endpoint
     * @param securityMode Security Mode. Possible values include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
     * @param securityPolicy Security policy uri
     * @param activated Whether the endpoint was activated
     * @param connected Whether the endpoint is connected on supervisor.
     * @param endpointState The last state of the the activated endpoint. Possible values include: 'Connecting', 'NotReachable', 'Busy', 'NoTrust', 'CertificateInvalid', 'Ready', 'Error'
     * @param includeNotSeenSince Whether to include endpoints that were soft deleted
     * @param onlyServerState Whether to include only server state, or display
                 current client state of the endpoint if available
     * @param pageSize Optional number of results to
                 return
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<EndpointInfoListApiModel> getFilteredListOfEndpointsAsync(String url, String userAuthentication, byte[] certificate, String securityMode, String securityPolicy, Boolean activated, Boolean connected, String endpointState, Boolean includeNotSeenSince, Boolean onlyServerState, Integer pageSize, final ServiceCallback<EndpointInfoListApiModel> serviceCallback);

    /**
     * Get filtered list of endpoints.
     * Get a list of endpoints filtered using the specified query parameters.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfEndpoints operation using the token to retrieve
     more results.
     *
     * @param url Endoint url for direct server access
     * @param userAuthentication Type of credential selected for authentication. Possible values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
     * @param certificate Certificate of the endpoint
     * @param securityMode Security Mode. Possible values include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
     * @param securityPolicy Security policy uri
     * @param activated Whether the endpoint was activated
     * @param connected Whether the endpoint is connected on supervisor.
     * @param endpointState The last state of the the activated endpoint. Possible values include: 'Connecting', 'NotReachable', 'Busy', 'NoTrust', 'CertificateInvalid', 'Ready', 'Error'
     * @param includeNotSeenSince Whether to include endpoints that were soft deleted
     * @param onlyServerState Whether to include only server state, or display
                 current client state of the endpoint if available
     * @param pageSize Optional number of results to
                 return
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EndpointInfoListApiModel object
     */
    Observable<EndpointInfoListApiModel> getFilteredListOfEndpointsAsync(String url, String userAuthentication, byte[] certificate, String securityMode, String securityPolicy, Boolean activated, Boolean connected, String endpointState, Boolean includeNotSeenSince, Boolean onlyServerState, Integer pageSize);

    /**
     * Get filtered list of endpoints.
     * Get a list of endpoints filtered using the specified query parameters.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfEndpoints operation using the token to retrieve
     more results.
     *
     * @param url Endoint url for direct server access
     * @param userAuthentication Type of credential selected for authentication. Possible values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
     * @param certificate Certificate of the endpoint
     * @param securityMode Security Mode. Possible values include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
     * @param securityPolicy Security policy uri
     * @param activated Whether the endpoint was activated
     * @param connected Whether the endpoint is connected on supervisor.
     * @param endpointState The last state of the the activated endpoint. Possible values include: 'Connecting', 'NotReachable', 'Busy', 'NoTrust', 'CertificateInvalid', 'Ready', 'Error'
     * @param includeNotSeenSince Whether to include endpoints that were soft deleted
     * @param onlyServerState Whether to include only server state, or display
                 current client state of the endpoint if available
     * @param pageSize Optional number of results to
                 return
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EndpointInfoListApiModel object
     */
    Observable<ServiceResponse<EndpointInfoListApiModel>> getFilteredListOfEndpointsWithServiceResponseAsync(String url, String userAuthentication, byte[] certificate, String securityMode, String securityPolicy, Boolean activated, Boolean connected, String endpointState, Boolean includeNotSeenSince, Boolean onlyServerState, Integer pageSize);

    /**
     * Query endpoints.
     * Return endpoints that match the specified query.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfEndpoints operation using the token to retrieve
     more results.
     *
     * @param query Query to match
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EndpointInfoListApiModel object if successful.
     */
    EndpointInfoListApiModel queryEndpoints(EndpointRegistrationQueryApiModel query);

    /**
     * Query endpoints.
     * Return endpoints that match the specified query.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfEndpoints operation using the token to retrieve
     more results.
     *
     * @param query Query to match
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<EndpointInfoListApiModel> queryEndpointsAsync(EndpointRegistrationQueryApiModel query, final ServiceCallback<EndpointInfoListApiModel> serviceCallback);

    /**
     * Query endpoints.
     * Return endpoints that match the specified query.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfEndpoints operation using the token to retrieve
     more results.
     *
     * @param query Query to match
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EndpointInfoListApiModel object
     */
    Observable<EndpointInfoListApiModel> queryEndpointsAsync(EndpointRegistrationQueryApiModel query);

    /**
     * Query endpoints.
     * Return endpoints that match the specified query.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfEndpoints operation using the token to retrieve
     more results.
     *
     * @param query Query to match
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EndpointInfoListApiModel object
     */
    Observable<ServiceResponse<EndpointInfoListApiModel>> queryEndpointsWithServiceResponseAsync(EndpointRegistrationQueryApiModel query);
    /**
     * Query endpoints.
     * Return endpoints that match the specified query.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfEndpoints operation using the token to retrieve
     more results.
     *
     * @param query Query to match
     * @param onlyServerState Whether to include only server
                 state, or display current client state of the endpoint if available
     * @param pageSize Optional number of results to return
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EndpointInfoListApiModel object if successful.
     */
    EndpointInfoListApiModel queryEndpoints(EndpointRegistrationQueryApiModel query, Boolean onlyServerState, Integer pageSize);

    /**
     * Query endpoints.
     * Return endpoints that match the specified query.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfEndpoints operation using the token to retrieve
     more results.
     *
     * @param query Query to match
     * @param onlyServerState Whether to include only server
                 state, or display current client state of the endpoint if available
     * @param pageSize Optional number of results to return
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<EndpointInfoListApiModel> queryEndpointsAsync(EndpointRegistrationQueryApiModel query, Boolean onlyServerState, Integer pageSize, final ServiceCallback<EndpointInfoListApiModel> serviceCallback);

    /**
     * Query endpoints.
     * Return endpoints that match the specified query.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfEndpoints operation using the token to retrieve
     more results.
     *
     * @param query Query to match
     * @param onlyServerState Whether to include only server
                 state, or display current client state of the endpoint if available
     * @param pageSize Optional number of results to return
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EndpointInfoListApiModel object
     */
    Observable<EndpointInfoListApiModel> queryEndpointsAsync(EndpointRegistrationQueryApiModel query, Boolean onlyServerState, Integer pageSize);

    /**
     * Query endpoints.
     * Return endpoints that match the specified query.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfEndpoints operation using the token to retrieve
     more results.
     *
     * @param query Query to match
     * @param onlyServerState Whether to include only server
                 state, or display current client state of the endpoint if available
     * @param pageSize Optional number of results to return
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EndpointInfoListApiModel object
     */
    Observable<ServiceResponse<EndpointInfoListApiModel>> queryEndpointsWithServiceResponseAsync(EndpointRegistrationQueryApiModel query, Boolean onlyServerState, Integer pageSize);

    /**
     * Deactivate endpoint.
     * Deactivates the endpoint and disable access through twin service.
     *
     * @param endpointId endpoint identifier
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void deactivateEndpoint(String endpointId);

    /**
     * Deactivate endpoint.
     * Deactivates the endpoint and disable access through twin service.
     *
     * @param endpointId endpoint identifier
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deactivateEndpointAsync(String endpointId, final ServiceCallback<Void> serviceCallback);

    /**
     * Deactivate endpoint.
     * Deactivates the endpoint and disable access through twin service.
     *
     * @param endpointId endpoint identifier
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deactivateEndpointAsync(String endpointId);

    /**
     * Deactivate endpoint.
     * Deactivates the endpoint and disable access through twin service.
     *
     * @param endpointId endpoint identifier
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deactivateEndpointWithServiceResponseAsync(String endpointId);

    /**
     * Return the service status in the form of the service status
     api model.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the StatusResponseApiModel object if successful.
     */
    StatusResponseApiModel getStatus();

    /**
     * Return the service status in the form of the service status
     api model.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<StatusResponseApiModel> getStatusAsync(final ServiceCallback<StatusResponseApiModel> serviceCallback);

    /**
     * Return the service status in the form of the service status
     api model.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StatusResponseApiModel object
     */
    Observable<StatusResponseApiModel> getStatusAsync();

    /**
     * Return the service status in the form of the service status
     api model.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StatusResponseApiModel object
     */
    Observable<ServiceResponse<StatusResponseApiModel>> getStatusWithServiceResponseAsync();

    /**
     * Get supervisor registration information.
     * Returns a supervisor's registration and connectivity information.
     A supervisor id corresponds to the twin modules module identity.
     *
     * @param supervisorId Supervisor identifier
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SupervisorApiModel object if successful.
     */
    SupervisorApiModel getSupervisor(String supervisorId);

    /**
     * Get supervisor registration information.
     * Returns a supervisor's registration and connectivity information.
     A supervisor id corresponds to the twin modules module identity.
     *
     * @param supervisorId Supervisor identifier
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SupervisorApiModel> getSupervisorAsync(String supervisorId, final ServiceCallback<SupervisorApiModel> serviceCallback);

    /**
     * Get supervisor registration information.
     * Returns a supervisor's registration and connectivity information.
     A supervisor id corresponds to the twin modules module identity.
     *
     * @param supervisorId Supervisor identifier
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SupervisorApiModel object
     */
    Observable<SupervisorApiModel> getSupervisorAsync(String supervisorId);

    /**
     * Get supervisor registration information.
     * Returns a supervisor's registration and connectivity information.
     A supervisor id corresponds to the twin modules module identity.
     *
     * @param supervisorId Supervisor identifier
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SupervisorApiModel object
     */
    Observable<ServiceResponse<SupervisorApiModel>> getSupervisorWithServiceResponseAsync(String supervisorId);
    /**
     * Get supervisor registration information.
     * Returns a supervisor's registration and connectivity information.
     A supervisor id corresponds to the twin modules module identity.
     *
     * @param supervisorId Supervisor identifier
     * @param onlyServerState Whether to include only server
                 state, or display current client state of the endpoint if
                 available
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SupervisorApiModel object if successful.
     */
    SupervisorApiModel getSupervisor(String supervisorId, Boolean onlyServerState);

    /**
     * Get supervisor registration information.
     * Returns a supervisor's registration and connectivity information.
     A supervisor id corresponds to the twin modules module identity.
     *
     * @param supervisorId Supervisor identifier
     * @param onlyServerState Whether to include only server
                 state, or display current client state of the endpoint if
                 available
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SupervisorApiModel> getSupervisorAsync(String supervisorId, Boolean onlyServerState, final ServiceCallback<SupervisorApiModel> serviceCallback);

    /**
     * Get supervisor registration information.
     * Returns a supervisor's registration and connectivity information.
     A supervisor id corresponds to the twin modules module identity.
     *
     * @param supervisorId Supervisor identifier
     * @param onlyServerState Whether to include only server
                 state, or display current client state of the endpoint if
                 available
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SupervisorApiModel object
     */
    Observable<SupervisorApiModel> getSupervisorAsync(String supervisorId, Boolean onlyServerState);

    /**
     * Get supervisor registration information.
     * Returns a supervisor's registration and connectivity information.
     A supervisor id corresponds to the twin modules module identity.
     *
     * @param supervisorId Supervisor identifier
     * @param onlyServerState Whether to include only server
                 state, or display current client state of the endpoint if
                 available
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SupervisorApiModel object
     */
    Observable<ServiceResponse<SupervisorApiModel>> getSupervisorWithServiceResponseAsync(String supervisorId, Boolean onlyServerState);

    /**
     * Update supervisor information.
     * Allows a caller to configure recurring discovery runs on the twin module
     identified by the supervisor id or update site information.
     *
     * @param supervisorId supervisor identifier
     * @param request Patch request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void updateSupervisor(String supervisorId, SupervisorUpdateApiModel request);

    /**
     * Update supervisor information.
     * Allows a caller to configure recurring discovery runs on the twin module
     identified by the supervisor id or update site information.
     *
     * @param supervisorId supervisor identifier
     * @param request Patch request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> updateSupervisorAsync(String supervisorId, SupervisorUpdateApiModel request, final ServiceCallback<Void> serviceCallback);

    /**
     * Update supervisor information.
     * Allows a caller to configure recurring discovery runs on the twin module
     identified by the supervisor id or update site information.
     *
     * @param supervisorId supervisor identifier
     * @param request Patch request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> updateSupervisorAsync(String supervisorId, SupervisorUpdateApiModel request);

    /**
     * Update supervisor information.
     * Allows a caller to configure recurring discovery runs on the twin module
     identified by the supervisor id or update site information.
     *
     * @param supervisorId supervisor identifier
     * @param request Patch request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> updateSupervisorWithServiceResponseAsync(String supervisorId, SupervisorUpdateApiModel request);

    /**
     * Get runtime status of supervisor.
     * Allows a caller to get runtime status for a supervisor.
     *
     * @param supervisorId supervisor identifier
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SupervisorStatusApiModel object if successful.
     */
    SupervisorStatusApiModel getSupervisorStatus(String supervisorId);

    /**
     * Get runtime status of supervisor.
     * Allows a caller to get runtime status for a supervisor.
     *
     * @param supervisorId supervisor identifier
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SupervisorStatusApiModel> getSupervisorStatusAsync(String supervisorId, final ServiceCallback<SupervisorStatusApiModel> serviceCallback);

    /**
     * Get runtime status of supervisor.
     * Allows a caller to get runtime status for a supervisor.
     *
     * @param supervisorId supervisor identifier
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SupervisorStatusApiModel object
     */
    Observable<SupervisorStatusApiModel> getSupervisorStatusAsync(String supervisorId);

    /**
     * Get runtime status of supervisor.
     * Allows a caller to get runtime status for a supervisor.
     *
     * @param supervisorId supervisor identifier
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SupervisorStatusApiModel object
     */
    Observable<ServiceResponse<SupervisorStatusApiModel>> getSupervisorStatusWithServiceResponseAsync(String supervisorId);

    /**
     * Reset supervisor.
     * Allows a caller to reset the twin module using its supervisor
     identity identifier.
     *
     * @param supervisorId supervisor identifier
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void resetSupervisor(String supervisorId);

    /**
     * Reset supervisor.
     * Allows a caller to reset the twin module using its supervisor
     identity identifier.
     *
     * @param supervisorId supervisor identifier
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> resetSupervisorAsync(String supervisorId, final ServiceCallback<Void> serviceCallback);

    /**
     * Reset supervisor.
     * Allows a caller to reset the twin module using its supervisor
     identity identifier.
     *
     * @param supervisorId supervisor identifier
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> resetSupervisorAsync(String supervisorId);

    /**
     * Reset supervisor.
     * Allows a caller to reset the twin module using its supervisor
     identity identifier.
     *
     * @param supervisorId supervisor identifier
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> resetSupervisorWithServiceResponseAsync(String supervisorId);

    /**
     * Get list of supervisors.
     * Get all registered supervisors and therefore twin modules in paged form.
     The returned model can contain a continuation token if more results are
     available.
     Call this operation again using the token to retrieve more results.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SupervisorListApiModel object if successful.
     */
    SupervisorListApiModel getListOfSupervisors();

    /**
     * Get list of supervisors.
     * Get all registered supervisors and therefore twin modules in paged form.
     The returned model can contain a continuation token if more results are
     available.
     Call this operation again using the token to retrieve more results.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SupervisorListApiModel> getListOfSupervisorsAsync(final ServiceCallback<SupervisorListApiModel> serviceCallback);

    /**
     * Get list of supervisors.
     * Get all registered supervisors and therefore twin modules in paged form.
     The returned model can contain a continuation token if more results are
     available.
     Call this operation again using the token to retrieve more results.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SupervisorListApiModel object
     */
    Observable<SupervisorListApiModel> getListOfSupervisorsAsync();

    /**
     * Get list of supervisors.
     * Get all registered supervisors and therefore twin modules in paged form.
     The returned model can contain a continuation token if more results are
     available.
     Call this operation again using the token to retrieve more results.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SupervisorListApiModel object
     */
    Observable<ServiceResponse<SupervisorListApiModel>> getListOfSupervisorsWithServiceResponseAsync();
    /**
     * Get list of supervisors.
     * Get all registered supervisors and therefore twin modules in paged form.
     The returned model can contain a continuation token if more results are
     available.
     Call this operation again using the token to retrieve more results.
     *
     * @param onlyServerState Whether to include only server
                 state, or display current client state of the endpoint if available
     * @param continuationToken Optional Continuation token
     * @param pageSize Optional number of results to return
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SupervisorListApiModel object if successful.
     */
    SupervisorListApiModel getListOfSupervisors(Boolean onlyServerState, String continuationToken, Integer pageSize);

    /**
     * Get list of supervisors.
     * Get all registered supervisors and therefore twin modules in paged form.
     The returned model can contain a continuation token if more results are
     available.
     Call this operation again using the token to retrieve more results.
     *
     * @param onlyServerState Whether to include only server
                 state, or display current client state of the endpoint if available
     * @param continuationToken Optional Continuation token
     * @param pageSize Optional number of results to return
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SupervisorListApiModel> getListOfSupervisorsAsync(Boolean onlyServerState, String continuationToken, Integer pageSize, final ServiceCallback<SupervisorListApiModel> serviceCallback);

    /**
     * Get list of supervisors.
     * Get all registered supervisors and therefore twin modules in paged form.
     The returned model can contain a continuation token if more results are
     available.
     Call this operation again using the token to retrieve more results.
     *
     * @param onlyServerState Whether to include only server
                 state, or display current client state of the endpoint if available
     * @param continuationToken Optional Continuation token
     * @param pageSize Optional number of results to return
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SupervisorListApiModel object
     */
    Observable<SupervisorListApiModel> getListOfSupervisorsAsync(Boolean onlyServerState, String continuationToken, Integer pageSize);

    /**
     * Get list of supervisors.
     * Get all registered supervisors and therefore twin modules in paged form.
     The returned model can contain a continuation token if more results are
     available.
     Call this operation again using the token to retrieve more results.
     *
     * @param onlyServerState Whether to include only server
                 state, or display current client state of the endpoint if available
     * @param continuationToken Optional Continuation token
     * @param pageSize Optional number of results to return
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SupervisorListApiModel object
     */
    Observable<ServiceResponse<SupervisorListApiModel>> getListOfSupervisorsWithServiceResponseAsync(Boolean onlyServerState, String continuationToken, Integer pageSize);

    /**
     * Get filtered list of supervisors.
     * Get a list of supervisors filtered using the specified query parameters.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfSupervisors operation using the token to retrieve
     more results.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SupervisorListApiModel object if successful.
     */
    SupervisorListApiModel getFilteredListOfSupervisors();

    /**
     * Get filtered list of supervisors.
     * Get a list of supervisors filtered using the specified query parameters.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfSupervisors operation using the token to retrieve
     more results.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SupervisorListApiModel> getFilteredListOfSupervisorsAsync(final ServiceCallback<SupervisorListApiModel> serviceCallback);

    /**
     * Get filtered list of supervisors.
     * Get a list of supervisors filtered using the specified query parameters.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfSupervisors operation using the token to retrieve
     more results.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SupervisorListApiModel object
     */
    Observable<SupervisorListApiModel> getFilteredListOfSupervisorsAsync();

    /**
     * Get filtered list of supervisors.
     * Get a list of supervisors filtered using the specified query parameters.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfSupervisors operation using the token to retrieve
     more results.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SupervisorListApiModel object
     */
    Observable<ServiceResponse<SupervisorListApiModel>> getFilteredListOfSupervisorsWithServiceResponseAsync();
    /**
     * Get filtered list of supervisors.
     * Get a list of supervisors filtered using the specified query parameters.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfSupervisors operation using the token to retrieve
     more results.
     *
     * @param siteId Site of the supervisor
     * @param discovery Discovery mode of supervisor. Possible values include: 'Off', 'Local', 'Network', 'Fast', 'Scan'
     * @param connected Included connected or disconnected
     * @param onlyServerState Whether to include only server
                 state, or display current client state of the endpoint if
                 available
     * @param pageSize Number of results to return
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SupervisorListApiModel object if successful.
     */
    SupervisorListApiModel getFilteredListOfSupervisors(String siteId, String discovery, Boolean connected, Boolean onlyServerState, Integer pageSize);

    /**
     * Get filtered list of supervisors.
     * Get a list of supervisors filtered using the specified query parameters.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfSupervisors operation using the token to retrieve
     more results.
     *
     * @param siteId Site of the supervisor
     * @param discovery Discovery mode of supervisor. Possible values include: 'Off', 'Local', 'Network', 'Fast', 'Scan'
     * @param connected Included connected or disconnected
     * @param onlyServerState Whether to include only server
                 state, or display current client state of the endpoint if
                 available
     * @param pageSize Number of results to return
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SupervisorListApiModel> getFilteredListOfSupervisorsAsync(String siteId, String discovery, Boolean connected, Boolean onlyServerState, Integer pageSize, final ServiceCallback<SupervisorListApiModel> serviceCallback);

    /**
     * Get filtered list of supervisors.
     * Get a list of supervisors filtered using the specified query parameters.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfSupervisors operation using the token to retrieve
     more results.
     *
     * @param siteId Site of the supervisor
     * @param discovery Discovery mode of supervisor. Possible values include: 'Off', 'Local', 'Network', 'Fast', 'Scan'
     * @param connected Included connected or disconnected
     * @param onlyServerState Whether to include only server
                 state, or display current client state of the endpoint if
                 available
     * @param pageSize Number of results to return
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SupervisorListApiModel object
     */
    Observable<SupervisorListApiModel> getFilteredListOfSupervisorsAsync(String siteId, String discovery, Boolean connected, Boolean onlyServerState, Integer pageSize);

    /**
     * Get filtered list of supervisors.
     * Get a list of supervisors filtered using the specified query parameters.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfSupervisors operation using the token to retrieve
     more results.
     *
     * @param siteId Site of the supervisor
     * @param discovery Discovery mode of supervisor. Possible values include: 'Off', 'Local', 'Network', 'Fast', 'Scan'
     * @param connected Included connected or disconnected
     * @param onlyServerState Whether to include only server
                 state, or display current client state of the endpoint if
                 available
     * @param pageSize Number of results to return
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SupervisorListApiModel object
     */
    Observable<ServiceResponse<SupervisorListApiModel>> getFilteredListOfSupervisorsWithServiceResponseAsync(String siteId, String discovery, Boolean connected, Boolean onlyServerState, Integer pageSize);

    /**
     * Query supervisors.
     * Get all supervisors that match a specified query.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfSupervisors operation using the token to retrieve
     more results.
     *
     * @param query Supervisors query model
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SupervisorListApiModel object if successful.
     */
    SupervisorListApiModel querySupervisors(SupervisorQueryApiModel query);

    /**
     * Query supervisors.
     * Get all supervisors that match a specified query.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfSupervisors operation using the token to retrieve
     more results.
     *
     * @param query Supervisors query model
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SupervisorListApiModel> querySupervisorsAsync(SupervisorQueryApiModel query, final ServiceCallback<SupervisorListApiModel> serviceCallback);

    /**
     * Query supervisors.
     * Get all supervisors that match a specified query.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfSupervisors operation using the token to retrieve
     more results.
     *
     * @param query Supervisors query model
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SupervisorListApiModel object
     */
    Observable<SupervisorListApiModel> querySupervisorsAsync(SupervisorQueryApiModel query);

    /**
     * Query supervisors.
     * Get all supervisors that match a specified query.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfSupervisors operation using the token to retrieve
     more results.
     *
     * @param query Supervisors query model
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SupervisorListApiModel object
     */
    Observable<ServiceResponse<SupervisorListApiModel>> querySupervisorsWithServiceResponseAsync(SupervisorQueryApiModel query);
    /**
     * Query supervisors.
     * Get all supervisors that match a specified query.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfSupervisors operation using the token to retrieve
     more results.
     *
     * @param query Supervisors query model
     * @param onlyServerState Whether to include only server
                 state, or display current client state of the endpoint if
                 available
     * @param pageSize Number of results to return
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SupervisorListApiModel object if successful.
     */
    SupervisorListApiModel querySupervisors(SupervisorQueryApiModel query, Boolean onlyServerState, Integer pageSize);

    /**
     * Query supervisors.
     * Get all supervisors that match a specified query.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfSupervisors operation using the token to retrieve
     more results.
     *
     * @param query Supervisors query model
     * @param onlyServerState Whether to include only server
                 state, or display current client state of the endpoint if
                 available
     * @param pageSize Number of results to return
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SupervisorListApiModel> querySupervisorsAsync(SupervisorQueryApiModel query, Boolean onlyServerState, Integer pageSize, final ServiceCallback<SupervisorListApiModel> serviceCallback);

    /**
     * Query supervisors.
     * Get all supervisors that match a specified query.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfSupervisors operation using the token to retrieve
     more results.
     *
     * @param query Supervisors query model
     * @param onlyServerState Whether to include only server
                 state, or display current client state of the endpoint if
                 available
     * @param pageSize Number of results to return
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SupervisorListApiModel object
     */
    Observable<SupervisorListApiModel> querySupervisorsAsync(SupervisorQueryApiModel query, Boolean onlyServerState, Integer pageSize);

    /**
     * Query supervisors.
     * Get all supervisors that match a specified query.
     The returned model can contain a continuation token if more results are
     available.
     Call the GetListOfSupervisors operation using the token to retrieve
     more results.
     *
     * @param query Supervisors query model
     * @param onlyServerState Whether to include only server
                 state, or display current client state of the endpoint if
                 available
     * @param pageSize Number of results to return
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SupervisorListApiModel object
     */
    Observable<ServiceResponse<SupervisorListApiModel>> querySupervisorsWithServiceResponseAsync(SupervisorQueryApiModel query, Boolean onlyServerState, Integer pageSize);

}
