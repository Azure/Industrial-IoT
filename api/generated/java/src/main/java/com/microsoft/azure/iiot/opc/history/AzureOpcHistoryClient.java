/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.microsoft.azure.iiot.opc.history;

import com.microsoft.azure.iiot.opc.history.models.HistoryReadNextRequestApiModel;
import com.microsoft.azure.iiot.opc.history.models.HistoryReadNextResponseApiModelHistoricEventApiModel;
import com.microsoft.azure.iiot.opc.history.models.HistoryReadNextResponseApiModelHistoricValueApiModel;
import com.microsoft.azure.iiot.opc.history.models.HistoryReadNextResponseApiModelJToken;
import com.microsoft.azure.iiot.opc.history.models.HistoryReadRequestApiModelJToken;
import com.microsoft.azure.iiot.opc.history.models.HistoryReadRequestApiModelReadEventsDetailsApiModel;
import com.microsoft.azure.iiot.opc.history.models.HistoryReadRequestApiModelReadModifiedValuesDetailsApiModel;
import com.microsoft.azure.iiot.opc.history.models.HistoryReadRequestApiModelReadProcessedValuesDetailsApiModel;
import com.microsoft.azure.iiot.opc.history.models.HistoryReadRequestApiModelReadValuesAtTimesDetailsApiModel;
import com.microsoft.azure.iiot.opc.history.models.HistoryReadRequestApiModelReadValuesDetailsApiModel;
import com.microsoft.azure.iiot.opc.history.models.HistoryReadResponseApiModelHistoricEventApiModel;
import com.microsoft.azure.iiot.opc.history.models.HistoryReadResponseApiModelHistoricValueApiModel;
import com.microsoft.azure.iiot.opc.history.models.HistoryReadResponseApiModelJToken;
import com.microsoft.azure.iiot.opc.history.models.HistoryUpdateRequestApiModelDeleteEventsDetailsApiModel;
import com.microsoft.azure.iiot.opc.history.models.HistoryUpdateRequestApiModelDeleteModifiedValuesDetailsApiModel;
import com.microsoft.azure.iiot.opc.history.models.HistoryUpdateRequestApiModelDeleteValuesAtTimesDetailsApiModel;
import com.microsoft.azure.iiot.opc.history.models.HistoryUpdateRequestApiModelDeleteValuesDetailsApiModel;
import com.microsoft.azure.iiot.opc.history.models.HistoryUpdateRequestApiModelInsertEventsDetailsApiModel;
import com.microsoft.azure.iiot.opc.history.models.HistoryUpdateRequestApiModelInsertValuesDetailsApiModel;
import com.microsoft.azure.iiot.opc.history.models.HistoryUpdateRequestApiModelJToken;
import com.microsoft.azure.iiot.opc.history.models.HistoryUpdateRequestApiModelReplaceEventsDetailsApiModel;
import com.microsoft.azure.iiot.opc.history.models.HistoryUpdateRequestApiModelReplaceValuesDetailsApiModel;
import com.microsoft.azure.iiot.opc.history.models.HistoryUpdateResponseApiModel;
import com.microsoft.azure.iiot.opc.history.models.StatusResponseApiModel;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import rx.Observable;
import com.microsoft.rest.RestClient;

/**
 * The interface for AzureOpcHistoryClient class.
 */
public interface AzureOpcHistoryClient {
    /**
     * Gets the REST client.
     *
     * @return the {@link RestClient} object.
    */
    RestClient restClient();

    /**
     * The default base URL.
     */
    String DEFAULT_BASE_URL = "https:///history";

    /**
     * Delete value history at specified times.
     * Delete value history using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history update request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HistoryUpdateResponseApiModel object if successful.
     */
    HistoryUpdateResponseApiModel historyDeleteValuesAtTimes(String endpointId, HistoryUpdateRequestApiModelDeleteValuesAtTimesDetailsApiModel request);

    /**
     * Delete value history at specified times.
     * Delete value history using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history update request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<HistoryUpdateResponseApiModel> historyDeleteValuesAtTimesAsync(String endpointId, HistoryUpdateRequestApiModelDeleteValuesAtTimesDetailsApiModel request, final ServiceCallback<HistoryUpdateResponseApiModel> serviceCallback);

    /**
     * Delete value history at specified times.
     * Delete value history using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history update request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryUpdateResponseApiModel object
     */
    Observable<HistoryUpdateResponseApiModel> historyDeleteValuesAtTimesAsync(String endpointId, HistoryUpdateRequestApiModelDeleteValuesAtTimesDetailsApiModel request);

    /**
     * Delete value history at specified times.
     * Delete value history using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history update request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryUpdateResponseApiModel object
     */
    Observable<ServiceResponse<HistoryUpdateResponseApiModel>> historyDeleteValuesAtTimesWithServiceResponseAsync(String endpointId, HistoryUpdateRequestApiModelDeleteValuesAtTimesDetailsApiModel request);

    /**
     * Delete historic values.
     * Delete historic values using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history update request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HistoryUpdateResponseApiModel object if successful.
     */
    HistoryUpdateResponseApiModel historyDeleteValues(String endpointId, HistoryUpdateRequestApiModelDeleteValuesDetailsApiModel request);

    /**
     * Delete historic values.
     * Delete historic values using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history update request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<HistoryUpdateResponseApiModel> historyDeleteValuesAsync(String endpointId, HistoryUpdateRequestApiModelDeleteValuesDetailsApiModel request, final ServiceCallback<HistoryUpdateResponseApiModel> serviceCallback);

    /**
     * Delete historic values.
     * Delete historic values using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history update request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryUpdateResponseApiModel object
     */
    Observable<HistoryUpdateResponseApiModel> historyDeleteValuesAsync(String endpointId, HistoryUpdateRequestApiModelDeleteValuesDetailsApiModel request);

    /**
     * Delete historic values.
     * Delete historic values using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history update request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryUpdateResponseApiModel object
     */
    Observable<ServiceResponse<HistoryUpdateResponseApiModel>> historyDeleteValuesWithServiceResponseAsync(String endpointId, HistoryUpdateRequestApiModelDeleteValuesDetailsApiModel request);

    /**
     * Delete historic values.
     * Delete historic values using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history update request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HistoryUpdateResponseApiModel object if successful.
     */
    HistoryUpdateResponseApiModel historyDeleteModifiedValues(String endpointId, HistoryUpdateRequestApiModelDeleteModifiedValuesDetailsApiModel request);

    /**
     * Delete historic values.
     * Delete historic values using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history update request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<HistoryUpdateResponseApiModel> historyDeleteModifiedValuesAsync(String endpointId, HistoryUpdateRequestApiModelDeleteModifiedValuesDetailsApiModel request, final ServiceCallback<HistoryUpdateResponseApiModel> serviceCallback);

    /**
     * Delete historic values.
     * Delete historic values using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history update request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryUpdateResponseApiModel object
     */
    Observable<HistoryUpdateResponseApiModel> historyDeleteModifiedValuesAsync(String endpointId, HistoryUpdateRequestApiModelDeleteModifiedValuesDetailsApiModel request);

    /**
     * Delete historic values.
     * Delete historic values using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history update request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryUpdateResponseApiModel object
     */
    Observable<ServiceResponse<HistoryUpdateResponseApiModel>> historyDeleteModifiedValuesWithServiceResponseAsync(String endpointId, HistoryUpdateRequestApiModelDeleteModifiedValuesDetailsApiModel request);

    /**
     * Delete historic events.
     * Delete historic events using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history update request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HistoryUpdateResponseApiModel object if successful.
     */
    HistoryUpdateResponseApiModel historyDeleteEvents(String endpointId, HistoryUpdateRequestApiModelDeleteEventsDetailsApiModel request);

    /**
     * Delete historic events.
     * Delete historic events using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history update request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<HistoryUpdateResponseApiModel> historyDeleteEventsAsync(String endpointId, HistoryUpdateRequestApiModelDeleteEventsDetailsApiModel request, final ServiceCallback<HistoryUpdateResponseApiModel> serviceCallback);

    /**
     * Delete historic events.
     * Delete historic events using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history update request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryUpdateResponseApiModel object
     */
    Observable<HistoryUpdateResponseApiModel> historyDeleteEventsAsync(String endpointId, HistoryUpdateRequestApiModelDeleteEventsDetailsApiModel request);

    /**
     * Delete historic events.
     * Delete historic events using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history update request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryUpdateResponseApiModel object
     */
    Observable<ServiceResponse<HistoryUpdateResponseApiModel>> historyDeleteEventsWithServiceResponseAsync(String endpointId, HistoryUpdateRequestApiModelDeleteEventsDetailsApiModel request);

    /**
     * Read history using json details.
     * Read node history if available using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history read request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HistoryReadResponseApiModelJToken object if successful.
     */
    HistoryReadResponseApiModelJToken historyReadRaw(String endpointId, HistoryReadRequestApiModelJToken request);

    /**
     * Read history using json details.
     * Read node history if available using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history read request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<HistoryReadResponseApiModelJToken> historyReadRawAsync(String endpointId, HistoryReadRequestApiModelJToken request, final ServiceCallback<HistoryReadResponseApiModelJToken> serviceCallback);

    /**
     * Read history using json details.
     * Read node history if available using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history read request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryReadResponseApiModelJToken object
     */
    Observable<HistoryReadResponseApiModelJToken> historyReadRawAsync(String endpointId, HistoryReadRequestApiModelJToken request);

    /**
     * Read history using json details.
     * Read node history if available using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history read request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryReadResponseApiModelJToken object
     */
    Observable<ServiceResponse<HistoryReadResponseApiModelJToken>> historyReadRawWithServiceResponseAsync(String endpointId, HistoryReadRequestApiModelJToken request);

    /**
     * Read next batch of history as json.
     * Read next batch of node history values using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history read next request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HistoryReadNextResponseApiModelJToken object if successful.
     */
    HistoryReadNextResponseApiModelJToken historyReadRawNext(String endpointId, HistoryReadNextRequestApiModel request);

    /**
     * Read next batch of history as json.
     * Read next batch of node history values using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history read next request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<HistoryReadNextResponseApiModelJToken> historyReadRawNextAsync(String endpointId, HistoryReadNextRequestApiModel request, final ServiceCallback<HistoryReadNextResponseApiModelJToken> serviceCallback);

    /**
     * Read next batch of history as json.
     * Read next batch of node history values using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history read next request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryReadNextResponseApiModelJToken object
     */
    Observable<HistoryReadNextResponseApiModelJToken> historyReadRawNextAsync(String endpointId, HistoryReadNextRequestApiModel request);

    /**
     * Read next batch of history as json.
     * Read next batch of node history values using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history read next request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryReadNextResponseApiModelJToken object
     */
    Observable<ServiceResponse<HistoryReadNextResponseApiModelJToken>> historyReadRawNextWithServiceResponseAsync(String endpointId, HistoryReadNextRequestApiModel request);

    /**
     * Update node history using raw json.
     * Update node history using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history update request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HistoryUpdateResponseApiModel object if successful.
     */
    HistoryUpdateResponseApiModel historyUpdateRaw(String endpointId, HistoryUpdateRequestApiModelJToken request);

    /**
     * Update node history using raw json.
     * Update node history using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history update request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<HistoryUpdateResponseApiModel> historyUpdateRawAsync(String endpointId, HistoryUpdateRequestApiModelJToken request, final ServiceCallback<HistoryUpdateResponseApiModel> serviceCallback);

    /**
     * Update node history using raw json.
     * Update node history using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history update request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryUpdateResponseApiModel object
     */
    Observable<HistoryUpdateResponseApiModel> historyUpdateRawAsync(String endpointId, HistoryUpdateRequestApiModelJToken request);

    /**
     * Update node history using raw json.
     * Update node history using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history update request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryUpdateResponseApiModel object
     */
    Observable<ServiceResponse<HistoryUpdateResponseApiModel>> historyUpdateRawWithServiceResponseAsync(String endpointId, HistoryUpdateRequestApiModelJToken request);

    /**
     * Insert historic values.
     * Insert historic values using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history insert request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HistoryUpdateResponseApiModel object if successful.
     */
    HistoryUpdateResponseApiModel historyInsertValues(String endpointId, HistoryUpdateRequestApiModelInsertValuesDetailsApiModel request);

    /**
     * Insert historic values.
     * Insert historic values using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history insert request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<HistoryUpdateResponseApiModel> historyInsertValuesAsync(String endpointId, HistoryUpdateRequestApiModelInsertValuesDetailsApiModel request, final ServiceCallback<HistoryUpdateResponseApiModel> serviceCallback);

    /**
     * Insert historic values.
     * Insert historic values using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history insert request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryUpdateResponseApiModel object
     */
    Observable<HistoryUpdateResponseApiModel> historyInsertValuesAsync(String endpointId, HistoryUpdateRequestApiModelInsertValuesDetailsApiModel request);

    /**
     * Insert historic values.
     * Insert historic values using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history insert request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryUpdateResponseApiModel object
     */
    Observable<ServiceResponse<HistoryUpdateResponseApiModel>> historyInsertValuesWithServiceResponseAsync(String endpointId, HistoryUpdateRequestApiModelInsertValuesDetailsApiModel request);

    /**
     * Insert historic events.
     * Insert historic events using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history insert request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HistoryUpdateResponseApiModel object if successful.
     */
    HistoryUpdateResponseApiModel historyInsertEvents(String endpointId, HistoryUpdateRequestApiModelInsertEventsDetailsApiModel request);

    /**
     * Insert historic events.
     * Insert historic events using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history insert request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<HistoryUpdateResponseApiModel> historyInsertEventsAsync(String endpointId, HistoryUpdateRequestApiModelInsertEventsDetailsApiModel request, final ServiceCallback<HistoryUpdateResponseApiModel> serviceCallback);

    /**
     * Insert historic events.
     * Insert historic events using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history insert request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryUpdateResponseApiModel object
     */
    Observable<HistoryUpdateResponseApiModel> historyInsertEventsAsync(String endpointId, HistoryUpdateRequestApiModelInsertEventsDetailsApiModel request);

    /**
     * Insert historic events.
     * Insert historic events using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history insert request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryUpdateResponseApiModel object
     */
    Observable<ServiceResponse<HistoryUpdateResponseApiModel>> historyInsertEventsWithServiceResponseAsync(String endpointId, HistoryUpdateRequestApiModelInsertEventsDetailsApiModel request);

    /**
     * Read historic events.
     * Read historic events of a node if available using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history read request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HistoryReadResponseApiModelHistoricEventApiModel object if successful.
     */
    HistoryReadResponseApiModelHistoricEventApiModel historyReadEvents(String endpointId, HistoryReadRequestApiModelReadEventsDetailsApiModel request);

    /**
     * Read historic events.
     * Read historic events of a node if available using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history read request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<HistoryReadResponseApiModelHistoricEventApiModel> historyReadEventsAsync(String endpointId, HistoryReadRequestApiModelReadEventsDetailsApiModel request, final ServiceCallback<HistoryReadResponseApiModelHistoricEventApiModel> serviceCallback);

    /**
     * Read historic events.
     * Read historic events of a node if available using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history read request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryReadResponseApiModelHistoricEventApiModel object
     */
    Observable<HistoryReadResponseApiModelHistoricEventApiModel> historyReadEventsAsync(String endpointId, HistoryReadRequestApiModelReadEventsDetailsApiModel request);

    /**
     * Read historic events.
     * Read historic events of a node if available using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history read request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryReadResponseApiModelHistoricEventApiModel object
     */
    Observable<ServiceResponse<HistoryReadResponseApiModelHistoricEventApiModel>> historyReadEventsWithServiceResponseAsync(String endpointId, HistoryReadRequestApiModelReadEventsDetailsApiModel request);

    /**
     * Read next batch of historic events.
     * Read next batch of historic events of a node using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history read next request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HistoryReadNextResponseApiModelHistoricEventApiModel object if successful.
     */
    HistoryReadNextResponseApiModelHistoricEventApiModel historyReadEventsNext(String endpointId, HistoryReadNextRequestApiModel request);

    /**
     * Read next batch of historic events.
     * Read next batch of historic events of a node using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history read next request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<HistoryReadNextResponseApiModelHistoricEventApiModel> historyReadEventsNextAsync(String endpointId, HistoryReadNextRequestApiModel request, final ServiceCallback<HistoryReadNextResponseApiModelHistoricEventApiModel> serviceCallback);

    /**
     * Read next batch of historic events.
     * Read next batch of historic events of a node using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history read next request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryReadNextResponseApiModelHistoricEventApiModel object
     */
    Observable<HistoryReadNextResponseApiModelHistoricEventApiModel> historyReadEventsNextAsync(String endpointId, HistoryReadNextRequestApiModel request);

    /**
     * Read next batch of historic events.
     * Read next batch of historic events of a node using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history read next request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryReadNextResponseApiModelHistoricEventApiModel object
     */
    Observable<ServiceResponse<HistoryReadNextResponseApiModelHistoricEventApiModel>> historyReadEventsNextWithServiceResponseAsync(String endpointId, HistoryReadNextRequestApiModel request);

    /**
     * Read historic processed values at specified times.
     * Read processed history values of a node if available using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history read request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HistoryReadResponseApiModelHistoricValueApiModel object if successful.
     */
    HistoryReadResponseApiModelHistoricValueApiModel historyReadValues(String endpointId, HistoryReadRequestApiModelReadValuesDetailsApiModel request);

    /**
     * Read historic processed values at specified times.
     * Read processed history values of a node if available using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history read request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<HistoryReadResponseApiModelHistoricValueApiModel> historyReadValuesAsync(String endpointId, HistoryReadRequestApiModelReadValuesDetailsApiModel request, final ServiceCallback<HistoryReadResponseApiModelHistoricValueApiModel> serviceCallback);

    /**
     * Read historic processed values at specified times.
     * Read processed history values of a node if available using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history read request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryReadResponseApiModelHistoricValueApiModel object
     */
    Observable<HistoryReadResponseApiModelHistoricValueApiModel> historyReadValuesAsync(String endpointId, HistoryReadRequestApiModelReadValuesDetailsApiModel request);

    /**
     * Read historic processed values at specified times.
     * Read processed history values of a node if available using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history read request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryReadResponseApiModelHistoricValueApiModel object
     */
    Observable<ServiceResponse<HistoryReadResponseApiModelHistoricValueApiModel>> historyReadValuesWithServiceResponseAsync(String endpointId, HistoryReadRequestApiModelReadValuesDetailsApiModel request);

    /**
     * Read historic values at specified times.
     * Read historic values of a node if available using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history read request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HistoryReadResponseApiModelHistoricValueApiModel object if successful.
     */
    HistoryReadResponseApiModelHistoricValueApiModel historyReadValuesAtTimes(String endpointId, HistoryReadRequestApiModelReadValuesAtTimesDetailsApiModel request);

    /**
     * Read historic values at specified times.
     * Read historic values of a node if available using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history read request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<HistoryReadResponseApiModelHistoricValueApiModel> historyReadValuesAtTimesAsync(String endpointId, HistoryReadRequestApiModelReadValuesAtTimesDetailsApiModel request, final ServiceCallback<HistoryReadResponseApiModelHistoricValueApiModel> serviceCallback);

    /**
     * Read historic values at specified times.
     * Read historic values of a node if available using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history read request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryReadResponseApiModelHistoricValueApiModel object
     */
    Observable<HistoryReadResponseApiModelHistoricValueApiModel> historyReadValuesAtTimesAsync(String endpointId, HistoryReadRequestApiModelReadValuesAtTimesDetailsApiModel request);

    /**
     * Read historic values at specified times.
     * Read historic values of a node if available using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history read request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryReadResponseApiModelHistoricValueApiModel object
     */
    Observable<ServiceResponse<HistoryReadResponseApiModelHistoricValueApiModel>> historyReadValuesAtTimesWithServiceResponseAsync(String endpointId, HistoryReadRequestApiModelReadValuesAtTimesDetailsApiModel request);

    /**
     * Read historic processed values at specified times.
     * Read processed history values of a node if available using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history read request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HistoryReadResponseApiModelHistoricValueApiModel object if successful.
     */
    HistoryReadResponseApiModelHistoricValueApiModel historyReadProcessedValues(String endpointId, HistoryReadRequestApiModelReadProcessedValuesDetailsApiModel request);

    /**
     * Read historic processed values at specified times.
     * Read processed history values of a node if available using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history read request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<HistoryReadResponseApiModelHistoricValueApiModel> historyReadProcessedValuesAsync(String endpointId, HistoryReadRequestApiModelReadProcessedValuesDetailsApiModel request, final ServiceCallback<HistoryReadResponseApiModelHistoricValueApiModel> serviceCallback);

    /**
     * Read historic processed values at specified times.
     * Read processed history values of a node if available using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history read request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryReadResponseApiModelHistoricValueApiModel object
     */
    Observable<HistoryReadResponseApiModelHistoricValueApiModel> historyReadProcessedValuesAsync(String endpointId, HistoryReadRequestApiModelReadProcessedValuesDetailsApiModel request);

    /**
     * Read historic processed values at specified times.
     * Read processed history values of a node if available using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history read request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryReadResponseApiModelHistoricValueApiModel object
     */
    Observable<ServiceResponse<HistoryReadResponseApiModelHistoricValueApiModel>> historyReadProcessedValuesWithServiceResponseAsync(String endpointId, HistoryReadRequestApiModelReadProcessedValuesDetailsApiModel request);

    /**
     * Read historic modified values at specified times.
     * Read processed history values of a node if available using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history read request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HistoryReadResponseApiModelHistoricValueApiModel object if successful.
     */
    HistoryReadResponseApiModelHistoricValueApiModel historyReadModifiedValues(String endpointId, HistoryReadRequestApiModelReadModifiedValuesDetailsApiModel request);

    /**
     * Read historic modified values at specified times.
     * Read processed history values of a node if available using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history read request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<HistoryReadResponseApiModelHistoricValueApiModel> historyReadModifiedValuesAsync(String endpointId, HistoryReadRequestApiModelReadModifiedValuesDetailsApiModel request, final ServiceCallback<HistoryReadResponseApiModelHistoricValueApiModel> serviceCallback);

    /**
     * Read historic modified values at specified times.
     * Read processed history values of a node if available using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history read request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryReadResponseApiModelHistoricValueApiModel object
     */
    Observable<HistoryReadResponseApiModelHistoricValueApiModel> historyReadModifiedValuesAsync(String endpointId, HistoryReadRequestApiModelReadModifiedValuesDetailsApiModel request);

    /**
     * Read historic modified values at specified times.
     * Read processed history values of a node if available using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history read request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryReadResponseApiModelHistoricValueApiModel object
     */
    Observable<ServiceResponse<HistoryReadResponseApiModelHistoricValueApiModel>> historyReadModifiedValuesWithServiceResponseAsync(String endpointId, HistoryReadRequestApiModelReadModifiedValuesDetailsApiModel request);

    /**
     * Read next batch of historic values.
     * Read next batch of historic values of a node using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history read next request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HistoryReadNextResponseApiModelHistoricValueApiModel object if successful.
     */
    HistoryReadNextResponseApiModelHistoricValueApiModel historyReadValueNext(String endpointId, HistoryReadNextRequestApiModel request);

    /**
     * Read next batch of historic values.
     * Read next batch of historic values of a node using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history read next request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<HistoryReadNextResponseApiModelHistoricValueApiModel> historyReadValueNextAsync(String endpointId, HistoryReadNextRequestApiModel request, final ServiceCallback<HistoryReadNextResponseApiModelHistoricValueApiModel> serviceCallback);

    /**
     * Read next batch of historic values.
     * Read next batch of historic values of a node using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history read next request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryReadNextResponseApiModelHistoricValueApiModel object
     */
    Observable<HistoryReadNextResponseApiModelHistoricValueApiModel> historyReadValueNextAsync(String endpointId, HistoryReadNextRequestApiModel request);

    /**
     * Read next batch of historic values.
     * Read next batch of historic values of a node using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history read next request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryReadNextResponseApiModelHistoricValueApiModel object
     */
    Observable<ServiceResponse<HistoryReadNextResponseApiModelHistoricValueApiModel>> historyReadValueNextWithServiceResponseAsync(String endpointId, HistoryReadNextRequestApiModel request);

    /**
     * Replace historic values.
     * Replace historic values using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history replace request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HistoryUpdateResponseApiModel object if successful.
     */
    HistoryUpdateResponseApiModel historyReplaceValues(String endpointId, HistoryUpdateRequestApiModelReplaceValuesDetailsApiModel request);

    /**
     * Replace historic values.
     * Replace historic values using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history replace request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<HistoryUpdateResponseApiModel> historyReplaceValuesAsync(String endpointId, HistoryUpdateRequestApiModelReplaceValuesDetailsApiModel request, final ServiceCallback<HistoryUpdateResponseApiModel> serviceCallback);

    /**
     * Replace historic values.
     * Replace historic values using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history replace request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryUpdateResponseApiModel object
     */
    Observable<HistoryUpdateResponseApiModel> historyReplaceValuesAsync(String endpointId, HistoryUpdateRequestApiModelReplaceValuesDetailsApiModel request);

    /**
     * Replace historic values.
     * Replace historic values using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history replace request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryUpdateResponseApiModel object
     */
    Observable<ServiceResponse<HistoryUpdateResponseApiModel>> historyReplaceValuesWithServiceResponseAsync(String endpointId, HistoryUpdateRequestApiModelReplaceValuesDetailsApiModel request);

    /**
     * Replace historic events.
     * Replace historic events using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history replace request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HistoryUpdateResponseApiModel object if successful.
     */
    HistoryUpdateResponseApiModel historyReplaceEvents(String endpointId, HistoryUpdateRequestApiModelReplaceEventsDetailsApiModel request);

    /**
     * Replace historic events.
     * Replace historic events using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history replace request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<HistoryUpdateResponseApiModel> historyReplaceEventsAsync(String endpointId, HistoryUpdateRequestApiModelReplaceEventsDetailsApiModel request, final ServiceCallback<HistoryUpdateResponseApiModel> serviceCallback);

    /**
     * Replace historic events.
     * Replace historic events using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history replace request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryUpdateResponseApiModel object
     */
    Observable<HistoryUpdateResponseApiModel> historyReplaceEventsAsync(String endpointId, HistoryUpdateRequestApiModelReplaceEventsDetailsApiModel request);

    /**
     * Replace historic events.
     * Replace historic events using historic access.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The history replace request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryUpdateResponseApiModel object
     */
    Observable<ServiceResponse<HistoryUpdateResponseApiModel>> historyReplaceEventsWithServiceResponseAsync(String endpointId, HistoryUpdateRequestApiModelReplaceEventsDetailsApiModel request);

    /**
     * Return the service status in the form of the service status
     api model.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the StatusResponseApiModel object if successful.
     */
    StatusResponseApiModel getStatus();

    /**
     * Return the service status in the form of the service status
     api model.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<StatusResponseApiModel> getStatusAsync(final ServiceCallback<StatusResponseApiModel> serviceCallback);

    /**
     * Return the service status in the form of the service status
     api model.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StatusResponseApiModel object
     */
    Observable<StatusResponseApiModel> getStatusAsync();

    /**
     * Return the service status in the form of the service status
     api model.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StatusResponseApiModel object
     */
    Observable<ServiceResponse<StatusResponseApiModel>> getStatusWithServiceResponseAsync();

}
