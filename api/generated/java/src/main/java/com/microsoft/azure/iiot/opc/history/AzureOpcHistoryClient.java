/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.microsoft.azure.iiot.opc.history;

import com.microsoft.azure.iiot.opc.history.models.DeleteEventsDetailsApiModelHistoryUpdateRequestApiModel;
import com.microsoft.azure.iiot.opc.history.models.DeleteModifiedValuesDetailsApiModelHistoryUpdateRequestApiModel;
import com.microsoft.azure.iiot.opc.history.models.DeleteValuesAtTimesDetailsApiModelHistoryUpdateRequestApiModel;
import com.microsoft.azure.iiot.opc.history.models.DeleteValuesDetailsApiModelHistoryUpdateRequestApiModel;
import com.microsoft.azure.iiot.opc.history.models.HistoricEventApiModelHistoryReadNextResponseApiModel;
import com.microsoft.azure.iiot.opc.history.models.HistoricEventApiModelHistoryReadResponseApiModel;
import com.microsoft.azure.iiot.opc.history.models.HistoricValueApiModelHistoryReadNextResponseApiModel;
import com.microsoft.azure.iiot.opc.history.models.HistoricValueApiModelHistoryReadResponseApiModel;
import com.microsoft.azure.iiot.opc.history.models.HistoryReadNextRequestApiModel;
import com.microsoft.azure.iiot.opc.history.models.HistoryUpdateResponseApiModel;
import com.microsoft.azure.iiot.opc.history.models.InsertEventsDetailsApiModelHistoryUpdateRequestApiModel;
import com.microsoft.azure.iiot.opc.history.models.InsertValuesDetailsApiModelHistoryUpdateRequestApiModel;
import com.microsoft.azure.iiot.opc.history.models.JTokenHistoryReadNextResponseApiModel;
import com.microsoft.azure.iiot.opc.history.models.JTokenHistoryReadRequestApiModel;
import com.microsoft.azure.iiot.opc.history.models.JTokenHistoryReadResponseApiModel;
import com.microsoft.azure.iiot.opc.history.models.JTokenHistoryUpdateRequestApiModel;
import com.microsoft.azure.iiot.opc.history.models.ReadEventsDetailsApiModelHistoryReadRequestApiModel;
import com.microsoft.azure.iiot.opc.history.models.ReadModifiedValuesDetailsApiModelHistoryReadRequestApiModel;
import com.microsoft.azure.iiot.opc.history.models.ReadProcessedValuesDetailsApiModelHistoryReadRequestApiModel;
import com.microsoft.azure.iiot.opc.history.models.ReadValuesAtTimesDetailsApiModelHistoryReadRequestApiModel;
import com.microsoft.azure.iiot.opc.history.models.ReadValuesDetailsApiModelHistoryReadRequestApiModel;
import com.microsoft.azure.iiot.opc.history.models.ReplaceEventsDetailsApiModelHistoryUpdateRequestApiModel;
import com.microsoft.azure.iiot.opc.history.models.ReplaceValuesDetailsApiModelHistoryUpdateRequestApiModel;
import com.microsoft.azure.iiot.opc.history.models.StatusResponseApiModel;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import rx.Observable;
import com.microsoft.rest.RestClient;

/**
 * The interface for AzureOpcHistoryClient class.
 */
public interface AzureOpcHistoryClient {
    /**
     * Gets the REST client.
     *
     * @return the {@link RestClient} object.
    */
    RestClient restClient();

    /**
     * The default base URL.
     */
    String DEFAULT_BASE_URL = "http://localhost:9080";

    /**
     * Delete value history at specified times.
     * Delete value history using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history update request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HistoryUpdateResponseApiModel object if successful.
     */
    HistoryUpdateResponseApiModel historyDeleteValuesAtTimes(String endpointId, DeleteValuesAtTimesDetailsApiModelHistoryUpdateRequestApiModel body);

    /**
     * Delete value history at specified times.
     * Delete value history using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history update request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<HistoryUpdateResponseApiModel> historyDeleteValuesAtTimesAsync(String endpointId, DeleteValuesAtTimesDetailsApiModelHistoryUpdateRequestApiModel body, final ServiceCallback<HistoryUpdateResponseApiModel> serviceCallback);

    /**
     * Delete value history at specified times.
     * Delete value history using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history update request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryUpdateResponseApiModel object
     */
    Observable<HistoryUpdateResponseApiModel> historyDeleteValuesAtTimesAsync(String endpointId, DeleteValuesAtTimesDetailsApiModelHistoryUpdateRequestApiModel body);

    /**
     * Delete value history at specified times.
     * Delete value history using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history update request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryUpdateResponseApiModel object
     */
    Observable<ServiceResponse<HistoryUpdateResponseApiModel>> historyDeleteValuesAtTimesWithServiceResponseAsync(String endpointId, DeleteValuesAtTimesDetailsApiModelHistoryUpdateRequestApiModel body);

    /**
     * Delete historic values.
     * Delete historic values using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history update request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HistoryUpdateResponseApiModel object if successful.
     */
    HistoryUpdateResponseApiModel historyDeleteValues(String endpointId, DeleteValuesDetailsApiModelHistoryUpdateRequestApiModel body);

    /**
     * Delete historic values.
     * Delete historic values using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history update request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<HistoryUpdateResponseApiModel> historyDeleteValuesAsync(String endpointId, DeleteValuesDetailsApiModelHistoryUpdateRequestApiModel body, final ServiceCallback<HistoryUpdateResponseApiModel> serviceCallback);

    /**
     * Delete historic values.
     * Delete historic values using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history update request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryUpdateResponseApiModel object
     */
    Observable<HistoryUpdateResponseApiModel> historyDeleteValuesAsync(String endpointId, DeleteValuesDetailsApiModelHistoryUpdateRequestApiModel body);

    /**
     * Delete historic values.
     * Delete historic values using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history update request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryUpdateResponseApiModel object
     */
    Observable<ServiceResponse<HistoryUpdateResponseApiModel>> historyDeleteValuesWithServiceResponseAsync(String endpointId, DeleteValuesDetailsApiModelHistoryUpdateRequestApiModel body);

    /**
     * Delete historic values.
     * Delete historic values using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history update request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HistoryUpdateResponseApiModel object if successful.
     */
    HistoryUpdateResponseApiModel historyDeleteModifiedValues(String endpointId, DeleteModifiedValuesDetailsApiModelHistoryUpdateRequestApiModel body);

    /**
     * Delete historic values.
     * Delete historic values using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history update request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<HistoryUpdateResponseApiModel> historyDeleteModifiedValuesAsync(String endpointId, DeleteModifiedValuesDetailsApiModelHistoryUpdateRequestApiModel body, final ServiceCallback<HistoryUpdateResponseApiModel> serviceCallback);

    /**
     * Delete historic values.
     * Delete historic values using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history update request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryUpdateResponseApiModel object
     */
    Observable<HistoryUpdateResponseApiModel> historyDeleteModifiedValuesAsync(String endpointId, DeleteModifiedValuesDetailsApiModelHistoryUpdateRequestApiModel body);

    /**
     * Delete historic values.
     * Delete historic values using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history update request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryUpdateResponseApiModel object
     */
    Observable<ServiceResponse<HistoryUpdateResponseApiModel>> historyDeleteModifiedValuesWithServiceResponseAsync(String endpointId, DeleteModifiedValuesDetailsApiModelHistoryUpdateRequestApiModel body);

    /**
     * Delete historic events.
     * Delete historic events using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history update request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HistoryUpdateResponseApiModel object if successful.
     */
    HistoryUpdateResponseApiModel historyDeleteEvents(String endpointId, DeleteEventsDetailsApiModelHistoryUpdateRequestApiModel body);

    /**
     * Delete historic events.
     * Delete historic events using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history update request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<HistoryUpdateResponseApiModel> historyDeleteEventsAsync(String endpointId, DeleteEventsDetailsApiModelHistoryUpdateRequestApiModel body, final ServiceCallback<HistoryUpdateResponseApiModel> serviceCallback);

    /**
     * Delete historic events.
     * Delete historic events using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history update request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryUpdateResponseApiModel object
     */
    Observable<HistoryUpdateResponseApiModel> historyDeleteEventsAsync(String endpointId, DeleteEventsDetailsApiModelHistoryUpdateRequestApiModel body);

    /**
     * Delete historic events.
     * Delete historic events using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history update request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryUpdateResponseApiModel object
     */
    Observable<ServiceResponse<HistoryUpdateResponseApiModel>> historyDeleteEventsWithServiceResponseAsync(String endpointId, DeleteEventsDetailsApiModelHistoryUpdateRequestApiModel body);

    /**
     * Read history using json details.
     * Read node history if available using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history read request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JTokenHistoryReadResponseApiModel object if successful.
     */
    JTokenHistoryReadResponseApiModel historyReadRaw(String endpointId, JTokenHistoryReadRequestApiModel body);

    /**
     * Read history using json details.
     * Read node history if available using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history read request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<JTokenHistoryReadResponseApiModel> historyReadRawAsync(String endpointId, JTokenHistoryReadRequestApiModel body, final ServiceCallback<JTokenHistoryReadResponseApiModel> serviceCallback);

    /**
     * Read history using json details.
     * Read node history if available using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history read request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JTokenHistoryReadResponseApiModel object
     */
    Observable<JTokenHistoryReadResponseApiModel> historyReadRawAsync(String endpointId, JTokenHistoryReadRequestApiModel body);

    /**
     * Read history using json details.
     * Read node history if available using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history read request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JTokenHistoryReadResponseApiModel object
     */
    Observable<ServiceResponse<JTokenHistoryReadResponseApiModel>> historyReadRawWithServiceResponseAsync(String endpointId, JTokenHistoryReadRequestApiModel body);

    /**
     * Read next batch of history as json.
     * Read next batch of node history values using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history read next request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the JTokenHistoryReadNextResponseApiModel object if successful.
     */
    JTokenHistoryReadNextResponseApiModel historyReadRawNext(String endpointId, HistoryReadNextRequestApiModel body);

    /**
     * Read next batch of history as json.
     * Read next batch of node history values using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history read next request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<JTokenHistoryReadNextResponseApiModel> historyReadRawNextAsync(String endpointId, HistoryReadNextRequestApiModel body, final ServiceCallback<JTokenHistoryReadNextResponseApiModel> serviceCallback);

    /**
     * Read next batch of history as json.
     * Read next batch of node history values using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history read next request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JTokenHistoryReadNextResponseApiModel object
     */
    Observable<JTokenHistoryReadNextResponseApiModel> historyReadRawNextAsync(String endpointId, HistoryReadNextRequestApiModel body);

    /**
     * Read next batch of history as json.
     * Read next batch of node history values using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history read next request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the JTokenHistoryReadNextResponseApiModel object
     */
    Observable<ServiceResponse<JTokenHistoryReadNextResponseApiModel>> historyReadRawNextWithServiceResponseAsync(String endpointId, HistoryReadNextRequestApiModel body);

    /**
     * Update node history using raw json.
     * Update node history using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history update request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HistoryUpdateResponseApiModel object if successful.
     */
    HistoryUpdateResponseApiModel historyUpdateRaw(String endpointId, JTokenHistoryUpdateRequestApiModel body);

    /**
     * Update node history using raw json.
     * Update node history using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history update request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<HistoryUpdateResponseApiModel> historyUpdateRawAsync(String endpointId, JTokenHistoryUpdateRequestApiModel body, final ServiceCallback<HistoryUpdateResponseApiModel> serviceCallback);

    /**
     * Update node history using raw json.
     * Update node history using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history update request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryUpdateResponseApiModel object
     */
    Observable<HistoryUpdateResponseApiModel> historyUpdateRawAsync(String endpointId, JTokenHistoryUpdateRequestApiModel body);

    /**
     * Update node history using raw json.
     * Update node history using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history update request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryUpdateResponseApiModel object
     */
    Observable<ServiceResponse<HistoryUpdateResponseApiModel>> historyUpdateRawWithServiceResponseAsync(String endpointId, JTokenHistoryUpdateRequestApiModel body);

    /**
     * Insert historic values.
     * Insert historic values using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history insert request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HistoryUpdateResponseApiModel object if successful.
     */
    HistoryUpdateResponseApiModel historyInsertValues(String endpointId, InsertValuesDetailsApiModelHistoryUpdateRequestApiModel body);

    /**
     * Insert historic values.
     * Insert historic values using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history insert request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<HistoryUpdateResponseApiModel> historyInsertValuesAsync(String endpointId, InsertValuesDetailsApiModelHistoryUpdateRequestApiModel body, final ServiceCallback<HistoryUpdateResponseApiModel> serviceCallback);

    /**
     * Insert historic values.
     * Insert historic values using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history insert request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryUpdateResponseApiModel object
     */
    Observable<HistoryUpdateResponseApiModel> historyInsertValuesAsync(String endpointId, InsertValuesDetailsApiModelHistoryUpdateRequestApiModel body);

    /**
     * Insert historic values.
     * Insert historic values using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history insert request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryUpdateResponseApiModel object
     */
    Observable<ServiceResponse<HistoryUpdateResponseApiModel>> historyInsertValuesWithServiceResponseAsync(String endpointId, InsertValuesDetailsApiModelHistoryUpdateRequestApiModel body);

    /**
     * Insert historic events.
     * Insert historic events using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history insert request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HistoryUpdateResponseApiModel object if successful.
     */
    HistoryUpdateResponseApiModel historyInsertEvents(String endpointId, InsertEventsDetailsApiModelHistoryUpdateRequestApiModel body);

    /**
     * Insert historic events.
     * Insert historic events using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history insert request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<HistoryUpdateResponseApiModel> historyInsertEventsAsync(String endpointId, InsertEventsDetailsApiModelHistoryUpdateRequestApiModel body, final ServiceCallback<HistoryUpdateResponseApiModel> serviceCallback);

    /**
     * Insert historic events.
     * Insert historic events using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history insert request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryUpdateResponseApiModel object
     */
    Observable<HistoryUpdateResponseApiModel> historyInsertEventsAsync(String endpointId, InsertEventsDetailsApiModelHistoryUpdateRequestApiModel body);

    /**
     * Insert historic events.
     * Insert historic events using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history insert request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryUpdateResponseApiModel object
     */
    Observable<ServiceResponse<HistoryUpdateResponseApiModel>> historyInsertEventsWithServiceResponseAsync(String endpointId, InsertEventsDetailsApiModelHistoryUpdateRequestApiModel body);

    /**
     * Read historic events.
     * Read historic events of a node if available using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history read request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HistoricEventApiModelHistoryReadResponseApiModel object if successful.
     */
    HistoricEventApiModelHistoryReadResponseApiModel historyReadEvents(String endpointId, ReadEventsDetailsApiModelHistoryReadRequestApiModel body);

    /**
     * Read historic events.
     * Read historic events of a node if available using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history read request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<HistoricEventApiModelHistoryReadResponseApiModel> historyReadEventsAsync(String endpointId, ReadEventsDetailsApiModelHistoryReadRequestApiModel body, final ServiceCallback<HistoricEventApiModelHistoryReadResponseApiModel> serviceCallback);

    /**
     * Read historic events.
     * Read historic events of a node if available using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history read request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoricEventApiModelHistoryReadResponseApiModel object
     */
    Observable<HistoricEventApiModelHistoryReadResponseApiModel> historyReadEventsAsync(String endpointId, ReadEventsDetailsApiModelHistoryReadRequestApiModel body);

    /**
     * Read historic events.
     * Read historic events of a node if available using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history read request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoricEventApiModelHistoryReadResponseApiModel object
     */
    Observable<ServiceResponse<HistoricEventApiModelHistoryReadResponseApiModel>> historyReadEventsWithServiceResponseAsync(String endpointId, ReadEventsDetailsApiModelHistoryReadRequestApiModel body);

    /**
     * Read next batch of historic events.
     * Read next batch of historic events of a node using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history read next request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HistoricEventApiModelHistoryReadNextResponseApiModel object if successful.
     */
    HistoricEventApiModelHistoryReadNextResponseApiModel historyReadEventsNext(String endpointId, HistoryReadNextRequestApiModel body);

    /**
     * Read next batch of historic events.
     * Read next batch of historic events of a node using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history read next request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<HistoricEventApiModelHistoryReadNextResponseApiModel> historyReadEventsNextAsync(String endpointId, HistoryReadNextRequestApiModel body, final ServiceCallback<HistoricEventApiModelHistoryReadNextResponseApiModel> serviceCallback);

    /**
     * Read next batch of historic events.
     * Read next batch of historic events of a node using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history read next request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoricEventApiModelHistoryReadNextResponseApiModel object
     */
    Observable<HistoricEventApiModelHistoryReadNextResponseApiModel> historyReadEventsNextAsync(String endpointId, HistoryReadNextRequestApiModel body);

    /**
     * Read next batch of historic events.
     * Read next batch of historic events of a node using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history read next request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoricEventApiModelHistoryReadNextResponseApiModel object
     */
    Observable<ServiceResponse<HistoricEventApiModelHistoryReadNextResponseApiModel>> historyReadEventsNextWithServiceResponseAsync(String endpointId, HistoryReadNextRequestApiModel body);

    /**
     * Read historic processed values at specified times.
     * Read processed history values of a node if available using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history read request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HistoricValueApiModelHistoryReadResponseApiModel object if successful.
     */
    HistoricValueApiModelHistoryReadResponseApiModel historyReadValues(String endpointId, ReadValuesDetailsApiModelHistoryReadRequestApiModel body);

    /**
     * Read historic processed values at specified times.
     * Read processed history values of a node if available using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history read request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<HistoricValueApiModelHistoryReadResponseApiModel> historyReadValuesAsync(String endpointId, ReadValuesDetailsApiModelHistoryReadRequestApiModel body, final ServiceCallback<HistoricValueApiModelHistoryReadResponseApiModel> serviceCallback);

    /**
     * Read historic processed values at specified times.
     * Read processed history values of a node if available using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history read request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoricValueApiModelHistoryReadResponseApiModel object
     */
    Observable<HistoricValueApiModelHistoryReadResponseApiModel> historyReadValuesAsync(String endpointId, ReadValuesDetailsApiModelHistoryReadRequestApiModel body);

    /**
     * Read historic processed values at specified times.
     * Read processed history values of a node if available using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history read request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoricValueApiModelHistoryReadResponseApiModel object
     */
    Observable<ServiceResponse<HistoricValueApiModelHistoryReadResponseApiModel>> historyReadValuesWithServiceResponseAsync(String endpointId, ReadValuesDetailsApiModelHistoryReadRequestApiModel body);

    /**
     * Read historic values at specified times.
     * Read historic values of a node if available using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history read request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HistoricValueApiModelHistoryReadResponseApiModel object if successful.
     */
    HistoricValueApiModelHistoryReadResponseApiModel historyReadValuesAtTimes(String endpointId, ReadValuesAtTimesDetailsApiModelHistoryReadRequestApiModel body);

    /**
     * Read historic values at specified times.
     * Read historic values of a node if available using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history read request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<HistoricValueApiModelHistoryReadResponseApiModel> historyReadValuesAtTimesAsync(String endpointId, ReadValuesAtTimesDetailsApiModelHistoryReadRequestApiModel body, final ServiceCallback<HistoricValueApiModelHistoryReadResponseApiModel> serviceCallback);

    /**
     * Read historic values at specified times.
     * Read historic values of a node if available using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history read request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoricValueApiModelHistoryReadResponseApiModel object
     */
    Observable<HistoricValueApiModelHistoryReadResponseApiModel> historyReadValuesAtTimesAsync(String endpointId, ReadValuesAtTimesDetailsApiModelHistoryReadRequestApiModel body);

    /**
     * Read historic values at specified times.
     * Read historic values of a node if available using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history read request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoricValueApiModelHistoryReadResponseApiModel object
     */
    Observable<ServiceResponse<HistoricValueApiModelHistoryReadResponseApiModel>> historyReadValuesAtTimesWithServiceResponseAsync(String endpointId, ReadValuesAtTimesDetailsApiModelHistoryReadRequestApiModel body);

    /**
     * Read historic processed values at specified times.
     * Read processed history values of a node if available using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history read request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HistoricValueApiModelHistoryReadResponseApiModel object if successful.
     */
    HistoricValueApiModelHistoryReadResponseApiModel historyReadProcessedValues(String endpointId, ReadProcessedValuesDetailsApiModelHistoryReadRequestApiModel body);

    /**
     * Read historic processed values at specified times.
     * Read processed history values of a node if available using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history read request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<HistoricValueApiModelHistoryReadResponseApiModel> historyReadProcessedValuesAsync(String endpointId, ReadProcessedValuesDetailsApiModelHistoryReadRequestApiModel body, final ServiceCallback<HistoricValueApiModelHistoryReadResponseApiModel> serviceCallback);

    /**
     * Read historic processed values at specified times.
     * Read processed history values of a node if available using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history read request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoricValueApiModelHistoryReadResponseApiModel object
     */
    Observable<HistoricValueApiModelHistoryReadResponseApiModel> historyReadProcessedValuesAsync(String endpointId, ReadProcessedValuesDetailsApiModelHistoryReadRequestApiModel body);

    /**
     * Read historic processed values at specified times.
     * Read processed history values of a node if available using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history read request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoricValueApiModelHistoryReadResponseApiModel object
     */
    Observable<ServiceResponse<HistoricValueApiModelHistoryReadResponseApiModel>> historyReadProcessedValuesWithServiceResponseAsync(String endpointId, ReadProcessedValuesDetailsApiModelHistoryReadRequestApiModel body);

    /**
     * Read historic modified values at specified times.
     * Read processed history values of a node if available using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history read request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HistoricValueApiModelHistoryReadResponseApiModel object if successful.
     */
    HistoricValueApiModelHistoryReadResponseApiModel historyReadModifiedValues(String endpointId, ReadModifiedValuesDetailsApiModelHistoryReadRequestApiModel body);

    /**
     * Read historic modified values at specified times.
     * Read processed history values of a node if available using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history read request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<HistoricValueApiModelHistoryReadResponseApiModel> historyReadModifiedValuesAsync(String endpointId, ReadModifiedValuesDetailsApiModelHistoryReadRequestApiModel body, final ServiceCallback<HistoricValueApiModelHistoryReadResponseApiModel> serviceCallback);

    /**
     * Read historic modified values at specified times.
     * Read processed history values of a node if available using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history read request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoricValueApiModelHistoryReadResponseApiModel object
     */
    Observable<HistoricValueApiModelHistoryReadResponseApiModel> historyReadModifiedValuesAsync(String endpointId, ReadModifiedValuesDetailsApiModelHistoryReadRequestApiModel body);

    /**
     * Read historic modified values at specified times.
     * Read processed history values of a node if available using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history read request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoricValueApiModelHistoryReadResponseApiModel object
     */
    Observable<ServiceResponse<HistoricValueApiModelHistoryReadResponseApiModel>> historyReadModifiedValuesWithServiceResponseAsync(String endpointId, ReadModifiedValuesDetailsApiModelHistoryReadRequestApiModel body);

    /**
     * Read next batch of historic values.
     * Read next batch of historic values of a node using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history read next request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HistoricValueApiModelHistoryReadNextResponseApiModel object if successful.
     */
    HistoricValueApiModelHistoryReadNextResponseApiModel historyReadValueNext(String endpointId, HistoryReadNextRequestApiModel body);

    /**
     * Read next batch of historic values.
     * Read next batch of historic values of a node using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history read next request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<HistoricValueApiModelHistoryReadNextResponseApiModel> historyReadValueNextAsync(String endpointId, HistoryReadNextRequestApiModel body, final ServiceCallback<HistoricValueApiModelHistoryReadNextResponseApiModel> serviceCallback);

    /**
     * Read next batch of historic values.
     * Read next batch of historic values of a node using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history read next request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoricValueApiModelHistoryReadNextResponseApiModel object
     */
    Observable<HistoricValueApiModelHistoryReadNextResponseApiModel> historyReadValueNextAsync(String endpointId, HistoryReadNextRequestApiModel body);

    /**
     * Read next batch of historic values.
     * Read next batch of historic values of a node using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history read next request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoricValueApiModelHistoryReadNextResponseApiModel object
     */
    Observable<ServiceResponse<HistoricValueApiModelHistoryReadNextResponseApiModel>> historyReadValueNextWithServiceResponseAsync(String endpointId, HistoryReadNextRequestApiModel body);

    /**
     * Replace historic values.
     * Replace historic values using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history replace request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HistoryUpdateResponseApiModel object if successful.
     */
    HistoryUpdateResponseApiModel historyReplaceValues(String endpointId, ReplaceValuesDetailsApiModelHistoryUpdateRequestApiModel body);

    /**
     * Replace historic values.
     * Replace historic values using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history replace request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<HistoryUpdateResponseApiModel> historyReplaceValuesAsync(String endpointId, ReplaceValuesDetailsApiModelHistoryUpdateRequestApiModel body, final ServiceCallback<HistoryUpdateResponseApiModel> serviceCallback);

    /**
     * Replace historic values.
     * Replace historic values using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history replace request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryUpdateResponseApiModel object
     */
    Observable<HistoryUpdateResponseApiModel> historyReplaceValuesAsync(String endpointId, ReplaceValuesDetailsApiModelHistoryUpdateRequestApiModel body);

    /**
     * Replace historic values.
     * Replace historic values using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history replace request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryUpdateResponseApiModel object
     */
    Observable<ServiceResponse<HistoryUpdateResponseApiModel>> historyReplaceValuesWithServiceResponseAsync(String endpointId, ReplaceValuesDetailsApiModelHistoryUpdateRequestApiModel body);

    /**
     * Replace historic events.
     * Replace historic events using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history replace request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HistoryUpdateResponseApiModel object if successful.
     */
    HistoryUpdateResponseApiModel historyReplaceEvents(String endpointId, ReplaceEventsDetailsApiModelHistoryUpdateRequestApiModel body);

    /**
     * Replace historic events.
     * Replace historic events using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history replace request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<HistoryUpdateResponseApiModel> historyReplaceEventsAsync(String endpointId, ReplaceEventsDetailsApiModelHistoryUpdateRequestApiModel body, final ServiceCallback<HistoryUpdateResponseApiModel> serviceCallback);

    /**
     * Replace historic events.
     * Replace historic events using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history replace request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryUpdateResponseApiModel object
     */
    Observable<HistoryUpdateResponseApiModel> historyReplaceEventsAsync(String endpointId, ReplaceEventsDetailsApiModelHistoryUpdateRequestApiModel body);

    /**
     * Replace historic events.
     * Replace historic events using historic access. The endpoint must be activated and connected and the module client and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param body The history replace request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HistoryUpdateResponseApiModel object
     */
    Observable<ServiceResponse<HistoryUpdateResponseApiModel>> historyReplaceEventsWithServiceResponseAsync(String endpointId, ReplaceEventsDetailsApiModelHistoryUpdateRequestApiModel body);

    /**
     * Return the service status in the form of the service status
     api model.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the StatusResponseApiModel object if successful.
     */
    StatusResponseApiModel getStatus();

    /**
     * Return the service status in the form of the service status
     api model.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<StatusResponseApiModel> getStatusAsync(final ServiceCallback<StatusResponseApiModel> serviceCallback);

    /**
     * Return the service status in the form of the service status
     api model.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StatusResponseApiModel object
     */
    Observable<StatusResponseApiModel> getStatusAsync();

    /**
     * Return the service status in the form of the service status
     api model.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StatusResponseApiModel object
     */
    Observable<ServiceResponse<StatusResponseApiModel>> getStatusWithServiceResponseAsync();

}
