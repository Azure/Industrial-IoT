/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.microsoft.azure.iiot.opc.history.models;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * Defines values for FilterOperatorType.
 */
public enum FilterOperatorType {
    /** Enum value Equals. */
    EQUALS("Equals"),

    /** Enum value IsNull. */
    IS_NULL("IsNull"),

    /** Enum value GreaterThan. */
    GREATER_THAN("GreaterThan"),

    /** Enum value LessThan. */
    LESS_THAN("LessThan"),

    /** Enum value GreaterThanOrEqual. */
    GREATER_THAN_OR_EQUAL("GreaterThanOrEqual"),

    /** Enum value LessThanOrEqual. */
    LESS_THAN_OR_EQUAL("LessThanOrEqual"),

    /** Enum value Like. */
    LIKE("Like"),

    /** Enum value Not. */
    NOT("Not"),

    /** Enum value Between. */
    BETWEEN("Between"),

    /** Enum value InList. */
    IN_LIST("InList"),

    /** Enum value And. */
    AND("And"),

    /** Enum value Or. */
    OR("Or"),

    /** Enum value Cast. */
    CAST("Cast"),

    /** Enum value InView. */
    IN_VIEW("InView"),

    /** Enum value OfType. */
    OF_TYPE("OfType"),

    /** Enum value RelatedTo. */
    RELATED_TO("RelatedTo"),

    /** Enum value BitwiseAnd. */
    BITWISE_AND("BitwiseAnd"),

    /** Enum value BitwiseOr. */
    BITWISE_OR("BitwiseOr");

    /** The actual serialized value for a FilterOperatorType instance. */
    private String value;

    FilterOperatorType(String value) {
        this.value = value;
    }

    /**
     * Parses a serialized value to a FilterOperatorType instance.
     *
     * @param value the serialized value to parse.
     * @return the parsed FilterOperatorType object, or null if unable to parse.
     */
    @JsonCreator
    public static FilterOperatorType fromString(String value) {
        FilterOperatorType[] items = FilterOperatorType.values();
        for (FilterOperatorType item : items) {
            if (item.toString().equalsIgnoreCase(value)) {
                return item;
            }
        }
        return null;
    }

    @JsonValue
    @Override
    public String toString() {
        return this.value;
    }
}
