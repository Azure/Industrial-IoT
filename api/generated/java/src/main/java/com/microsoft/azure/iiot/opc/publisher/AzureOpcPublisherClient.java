/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.microsoft.azure.iiot.opc.publisher;

import com.microsoft.azure.iiot.opc.publisher.models.PublishedItemListRequestApiModel;
import com.microsoft.azure.iiot.opc.publisher.models.PublishedItemListResponseApiModel;
import com.microsoft.azure.iiot.opc.publisher.models.PublishStartRequestApiModel;
import com.microsoft.azure.iiot.opc.publisher.models.PublishStartResponseApiModel;
import com.microsoft.azure.iiot.opc.publisher.models.PublishStopRequestApiModel;
import com.microsoft.azure.iiot.opc.publisher.models.PublishStopResponseApiModel;
import com.microsoft.azure.iiot.opc.publisher.models.StatusResponseApiModel;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import rx.Observable;
import com.microsoft.rest.RestClient;

/**
 * The interface for AzureOpcPublisherClient class.
 */
public interface AzureOpcPublisherClient {
    /**
     * Gets the REST client.
     *
     * @return the {@link RestClient} object.
    */
    RestClient restClient();

    /**
     * The default base URL.
     */
    String DEFAULT_BASE_URL = "https:///publisher";

    /**
     * Subscribe to receive samples.
     * Register a client to receive publisher samples through SignalR.
     *
     * @param endpointId The endpoint to subscribe to
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void subscribe(String endpointId);

    /**
     * Subscribe to receive samples.
     * Register a client to receive publisher samples through SignalR.
     *
     * @param endpointId The endpoint to subscribe to
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> subscribeAsync(String endpointId, final ServiceCallback<Void> serviceCallback);

    /**
     * Subscribe to receive samples.
     * Register a client to receive publisher samples through SignalR.
     *
     * @param endpointId The endpoint to subscribe to
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> subscribeAsync(String endpointId);

    /**
     * Subscribe to receive samples.
     * Register a client to receive publisher samples through SignalR.
     *
     * @param endpointId The endpoint to subscribe to
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> subscribeWithServiceResponseAsync(String endpointId);
    /**
     * Subscribe to receive samples.
     * Register a client to receive publisher samples through SignalR.
     *
     * @param endpointId The endpoint to subscribe to
     * @param userId The user id that will receive publisher
                 samples.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void subscribe(String endpointId, String userId);

    /**
     * Subscribe to receive samples.
     * Register a client to receive publisher samples through SignalR.
     *
     * @param endpointId The endpoint to subscribe to
     * @param userId The user id that will receive publisher
                 samples.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> subscribeAsync(String endpointId, String userId, final ServiceCallback<Void> serviceCallback);

    /**
     * Subscribe to receive samples.
     * Register a client to receive publisher samples through SignalR.
     *
     * @param endpointId The endpoint to subscribe to
     * @param userId The user id that will receive publisher
                 samples.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> subscribeAsync(String endpointId, String userId);

    /**
     * Subscribe to receive samples.
     * Register a client to receive publisher samples through SignalR.
     *
     * @param endpointId The endpoint to subscribe to
     * @param userId The user id that will receive publisher
                 samples.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> subscribeWithServiceResponseAsync(String endpointId, String userId);

    /**
     * Unsubscribe from receiving samples.
     * Unregister a client and stop it from receiving samples.
     *
     * @param endpointId The endpoint to unsubscribe from
     * @param userId The user id that will not receive
                 any more published samples
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void unsubscribe(String endpointId, String userId);

    /**
     * Unsubscribe from receiving samples.
     * Unregister a client and stop it from receiving samples.
     *
     * @param endpointId The endpoint to unsubscribe from
     * @param userId The user id that will not receive
                 any more published samples
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> unsubscribeAsync(String endpointId, String userId, final ServiceCallback<Void> serviceCallback);

    /**
     * Unsubscribe from receiving samples.
     * Unregister a client and stop it from receiving samples.
     *
     * @param endpointId The endpoint to unsubscribe from
     * @param userId The user id that will not receive
                 any more published samples
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> unsubscribeAsync(String endpointId, String userId);

    /**
     * Unsubscribe from receiving samples.
     * Unregister a client and stop it from receiving samples.
     *
     * @param endpointId The endpoint to unsubscribe from
     * @param userId The user id that will not receive
                 any more published samples
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> unsubscribeWithServiceResponseAsync(String endpointId, String userId);

    /**
     * Start publishing node values.
     * Start publishing variable node values to IoT Hub.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The publish request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PublishStartResponseApiModel object if successful.
     */
    PublishStartResponseApiModel startPublishingValues(String endpointId, PublishStartRequestApiModel request);

    /**
     * Start publishing node values.
     * Start publishing variable node values to IoT Hub.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The publish request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PublishStartResponseApiModel> startPublishingValuesAsync(String endpointId, PublishStartRequestApiModel request, final ServiceCallback<PublishStartResponseApiModel> serviceCallback);

    /**
     * Start publishing node values.
     * Start publishing variable node values to IoT Hub.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The publish request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PublishStartResponseApiModel object
     */
    Observable<PublishStartResponseApiModel> startPublishingValuesAsync(String endpointId, PublishStartRequestApiModel request);

    /**
     * Start publishing node values.
     * Start publishing variable node values to IoT Hub.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The publish request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PublishStartResponseApiModel object
     */
    Observable<ServiceResponse<PublishStartResponseApiModel>> startPublishingValuesWithServiceResponseAsync(String endpointId, PublishStartRequestApiModel request);

    /**
     * Stop publishing node values.
     * Stop publishing variable node values to IoT Hub.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The unpublish request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PublishStopResponseApiModel object if successful.
     */
    PublishStopResponseApiModel stopPublishingValues(String endpointId, PublishStopRequestApiModel request);

    /**
     * Stop publishing node values.
     * Stop publishing variable node values to IoT Hub.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The unpublish request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PublishStopResponseApiModel> stopPublishingValuesAsync(String endpointId, PublishStopRequestApiModel request, final ServiceCallback<PublishStopResponseApiModel> serviceCallback);

    /**
     * Stop publishing node values.
     * Stop publishing variable node values to IoT Hub.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The unpublish request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PublishStopResponseApiModel object
     */
    Observable<PublishStopResponseApiModel> stopPublishingValuesAsync(String endpointId, PublishStopRequestApiModel request);

    /**
     * Stop publishing node values.
     * Stop publishing variable node values to IoT Hub.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The unpublish request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PublishStopResponseApiModel object
     */
    Observable<ServiceResponse<PublishStopResponseApiModel>> stopPublishingValuesWithServiceResponseAsync(String endpointId, PublishStopRequestApiModel request);

    /**
     * Get next set of published nodes.
     * Returns next set of currently published node ids for an endpoint.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param continuationToken The continuation token to continue with
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PublishedItemListResponseApiModel object if successful.
     */
    PublishedItemListResponseApiModel getNextListOfPublishedNodes(String endpointId, String continuationToken);

    /**
     * Get next set of published nodes.
     * Returns next set of currently published node ids for an endpoint.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param continuationToken The continuation token to continue with
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PublishedItemListResponseApiModel> getNextListOfPublishedNodesAsync(String endpointId, String continuationToken, final ServiceCallback<PublishedItemListResponseApiModel> serviceCallback);

    /**
     * Get next set of published nodes.
     * Returns next set of currently published node ids for an endpoint.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param continuationToken The continuation token to continue with
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PublishedItemListResponseApiModel object
     */
    Observable<PublishedItemListResponseApiModel> getNextListOfPublishedNodesAsync(String endpointId, String continuationToken);

    /**
     * Get next set of published nodes.
     * Returns next set of currently published node ids for an endpoint.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param continuationToken The continuation token to continue with
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PublishedItemListResponseApiModel object
     */
    Observable<ServiceResponse<PublishedItemListResponseApiModel>> getNextListOfPublishedNodesWithServiceResponseAsync(String endpointId, String continuationToken);

    /**
     * Get currently published nodes.
     * Returns currently published node ids for an endpoint.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The list request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PublishedItemListResponseApiModel object if successful.
     */
    PublishedItemListResponseApiModel getFirstListOfPublishedNodes(String endpointId, PublishedItemListRequestApiModel request);

    /**
     * Get currently published nodes.
     * Returns currently published node ids for an endpoint.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The list request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PublishedItemListResponseApiModel> getFirstListOfPublishedNodesAsync(String endpointId, PublishedItemListRequestApiModel request, final ServiceCallback<PublishedItemListResponseApiModel> serviceCallback);

    /**
     * Get currently published nodes.
     * Returns currently published node ids for an endpoint.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The list request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PublishedItemListResponseApiModel object
     */
    Observable<PublishedItemListResponseApiModel> getFirstListOfPublishedNodesAsync(String endpointId, PublishedItemListRequestApiModel request);

    /**
     * Get currently published nodes.
     * Returns currently published node ids for an endpoint.
     The endpoint must be activated and connected and the module client
     and server must trust each other.
     *
     * @param endpointId The identifier of the activated endpoint.
     * @param request The list request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PublishedItemListResponseApiModel object
     */
    Observable<ServiceResponse<PublishedItemListResponseApiModel>> getFirstListOfPublishedNodesWithServiceResponseAsync(String endpointId, PublishedItemListRequestApiModel request);

    /**
     * Return the service status in the form of the service status
     api model.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the StatusResponseApiModel object if successful.
     */
    StatusResponseApiModel getStatus();

    /**
     * Return the service status in the form of the service status
     api model.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<StatusResponseApiModel> getStatusAsync(final ServiceCallback<StatusResponseApiModel> serviceCallback);

    /**
     * Return the service status in the form of the service status
     api model.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StatusResponseApiModel object
     */
    Observable<StatusResponseApiModel> getStatusAsync();

    /**
     * Return the service status in the form of the service status
     api model.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StatusResponseApiModel object
     */
    Observable<ServiceResponse<StatusResponseApiModel>> getStatusWithServiceResponseAsync();

}
