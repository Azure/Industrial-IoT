/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * browse response model
 *
 */
class BrowseResponseApiModel {
  /**
   * Create a BrowseResponseApiModel.
   * @property {object} [node]
   * @property {string} [node.nodeClass] Possible values include: 'Object',
   * 'Variable', 'Method', 'ObjectType', 'VariableType', 'ReferenceType',
   * 'DataType', 'View'
   * @property {string} [node.displayName] Display name
   * @property {string} [node.nodeId] Id of node.
   * (Mandatory).
   * @property {string} [node.description] Description if any
   * @property {string} [node.browseName] Browse name
   * @property {string} [node.accessRestrictions] Possible values include:
   * 'SigningRequired', 'EncryptionRequired', 'SessionRequired'
   * @property {number} [node.writeMask] Default write mask for the node
   * (default: 0)
   * @property {number} [node.userWriteMask] User write mask for the node
   * (default: 0)
   * @property {boolean} [node.isAbstract] Whether type is abstract, if type
   * can
   * be abstract.  Null if not type node.
   * (default: false)
   * @property {boolean} [node.containsNoLoops] Whether a view contains loops.
   * Null if
   * not a view.
   * @property {string} [node.eventNotifier] Possible values include:
   * 'SubscribeToEvents', 'HistoryRead', 'HistoryWrite'
   * @property {boolean} [node.executable] If method node class, whether method
   * can
   * be called.
   * @property {boolean} [node.userExecutable] If method node class, whether
   * method can
   * be called by current user.
   * (default: false if not executable)
   * @property {object} [node.dataTypeDefinition] Data type definition in case
   * node is a
   * data type node and definition is available,
   * otherwise null.
   * @property {string} [node.accessLevel] Possible values include:
   * 'CurrentRead', 'CurrentWrite', 'HistoryRead', 'HistoryWrite',
   * 'SemanticChange', 'StatusWrite', 'TimestampWrite', 'NonatomicRead',
   * 'NonatomicWrite', 'WriteFullArrayOnly'
   * @property {string} [node.userAccessLevel] Possible values include:
   * 'CurrentRead', 'CurrentWrite', 'HistoryRead', 'HistoryWrite',
   * 'SemanticChange', 'StatusWrite', 'TimestampWrite', 'NonatomicRead',
   * 'NonatomicWrite', 'WriteFullArrayOnly'
   * @property {string} [node.dataType] If variable the datatype of the
   * variable.
   * (default: null)
   * @property {string} [node.valueRank] Possible values include:
   * 'OneOrMoreDimensions', 'OneDimension', 'TwoDimensions',
   * 'ScalarOrOneDimension', 'Any', 'Scalar'
   * @property {array} [node.arrayDimensions] Array dimensions of variable or
   * variable type.
   * (default: empty array)
   * @property {boolean} [node.historizing] Whether the value of a variable is
   * historizing.
   * (default: false)
   * @property {number} [node.minimumSamplingInterval] Minimum sampling
   * interval for the variable
   * value, otherwise null if not a variable node.
   * (default: null)
   * @property {object} [node.value] Value of variable or default value of the
   * subtyped variable in case node is a variable
   * type, otherwise null.
   * @property {string} [node.inverseName] Inverse name of the reference if the
   * node is
   * a reference type, otherwise null.
   * @property {boolean} [node.symmetric] Whether the reference is symmetric in
   * case
   * the node is a reference type, otherwise
   * null.
   * @property {array} [node.rolePermissions] Role permissions
   * @property {array} [node.userRolePermissions] User Role permissions
   * @property {string} [node.typeDefinitionId] Optional type definition of the
   * node
   * @property {boolean} [node.children] Whether node has children which are
   * defined as
   * any forward hierarchical references.
   * (default: unknown)
   * @property {array} [references] References, if included, otherwise null.
   * @property {string} [continuationToken] Continuation token if more results
   * pending.
   * @property {object} [errorInfo]
   * @property {number} [errorInfo.statusCode] Error code - if null operation
   * succeeded.
   * @property {string} [errorInfo.errorMessage] Error message in case of error
   * or null.
   * @property {object} [errorInfo.diagnostics] Additional diagnostics
   * information
   */
  constructor() {
  }

  /**
   * Defines the metadata of BrowseResponseApiModel
   *
   * @returns {object} metadata of BrowseResponseApiModel
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'BrowseResponseApiModel',
      type: {
        name: 'Composite',
        className: 'BrowseResponseApiModel',
        modelProperties: {
          node: {
            required: false,
            serializedName: 'node',
            type: {
              name: 'Composite',
              className: 'NodeApiModel'
            }
          },
          references: {
            required: false,
            serializedName: 'references',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'NodeReferenceApiModelElementType',
                  type: {
                    name: 'Composite',
                    className: 'NodeReferenceApiModel'
                  }
              }
            }
          },
          continuationToken: {
            required: false,
            serializedName: 'continuationToken',
            type: {
              name: 'String'
            }
          },
          errorInfo: {
            required: false,
            serializedName: 'errorInfo',
            type: {
              name: 'Composite',
              className: 'ServiceResultApiModel'
            }
          }
        }
      }
    };
  }
}

module.exports = BrowseResponseApiModel;
