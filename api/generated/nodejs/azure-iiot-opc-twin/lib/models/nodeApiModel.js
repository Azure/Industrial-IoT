/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Node model
 *
 */
class NodeApiModel {
  /**
   * Create a NodeApiModel.
   * @property {string} [nodeClass] Possible values include: 'Object',
   * 'Variable', 'Method', 'ObjectType', 'VariableType', 'ReferenceType',
   * 'DataType', 'View'
   * @property {string} [displayName] Display name
   * @property {string} nodeId Id of node.
   * (Mandatory).
   * @property {string} [description] Description if any
   * @property {string} [browseName] Browse name
   * @property {string} [accessRestrictions] Possible values include:
   * 'SigningRequired', 'EncryptionRequired', 'SessionRequired'
   * @property {number} [writeMask] Default write mask for the node
   * (default: 0)
   * @property {number} [userWriteMask] User write mask for the node
   * (default: 0)
   * @property {boolean} [isAbstract] Whether type is abstract, if type can
   * be abstract.  Null if not type node.
   * (default: false)
   * @property {boolean} [containsNoLoops] Whether a view contains loops. Null
   * if
   * not a view.
   * @property {string} [eventNotifier] Possible values include:
   * 'SubscribeToEvents', 'HistoryRead', 'HistoryWrite'
   * @property {boolean} [executable] If method node class, whether method can
   * be called.
   * @property {boolean} [userExecutable] If method node class, whether method
   * can
   * be called by current user.
   * (default: false if not executable)
   * @property {object} [dataTypeDefinition] Data type definition in case node
   * is a
   * data type node and definition is available,
   * otherwise null.
   * @property {string} [accessLevel] Possible values include: 'CurrentRead',
   * 'CurrentWrite', 'HistoryRead', 'HistoryWrite', 'SemanticChange',
   * 'StatusWrite', 'TimestampWrite', 'NonatomicRead', 'NonatomicWrite',
   * 'WriteFullArrayOnly'
   * @property {string} [userAccessLevel] Possible values include:
   * 'CurrentRead', 'CurrentWrite', 'HistoryRead', 'HistoryWrite',
   * 'SemanticChange', 'StatusWrite', 'TimestampWrite', 'NonatomicRead',
   * 'NonatomicWrite', 'WriteFullArrayOnly'
   * @property {string} [dataType] If variable the datatype of the variable.
   * (default: null)
   * @property {string} [valueRank] Possible values include:
   * 'OneOrMoreDimensions', 'OneDimension', 'TwoDimensions',
   * 'ScalarOrOneDimension', 'Any', 'Scalar'
   * @property {array} [arrayDimensions] Array dimensions of variable or
   * variable type.
   * (default: empty array)
   * @property {boolean} [historizing] Whether the value of a variable is
   * historizing.
   * (default: false)
   * @property {number} [minimumSamplingInterval] Minimum sampling interval for
   * the variable
   * value, otherwise null if not a variable node.
   * (default: null)
   * @property {object} [value] Value of variable or default value of the
   * subtyped variable in case node is a variable
   * type, otherwise null.
   * @property {string} [inverseName] Inverse name of the reference if the node
   * is
   * a reference type, otherwise null.
   * @property {boolean} [symmetric] Whether the reference is symmetric in case
   * the node is a reference type, otherwise
   * null.
   * @property {array} [rolePermissions] Role permissions
   * @property {array} [userRolePermissions] User Role permissions
   * @property {string} [typeDefinitionId] Optional type definition of the node
   * @property {boolean} [children] Whether node has children which are defined
   * as
   * any forward hierarchical references.
   * (default: unknown)
   */
  constructor() {
  }

  /**
   * Defines the metadata of NodeApiModel
   *
   * @returns {object} metadata of NodeApiModel
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'NodeApiModel',
      type: {
        name: 'Composite',
        className: 'NodeApiModel',
        modelProperties: {
          nodeClass: {
            required: false,
            serializedName: 'nodeClass',
            type: {
              name: 'Enum',
              allowedValues: [ 'Object', 'Variable', 'Method', 'ObjectType', 'VariableType', 'ReferenceType', 'DataType', 'View' ]
            }
          },
          displayName: {
            required: false,
            serializedName: 'displayName',
            type: {
              name: 'String'
            }
          },
          nodeId: {
            required: true,
            serializedName: 'nodeId',
            type: {
              name: 'String'
            }
          },
          description: {
            required: false,
            serializedName: 'description',
            type: {
              name: 'String'
            }
          },
          browseName: {
            required: false,
            serializedName: 'browseName',
            type: {
              name: 'String'
            }
          },
          accessRestrictions: {
            required: false,
            serializedName: 'accessRestrictions',
            type: {
              name: 'Enum',
              allowedValues: [ 'SigningRequired', 'EncryptionRequired', 'SessionRequired' ]
            }
          },
          writeMask: {
            required: false,
            serializedName: 'writeMask',
            type: {
              name: 'Number'
            }
          },
          userWriteMask: {
            required: false,
            serializedName: 'userWriteMask',
            type: {
              name: 'Number'
            }
          },
          isAbstract: {
            required: false,
            serializedName: 'isAbstract',
            type: {
              name: 'Boolean'
            }
          },
          containsNoLoops: {
            required: false,
            serializedName: 'containsNoLoops',
            type: {
              name: 'Boolean'
            }
          },
          eventNotifier: {
            required: false,
            serializedName: 'eventNotifier',
            type: {
              name: 'Enum',
              allowedValues: [ 'SubscribeToEvents', 'HistoryRead', 'HistoryWrite' ]
            }
          },
          executable: {
            required: false,
            serializedName: 'executable',
            type: {
              name: 'Boolean'
            }
          },
          userExecutable: {
            required: false,
            serializedName: 'userExecutable',
            type: {
              name: 'Boolean'
            }
          },
          dataTypeDefinition: {
            required: false,
            serializedName: 'dataTypeDefinition',
            type: {
              name: 'Object'
            }
          },
          accessLevel: {
            required: false,
            serializedName: 'accessLevel',
            type: {
              name: 'Enum',
              allowedValues: [ 'CurrentRead', 'CurrentWrite', 'HistoryRead', 'HistoryWrite', 'SemanticChange', 'StatusWrite', 'TimestampWrite', 'NonatomicRead', 'NonatomicWrite', 'WriteFullArrayOnly' ]
            }
          },
          userAccessLevel: {
            required: false,
            serializedName: 'userAccessLevel',
            type: {
              name: 'Enum',
              allowedValues: [ 'CurrentRead', 'CurrentWrite', 'HistoryRead', 'HistoryWrite', 'SemanticChange', 'StatusWrite', 'TimestampWrite', 'NonatomicRead', 'NonatomicWrite', 'WriteFullArrayOnly' ]
            }
          },
          dataType: {
            required: false,
            serializedName: 'dataType',
            type: {
              name: 'String'
            }
          },
          valueRank: {
            required: false,
            serializedName: 'valueRank',
            type: {
              name: 'Enum',
              allowedValues: [ 'OneOrMoreDimensions', 'OneDimension', 'TwoDimensions', 'ScalarOrOneDimension', 'Any', 'Scalar' ]
            }
          },
          arrayDimensions: {
            required: false,
            serializedName: 'arrayDimensions',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'NumberElementType',
                  type: {
                    name: 'Number'
                  }
              }
            }
          },
          historizing: {
            required: false,
            serializedName: 'historizing',
            type: {
              name: 'Boolean'
            }
          },
          minimumSamplingInterval: {
            required: false,
            serializedName: 'minimumSamplingInterval',
            type: {
              name: 'Number'
            }
          },
          value: {
            required: false,
            serializedName: 'value',
            type: {
              name: 'Object'
            }
          },
          inverseName: {
            required: false,
            serializedName: 'inverseName',
            type: {
              name: 'String'
            }
          },
          symmetric: {
            required: false,
            serializedName: 'symmetric',
            type: {
              name: 'Boolean'
            }
          },
          rolePermissions: {
            required: false,
            serializedName: 'rolePermissions',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'RolePermissionApiModelElementType',
                  type: {
                    name: 'Composite',
                    className: 'RolePermissionApiModel'
                  }
              }
            }
          },
          userRolePermissions: {
            required: false,
            serializedName: 'userRolePermissions',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'RolePermissionApiModelElementType',
                  type: {
                    name: 'Composite',
                    className: 'RolePermissionApiModel'
                  }
              }
            }
          },
          typeDefinitionId: {
            required: false,
            serializedName: 'typeDefinitionId',
            type: {
              name: 'String'
            }
          },
          children: {
            required: false,
            serializedName: 'children',
            type: {
              name: 'Boolean'
            }
          }
        }
      }
    };
  }
}

module.exports = NodeApiModel;
