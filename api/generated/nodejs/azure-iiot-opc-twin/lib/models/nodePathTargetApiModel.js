/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Node path target
 *
 */
class NodePathTargetApiModel {
  /**
   * Create a NodePathTargetApiModel.
   * @property {array} [browsePath] The target browse path
   * @property {object} [target]
   * @property {string} [target.nodeClass] Possible values include: 'Object',
   * 'Variable', 'Method', 'ObjectType', 'VariableType', 'ReferenceType',
   * 'DataType', 'View'
   * @property {string} [target.displayName] Display name
   * @property {string} [target.nodeId] Id of node.
   * (Mandatory).
   * @property {string} [target.description] Description if any
   * @property {string} [target.browseName] Browse name
   * @property {string} [target.accessRestrictions] Possible values include:
   * 'SigningRequired', 'EncryptionRequired', 'SessionRequired'
   * @property {number} [target.writeMask] Default write mask for the node
   * (default: 0)
   * @property {number} [target.userWriteMask] User write mask for the node
   * (default: 0)
   * @property {boolean} [target.isAbstract] Whether type is abstract, if type
   * can
   * be abstract.  Null if not type node.
   * (default: false)
   * @property {boolean} [target.containsNoLoops] Whether a view contains
   * loops. Null if
   * not a view.
   * @property {string} [target.eventNotifier] Possible values include:
   * 'SubscribeToEvents', 'HistoryRead', 'HistoryWrite'
   * @property {boolean} [target.executable] If method node class, whether
   * method can
   * be called.
   * @property {boolean} [target.userExecutable] If method node class, whether
   * method can
   * be called by current user.
   * (default: false if not executable)
   * @property {object} [target.dataTypeDefinition] Data type definition in
   * case node is a
   * data type node and definition is available,
   * otherwise null.
   * @property {string} [target.accessLevel] Possible values include:
   * 'CurrentRead', 'CurrentWrite', 'HistoryRead', 'HistoryWrite',
   * 'SemanticChange', 'StatusWrite', 'TimestampWrite', 'NonatomicRead',
   * 'NonatomicWrite', 'WriteFullArrayOnly'
   * @property {string} [target.userAccessLevel] Possible values include:
   * 'CurrentRead', 'CurrentWrite', 'HistoryRead', 'HistoryWrite',
   * 'SemanticChange', 'StatusWrite', 'TimestampWrite', 'NonatomicRead',
   * 'NonatomicWrite', 'WriteFullArrayOnly'
   * @property {string} [target.dataType] If variable the datatype of the
   * variable.
   * (default: null)
   * @property {string} [target.valueRank] Possible values include:
   * 'OneOrMoreDimensions', 'OneDimension', 'TwoDimensions',
   * 'ScalarOrOneDimension', 'Any', 'Scalar'
   * @property {array} [target.arrayDimensions] Array dimensions of variable or
   * variable type.
   * (default: empty array)
   * @property {boolean} [target.historizing] Whether the value of a variable
   * is historizing.
   * (default: false)
   * @property {number} [target.minimumSamplingInterval] Minimum sampling
   * interval for the variable
   * value, otherwise null if not a variable node.
   * (default: null)
   * @property {object} [target.value] Value of variable or default value of
   * the
   * subtyped variable in case node is a variable
   * type, otherwise null.
   * @property {string} [target.inverseName] Inverse name of the reference if
   * the node is
   * a reference type, otherwise null.
   * @property {boolean} [target.symmetric] Whether the reference is symmetric
   * in case
   * the node is a reference type, otherwise
   * null.
   * @property {array} [target.rolePermissions] Role permissions
   * @property {array} [target.userRolePermissions] User Role permissions
   * @property {string} [target.typeDefinitionId] Optional type definition of
   * the node
   * @property {boolean} [target.children] Whether node has children which are
   * defined as
   * any forward hierarchical references.
   * (default: unknown)
   * @property {number} [remainingPathIndex] Remaining index in path
   */
  constructor() {
  }

  /**
   * Defines the metadata of NodePathTargetApiModel
   *
   * @returns {object} metadata of NodePathTargetApiModel
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'NodePathTargetApiModel',
      type: {
        name: 'Composite',
        className: 'NodePathTargetApiModel',
        modelProperties: {
          browsePath: {
            required: false,
            serializedName: 'browsePath',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          target: {
            required: false,
            serializedName: 'target',
            type: {
              name: 'Composite',
              className: 'NodeApiModel'
            }
          },
          remainingPathIndex: {
            required: false,
            serializedName: 'remainingPathIndex',
            type: {
              name: 'Number'
            }
          }
        }
      }
    };
  }
}

module.exports = NodePathTargetApiModel;
