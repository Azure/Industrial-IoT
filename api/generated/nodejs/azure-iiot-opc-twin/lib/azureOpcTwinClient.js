/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

'use strict';

const msRest = require('ms-rest');
const ServiceClient = msRest.ServiceClient;
const WebResource = msRest.WebResource;

const models = require('./models');


/**
 * @summary Browse node references
 *
 * Browse a node on the specified endpoint. The endpoint must be activated and
 * connected and the module client and server must trust each other.
 *
 * @param {string} endpointId The identifier of the activated endpoint.
 *
 * @param {object} body The browse request
 *
 * @param {string} [body.nodeId] Node to browse.
 * (default: RootFolder).
 *
 * @param {string} [body.direction] Possible values include: 'Forward',
 * 'Backward', 'Both'
 *
 * @param {object} [body.view]
 *
 * @param {string} body.view.viewId Node of the view to browse
 *
 * @param {number} [body.view.version] Browses specific version of the view.
 *
 * @param {date} [body.view.timestamp] Browses at or before this timestamp.
 *
 * @param {string} [body.referenceTypeId] Reference types to browse.
 * (default: hierarchical).
 *
 * @param {boolean} [body.noSubtypes] Whether to include subtypes of the
 * reference type.
 * (default is false)
 *
 * @param {number} [body.maxReferencesToReturn] Max number of references to
 * return. There might
 * be less returned as this is up to the client
 * restrictions.  Set to 0 to return no references
 * or target nodes.
 * (default is decided by client e.g. 60)
 *
 * @param {boolean} [body.targetNodesOnly] Whether to collapse all references
 * into a set of
 * unique target nodes and not show reference
 * information.
 * (default is false)
 *
 * @param {boolean} [body.readVariableValues] Whether to read variable values
 * on target nodes.
 * (default is false)
 *
 * @param {object} [body.header]
 *
 * @param {object} [body.header.elevation]
 *
 * @param {string} [body.header.elevation.type] Possible values include:
 * 'None', 'UserName', 'X509Certificate', 'JwtToken'
 *
 * @param {object} [body.header.elevation.value] Value to pass to server
 *
 * @param {array} [body.header.locales] Optional list of locales in preference
 * order.
 *
 * @param {object} [body.header.diagnostics]
 *
 * @param {string} [body.header.diagnostics.level] Possible values include:
 * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
 *
 * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
 * (default: client generated)
 *
 * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
 * (default: client generated)
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link BrowseResponseApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _browse(endpointId, body, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (endpointId === null || endpointId === undefined || typeof endpointId.valueOf() !== 'string') {
      throw new Error('endpointId cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/browse/{endpointId}';
  requestUrl = requestUrl.replace('{endpointId}', encodeURIComponent(endpointId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BrowseRequestApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['BrowseResponseApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Browse set of unique target nodes
 *
 * Browse the set of unique hierarchically referenced target nodes on the
 * endpoint. The endpoint must be activated and connected and the module client
 * and server must trust each other. The root node id to browse from can be
 * provided as part of the query parameters. If it is not provided, the
 * RootFolder node is browsed. Note that this is the same as the POST method
 * with the model containing the node id and the targetNodesOnly flag set to
 * true.
 *
 * @param {string} endpointId The identifier of the activated endpoint.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.nodeId] The node to browse or omit to browse the
 * root node (i=84)
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link BrowseResponseApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getSetOfUniqueNodes(endpointId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let nodeId = (options && options.nodeId !== undefined) ? options.nodeId : undefined;
  // Validate
  try {
    if (endpointId === null || endpointId === undefined || typeof endpointId.valueOf() !== 'string') {
      throw new Error('endpointId cannot be null or undefined and it must be of type string.');
    }
    if (nodeId !== null && nodeId !== undefined && typeof nodeId.valueOf() !== 'string') {
      throw new Error('nodeId must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/browse/{endpointId}';
  requestUrl = requestUrl.replace('{endpointId}', encodeURIComponent(endpointId));
  let queryParameters = [];
  if (nodeId !== null && nodeId !== undefined) {
    queryParameters.push('nodeId=' + encodeURIComponent(nodeId));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['BrowseResponseApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Browse next set of references
 *
 * Browse next set of references on the endpoint. The endpoint must be
 * activated and connected and the module client and server must trust each
 * other.
 *
 * @param {string} endpointId The identifier of the activated endpoint.
 *
 * @param {object} body The request body with continuation token.
 *
 * @param {string} body.continuationToken Continuation token from previews
 * browse request.
 * (mandatory)
 *
 * @param {boolean} [body.abort] Whether to abort browse and release.
 * (default: false)
 *
 * @param {boolean} [body.targetNodesOnly] Whether to collapse all references
 * into a set of
 * unique target nodes and not show reference
 * information.
 * (default is false)
 *
 * @param {boolean} [body.readVariableValues] Whether to read variable values
 * on target nodes.
 * (default is false)
 *
 * @param {object} [body.header]
 *
 * @param {object} [body.header.elevation]
 *
 * @param {string} [body.header.elevation.type] Possible values include:
 * 'None', 'UserName', 'X509Certificate', 'JwtToken'
 *
 * @param {object} [body.header.elevation.value] Value to pass to server
 *
 * @param {array} [body.header.locales] Optional list of locales in preference
 * order.
 *
 * @param {object} [body.header.diagnostics]
 *
 * @param {string} [body.header.diagnostics.level] Possible values include:
 * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
 *
 * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
 * (default: client generated)
 *
 * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
 * (default: client generated)
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link BrowseNextResponseApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _browseNext(endpointId, body, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (endpointId === null || endpointId === undefined || typeof endpointId.valueOf() !== 'string') {
      throw new Error('endpointId cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/browse/{endpointId}/next';
  requestUrl = requestUrl.replace('{endpointId}', encodeURIComponent(endpointId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BrowseNextRequestApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['BrowseNextResponseApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Browse next set of unique target nodes
 *
 * Browse the next set of unique hierarchically referenced target nodes on the
 * endpoint. The endpoint must be activated and connected and the module client
 * and server must trust each other. Note that this is the same as the POST
 * method with the model containing the continuation token and the
 * targetNodesOnly flag set to true.
 *
 * @param {string} endpointId The identifier of the activated endpoint.
 *
 * @param {string} continuationToken Continuation token from
 * GetSetOfUniqueNodes operation
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link BrowseNextResponseApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getNextSetOfUniqueNodes(endpointId, continuationToken, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (endpointId === null || endpointId === undefined || typeof endpointId.valueOf() !== 'string') {
      throw new Error('endpointId cannot be null or undefined and it must be of type string.');
    }
    if (continuationToken === null || continuationToken === undefined || typeof continuationToken.valueOf() !== 'string') {
      throw new Error('continuationToken cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/browse/{endpointId}/next';
  requestUrl = requestUrl.replace('{endpointId}', encodeURIComponent(endpointId));
  let queryParameters = [];
  queryParameters.push('continuationToken=' + encodeURIComponent(continuationToken));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['BrowseNextResponseApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Browse using a browse path
 *
 * Browse using a path from the specified node id. This call uses
 * TranslateBrowsePathsToNodeIds service under the hood. The endpoint must be
 * activated and connected and the module client and server must trust each
 * other.
 *
 * @param {string} endpointId The identifier of the activated endpoint.
 *
 * @param {object} body The browse path request
 *
 * @param {string} [body.nodeId] Node to browse from.
 * (default: RootFolder).
 *
 * @param {array} body.browsePaths The paths to browse from node.
 * (mandatory)
 *
 * @param {boolean} [body.readVariableValues] Whether to read variable values
 * on target nodes.
 * (default is false)
 *
 * @param {object} [body.header]
 *
 * @param {object} [body.header.elevation]
 *
 * @param {string} [body.header.elevation.type] Possible values include:
 * 'None', 'UserName', 'X509Certificate', 'JwtToken'
 *
 * @param {object} [body.header.elevation.value] Value to pass to server
 *
 * @param {array} [body.header.locales] Optional list of locales in preference
 * order.
 *
 * @param {object} [body.header.diagnostics]
 *
 * @param {string} [body.header.diagnostics.level] Possible values include:
 * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
 *
 * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
 * (default: client generated)
 *
 * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
 * (default: client generated)
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link BrowsePathResponseApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _browseUsingPath(endpointId, body, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (endpointId === null || endpointId === undefined || typeof endpointId.valueOf() !== 'string') {
      throw new Error('endpointId cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/browse/{endpointId}/path';
  requestUrl = requestUrl.replace('{endpointId}', encodeURIComponent(endpointId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['BrowsePathRequestApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['BrowsePathResponseApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Get method meta data
 *
 * Return method meta data to support a user interface displaying forms to
 * input and output arguments. The endpoint must be activated and connected and
 * the module client and server must trust each other.
 *
 * @param {string} endpointId The identifier of the activated endpoint.
 *
 * @param {object} body The method metadata request
 *
 * @param {string} [body.methodId] Method id of method to call.
 * (Required)
 *
 * @param {array} [body.methodBrowsePath] An optional component path from the
 * node identified by
 * MethodId to the actual method node.
 *
 * @param {object} [body.header]
 *
 * @param {object} [body.header.elevation]
 *
 * @param {string} [body.header.elevation.type] Possible values include:
 * 'None', 'UserName', 'X509Certificate', 'JwtToken'
 *
 * @param {object} [body.header.elevation.value] Value to pass to server
 *
 * @param {array} [body.header.locales] Optional list of locales in preference
 * order.
 *
 * @param {object} [body.header.diagnostics]
 *
 * @param {string} [body.header.diagnostics.level] Possible values include:
 * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
 *
 * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
 * (default: client generated)
 *
 * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
 * (default: client generated)
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link MethodMetadataResponseApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getCallMetadata(endpointId, body, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (endpointId === null || endpointId === undefined || typeof endpointId.valueOf() !== 'string') {
      throw new Error('endpointId cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/call/{endpointId}/metadata';
  requestUrl = requestUrl.replace('{endpointId}', encodeURIComponent(endpointId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['MethodMetadataRequestApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['MethodMetadataResponseApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Call a method
 *
 * Invoke method node with specified input arguments. The endpoint must be
 * activated and connected and the module client and server must trust each
 * other.
 *
 * @param {string} endpointId The identifier of the activated endpoint.
 *
 * @param {object} body The method call request
 *
 * @param {string} [body.methodId] Method id of method to call.
 *
 * @param {string} [body.objectId] Context of the method, i.e. an object or
 * object type
 * node.
 *
 * @param {array} [body.argumentsProperty] Arguments for the method - null
 * means no args
 *
 * @param {array} [body.methodBrowsePath] An optional component path from the
 * node identified by
 * MethodId or from a resolved objectId to the actual
 * method node.
 *
 * @param {array} [body.objectBrowsePath] An optional component path from the
 * node identified by
 * ObjectId to the actual object or objectType node.
 * If ObjectId is null, the root node (i=84) is used.
 *
 * @param {object} [body.header]
 *
 * @param {object} [body.header.elevation]
 *
 * @param {string} [body.header.elevation.type] Possible values include:
 * 'None', 'UserName', 'X509Certificate', 'JwtToken'
 *
 * @param {object} [body.header.elevation.value] Value to pass to server
 *
 * @param {array} [body.header.locales] Optional list of locales in preference
 * order.
 *
 * @param {object} [body.header.diagnostics]
 *
 * @param {string} [body.header.diagnostics.level] Possible values include:
 * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
 *
 * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
 * (default: client generated)
 *
 * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
 * (default: client generated)
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link MethodCallResponseApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _callMethod(endpointId, body, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (endpointId === null || endpointId === undefined || typeof endpointId.valueOf() !== 'string') {
      throw new Error('endpointId cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/call/{endpointId}';
  requestUrl = requestUrl.replace('{endpointId}', encodeURIComponent(endpointId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['MethodCallRequestApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['MethodCallResponseApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Read variable value
 *
 * Read a variable node's value. The endpoint must be activated and connected
 * and the module client and server must trust each other.
 *
 * @param {string} endpointId The identifier of the activated endpoint.
 *
 * @param {object} body The read value request
 *
 * @param {string} [body.nodeId] Node to read from (mandatory)
 *
 * @param {array} [body.browsePath] An optional path from NodeId instance to
 * the actual node.
 *
 * @param {string} [body.indexRange] Index range to read, e.g. 1:2,0:1 for 2
 * slices
 * out of a matrix or 0:1 for the first item in
 * an array, string or bytestring.
 * See 7.22 of part 4: NumericRange.
 *
 * @param {object} [body.header]
 *
 * @param {object} [body.header.elevation]
 *
 * @param {string} [body.header.elevation.type] Possible values include:
 * 'None', 'UserName', 'X509Certificate', 'JwtToken'
 *
 * @param {object} [body.header.elevation.value] Value to pass to server
 *
 * @param {array} [body.header.locales] Optional list of locales in preference
 * order.
 *
 * @param {object} [body.header.diagnostics]
 *
 * @param {string} [body.header.diagnostics.level] Possible values include:
 * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
 *
 * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
 * (default: client generated)
 *
 * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
 * (default: client generated)
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ValueReadResponseApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _readValue(endpointId, body, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (endpointId === null || endpointId === undefined || typeof endpointId.valueOf() !== 'string') {
      throw new Error('endpointId cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/read/{endpointId}';
  requestUrl = requestUrl.replace('{endpointId}', encodeURIComponent(endpointId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['ValueReadRequestApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ValueReadResponseApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Get variable value
 *
 * Get a variable node's value using its node id. The endpoint must be
 * activated and connected and the module client and server must trust each
 * other.
 *
 * @param {string} endpointId The identifier of the activated endpoint.
 *
 * @param {string} nodeId The node to read
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ValueReadResponseApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getValue(endpointId, nodeId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (endpointId === null || endpointId === undefined || typeof endpointId.valueOf() !== 'string') {
      throw new Error('endpointId cannot be null or undefined and it must be of type string.');
    }
    if (nodeId === null || nodeId === undefined || typeof nodeId.valueOf() !== 'string') {
      throw new Error('nodeId cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/read/{endpointId}';
  requestUrl = requestUrl.replace('{endpointId}', encodeURIComponent(endpointId));
  let queryParameters = [];
  queryParameters.push('nodeId=' + encodeURIComponent(nodeId));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ValueReadResponseApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Read node attributes
 *
 * Read attributes of a node. The endpoint must be activated and connected and
 * the module client and server must trust each other.
 *
 * @param {string} endpointId The identifier of the activated endpoint.
 *
 * @param {object} body The read request
 *
 * @param {array} body.attributes Attributes to read
 *
 * @param {object} [body.header]
 *
 * @param {object} [body.header.elevation]
 *
 * @param {string} [body.header.elevation.type] Possible values include:
 * 'None', 'UserName', 'X509Certificate', 'JwtToken'
 *
 * @param {object} [body.header.elevation.value] Value to pass to server
 *
 * @param {array} [body.header.locales] Optional list of locales in preference
 * order.
 *
 * @param {object} [body.header.diagnostics]
 *
 * @param {string} [body.header.diagnostics.level] Possible values include:
 * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
 *
 * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
 * (default: client generated)
 *
 * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
 * (default: client generated)
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ReadResponseApiModel} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _readAttributes(endpointId, body, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (endpointId === null || endpointId === undefined || typeof endpointId.valueOf() !== 'string') {
      throw new Error('endpointId cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/read/{endpointId}/attributes';
  requestUrl = requestUrl.replace('{endpointId}', encodeURIComponent(endpointId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['ReadRequestApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ReadResponseApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Return the service status in the form of the service status
 * api model.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link StatusResponseApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getStatus(options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/status';

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['StatusResponseApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Write variable value
 *
 * Write variable node's value. The endpoint must be activated and connected
 * and the module client and server must trust each other.
 *
 * @param {string} endpointId The identifier of the activated endpoint.
 *
 * @param {object} body The write value request
 *
 * @param {string} [body.nodeId] Node id to to write value to.
 *
 * @param {array} [body.browsePath] An optional path from NodeId instance to
 * the actual node.
 *
 * @param {object} body.value Value to write. The system tries to convert
 * the value according to the data type value,
 * e.g. convert comma seperated value strings
 * into arrays.  (Mandatory)
 *
 * @param {string} [body.dataType] A built in datatype for the value. This can
 * be a data type from browse, or a built in
 * type.
 * (default: best effort)
 *
 * @param {string} [body.indexRange] Index range to write
 *
 * @param {object} [body.header]
 *
 * @param {object} [body.header.elevation]
 *
 * @param {string} [body.header.elevation.type] Possible values include:
 * 'None', 'UserName', 'X509Certificate', 'JwtToken'
 *
 * @param {object} [body.header.elevation.value] Value to pass to server
 *
 * @param {array} [body.header.locales] Optional list of locales in preference
 * order.
 *
 * @param {object} [body.header.diagnostics]
 *
 * @param {string} [body.header.diagnostics.level] Possible values include:
 * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
 *
 * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
 * (default: client generated)
 *
 * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
 * (default: client generated)
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ValueWriteResponseApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _writeValue(endpointId, body, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (endpointId === null || endpointId === undefined || typeof endpointId.valueOf() !== 'string') {
      throw new Error('endpointId cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/write/{endpointId}';
  requestUrl = requestUrl.replace('{endpointId}', encodeURIComponent(endpointId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['ValueWriteRequestApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ValueWriteResponseApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Write node attributes
 *
 * Write any attribute of a node. The endpoint must be activated and connected
 * and the module client and server must trust each other.
 *
 * @param {string} endpointId The identifier of the activated endpoint.
 *
 * @param {object} body The batch write request
 *
 * @param {array} body.attributes Attributes to update
 *
 * @param {object} [body.header]
 *
 * @param {object} [body.header.elevation]
 *
 * @param {string} [body.header.elevation.type] Possible values include:
 * 'None', 'UserName', 'X509Certificate', 'JwtToken'
 *
 * @param {object} [body.header.elevation.value] Value to pass to server
 *
 * @param {array} [body.header.locales] Optional list of locales in preference
 * order.
 *
 * @param {object} [body.header.diagnostics]
 *
 * @param {string} [body.header.diagnostics.level] Possible values include:
 * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
 *
 * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
 * (default: client generated)
 *
 * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
 * (default: client generated)
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link WriteResponseApiModel} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _writeAttributes(endpointId, body, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (endpointId === null || endpointId === undefined || typeof endpointId.valueOf() !== 'string') {
      throw new Error('endpointId cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/write/{endpointId}/attributes';
  requestUrl = requestUrl.replace('{endpointId}', encodeURIComponent(endpointId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['WriteRequestApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['WriteResponseApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a AzureOpcTwinClient. */
class AzureOpcTwinClient extends ServiceClient {
  /**
   * Create a AzureOpcTwinClient.
   * @param {credentials} credentials - Subscription credentials which uniquely identify client subscription.
   * @param {string} [baseUri] - The base URI of the service.
   * @param {object} [options] - The parameter options
   * @param {Array} [options.filters] - Filters to be added to the request pipeline
   * @param {object} [options.requestOptions] - Options for the underlying request object
   * {@link https://github.com/request/request#requestoptions-callback Options doc}
   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
   */
  constructor(credentials, baseUri, options) {
    if (credentials === null || credentials === undefined) {
      throw new Error('\'credentials\' cannot be null.');
    }

    if (!options) options = {};

    super(credentials, options);

    this.baseUri = baseUri;
    if (!this.baseUri) {
      this.baseUri = 'http://localhost:9080';
    }
    this.credentials = credentials;

    let packageInfo = this.getPackageJsonInfo(__dirname);
    this.addUserAgentInfo(`${packageInfo.name}/${packageInfo.version}`);
    this.models = models;
    this._browse = _browse;
    this._getSetOfUniqueNodes = _getSetOfUniqueNodes;
    this._browseNext = _browseNext;
    this._getNextSetOfUniqueNodes = _getNextSetOfUniqueNodes;
    this._browseUsingPath = _browseUsingPath;
    this._getCallMetadata = _getCallMetadata;
    this._callMethod = _callMethod;
    this._readValue = _readValue;
    this._getValue = _getValue;
    this._readAttributes = _readAttributes;
    this._getStatus = _getStatus;
    this._writeValue = _writeValue;
    this._writeAttributes = _writeAttributes;
    msRest.addSerializationMixin(this);
  }

  /**
   * @summary Browse node references
   *
   * Browse a node on the specified endpoint. The endpoint must be activated and
   * connected and the module client and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The browse request
   *
   * @param {string} [body.nodeId] Node to browse.
   * (default: RootFolder).
   *
   * @param {string} [body.direction] Possible values include: 'Forward',
   * 'Backward', 'Both'
   *
   * @param {object} [body.view]
   *
   * @param {string} body.view.viewId Node of the view to browse
   *
   * @param {number} [body.view.version] Browses specific version of the view.
   *
   * @param {date} [body.view.timestamp] Browses at or before this timestamp.
   *
   * @param {string} [body.referenceTypeId] Reference types to browse.
   * (default: hierarchical).
   *
   * @param {boolean} [body.noSubtypes] Whether to include subtypes of the
   * reference type.
   * (default is false)
   *
   * @param {number} [body.maxReferencesToReturn] Max number of references to
   * return. There might
   * be less returned as this is up to the client
   * restrictions.  Set to 0 to return no references
   * or target nodes.
   * (default is decided by client e.g. 60)
   *
   * @param {boolean} [body.targetNodesOnly] Whether to collapse all references
   * into a set of
   * unique target nodes and not show reference
   * information.
   * (default is false)
   *
   * @param {boolean} [body.readVariableValues] Whether to read variable values
   * on target nodes.
   * (default is false)
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<BrowseResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  browseWithHttpOperationResponse(endpointId, body, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._browse(endpointId, body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Browse node references
   *
   * Browse a node on the specified endpoint. The endpoint must be activated and
   * connected and the module client and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The browse request
   *
   * @param {string} [body.nodeId] Node to browse.
   * (default: RootFolder).
   *
   * @param {string} [body.direction] Possible values include: 'Forward',
   * 'Backward', 'Both'
   *
   * @param {object} [body.view]
   *
   * @param {string} body.view.viewId Node of the view to browse
   *
   * @param {number} [body.view.version] Browses specific version of the view.
   *
   * @param {date} [body.view.timestamp] Browses at or before this timestamp.
   *
   * @param {string} [body.referenceTypeId] Reference types to browse.
   * (default: hierarchical).
   *
   * @param {boolean} [body.noSubtypes] Whether to include subtypes of the
   * reference type.
   * (default is false)
   *
   * @param {number} [body.maxReferencesToReturn] Max number of references to
   * return. There might
   * be less returned as this is up to the client
   * restrictions.  Set to 0 to return no references
   * or target nodes.
   * (default is decided by client e.g. 60)
   *
   * @param {boolean} [body.targetNodesOnly] Whether to collapse all references
   * into a set of
   * unique target nodes and not show reference
   * information.
   * (default is false)
   *
   * @param {boolean} [body.readVariableValues] Whether to read variable values
   * on target nodes.
   * (default is false)
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {BrowseResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link BrowseResponseApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  browse(endpointId, body, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._browse(endpointId, body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._browse(endpointId, body, options, optionalCallback);
    }
  }

  /**
   * @summary Browse set of unique target nodes
   *
   * Browse the set of unique hierarchically referenced target nodes on the
   * endpoint. The endpoint must be activated and connected and the module client
   * and server must trust each other. The root node id to browse from can be
   * provided as part of the query parameters. If it is not provided, the
   * RootFolder node is browsed. Note that this is the same as the POST method
   * with the model containing the node id and the targetNodesOnly flag set to
   * true.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.nodeId] The node to browse or omit to browse the
   * root node (i=84)
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<BrowseResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getSetOfUniqueNodesWithHttpOperationResponse(endpointId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getSetOfUniqueNodes(endpointId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Browse set of unique target nodes
   *
   * Browse the set of unique hierarchically referenced target nodes on the
   * endpoint. The endpoint must be activated and connected and the module client
   * and server must trust each other. The root node id to browse from can be
   * provided as part of the query parameters. If it is not provided, the
   * RootFolder node is browsed. Note that this is the same as the POST method
   * with the model containing the node id and the targetNodesOnly flag set to
   * true.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.nodeId] The node to browse or omit to browse the
   * root node (i=84)
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {BrowseResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link BrowseResponseApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getSetOfUniqueNodes(endpointId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getSetOfUniqueNodes(endpointId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getSetOfUniqueNodes(endpointId, options, optionalCallback);
    }
  }

  /**
   * @summary Browse next set of references
   *
   * Browse next set of references on the endpoint. The endpoint must be
   * activated and connected and the module client and server must trust each
   * other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The request body with continuation token.
   *
   * @param {string} body.continuationToken Continuation token from previews
   * browse request.
   * (mandatory)
   *
   * @param {boolean} [body.abort] Whether to abort browse and release.
   * (default: false)
   *
   * @param {boolean} [body.targetNodesOnly] Whether to collapse all references
   * into a set of
   * unique target nodes and not show reference
   * information.
   * (default is false)
   *
   * @param {boolean} [body.readVariableValues] Whether to read variable values
   * on target nodes.
   * (default is false)
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<BrowseNextResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  browseNextWithHttpOperationResponse(endpointId, body, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._browseNext(endpointId, body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Browse next set of references
   *
   * Browse next set of references on the endpoint. The endpoint must be
   * activated and connected and the module client and server must trust each
   * other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The request body with continuation token.
   *
   * @param {string} body.continuationToken Continuation token from previews
   * browse request.
   * (mandatory)
   *
   * @param {boolean} [body.abort] Whether to abort browse and release.
   * (default: false)
   *
   * @param {boolean} [body.targetNodesOnly] Whether to collapse all references
   * into a set of
   * unique target nodes and not show reference
   * information.
   * (default is false)
   *
   * @param {boolean} [body.readVariableValues] Whether to read variable values
   * on target nodes.
   * (default is false)
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {BrowseNextResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link BrowseNextResponseApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  browseNext(endpointId, body, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._browseNext(endpointId, body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._browseNext(endpointId, body, options, optionalCallback);
    }
  }

  /**
   * @summary Browse next set of unique target nodes
   *
   * Browse the next set of unique hierarchically referenced target nodes on the
   * endpoint. The endpoint must be activated and connected and the module client
   * and server must trust each other. Note that this is the same as the POST
   * method with the model containing the continuation token and the
   * targetNodesOnly flag set to true.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {string} continuationToken Continuation token from
   * GetSetOfUniqueNodes operation
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<BrowseNextResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getNextSetOfUniqueNodesWithHttpOperationResponse(endpointId, continuationToken, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getNextSetOfUniqueNodes(endpointId, continuationToken, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Browse next set of unique target nodes
   *
   * Browse the next set of unique hierarchically referenced target nodes on the
   * endpoint. The endpoint must be activated and connected and the module client
   * and server must trust each other. Note that this is the same as the POST
   * method with the model containing the continuation token and the
   * targetNodesOnly flag set to true.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {string} continuationToken Continuation token from
   * GetSetOfUniqueNodes operation
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {BrowseNextResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link BrowseNextResponseApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getNextSetOfUniqueNodes(endpointId, continuationToken, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getNextSetOfUniqueNodes(endpointId, continuationToken, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getNextSetOfUniqueNodes(endpointId, continuationToken, options, optionalCallback);
    }
  }

  /**
   * @summary Browse using a browse path
   *
   * Browse using a path from the specified node id. This call uses
   * TranslateBrowsePathsToNodeIds service under the hood. The endpoint must be
   * activated and connected and the module client and server must trust each
   * other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The browse path request
   *
   * @param {string} [body.nodeId] Node to browse from.
   * (default: RootFolder).
   *
   * @param {array} body.browsePaths The paths to browse from node.
   * (mandatory)
   *
   * @param {boolean} [body.readVariableValues] Whether to read variable values
   * on target nodes.
   * (default is false)
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<BrowsePathResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  browseUsingPathWithHttpOperationResponse(endpointId, body, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._browseUsingPath(endpointId, body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Browse using a browse path
   *
   * Browse using a path from the specified node id. This call uses
   * TranslateBrowsePathsToNodeIds service under the hood. The endpoint must be
   * activated and connected and the module client and server must trust each
   * other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The browse path request
   *
   * @param {string} [body.nodeId] Node to browse from.
   * (default: RootFolder).
   *
   * @param {array} body.browsePaths The paths to browse from node.
   * (mandatory)
   *
   * @param {boolean} [body.readVariableValues] Whether to read variable values
   * on target nodes.
   * (default is false)
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {BrowsePathResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link BrowsePathResponseApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  browseUsingPath(endpointId, body, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._browseUsingPath(endpointId, body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._browseUsingPath(endpointId, body, options, optionalCallback);
    }
  }

  /**
   * @summary Get method meta data
   *
   * Return method meta data to support a user interface displaying forms to
   * input and output arguments. The endpoint must be activated and connected and
   * the module client and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The method metadata request
   *
   * @param {string} [body.methodId] Method id of method to call.
   * (Required)
   *
   * @param {array} [body.methodBrowsePath] An optional component path from the
   * node identified by
   * MethodId to the actual method node.
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<MethodMetadataResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getCallMetadataWithHttpOperationResponse(endpointId, body, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getCallMetadata(endpointId, body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Get method meta data
   *
   * Return method meta data to support a user interface displaying forms to
   * input and output arguments. The endpoint must be activated and connected and
   * the module client and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The method metadata request
   *
   * @param {string} [body.methodId] Method id of method to call.
   * (Required)
   *
   * @param {array} [body.methodBrowsePath] An optional component path from the
   * node identified by
   * MethodId to the actual method node.
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {MethodMetadataResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link MethodMetadataResponseApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getCallMetadata(endpointId, body, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getCallMetadata(endpointId, body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getCallMetadata(endpointId, body, options, optionalCallback);
    }
  }

  /**
   * @summary Call a method
   *
   * Invoke method node with specified input arguments. The endpoint must be
   * activated and connected and the module client and server must trust each
   * other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The method call request
   *
   * @param {string} [body.methodId] Method id of method to call.
   *
   * @param {string} [body.objectId] Context of the method, i.e. an object or
   * object type
   * node.
   *
   * @param {array} [body.argumentsProperty] Arguments for the method - null
   * means no args
   *
   * @param {array} [body.methodBrowsePath] An optional component path from the
   * node identified by
   * MethodId or from a resolved objectId to the actual
   * method node.
   *
   * @param {array} [body.objectBrowsePath] An optional component path from the
   * node identified by
   * ObjectId to the actual object or objectType node.
   * If ObjectId is null, the root node (i=84) is used.
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<MethodCallResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  callMethodWithHttpOperationResponse(endpointId, body, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._callMethod(endpointId, body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Call a method
   *
   * Invoke method node with specified input arguments. The endpoint must be
   * activated and connected and the module client and server must trust each
   * other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The method call request
   *
   * @param {string} [body.methodId] Method id of method to call.
   *
   * @param {string} [body.objectId] Context of the method, i.e. an object or
   * object type
   * node.
   *
   * @param {array} [body.argumentsProperty] Arguments for the method - null
   * means no args
   *
   * @param {array} [body.methodBrowsePath] An optional component path from the
   * node identified by
   * MethodId or from a resolved objectId to the actual
   * method node.
   *
   * @param {array} [body.objectBrowsePath] An optional component path from the
   * node identified by
   * ObjectId to the actual object or objectType node.
   * If ObjectId is null, the root node (i=84) is used.
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {MethodCallResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link MethodCallResponseApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  callMethod(endpointId, body, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._callMethod(endpointId, body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._callMethod(endpointId, body, options, optionalCallback);
    }
  }

  /**
   * @summary Read variable value
   *
   * Read a variable node's value. The endpoint must be activated and connected
   * and the module client and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The read value request
   *
   * @param {string} [body.nodeId] Node to read from (mandatory)
   *
   * @param {array} [body.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {string} [body.indexRange] Index range to read, e.g. 1:2,0:1 for 2
   * slices
   * out of a matrix or 0:1 for the first item in
   * an array, string or bytestring.
   * See 7.22 of part 4: NumericRange.
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ValueReadResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  readValueWithHttpOperationResponse(endpointId, body, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._readValue(endpointId, body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Read variable value
   *
   * Read a variable node's value. The endpoint must be activated and connected
   * and the module client and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The read value request
   *
   * @param {string} [body.nodeId] Node to read from (mandatory)
   *
   * @param {array} [body.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {string} [body.indexRange] Index range to read, e.g. 1:2,0:1 for 2
   * slices
   * out of a matrix or 0:1 for the first item in
   * an array, string or bytestring.
   * See 7.22 of part 4: NumericRange.
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ValueReadResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ValueReadResponseApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  readValue(endpointId, body, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._readValue(endpointId, body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._readValue(endpointId, body, options, optionalCallback);
    }
  }

  /**
   * @summary Get variable value
   *
   * Get a variable node's value using its node id. The endpoint must be
   * activated and connected and the module client and server must trust each
   * other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {string} nodeId The node to read
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ValueReadResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getValueWithHttpOperationResponse(endpointId, nodeId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getValue(endpointId, nodeId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Get variable value
   *
   * Get a variable node's value using its node id. The endpoint must be
   * activated and connected and the module client and server must trust each
   * other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {string} nodeId The node to read
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ValueReadResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ValueReadResponseApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getValue(endpointId, nodeId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getValue(endpointId, nodeId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getValue(endpointId, nodeId, options, optionalCallback);
    }
  }

  /**
   * @summary Read node attributes
   *
   * Read attributes of a node. The endpoint must be activated and connected and
   * the module client and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The read request
   *
   * @param {array} body.attributes Attributes to read
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ReadResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  readAttributesWithHttpOperationResponse(endpointId, body, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._readAttributes(endpointId, body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Read node attributes
   *
   * Read attributes of a node. The endpoint must be activated and connected and
   * the module client and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The read request
   *
   * @param {array} body.attributes Attributes to read
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ReadResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ReadResponseApiModel} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  readAttributes(endpointId, body, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._readAttributes(endpointId, body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._readAttributes(endpointId, body, options, optionalCallback);
    }
  }

  /**
   * @summary Return the service status in the form of the service status
   * api model.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<StatusResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getStatusWithHttpOperationResponse(options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getStatus(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Return the service status in the form of the service status
   * api model.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {StatusResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link StatusResponseApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getStatus(options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getStatus(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getStatus(options, optionalCallback);
    }
  }

  /**
   * @summary Write variable value
   *
   * Write variable node's value. The endpoint must be activated and connected
   * and the module client and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The write value request
   *
   * @param {string} [body.nodeId] Node id to to write value to.
   *
   * @param {array} [body.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} body.value Value to write. The system tries to convert
   * the value according to the data type value,
   * e.g. convert comma seperated value strings
   * into arrays.  (Mandatory)
   *
   * @param {string} [body.dataType] A built in datatype for the value. This can
   * be a data type from browse, or a built in
   * type.
   * (default: best effort)
   *
   * @param {string} [body.indexRange] Index range to write
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ValueWriteResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  writeValueWithHttpOperationResponse(endpointId, body, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._writeValue(endpointId, body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Write variable value
   *
   * Write variable node's value. The endpoint must be activated and connected
   * and the module client and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The write value request
   *
   * @param {string} [body.nodeId] Node id to to write value to.
   *
   * @param {array} [body.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} body.value Value to write. The system tries to convert
   * the value according to the data type value,
   * e.g. convert comma seperated value strings
   * into arrays.  (Mandatory)
   *
   * @param {string} [body.dataType] A built in datatype for the value. This can
   * be a data type from browse, or a built in
   * type.
   * (default: best effort)
   *
   * @param {string} [body.indexRange] Index range to write
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ValueWriteResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ValueWriteResponseApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  writeValue(endpointId, body, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._writeValue(endpointId, body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._writeValue(endpointId, body, options, optionalCallback);
    }
  }

  /**
   * @summary Write node attributes
   *
   * Write any attribute of a node. The endpoint must be activated and connected
   * and the module client and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The batch write request
   *
   * @param {array} body.attributes Attributes to update
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<WriteResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  writeAttributesWithHttpOperationResponse(endpointId, body, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._writeAttributes(endpointId, body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Write node attributes
   *
   * Write any attribute of a node. The endpoint must be activated and connected
   * and the module client and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The batch write request
   *
   * @param {array} body.attributes Attributes to update
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {WriteResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link WriteResponseApiModel} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  writeAttributes(endpointId, body, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._writeAttributes(endpointId, body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._writeAttributes(endpointId, body, options, optionalCallback);
    }
  }

}

module.exports = AzureOpcTwinClient;
module.exports['default'] = AzureOpcTwinClient;
module.exports.AzureOpcTwinClient = AzureOpcTwinClient;
module.exports.AzureOpcTwinModels = models;
