/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { ServiceClient, ServiceClientOptions, ServiceCallback, HttpOperationResponse, ServiceClientCredentials } from 'ms-rest';
import * as models from "./models";

export default class AzureOpcRegistryClient extends ServiceClient {
  /**
   * @class
   * Initializes a new instance of the AzureOpcRegistryClient class.
   * @constructor
   *
   * @param {credentials} credentials - Subscription credentials which uniquely identify client subscription.
   *
   * @param {string} [baseUri] - The base URI of the service.
   *
   * @param {object} [options] - The parameter options
   *
   * @param {Array} [options.filters] - Filters to be added to the request pipeline
   *
   * @param {object} [options.requestOptions] - Options for the underlying request object
   * {@link https://github.com/request/request#requestoptions-callback Options doc}
   *
   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
   *
   */
  constructor(credentials: ServiceClientCredentials, baseUri?: string, options?: ServiceClientOptions);

  credentials: ServiceClientCredentials;


  /**
   * @summary Get list of applications
   *
   * Get all registered applications in paged form.
   * The returned model can contain a continuation token if more results are
   * available.
   * Call this operation again using the token to retrieve more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.continuationToken] Optional Continuation
   * token
   *
   * @param {number} [options.pageSize] Optional number of results to
   * return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ApplicationInfoListApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getListOfApplicationsWithHttpOperationResponse(options?: { continuationToken? : string, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationInfoListApiModel>>;

  /**
   * @summary Get list of applications
   *
   * Get all registered applications in paged form.
   * The returned model can contain a continuation token if more results are
   * available.
   * Call this operation again using the token to retrieve more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.continuationToken] Optional Continuation
   * token
   *
   * @param {number} [options.pageSize] Optional number of results to
   * return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ApplicationInfoListApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ApplicationInfoListApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ApplicationInfoListApiModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getListOfApplications(options?: { continuationToken? : string, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationInfoListApiModel>;
  getListOfApplications(callback: ServiceCallback<models.ApplicationInfoListApiModel>): void;
  getListOfApplications(options: { continuationToken? : string, pageSize? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationInfoListApiModel>): void;


  /**
   * @summary Create new application
   *
   * The application is registered using the provided information, but it
   * is not associated with a supervisor.  This is useful for when you need
   * to register clients or you want to register a server that is located
   * in a network not reachable through a Twin module.
   *
   * @param {object} request Application registration request
   *
   * @param {string} request.applicationUri Unique application uri
   *
   * @param {string} [request.applicationType] Type of application. Possible
   * values include: 'Server', 'Client', 'ClientAndServer', 'DiscoveryServer'
   *
   * @param {string} [request.productUri] Product uri of the application.
   *
   * @param {string} [request.applicationName] Default name of the server or
   * client.
   *
   * @param {string} [request.locale] Locale of default name
   *
   * @param {string} [request.siteId] Site of the application
   *
   * @param {object} [request.localizedNames] Localized names key off locale id.
   *
   * @param {array} [request.capabilities] The OPC UA defined capabilities of the
   * server.
   *
   * @param {array} [request.discoveryUrls] Discovery urls of the server.
   *
   * @param {string} [request.discoveryProfileUri] The discovery profile uri of
   * the server.
   *
   * @param {string} [request.gatewayServerUri] Gateway server uri
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ApplicationRegistrationResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createApplicationWithHttpOperationResponse(request: models.ApplicationRegistrationRequestApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationRegistrationResponseApiModel>>;

  /**
   * @summary Create new application
   *
   * The application is registered using the provided information, but it
   * is not associated with a supervisor.  This is useful for when you need
   * to register clients or you want to register a server that is located
   * in a network not reachable through a Twin module.
   *
   * @param {object} request Application registration request
   *
   * @param {string} request.applicationUri Unique application uri
   *
   * @param {string} [request.applicationType] Type of application. Possible
   * values include: 'Server', 'Client', 'ClientAndServer', 'DiscoveryServer'
   *
   * @param {string} [request.productUri] Product uri of the application.
   *
   * @param {string} [request.applicationName] Default name of the server or
   * client.
   *
   * @param {string} [request.locale] Locale of default name
   *
   * @param {string} [request.siteId] Site of the application
   *
   * @param {object} [request.localizedNames] Localized names key off locale id.
   *
   * @param {array} [request.capabilities] The OPC UA defined capabilities of the
   * server.
   *
   * @param {array} [request.discoveryUrls] Discovery urls of the server.
   *
   * @param {string} [request.discoveryProfileUri] The discovery profile uri of
   * the server.
   *
   * @param {string} [request.gatewayServerUri] Gateway server uri
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ApplicationRegistrationResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ApplicationRegistrationResponseApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ApplicationRegistrationResponseApiModel} for
   *                      more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createApplication(request: models.ApplicationRegistrationRequestApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationRegistrationResponseApiModel>;
  createApplication(request: models.ApplicationRegistrationRequestApiModel, callback: ServiceCallback<models.ApplicationRegistrationResponseApiModel>): void;
  createApplication(request: models.ApplicationRegistrationRequestApiModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationRegistrationResponseApiModel>): void;


  /**
   * @summary Register new server
   *
   * Registers a server solely using a discovery url. Requires that
   * the onboarding agent service is running and the server can be
   * located by a supervisor in its network using the discovery url.
   *
   * @param {object} request Server registration request
   *
   * @param {string} request.discoveryUrl Discovery url to use for registration
   *
   * @param {string} [request.id] Registration id
   *
   * @param {object} [request.callback] An optional callback hook to register.
   *
   * @param {string} [request.callback.uri] Uri to call - should use https scheme
   * in which
   * case security is enforced.
   *
   * @param {string} [request.callback.method] Http Method to use for callback.
   * Possible values include: 'Get', 'Post', 'Put', 'Delete'
   *
   * @param {string} [request.callback.authenticationHeader] Authentication
   * header to add or null if not needed
   *
   * @param {object} [request.activationFilter] Upon discovery, activate all
   * endpoints with this filter.
   *
   * @param {array} [request.activationFilter.trustLists] Certificate trust list
   * identifiers to use for
   * activation, if null, all certificates are
   * trusted.  If empty list, no certificates are
   * trusted which is equal to no filter.
   *
   * @param {array} [request.activationFilter.securityPolicies] Endpoint security
   * policies to filter against.
   * If set to null, all policies are in scope.
   *
   * @param {string} [request.activationFilter.securityMode] Security mode level
   * to activate. If null,
   * then Microsoft.Azure.IIoT.OpcUa.Registry.Models.SecurityMode.Best is
   * assumed. Possible values include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  registerServerWithHttpOperationResponse(request: models.ServerRegistrationRequestApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Register new server
   *
   * Registers a server solely using a discovery url. Requires that
   * the onboarding agent service is running and the server can be
   * located by a supervisor in its network using the discovery url.
   *
   * @param {object} request Server registration request
   *
   * @param {string} request.discoveryUrl Discovery url to use for registration
   *
   * @param {string} [request.id] Registration id
   *
   * @param {object} [request.callback] An optional callback hook to register.
   *
   * @param {string} [request.callback.uri] Uri to call - should use https scheme
   * in which
   * case security is enforced.
   *
   * @param {string} [request.callback.method] Http Method to use for callback.
   * Possible values include: 'Get', 'Post', 'Put', 'Delete'
   *
   * @param {string} [request.callback.authenticationHeader] Authentication
   * header to add or null if not needed
   *
   * @param {object} [request.activationFilter] Upon discovery, activate all
   * endpoints with this filter.
   *
   * @param {array} [request.activationFilter.trustLists] Certificate trust list
   * identifiers to use for
   * activation, if null, all certificates are
   * trusted.  If empty list, no certificates are
   * trusted which is equal to no filter.
   *
   * @param {array} [request.activationFilter.securityPolicies] Endpoint security
   * policies to filter against.
   * If set to null, all policies are in scope.
   *
   * @param {string} [request.activationFilter.securityMode] Security mode level
   * to activate. If null,
   * then Microsoft.Azure.IIoT.OpcUa.Registry.Models.SecurityMode.Best is
   * assumed. Possible values include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  registerServer(request: models.ServerRegistrationRequestApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  registerServer(request: models.ServerRegistrationRequestApiModel, callback: ServiceCallback<void>): void;
  registerServer(request: models.ServerRegistrationRequestApiModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Purge applications
   *
   * Purges all applications that have not been seen for a specified amount of
   * time.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.notSeenFor] A duration in milliseconds
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteAllDisabledApplicationsWithHttpOperationResponse(options?: { notSeenFor? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Purge applications
   *
   * Purges all applications that have not been seen for a specified amount of
   * time.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.notSeenFor] A duration in milliseconds
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteAllDisabledApplications(options?: { notSeenFor? : string, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  deleteAllDisabledApplications(callback: ServiceCallback<void>): void;
  deleteAllDisabledApplications(options: { notSeenFor? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Disable an enabled application.
   *
   * A manager can disable an application.
   *
   * @param {string} applicationId The application id
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  disableApplicationWithHttpOperationResponse(applicationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Disable an enabled application.
   *
   * A manager can disable an application.
   *
   * @param {string} applicationId The application id
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  disableApplication(applicationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  disableApplication(applicationId: string, callback: ServiceCallback<void>): void;
  disableApplication(applicationId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Re-enable a disabled application.
   *
   * A manager can enable an application.
   *
   * @param {string} applicationId The application id
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  enableApplicationWithHttpOperationResponse(applicationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Re-enable a disabled application.
   *
   * A manager can enable an application.
   *
   * @param {string} applicationId The application id
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  enableApplication(applicationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  enableApplication(applicationId: string, callback: ServiceCallback<void>): void;
  enableApplication(applicationId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Discover servers
   *
   * Registers servers by running a discovery scan in a supervisor's
   * network. Requires that the onboarding agent service is running.
   *
   * @param {object} request Discovery request
   *
   * @param {string} [request.id] Id of discovery request
   *
   * @param {string} [request.discovery] Discovery mode to use. Possible values
   * include: 'Off', 'Local', 'Network', 'Fast', 'Scan'
   *
   * @param {object} [request.configuration] Scan configuration to use
   *
   * @param {string} [request.configuration.addressRangesToScan] Address ranges
   * to scan (null == all wired nics)
   *
   * @param {number} [request.configuration.networkProbeTimeoutMs] Network probe
   * timeout
   *
   * @param {number} [request.configuration.maxNetworkProbes] Max network probes
   * that should ever run.
   *
   * @param {string} [request.configuration.portRangesToScan] Port ranges to scan
   * (null == all unassigned)
   *
   * @param {number} [request.configuration.portProbeTimeoutMs] Port probe
   * timeout
   *
   * @param {number} [request.configuration.maxPortProbes] Max port probes that
   * should ever run.
   *
   * @param {number} [request.configuration.minPortProbesPercent] Probes that
   * must always be there as percent of max.
   *
   * @param {number} [request.configuration.idleTimeBetweenScansSec] Delay time
   * between discovery sweeps in seconds
   *
   * @param {array} [request.configuration.discoveryUrls] List of preset
   * discovery urls to use
   *
   * @param {array} [request.configuration.locales] List of locales to filter
   * with during discovery
   *
   * @param {array} [request.configuration.callbacks] Callbacks to invoke once
   * onboarding finishes
   *
   * @param {object} [request.configuration.activationFilter] Activate all twins
   * with this filter during onboarding.
   *
   * @param {array} [request.configuration.activationFilter.trustLists]
   * Certificate trust list identifiers to use for
   * activation, if null, all certificates are
   * trusted.  If empty list, no certificates are
   * trusted which is equal to no filter.
   *
   * @param {array} [request.configuration.activationFilter.securityPolicies]
   * Endpoint security policies to filter against.
   * If set to null, all policies are in scope.
   *
   * @param {string} [request.configuration.activationFilter.securityMode]
   * Security mode level to activate. If null,
   * then Microsoft.Azure.IIoT.OpcUa.Registry.Models.SecurityMode.Best is
   * assumed. Possible values include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  discoverServerWithHttpOperationResponse(request: models.DiscoveryRequestApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Discover servers
   *
   * Registers servers by running a discovery scan in a supervisor's
   * network. Requires that the onboarding agent service is running.
   *
   * @param {object} request Discovery request
   *
   * @param {string} [request.id] Id of discovery request
   *
   * @param {string} [request.discovery] Discovery mode to use. Possible values
   * include: 'Off', 'Local', 'Network', 'Fast', 'Scan'
   *
   * @param {object} [request.configuration] Scan configuration to use
   *
   * @param {string} [request.configuration.addressRangesToScan] Address ranges
   * to scan (null == all wired nics)
   *
   * @param {number} [request.configuration.networkProbeTimeoutMs] Network probe
   * timeout
   *
   * @param {number} [request.configuration.maxNetworkProbes] Max network probes
   * that should ever run.
   *
   * @param {string} [request.configuration.portRangesToScan] Port ranges to scan
   * (null == all unassigned)
   *
   * @param {number} [request.configuration.portProbeTimeoutMs] Port probe
   * timeout
   *
   * @param {number} [request.configuration.maxPortProbes] Max port probes that
   * should ever run.
   *
   * @param {number} [request.configuration.minPortProbesPercent] Probes that
   * must always be there as percent of max.
   *
   * @param {number} [request.configuration.idleTimeBetweenScansSec] Delay time
   * between discovery sweeps in seconds
   *
   * @param {array} [request.configuration.discoveryUrls] List of preset
   * discovery urls to use
   *
   * @param {array} [request.configuration.locales] List of locales to filter
   * with during discovery
   *
   * @param {array} [request.configuration.callbacks] Callbacks to invoke once
   * onboarding finishes
   *
   * @param {object} [request.configuration.activationFilter] Activate all twins
   * with this filter during onboarding.
   *
   * @param {array} [request.configuration.activationFilter.trustLists]
   * Certificate trust list identifiers to use for
   * activation, if null, all certificates are
   * trusted.  If empty list, no certificates are
   * trusted which is equal to no filter.
   *
   * @param {array} [request.configuration.activationFilter.securityPolicies]
   * Endpoint security policies to filter against.
   * If set to null, all policies are in scope.
   *
   * @param {string} [request.configuration.activationFilter.securityMode]
   * Security mode level to activate. If null,
   * then Microsoft.Azure.IIoT.OpcUa.Registry.Models.SecurityMode.Best is
   * assumed. Possible values include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  discoverServer(request: models.DiscoveryRequestApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  discoverServer(request: models.DiscoveryRequestApiModel, callback: ServiceCallback<void>): void;
  discoverServer(request: models.DiscoveryRequestApiModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Get application registration
   *
   * @param {string} applicationId Application id for the server
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ApplicationRegistrationApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getApplicationRegistrationWithHttpOperationResponse(applicationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationRegistrationApiModel>>;

  /**
   * @summary Get application registration
   *
   * @param {string} applicationId Application id for the server
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ApplicationRegistrationApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ApplicationRegistrationApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ApplicationRegistrationApiModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getApplicationRegistration(applicationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationRegistrationApiModel>;
  getApplicationRegistration(applicationId: string, callback: ServiceCallback<models.ApplicationRegistrationApiModel>): void;
  getApplicationRegistration(applicationId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationRegistrationApiModel>): void;


  /**
   * @summary Unregister application
   *
   * Unregisters and deletes application and all its associated endpoints.
   *
   * @param {string} applicationId The identifier of the application
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteApplicationWithHttpOperationResponse(applicationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Unregister application
   *
   * Unregisters and deletes application and all its associated endpoints.
   *
   * @param {string} applicationId The identifier of the application
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteApplication(applicationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  deleteApplication(applicationId: string, callback: ServiceCallback<void>): void;
  deleteApplication(applicationId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Update application registration
   *
   * The application information is updated with new properties.  Note that
   * this information might be overridden if the application is re-discovered
   * during a discovery run (recurring or one-time).
   *
   * @param {string} applicationId The identifier of the application
   *
   * @param {object} request Application update request
   *
   * @param {string} [request.productUri] Product uri
   *
   * @param {string} [request.applicationName] Default name of the server or
   * client.
   *
   * @param {string} [request.locale] Locale of default name - defaults to "en"
   *
   * @param {object} [request.localizedNames] Localized names keyed off locale
   * id.
   * To remove entry, set value for locale id to null.
   *
   * @param {buffer} [request.certificate] Application public cert
   *
   * @param {array} [request.capabilities] Capabilities of the application
   *
   * @param {array} [request.discoveryUrls] Discovery urls of the application
   *
   * @param {string} [request.discoveryProfileUri] Discovery profile uri
   *
   * @param {string} [request.gatewayServerUri] Gateway server uri
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateApplicationRegistrationWithHttpOperationResponse(applicationId: string, request: models.ApplicationRegistrationUpdateApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Update application registration
   *
   * The application information is updated with new properties.  Note that
   * this information might be overridden if the application is re-discovered
   * during a discovery run (recurring or one-time).
   *
   * @param {string} applicationId The identifier of the application
   *
   * @param {object} request Application update request
   *
   * @param {string} [request.productUri] Product uri
   *
   * @param {string} [request.applicationName] Default name of the server or
   * client.
   *
   * @param {string} [request.locale] Locale of default name - defaults to "en"
   *
   * @param {object} [request.localizedNames] Localized names keyed off locale
   * id.
   * To remove entry, set value for locale id to null.
   *
   * @param {buffer} [request.certificate] Application public cert
   *
   * @param {array} [request.capabilities] Capabilities of the application
   *
   * @param {array} [request.discoveryUrls] Discovery urls of the application
   *
   * @param {string} [request.discoveryProfileUri] Discovery profile uri
   *
   * @param {string} [request.gatewayServerUri] Gateway server uri
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateApplicationRegistration(applicationId: string, request: models.ApplicationRegistrationUpdateApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  updateApplicationRegistration(applicationId: string, request: models.ApplicationRegistrationUpdateApiModel, callback: ServiceCallback<void>): void;
  updateApplicationRegistration(applicationId: string, request: models.ApplicationRegistrationUpdateApiModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Get list of sites
   *
   * List all sites applications are registered in.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.continuationToken] Optional Continuation
   * token
   *
   * @param {number} [options.pageSize] Optional number of results to
   * return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ApplicationSiteListApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getListOfSitesWithHttpOperationResponse(options?: { continuationToken? : string, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationSiteListApiModel>>;

  /**
   * @summary Get list of sites
   *
   * List all sites applications are registered in.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.continuationToken] Optional Continuation
   * token
   *
   * @param {number} [options.pageSize] Optional number of results to
   * return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ApplicationSiteListApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ApplicationSiteListApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ApplicationSiteListApiModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getListOfSites(options?: { continuationToken? : string, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationSiteListApiModel>;
  getListOfSites(callback: ServiceCallback<models.ApplicationSiteListApiModel>): void;
  getListOfSites(options: { continuationToken? : string, pageSize? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationSiteListApiModel>): void;


  /**
   * @summary Get filtered list of applications
   *
   * Get a list of applications filtered using the specified query parameters.
   * The returned model can contain a continuation token if more results are
   * available.
   * Call the GetListOfApplications operation using the token to retrieve
   * more results.
   *
   * @param {object} query Applications Query model
   *
   * @param {string} [query.applicationType] Type of application. Possible values
   * include: 'Server', 'Client', 'ClientAndServer', 'DiscoveryServer'
   *
   * @param {string} [query.applicationUri] Application uri
   *
   * @param {string} [query.productUri] Product uri
   *
   * @param {string} [query.applicationName] Name of application
   *
   * @param {string} [query.locale] Locale of application name - default is "en"
   *
   * @param {string} [query.capability] Application capability to query with
   *
   * @param {string} [query.discoveryProfileUri] Discovery profile uri
   *
   * @param {string} [query.gatewayServerUri] Gateway server uri
   *
   * @param {string} [query.siteOrSupervisorId] Supervisor or site the
   * application belongs to.
   *
   * @param {boolean} [query.includeNotSeenSince] Whether to include apps that
   * were soft deleted
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ApplicationInfoListApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getFilteredListOfApplicationsWithHttpOperationResponse(query: models.ApplicationRegistrationQueryApiModel, options?: { pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationInfoListApiModel>>;

  /**
   * @summary Get filtered list of applications
   *
   * Get a list of applications filtered using the specified query parameters.
   * The returned model can contain a continuation token if more results are
   * available.
   * Call the GetListOfApplications operation using the token to retrieve
   * more results.
   *
   * @param {object} query Applications Query model
   *
   * @param {string} [query.applicationType] Type of application. Possible values
   * include: 'Server', 'Client', 'ClientAndServer', 'DiscoveryServer'
   *
   * @param {string} [query.applicationUri] Application uri
   *
   * @param {string} [query.productUri] Product uri
   *
   * @param {string} [query.applicationName] Name of application
   *
   * @param {string} [query.locale] Locale of application name - default is "en"
   *
   * @param {string} [query.capability] Application capability to query with
   *
   * @param {string} [query.discoveryProfileUri] Discovery profile uri
   *
   * @param {string} [query.gatewayServerUri] Gateway server uri
   *
   * @param {string} [query.siteOrSupervisorId] Supervisor or site the
   * application belongs to.
   *
   * @param {boolean} [query.includeNotSeenSince] Whether to include apps that
   * were soft deleted
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ApplicationInfoListApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ApplicationInfoListApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ApplicationInfoListApiModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getFilteredListOfApplications(query: models.ApplicationRegistrationQueryApiModel, options?: { pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationInfoListApiModel>;
  getFilteredListOfApplications(query: models.ApplicationRegistrationQueryApiModel, callback: ServiceCallback<models.ApplicationInfoListApiModel>): void;
  getFilteredListOfApplications(query: models.ApplicationRegistrationQueryApiModel, options: { pageSize? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationInfoListApiModel>): void;


  /**
   * @summary Query applications
   *
   * List applications that match a query model.
   * The returned model can contain a continuation token if more results are
   * available.
   * Call the GetListOfApplications operation using the token to retrieve
   * more results.
   *
   * @param {object} query Application query
   *
   * @param {string} [query.applicationType] Type of application. Possible values
   * include: 'Server', 'Client', 'ClientAndServer', 'DiscoveryServer'
   *
   * @param {string} [query.applicationUri] Application uri
   *
   * @param {string} [query.productUri] Product uri
   *
   * @param {string} [query.applicationName] Name of application
   *
   * @param {string} [query.locale] Locale of application name - default is "en"
   *
   * @param {string} [query.capability] Application capability to query with
   *
   * @param {string} [query.discoveryProfileUri] Discovery profile uri
   *
   * @param {string} [query.gatewayServerUri] Gateway server uri
   *
   * @param {string} [query.siteOrSupervisorId] Supervisor or site the
   * application belongs to.
   *
   * @param {boolean} [query.includeNotSeenSince] Whether to include apps that
   * were soft deleted
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.pageSize] Optional number of results to
   * return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ApplicationInfoListApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  queryApplicationsWithHttpOperationResponse(query: models.ApplicationRegistrationQueryApiModel, options?: { pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationInfoListApiModel>>;

  /**
   * @summary Query applications
   *
   * List applications that match a query model.
   * The returned model can contain a continuation token if more results are
   * available.
   * Call the GetListOfApplications operation using the token to retrieve
   * more results.
   *
   * @param {object} query Application query
   *
   * @param {string} [query.applicationType] Type of application. Possible values
   * include: 'Server', 'Client', 'ClientAndServer', 'DiscoveryServer'
   *
   * @param {string} [query.applicationUri] Application uri
   *
   * @param {string} [query.productUri] Product uri
   *
   * @param {string} [query.applicationName] Name of application
   *
   * @param {string} [query.locale] Locale of application name - default is "en"
   *
   * @param {string} [query.capability] Application capability to query with
   *
   * @param {string} [query.discoveryProfileUri] Discovery profile uri
   *
   * @param {string} [query.gatewayServerUri] Gateway server uri
   *
   * @param {string} [query.siteOrSupervisorId] Supervisor or site the
   * application belongs to.
   *
   * @param {boolean} [query.includeNotSeenSince] Whether to include apps that
   * were soft deleted
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.pageSize] Optional number of results to
   * return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ApplicationInfoListApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ApplicationInfoListApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ApplicationInfoListApiModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  queryApplications(query: models.ApplicationRegistrationQueryApiModel, options?: { pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationInfoListApiModel>;
  queryApplications(query: models.ApplicationRegistrationQueryApiModel, callback: ServiceCallback<models.ApplicationInfoListApiModel>): void;
  queryApplications(query: models.ApplicationRegistrationQueryApiModel, options: { pageSize? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationInfoListApiModel>): void;


  /**
   * @summary Query applications by id.
   *
   * A query model which supports the OPC UA Global Discovery Server query.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.query]
   *
   * @param {number} [options.query.startingRecordId] Starting record id
   *
   * @param {number} [options.query.maxRecordsToReturn] Max records to return
   *
   * @param {string} [options.query.applicationName] Application name
   *
   * @param {string} [options.query.applicationUri] Application uri
   *
   * @param {string} [options.query.applicationType] Application type. Possible
   * values include: 'Server', 'Client', 'ClientAndServer', 'DiscoveryServer'
   *
   * @param {string} [options.query.productUri] Product uri
   *
   * @param {array} [options.query.serverCapabilities] Server capabilities
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ApplicationRecordListApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  queryApplicationsByIdWithHttpOperationResponse(options?: { query? : models.ApplicationRecordQueryApiModel, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationRecordListApiModel>>;

  /**
   * @summary Query applications by id.
   *
   * A query model which supports the OPC UA Global Discovery Server query.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.query]
   *
   * @param {number} [options.query.startingRecordId] Starting record id
   *
   * @param {number} [options.query.maxRecordsToReturn] Max records to return
   *
   * @param {string} [options.query.applicationName] Application name
   *
   * @param {string} [options.query.applicationUri] Application uri
   *
   * @param {string} [options.query.applicationType] Application type. Possible
   * values include: 'Server', 'Client', 'ClientAndServer', 'DiscoveryServer'
   *
   * @param {string} [options.query.productUri] Product uri
   *
   * @param {array} [options.query.serverCapabilities] Server capabilities
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ApplicationRecordListApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ApplicationRecordListApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ApplicationRecordListApiModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  queryApplicationsById(options?: { query? : models.ApplicationRecordQueryApiModel, customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationRecordListApiModel>;
  queryApplicationsById(callback: ServiceCallback<models.ApplicationRecordListApiModel>): void;
  queryApplicationsById(options: { query? : models.ApplicationRecordQueryApiModel, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationRecordListApiModel>): void;


  /**
   * @summary Activate endpoint
   *
   * Activates an endpoint for subsequent use in twin service.
   * All endpoints must be activated using this API or through a
   * activation filter during application registration or discovery.
   *
   * @param {string} endpointId endpoint identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  activateEndpointWithHttpOperationResponse(endpointId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Activate endpoint
   *
   * Activates an endpoint for subsequent use in twin service.
   * All endpoints must be activated using this API or through a
   * activation filter during application registration or discovery.
   *
   * @param {string} endpointId endpoint identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  activateEndpoint(endpointId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  activateEndpoint(endpointId: string, callback: ServiceCallback<void>): void;
  activateEndpoint(endpointId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Get endpoint information
   *
   * Gets information about an endpoint.
   *
   * @param {string} endpointId endpoint identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if
   * available
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<EndpointInfoApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getEndpointWithHttpOperationResponse(endpointId: string, options?: { onlyServerState? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EndpointInfoApiModel>>;

  /**
   * @summary Get endpoint information
   *
   * Gets information about an endpoint.
   *
   * @param {string} endpointId endpoint identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if
   * available
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {EndpointInfoApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {EndpointInfoApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link EndpointInfoApiModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getEndpoint(endpointId: string, options?: { onlyServerState? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.EndpointInfoApiModel>;
  getEndpoint(endpointId: string, callback: ServiceCallback<models.EndpointInfoApiModel>): void;
  getEndpoint(endpointId: string, options: { onlyServerState? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EndpointInfoApiModel>): void;


  /**
   * @summary Update endpoint information
   *
   * @param {string} endpointId endpoint identifier
   *
   * @param {object} request Endpoint update request
   *
   * @param {object} [request.user] User authentication to change on the
   * endpoint.
   *
   * @param {string} [request.user.type] Type of credential. Possible values
   * include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [request.user.value] Value to pass to server
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateEndpointWithHttpOperationResponse(endpointId: string, request: models.EndpointRegistrationUpdateApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Update endpoint information
   *
   * @param {string} endpointId endpoint identifier
   *
   * @param {object} request Endpoint update request
   *
   * @param {object} [request.user] User authentication to change on the
   * endpoint.
   *
   * @param {string} [request.user.type] Type of credential. Possible values
   * include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [request.user.value] Value to pass to server
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateEndpoint(endpointId: string, request: models.EndpointRegistrationUpdateApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  updateEndpoint(endpointId: string, request: models.EndpointRegistrationUpdateApiModel, callback: ServiceCallback<void>): void;
  updateEndpoint(endpointId: string, request: models.EndpointRegistrationUpdateApiModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Get list of endpoints
   *
   * Get all registered endpoints in paged form.
   * The returned model can contain a continuation token if more results are
   * available.
   * Call this operation again using the token to retrieve more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {string} [options.continuationToken] Optional Continuation token
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<EndpointInfoListApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getListOfEndpointsWithHttpOperationResponse(options?: { onlyServerState? : boolean, continuationToken? : string, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EndpointInfoListApiModel>>;

  /**
   * @summary Get list of endpoints
   *
   * Get all registered endpoints in paged form.
   * The returned model can contain a continuation token if more results are
   * available.
   * Call this operation again using the token to retrieve more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {string} [options.continuationToken] Optional Continuation token
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {EndpointInfoListApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {EndpointInfoListApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link EndpointInfoListApiModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getListOfEndpoints(options?: { onlyServerState? : boolean, continuationToken? : string, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.EndpointInfoListApiModel>;
  getListOfEndpoints(callback: ServiceCallback<models.EndpointInfoListApiModel>): void;
  getListOfEndpoints(options: { onlyServerState? : boolean, continuationToken? : string, pageSize? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EndpointInfoListApiModel>): void;


  /**
   * @summary Get filtered list of endpoints
   *
   * Get a list of endpoints filtered using the specified query parameters.
   * The returned model can contain a continuation token if more results are
   * available.
   * Call the GetListOfEndpoints operation using the token to retrieve
   * more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.url] Endoint url for direct server access
   *
   * @param {string} [options.userAuthentication] Type of credential selected for
   * authentication. Possible values include: 'None', 'UserName',
   * 'X509Certificate', 'JwtToken'
   *
   * @param {buffer} [options.certificate] Certificate of the endpoint
   *
   * @param {string} [options.securityMode] Security Mode. Possible values
   * include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
   *
   * @param {string} [options.securityPolicy] Security policy uri
   *
   * @param {boolean} [options.activated] Whether the endpoint was activated
   *
   * @param {boolean} [options.connected] Whether the endpoint is connected on
   * supervisor.
   *
   * @param {string} [options.endpointState] The last state of the the activated
   * endpoint. Possible values include: 'Connecting', 'NotReachable', 'Busy',
   * 'NoTrust', 'CertificateInvalid', 'Ready', 'Error'
   *
   * @param {boolean} [options.includeNotSeenSince] Whether to include endpoints
   * that were soft deleted
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display
   * current client state of the endpoint if available
   *
   * @param {number} [options.pageSize] Optional number of results to
   * return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<EndpointInfoListApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getFilteredListOfEndpointsWithHttpOperationResponse(options?: { url? : string, userAuthentication? : string, certificate? : Buffer, securityMode? : string, securityPolicy? : string, activated? : boolean, connected? : boolean, endpointState? : string, includeNotSeenSince? : boolean, onlyServerState? : boolean, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EndpointInfoListApiModel>>;

  /**
   * @summary Get filtered list of endpoints
   *
   * Get a list of endpoints filtered using the specified query parameters.
   * The returned model can contain a continuation token if more results are
   * available.
   * Call the GetListOfEndpoints operation using the token to retrieve
   * more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.url] Endoint url for direct server access
   *
   * @param {string} [options.userAuthentication] Type of credential selected for
   * authentication. Possible values include: 'None', 'UserName',
   * 'X509Certificate', 'JwtToken'
   *
   * @param {buffer} [options.certificate] Certificate of the endpoint
   *
   * @param {string} [options.securityMode] Security Mode. Possible values
   * include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
   *
   * @param {string} [options.securityPolicy] Security policy uri
   *
   * @param {boolean} [options.activated] Whether the endpoint was activated
   *
   * @param {boolean} [options.connected] Whether the endpoint is connected on
   * supervisor.
   *
   * @param {string} [options.endpointState] The last state of the the activated
   * endpoint. Possible values include: 'Connecting', 'NotReachable', 'Busy',
   * 'NoTrust', 'CertificateInvalid', 'Ready', 'Error'
   *
   * @param {boolean} [options.includeNotSeenSince] Whether to include endpoints
   * that were soft deleted
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display
   * current client state of the endpoint if available
   *
   * @param {number} [options.pageSize] Optional number of results to
   * return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {EndpointInfoListApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {EndpointInfoListApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link EndpointInfoListApiModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getFilteredListOfEndpoints(options?: { url? : string, userAuthentication? : string, certificate? : Buffer, securityMode? : string, securityPolicy? : string, activated? : boolean, connected? : boolean, endpointState? : string, includeNotSeenSince? : boolean, onlyServerState? : boolean, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.EndpointInfoListApiModel>;
  getFilteredListOfEndpoints(callback: ServiceCallback<models.EndpointInfoListApiModel>): void;
  getFilteredListOfEndpoints(options: { url? : string, userAuthentication? : string, certificate? : Buffer, securityMode? : string, securityPolicy? : string, activated? : boolean, connected? : boolean, endpointState? : string, includeNotSeenSince? : boolean, onlyServerState? : boolean, pageSize? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EndpointInfoListApiModel>): void;


  /**
   * @summary Query endpoints
   *
   * Return endpoints that match the specified query.
   * The returned model can contain a continuation token if more results are
   * available.
   * Call the GetListOfEndpoints operation using the token to retrieve
   * more results.
   *
   * @param {object} query Query to match
   *
   * @param {string} [query.url] Endoint url for direct server access
   *
   * @param {string} [query.userAuthentication] Type of credential selected for
   * authentication. Possible values include: 'None', 'UserName',
   * 'X509Certificate', 'JwtToken'
   *
   * @param {buffer} [query.certificate] Certificate of the endpoint
   *
   * @param {string} [query.securityMode] Security Mode. Possible values include:
   * 'Best', 'Sign', 'SignAndEncrypt', 'None'
   *
   * @param {string} [query.securityPolicy] Security policy uri
   *
   * @param {boolean} [query.activated] Whether the endpoint was activated
   *
   * @param {boolean} [query.connected] Whether the endpoint is connected on
   * supervisor.
   *
   * @param {string} [query.endpointState] The last state of the the activated
   * endpoint. Possible values include: 'Connecting', 'NotReachable', 'Busy',
   * 'NoTrust', 'CertificateInvalid', 'Ready', 'Error'
   *
   * @param {boolean} [query.includeNotSeenSince] Whether to include endpoints
   * that were soft deleted
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<EndpointInfoListApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  queryEndpointsWithHttpOperationResponse(query: models.EndpointRegistrationQueryApiModel, options?: { onlyServerState? : boolean, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EndpointInfoListApiModel>>;

  /**
   * @summary Query endpoints
   *
   * Return endpoints that match the specified query.
   * The returned model can contain a continuation token if more results are
   * available.
   * Call the GetListOfEndpoints operation using the token to retrieve
   * more results.
   *
   * @param {object} query Query to match
   *
   * @param {string} [query.url] Endoint url for direct server access
   *
   * @param {string} [query.userAuthentication] Type of credential selected for
   * authentication. Possible values include: 'None', 'UserName',
   * 'X509Certificate', 'JwtToken'
   *
   * @param {buffer} [query.certificate] Certificate of the endpoint
   *
   * @param {string} [query.securityMode] Security Mode. Possible values include:
   * 'Best', 'Sign', 'SignAndEncrypt', 'None'
   *
   * @param {string} [query.securityPolicy] Security policy uri
   *
   * @param {boolean} [query.activated] Whether the endpoint was activated
   *
   * @param {boolean} [query.connected] Whether the endpoint is connected on
   * supervisor.
   *
   * @param {string} [query.endpointState] The last state of the the activated
   * endpoint. Possible values include: 'Connecting', 'NotReachable', 'Busy',
   * 'NoTrust', 'CertificateInvalid', 'Ready', 'Error'
   *
   * @param {boolean} [query.includeNotSeenSince] Whether to include endpoints
   * that were soft deleted
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {EndpointInfoListApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {EndpointInfoListApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link EndpointInfoListApiModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  queryEndpoints(query: models.EndpointRegistrationQueryApiModel, options?: { onlyServerState? : boolean, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.EndpointInfoListApiModel>;
  queryEndpoints(query: models.EndpointRegistrationQueryApiModel, callback: ServiceCallback<models.EndpointInfoListApiModel>): void;
  queryEndpoints(query: models.EndpointRegistrationQueryApiModel, options: { onlyServerState? : boolean, pageSize? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EndpointInfoListApiModel>): void;


  /**
   * @summary Deactivate endpoint
   *
   * Deactivates the endpoint and disable access through twin service.
   *
   * @param {string} endpointId endpoint identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deactivateEndpointWithHttpOperationResponse(endpointId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Deactivate endpoint
   *
   * Deactivates the endpoint and disable access through twin service.
   *
   * @param {string} endpointId endpoint identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deactivateEndpoint(endpointId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  deactivateEndpoint(endpointId: string, callback: ServiceCallback<void>): void;
  deactivateEndpoint(endpointId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Return the service status in the form of the service status
   * api model.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<StatusResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getStatusWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StatusResponseApiModel>>;

  /**
   * @summary Return the service status in the form of the service status
   * api model.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {StatusResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {StatusResponseApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link StatusResponseApiModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getStatus(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StatusResponseApiModel>;
  getStatus(callback: ServiceCallback<models.StatusResponseApiModel>): void;
  getStatus(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StatusResponseApiModel>): void;


  /**
   * @summary Get supervisor registration information
   *
   * Returns a supervisor's registration and connectivity information.
   * A supervisor id corresponds to the twin modules module identity.
   *
   * @param {string} supervisorId Supervisor identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if
   * available
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SupervisorApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getSupervisorWithHttpOperationResponse(supervisorId: string, options?: { onlyServerState? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SupervisorApiModel>>;

  /**
   * @summary Get supervisor registration information
   *
   * Returns a supervisor's registration and connectivity information.
   * A supervisor id corresponds to the twin modules module identity.
   *
   * @param {string} supervisorId Supervisor identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if
   * available
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {SupervisorApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {SupervisorApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SupervisorApiModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getSupervisor(supervisorId: string, options?: { onlyServerState? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.SupervisorApiModel>;
  getSupervisor(supervisorId: string, callback: ServiceCallback<models.SupervisorApiModel>): void;
  getSupervisor(supervisorId: string, options: { onlyServerState? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SupervisorApiModel>): void;


  /**
   * @summary Update supervisor information
   *
   * Allows a caller to configure recurring discovery runs on the twin module
   * identified by the supervisor id or update site information.
   *
   * @param {string} supervisorId supervisor identifier
   *
   * @param {object} request Patch request
   *
   * @param {string} [request.siteId] Site of the supervisor
   *
   * @param {string} [request.discovery] Whether the supervisor is in discovery
   * mode.
   * If null, does not change. Possible values include: 'Off', 'Local',
   * 'Network', 'Fast', 'Scan'
   *
   * @param {object} [request.discoveryConfig] Supervisor discovery configuration
   *
   * @param {string} [request.discoveryConfig.addressRangesToScan] Address ranges
   * to scan (null == all wired nics)
   *
   * @param {number} [request.discoveryConfig.networkProbeTimeoutMs] Network
   * probe timeout
   *
   * @param {number} [request.discoveryConfig.maxNetworkProbes] Max network
   * probes that should ever run.
   *
   * @param {string} [request.discoveryConfig.portRangesToScan] Port ranges to
   * scan (null == all unassigned)
   *
   * @param {number} [request.discoveryConfig.portProbeTimeoutMs] Port probe
   * timeout
   *
   * @param {number} [request.discoveryConfig.maxPortProbes] Max port probes that
   * should ever run.
   *
   * @param {number} [request.discoveryConfig.minPortProbesPercent] Probes that
   * must always be there as percent of max.
   *
   * @param {number} [request.discoveryConfig.idleTimeBetweenScansSec] Delay time
   * between discovery sweeps in seconds
   *
   * @param {array} [request.discoveryConfig.discoveryUrls] List of preset
   * discovery urls to use
   *
   * @param {array} [request.discoveryConfig.locales] List of locales to filter
   * with during discovery
   *
   * @param {array} [request.discoveryConfig.callbacks] Callbacks to invoke once
   * onboarding finishes
   *
   * @param {object} [request.discoveryConfig.activationFilter] Activate all
   * twins with this filter during onboarding.
   *
   * @param {array} [request.discoveryConfig.activationFilter.trustLists]
   * Certificate trust list identifiers to use for
   * activation, if null, all certificates are
   * trusted.  If empty list, no certificates are
   * trusted which is equal to no filter.
   *
   * @param {array} [request.discoveryConfig.activationFilter.securityPolicies]
   * Endpoint security policies to filter against.
   * If set to null, all policies are in scope.
   *
   * @param {string} [request.discoveryConfig.activationFilter.securityMode]
   * Security mode level to activate. If null,
   * then Microsoft.Azure.IIoT.OpcUa.Registry.Models.SecurityMode.Best is
   * assumed. Possible values include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
   *
   * @param {array} [request.discoveryCallbacks] Callbacks to add or remove (see
   * below)
   *
   * @param {boolean} [request.removeDiscoveryCallbacks] Whether to add or remove
   * callbacks
   *
   * @param {string} [request.logLevel] Current log level. Possible values
   * include: 'Error', 'Information', 'Debug', 'Verbose'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateSupervisorWithHttpOperationResponse(supervisorId: string, request: models.SupervisorUpdateApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Update supervisor information
   *
   * Allows a caller to configure recurring discovery runs on the twin module
   * identified by the supervisor id or update site information.
   *
   * @param {string} supervisorId supervisor identifier
   *
   * @param {object} request Patch request
   *
   * @param {string} [request.siteId] Site of the supervisor
   *
   * @param {string} [request.discovery] Whether the supervisor is in discovery
   * mode.
   * If null, does not change. Possible values include: 'Off', 'Local',
   * 'Network', 'Fast', 'Scan'
   *
   * @param {object} [request.discoveryConfig] Supervisor discovery configuration
   *
   * @param {string} [request.discoveryConfig.addressRangesToScan] Address ranges
   * to scan (null == all wired nics)
   *
   * @param {number} [request.discoveryConfig.networkProbeTimeoutMs] Network
   * probe timeout
   *
   * @param {number} [request.discoveryConfig.maxNetworkProbes] Max network
   * probes that should ever run.
   *
   * @param {string} [request.discoveryConfig.portRangesToScan] Port ranges to
   * scan (null == all unassigned)
   *
   * @param {number} [request.discoveryConfig.portProbeTimeoutMs] Port probe
   * timeout
   *
   * @param {number} [request.discoveryConfig.maxPortProbes] Max port probes that
   * should ever run.
   *
   * @param {number} [request.discoveryConfig.minPortProbesPercent] Probes that
   * must always be there as percent of max.
   *
   * @param {number} [request.discoveryConfig.idleTimeBetweenScansSec] Delay time
   * between discovery sweeps in seconds
   *
   * @param {array} [request.discoveryConfig.discoveryUrls] List of preset
   * discovery urls to use
   *
   * @param {array} [request.discoveryConfig.locales] List of locales to filter
   * with during discovery
   *
   * @param {array} [request.discoveryConfig.callbacks] Callbacks to invoke once
   * onboarding finishes
   *
   * @param {object} [request.discoveryConfig.activationFilter] Activate all
   * twins with this filter during onboarding.
   *
   * @param {array} [request.discoveryConfig.activationFilter.trustLists]
   * Certificate trust list identifiers to use for
   * activation, if null, all certificates are
   * trusted.  If empty list, no certificates are
   * trusted which is equal to no filter.
   *
   * @param {array} [request.discoveryConfig.activationFilter.securityPolicies]
   * Endpoint security policies to filter against.
   * If set to null, all policies are in scope.
   *
   * @param {string} [request.discoveryConfig.activationFilter.securityMode]
   * Security mode level to activate. If null,
   * then Microsoft.Azure.IIoT.OpcUa.Registry.Models.SecurityMode.Best is
   * assumed. Possible values include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
   *
   * @param {array} [request.discoveryCallbacks] Callbacks to add or remove (see
   * below)
   *
   * @param {boolean} [request.removeDiscoveryCallbacks] Whether to add or remove
   * callbacks
   *
   * @param {string} [request.logLevel] Current log level. Possible values
   * include: 'Error', 'Information', 'Debug', 'Verbose'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateSupervisor(supervisorId: string, request: models.SupervisorUpdateApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  updateSupervisor(supervisorId: string, request: models.SupervisorUpdateApiModel, callback: ServiceCallback<void>): void;
  updateSupervisor(supervisorId: string, request: models.SupervisorUpdateApiModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Get runtime status of supervisor
   *
   * Allows a caller to get runtime status for a supervisor.
   *
   * @param {string} supervisorId supervisor identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SupervisorStatusApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getSupervisorStatusWithHttpOperationResponse(supervisorId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SupervisorStatusApiModel>>;

  /**
   * @summary Get runtime status of supervisor
   *
   * Allows a caller to get runtime status for a supervisor.
   *
   * @param {string} supervisorId supervisor identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {SupervisorStatusApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {SupervisorStatusApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SupervisorStatusApiModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getSupervisorStatus(supervisorId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SupervisorStatusApiModel>;
  getSupervisorStatus(supervisorId: string, callback: ServiceCallback<models.SupervisorStatusApiModel>): void;
  getSupervisorStatus(supervisorId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SupervisorStatusApiModel>): void;


  /**
   * @summary Reset supervisor
   *
   * Allows a caller to reset the twin module using its supervisor
   * identity identifier.
   *
   * @param {string} supervisorId supervisor identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  resetSupervisorWithHttpOperationResponse(supervisorId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Reset supervisor
   *
   * Allows a caller to reset the twin module using its supervisor
   * identity identifier.
   *
   * @param {string} supervisorId supervisor identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  resetSupervisor(supervisorId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  resetSupervisor(supervisorId: string, callback: ServiceCallback<void>): void;
  resetSupervisor(supervisorId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Get list of supervisors
   *
   * Get all registered supervisors and therefore twin modules in paged form.
   * The returned model can contain a continuation token if more results are
   * available.
   * Call this operation again using the token to retrieve more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {string} [options.continuationToken] Optional Continuation token
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SupervisorListApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getListOfSupervisorsWithHttpOperationResponse(options?: { onlyServerState? : boolean, continuationToken? : string, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SupervisorListApiModel>>;

  /**
   * @summary Get list of supervisors
   *
   * Get all registered supervisors and therefore twin modules in paged form.
   * The returned model can contain a continuation token if more results are
   * available.
   * Call this operation again using the token to retrieve more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {string} [options.continuationToken] Optional Continuation token
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {SupervisorListApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {SupervisorListApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SupervisorListApiModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getListOfSupervisors(options?: { onlyServerState? : boolean, continuationToken? : string, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.SupervisorListApiModel>;
  getListOfSupervisors(callback: ServiceCallback<models.SupervisorListApiModel>): void;
  getListOfSupervisors(options: { onlyServerState? : boolean, continuationToken? : string, pageSize? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SupervisorListApiModel>): void;


  /**
   * @summary Get filtered list of supervisors
   *
   * Get a list of supervisors filtered using the specified query parameters.
   * The returned model can contain a continuation token if more results are
   * available.
   * Call the GetListOfSupervisors operation using the token to retrieve
   * more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.siteId] Site of the supervisor
   *
   * @param {string} [options.discovery] Discovery mode of supervisor. Possible
   * values include: 'Off', 'Local', 'Network', 'Fast', 'Scan'
   *
   * @param {boolean} [options.connected] Included connected or disconnected
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if
   * available
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SupervisorListApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getFilteredListOfSupervisorsWithHttpOperationResponse(options?: { siteId? : string, discovery? : string, connected? : boolean, onlyServerState? : boolean, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SupervisorListApiModel>>;

  /**
   * @summary Get filtered list of supervisors
   *
   * Get a list of supervisors filtered using the specified query parameters.
   * The returned model can contain a continuation token if more results are
   * available.
   * Call the GetListOfSupervisors operation using the token to retrieve
   * more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.siteId] Site of the supervisor
   *
   * @param {string} [options.discovery] Discovery mode of supervisor. Possible
   * values include: 'Off', 'Local', 'Network', 'Fast', 'Scan'
   *
   * @param {boolean} [options.connected] Included connected or disconnected
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if
   * available
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {SupervisorListApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {SupervisorListApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SupervisorListApiModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getFilteredListOfSupervisors(options?: { siteId? : string, discovery? : string, connected? : boolean, onlyServerState? : boolean, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.SupervisorListApiModel>;
  getFilteredListOfSupervisors(callback: ServiceCallback<models.SupervisorListApiModel>): void;
  getFilteredListOfSupervisors(options: { siteId? : string, discovery? : string, connected? : boolean, onlyServerState? : boolean, pageSize? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SupervisorListApiModel>): void;


  /**
   * @summary Query supervisors
   *
   * Get all supervisors that match a specified query.
   * The returned model can contain a continuation token if more results are
   * available.
   * Call the GetListOfSupervisors operation using the token to retrieve
   * more results.
   *
   * @param {object} query Supervisors query model
   *
   * @param {string} [query.siteId] Site of the supervisor
   *
   * @param {string} [query.discovery] Discovery mode of supervisor. Possible
   * values include: 'Off', 'Local', 'Network', 'Fast', 'Scan'
   *
   * @param {boolean} [query.connected] Included connected or disconnected
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if
   * available
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SupervisorListApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  querySupervisorsWithHttpOperationResponse(query: models.SupervisorQueryApiModel, options?: { onlyServerState? : boolean, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SupervisorListApiModel>>;

  /**
   * @summary Query supervisors
   *
   * Get all supervisors that match a specified query.
   * The returned model can contain a continuation token if more results are
   * available.
   * Call the GetListOfSupervisors operation using the token to retrieve
   * more results.
   *
   * @param {object} query Supervisors query model
   *
   * @param {string} [query.siteId] Site of the supervisor
   *
   * @param {string} [query.discovery] Discovery mode of supervisor. Possible
   * values include: 'Off', 'Local', 'Network', 'Fast', 'Scan'
   *
   * @param {boolean} [query.connected] Included connected or disconnected
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if
   * available
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {SupervisorListApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {SupervisorListApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SupervisorListApiModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  querySupervisors(query: models.SupervisorQueryApiModel, options?: { onlyServerState? : boolean, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.SupervisorListApiModel>;
  querySupervisors(query: models.SupervisorQueryApiModel, callback: ServiceCallback<models.SupervisorListApiModel>): void;
  querySupervisors(query: models.SupervisorQueryApiModel, options: { onlyServerState? : boolean, pageSize? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SupervisorListApiModel>): void;
}

export { AzureOpcRegistryClient, models as AzureOpcRegistryModels };
