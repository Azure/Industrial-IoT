/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { ServiceClient, ServiceClientOptions, ServiceCallback, HttpOperationResponse, ServiceClientCredentials } from 'ms-rest';
import * as models from "./models";

export default class AzureOpcRegistryClient extends ServiceClient {
  /**
   * @class
   * Initializes a new instance of the AzureOpcRegistryClient class.
   * @constructor
   *
   * @param {credentials} credentials - Subscription credentials which uniquely identify client subscription.
   *
   * @param {string} [baseUri] - The base URI of the service.
   *
   * @param {object} [options] - The parameter options
   *
   * @param {Array} [options.filters] - Filters to be added to the request pipeline
   *
   * @param {object} [options.requestOptions] - Options for the underlying request object
   * {@link https://github.com/request/request#requestoptions-callback Options doc}
   *
   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
   *
   */
  constructor(credentials: ServiceClientCredentials, baseUri?: string, options?: ServiceClientOptions);

  credentials: ServiceClientCredentials;


  /**
   * @summary Register new server
   *
   * Registers a server solely using a discovery url. Requires that the
   * onboarding agent service is running and the server can be located by a
   * supervisor in its network using the discovery url.
   *
   * @param {object} body Server registration request
   *
   * @param {string} body.discoveryUrl Discovery url to use for registration
   *
   * @param {string} [body.id] Registration id
   *
   * @param {object} [body.activationFilter]
   *
   * @param {array} [body.activationFilter.trustLists] Certificate trust list
   * identifiers to use for
   * activation, if null, all certificates are
   * trusted.  If empty list, no certificates are
   * trusted which is equal to no filter.
   *
   * @param {array} [body.activationFilter.securityPolicies] Endpoint security
   * policies to filter against.
   * If set to null, all policies are in scope.
   *
   * @param {string} [body.activationFilter.securityMode] Possible values
   * include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  registerServerWithHttpOperationResponse(body: models.ServerRegistrationRequestApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Register new server
   *
   * Registers a server solely using a discovery url. Requires that the
   * onboarding agent service is running and the server can be located by a
   * supervisor in its network using the discovery url.
   *
   * @param {object} body Server registration request
   *
   * @param {string} body.discoveryUrl Discovery url to use for registration
   *
   * @param {string} [body.id] Registration id
   *
   * @param {object} [body.activationFilter]
   *
   * @param {array} [body.activationFilter.trustLists] Certificate trust list
   * identifiers to use for
   * activation, if null, all certificates are
   * trusted.  If empty list, no certificates are
   * trusted which is equal to no filter.
   *
   * @param {array} [body.activationFilter.securityPolicies] Endpoint security
   * policies to filter against.
   * If set to null, all policies are in scope.
   *
   * @param {string} [body.activationFilter.securityMode] Possible values
   * include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  registerServer(body: models.ServerRegistrationRequestApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  registerServer(body: models.ServerRegistrationRequestApiModel, callback: ServiceCallback<void>): void;
  registerServer(body: models.ServerRegistrationRequestApiModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Create new application
   *
   * The application is registered using the provided information, but it is not
   * associated with a supervisor. This is useful for when you need to register
   * clients or you want to register a server that is located in a network not
   * reachable through a Twin module.
   *
   * @param {object} body Application registration request
   *
   * @param {string} body.applicationUri Unique application uri
   *
   * @param {string} [body.applicationType] Possible values include: 'Server',
   * 'Client', 'ClientAndServer', 'DiscoveryServer'
   *
   * @param {string} [body.productUri] Product uri of the application.
   *
   * @param {string} [body.applicationName] Default name of the server or client.
   *
   * @param {string} [body.locale] Locale of default name
   *
   * @param {string} [body.siteId] Site of the application
   *
   * @param {object} [body.localizedNames] Localized names key off locale id.
   *
   * @param {array} [body.capabilities] The OPC UA defined capabilities of the
   * server.
   *
   * @param {array} [body.discoveryUrls] Discovery urls of the server.
   *
   * @param {string} [body.discoveryProfileUri] The discovery profile uri of the
   * server.
   *
   * @param {string} [body.gatewayServerUri] Gateway server uri
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ApplicationRegistrationResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createApplicationWithHttpOperationResponse(body: models.ApplicationRegistrationRequestApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationRegistrationResponseApiModel>>;

  /**
   * @summary Create new application
   *
   * The application is registered using the provided information, but it is not
   * associated with a supervisor. This is useful for when you need to register
   * clients or you want to register a server that is located in a network not
   * reachable through a Twin module.
   *
   * @param {object} body Application registration request
   *
   * @param {string} body.applicationUri Unique application uri
   *
   * @param {string} [body.applicationType] Possible values include: 'Server',
   * 'Client', 'ClientAndServer', 'DiscoveryServer'
   *
   * @param {string} [body.productUri] Product uri of the application.
   *
   * @param {string} [body.applicationName] Default name of the server or client.
   *
   * @param {string} [body.locale] Locale of default name
   *
   * @param {string} [body.siteId] Site of the application
   *
   * @param {object} [body.localizedNames] Localized names key off locale id.
   *
   * @param {array} [body.capabilities] The OPC UA defined capabilities of the
   * server.
   *
   * @param {array} [body.discoveryUrls] Discovery urls of the server.
   *
   * @param {string} [body.discoveryProfileUri] The discovery profile uri of the
   * server.
   *
   * @param {string} [body.gatewayServerUri] Gateway server uri
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ApplicationRegistrationResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ApplicationRegistrationResponseApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ApplicationRegistrationResponseApiModel} for
   *                      more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createApplication(body: models.ApplicationRegistrationRequestApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationRegistrationResponseApiModel>;
  createApplication(body: models.ApplicationRegistrationRequestApiModel, callback: ServiceCallback<models.ApplicationRegistrationResponseApiModel>): void;
  createApplication(body: models.ApplicationRegistrationRequestApiModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationRegistrationResponseApiModel>): void;


  /**
   * @summary Purge applications
   *
   * Purges all applications that have not been seen for a specified amount of
   * time.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.notSeenFor] A duration in milliseconds
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteAllDisabledApplicationsWithHttpOperationResponse(options?: { notSeenFor? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Purge applications
   *
   * Purges all applications that have not been seen for a specified amount of
   * time.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.notSeenFor] A duration in milliseconds
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteAllDisabledApplications(options?: { notSeenFor? : string, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  deleteAllDisabledApplications(callback: ServiceCallback<void>): void;
  deleteAllDisabledApplications(options: { notSeenFor? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Get list of applications
   *
   * Get all registered applications in paged form. The returned model can
   * contain a continuation token if more results are available. Call this
   * operation again using the token to retrieve more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.continuationToken] Optional Continuation token
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ApplicationInfoListApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getListOfApplicationsWithHttpOperationResponse(options?: { continuationToken? : string, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationInfoListApiModel>>;

  /**
   * @summary Get list of applications
   *
   * Get all registered applications in paged form. The returned model can
   * contain a continuation token if more results are available. Call this
   * operation again using the token to retrieve more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.continuationToken] Optional Continuation token
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ApplicationInfoListApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ApplicationInfoListApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ApplicationInfoListApiModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getListOfApplications(options?: { continuationToken? : string, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationInfoListApiModel>;
  getListOfApplications(callback: ServiceCallback<models.ApplicationInfoListApiModel>): void;
  getListOfApplications(options: { continuationToken? : string, pageSize? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationInfoListApiModel>): void;


  /**
   * @summary Disable an enabled application.
   *
   * A manager can disable an application.
   *
   * @param {string} applicationId The application id
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  disableApplicationWithHttpOperationResponse(applicationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Disable an enabled application.
   *
   * A manager can disable an application.
   *
   * @param {string} applicationId The application id
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  disableApplication(applicationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  disableApplication(applicationId: string, callback: ServiceCallback<void>): void;
  disableApplication(applicationId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Re-enable a disabled application.
   *
   * A manager can enable an application.
   *
   * @param {string} applicationId The application id
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  enableApplicationWithHttpOperationResponse(applicationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Re-enable a disabled application.
   *
   * A manager can enable an application.
   *
   * @param {string} applicationId The application id
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  enableApplication(applicationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  enableApplication(applicationId: string, callback: ServiceCallback<void>): void;
  enableApplication(applicationId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Discover servers
   *
   * Registers servers by running a discovery scan in a supervisor's network.
   * Requires that the onboarding agent service is running.
   *
   * @param {object} body Discovery request
   *
   * @param {string} [body.id] Id of discovery request
   *
   * @param {string} [body.discovery] Possible values include: 'Off', 'Local',
   * 'Network', 'Fast', 'Scan'
   *
   * @param {object} [body.configuration]
   *
   * @param {string} [body.configuration.addressRangesToScan] Address ranges to
   * scan (null == all wired nics)
   *
   * @param {number} [body.configuration.networkProbeTimeoutMs] Network probe
   * timeout
   *
   * @param {number} [body.configuration.maxNetworkProbes] Max network probes
   * that should ever run.
   *
   * @param {string} [body.configuration.portRangesToScan] Port ranges to scan
   * (null == all unassigned)
   *
   * @param {number} [body.configuration.portProbeTimeoutMs] Port probe timeout
   *
   * @param {number} [body.configuration.maxPortProbes] Max port probes that
   * should ever run.
   *
   * @param {number} [body.configuration.minPortProbesPercent] Probes that must
   * always be there as percent of max.
   *
   * @param {number} [body.configuration.idleTimeBetweenScansSec] Delay time
   * between discovery sweeps in seconds
   *
   * @param {array} [body.configuration.discoveryUrls] List of preset discovery
   * urls to use
   *
   * @param {array} [body.configuration.locales] List of locales to filter with
   * during discovery
   *
   * @param {object} [body.configuration.activationFilter]
   *
   * @param {array} [body.configuration.activationFilter.trustLists] Certificate
   * trust list identifiers to use for
   * activation, if null, all certificates are
   * trusted.  If empty list, no certificates are
   * trusted which is equal to no filter.
   *
   * @param {array} [body.configuration.activationFilter.securityPolicies]
   * Endpoint security policies to filter against.
   * If set to null, all policies are in scope.
   *
   * @param {string} [body.configuration.activationFilter.securityMode] Possible
   * values include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  discoverServerWithHttpOperationResponse(body: models.DiscoveryRequestApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Discover servers
   *
   * Registers servers by running a discovery scan in a supervisor's network.
   * Requires that the onboarding agent service is running.
   *
   * @param {object} body Discovery request
   *
   * @param {string} [body.id] Id of discovery request
   *
   * @param {string} [body.discovery] Possible values include: 'Off', 'Local',
   * 'Network', 'Fast', 'Scan'
   *
   * @param {object} [body.configuration]
   *
   * @param {string} [body.configuration.addressRangesToScan] Address ranges to
   * scan (null == all wired nics)
   *
   * @param {number} [body.configuration.networkProbeTimeoutMs] Network probe
   * timeout
   *
   * @param {number} [body.configuration.maxNetworkProbes] Max network probes
   * that should ever run.
   *
   * @param {string} [body.configuration.portRangesToScan] Port ranges to scan
   * (null == all unassigned)
   *
   * @param {number} [body.configuration.portProbeTimeoutMs] Port probe timeout
   *
   * @param {number} [body.configuration.maxPortProbes] Max port probes that
   * should ever run.
   *
   * @param {number} [body.configuration.minPortProbesPercent] Probes that must
   * always be there as percent of max.
   *
   * @param {number} [body.configuration.idleTimeBetweenScansSec] Delay time
   * between discovery sweeps in seconds
   *
   * @param {array} [body.configuration.discoveryUrls] List of preset discovery
   * urls to use
   *
   * @param {array} [body.configuration.locales] List of locales to filter with
   * during discovery
   *
   * @param {object} [body.configuration.activationFilter]
   *
   * @param {array} [body.configuration.activationFilter.trustLists] Certificate
   * trust list identifiers to use for
   * activation, if null, all certificates are
   * trusted.  If empty list, no certificates are
   * trusted which is equal to no filter.
   *
   * @param {array} [body.configuration.activationFilter.securityPolicies]
   * Endpoint security policies to filter against.
   * If set to null, all policies are in scope.
   *
   * @param {string} [body.configuration.activationFilter.securityMode] Possible
   * values include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  discoverServer(body: models.DiscoveryRequestApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  discoverServer(body: models.DiscoveryRequestApiModel, callback: ServiceCallback<void>): void;
  discoverServer(body: models.DiscoveryRequestApiModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Cancel discovery
   *
   * Cancels a discovery request using the request identifier.
   *
   * @param {string} requestId Discovery request
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  cancelWithHttpOperationResponse(requestId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Cancel discovery
   *
   * Cancels a discovery request using the request identifier.
   *
   * @param {string} requestId Discovery request
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  cancel(requestId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  cancel(requestId: string, callback: ServiceCallback<void>): void;
  cancel(requestId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Get application registration
   *
   * @param {string} applicationId Application id for the server
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ApplicationRegistrationApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getApplicationRegistrationWithHttpOperationResponse(applicationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationRegistrationApiModel>>;

  /**
   * @summary Get application registration
   *
   * @param {string} applicationId Application id for the server
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ApplicationRegistrationApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ApplicationRegistrationApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ApplicationRegistrationApiModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getApplicationRegistration(applicationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationRegistrationApiModel>;
  getApplicationRegistration(applicationId: string, callback: ServiceCallback<models.ApplicationRegistrationApiModel>): void;
  getApplicationRegistration(applicationId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationRegistrationApiModel>): void;


  /**
   * @summary Update application registration
   *
   * The application information is updated with new properties. Note that this
   * information might be overridden if the application is re-discovered during a
   * discovery run (recurring or one-time).
   *
   * @param {string} applicationId The identifier of the application
   *
   * @param {object} body Application update request
   *
   * @param {string} [body.productUri] Product uri
   *
   * @param {string} [body.applicationName] Default name of the server or client.
   *
   * @param {string} [body.locale] Locale of default name - defaults to "en"
   *
   * @param {object} [body.localizedNames] Localized names keyed off locale id.
   * To remove entry, set value for locale id to null.
   *
   * @param {buffer} [body.certificate] Application public cert
   *
   * @param {array} [body.capabilities] Capabilities of the application
   *
   * @param {array} [body.discoveryUrls] Discovery urls of the application
   *
   * @param {string} [body.discoveryProfileUri] Discovery profile uri
   *
   * @param {string} [body.gatewayServerUri] Gateway server uri
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateApplicationRegistrationWithHttpOperationResponse(applicationId: string, body: models.ApplicationRegistrationUpdateApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Update application registration
   *
   * The application information is updated with new properties. Note that this
   * information might be overridden if the application is re-discovered during a
   * discovery run (recurring or one-time).
   *
   * @param {string} applicationId The identifier of the application
   *
   * @param {object} body Application update request
   *
   * @param {string} [body.productUri] Product uri
   *
   * @param {string} [body.applicationName] Default name of the server or client.
   *
   * @param {string} [body.locale] Locale of default name - defaults to "en"
   *
   * @param {object} [body.localizedNames] Localized names keyed off locale id.
   * To remove entry, set value for locale id to null.
   *
   * @param {buffer} [body.certificate] Application public cert
   *
   * @param {array} [body.capabilities] Capabilities of the application
   *
   * @param {array} [body.discoveryUrls] Discovery urls of the application
   *
   * @param {string} [body.discoveryProfileUri] Discovery profile uri
   *
   * @param {string} [body.gatewayServerUri] Gateway server uri
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateApplicationRegistration(applicationId: string, body: models.ApplicationRegistrationUpdateApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  updateApplicationRegistration(applicationId: string, body: models.ApplicationRegistrationUpdateApiModel, callback: ServiceCallback<void>): void;
  updateApplicationRegistration(applicationId: string, body: models.ApplicationRegistrationUpdateApiModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Unregister application
   *
   * Unregisters and deletes application and all its associated endpoints.
   *
   * @param {string} applicationId The identifier of the application
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteApplicationWithHttpOperationResponse(applicationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Unregister application
   *
   * Unregisters and deletes application and all its associated endpoints.
   *
   * @param {string} applicationId The identifier of the application
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteApplication(applicationId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  deleteApplication(applicationId: string, callback: ServiceCallback<void>): void;
  deleteApplication(applicationId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Get list of sites
   *
   * List all sites applications are registered in.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.continuationToken] Optional Continuation token
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ApplicationSiteListApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getListOfSitesWithHttpOperationResponse(options?: { continuationToken? : string, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationSiteListApiModel>>;

  /**
   * @summary Get list of sites
   *
   * List all sites applications are registered in.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.continuationToken] Optional Continuation token
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ApplicationSiteListApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ApplicationSiteListApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ApplicationSiteListApiModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getListOfSites(options?: { continuationToken? : string, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationSiteListApiModel>;
  getListOfSites(callback: ServiceCallback<models.ApplicationSiteListApiModel>): void;
  getListOfSites(options: { continuationToken? : string, pageSize? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationSiteListApiModel>): void;


  /**
   * @summary Query applications
   *
   * List applications that match a query model. The returned model can contain a
   * continuation token if more results are available. Call the
   * GetListOfApplications operation using the token to retrieve more results.
   *
   * @param {object} body Application query
   *
   * @param {string} [body.applicationType] Possible values include: 'Server',
   * 'Client', 'ClientAndServer', 'DiscoveryServer'
   *
   * @param {string} [body.applicationUri] Application uri
   *
   * @param {string} [body.productUri] Product uri
   *
   * @param {string} [body.applicationName] Name of application
   *
   * @param {string} [body.locale] Locale of application name - default is "en"
   *
   * @param {string} [body.capability] Application capability to query with
   *
   * @param {string} [body.discoveryProfileUri] Discovery profile uri
   *
   * @param {string} [body.gatewayServerUri] Gateway server uri
   *
   * @param {string} [body.siteOrGatewayId] Supervisor or site the application
   * belongs to.
   *
   * @param {boolean} [body.includeNotSeenSince] Whether to include apps that
   * were soft deleted
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ApplicationInfoListApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  queryApplicationsWithHttpOperationResponse(body: models.ApplicationRegistrationQueryApiModel, options?: { pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationInfoListApiModel>>;

  /**
   * @summary Query applications
   *
   * List applications that match a query model. The returned model can contain a
   * continuation token if more results are available. Call the
   * GetListOfApplications operation using the token to retrieve more results.
   *
   * @param {object} body Application query
   *
   * @param {string} [body.applicationType] Possible values include: 'Server',
   * 'Client', 'ClientAndServer', 'DiscoveryServer'
   *
   * @param {string} [body.applicationUri] Application uri
   *
   * @param {string} [body.productUri] Product uri
   *
   * @param {string} [body.applicationName] Name of application
   *
   * @param {string} [body.locale] Locale of application name - default is "en"
   *
   * @param {string} [body.capability] Application capability to query with
   *
   * @param {string} [body.discoveryProfileUri] Discovery profile uri
   *
   * @param {string} [body.gatewayServerUri] Gateway server uri
   *
   * @param {string} [body.siteOrGatewayId] Supervisor or site the application
   * belongs to.
   *
   * @param {boolean} [body.includeNotSeenSince] Whether to include apps that
   * were soft deleted
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ApplicationInfoListApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ApplicationInfoListApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ApplicationInfoListApiModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  queryApplications(body: models.ApplicationRegistrationQueryApiModel, options?: { pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationInfoListApiModel>;
  queryApplications(body: models.ApplicationRegistrationQueryApiModel, callback: ServiceCallback<models.ApplicationInfoListApiModel>): void;
  queryApplications(body: models.ApplicationRegistrationQueryApiModel, options: { pageSize? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationInfoListApiModel>): void;


  /**
   * @summary Get filtered list of applications
   *
   * Get a list of applications filtered using the specified query parameters.
   * The returned model can contain a continuation token if more results are
   * available. Call the GetListOfApplications operation using the token to
   * retrieve more results.
   *
   * @param {object} body Applications Query model
   *
   * @param {string} [body.applicationType] Possible values include: 'Server',
   * 'Client', 'ClientAndServer', 'DiscoveryServer'
   *
   * @param {string} [body.applicationUri] Application uri
   *
   * @param {string} [body.productUri] Product uri
   *
   * @param {string} [body.applicationName] Name of application
   *
   * @param {string} [body.locale] Locale of application name - default is "en"
   *
   * @param {string} [body.capability] Application capability to query with
   *
   * @param {string} [body.discoveryProfileUri] Discovery profile uri
   *
   * @param {string} [body.gatewayServerUri] Gateway server uri
   *
   * @param {string} [body.siteOrGatewayId] Supervisor or site the application
   * belongs to.
   *
   * @param {boolean} [body.includeNotSeenSince] Whether to include apps that
   * were soft deleted
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ApplicationInfoListApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getFilteredListOfApplicationsWithHttpOperationResponse(body: models.ApplicationRegistrationQueryApiModel, options?: { pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationInfoListApiModel>>;

  /**
   * @summary Get filtered list of applications
   *
   * Get a list of applications filtered using the specified query parameters.
   * The returned model can contain a continuation token if more results are
   * available. Call the GetListOfApplications operation using the token to
   * retrieve more results.
   *
   * @param {object} body Applications Query model
   *
   * @param {string} [body.applicationType] Possible values include: 'Server',
   * 'Client', 'ClientAndServer', 'DiscoveryServer'
   *
   * @param {string} [body.applicationUri] Application uri
   *
   * @param {string} [body.productUri] Product uri
   *
   * @param {string} [body.applicationName] Name of application
   *
   * @param {string} [body.locale] Locale of application name - default is "en"
   *
   * @param {string} [body.capability] Application capability to query with
   *
   * @param {string} [body.discoveryProfileUri] Discovery profile uri
   *
   * @param {string} [body.gatewayServerUri] Gateway server uri
   *
   * @param {string} [body.siteOrGatewayId] Supervisor or site the application
   * belongs to.
   *
   * @param {boolean} [body.includeNotSeenSince] Whether to include apps that
   * were soft deleted
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ApplicationInfoListApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ApplicationInfoListApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ApplicationInfoListApiModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getFilteredListOfApplications(body: models.ApplicationRegistrationQueryApiModel, options?: { pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationInfoListApiModel>;
  getFilteredListOfApplications(body: models.ApplicationRegistrationQueryApiModel, callback: ServiceCallback<models.ApplicationInfoListApiModel>): void;
  getFilteredListOfApplications(body: models.ApplicationRegistrationQueryApiModel, options: { pageSize? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationInfoListApiModel>): void;


  /**
   * @summary Query applications by id.
   *
   * A query model which supports the OPC UA Global Discovery Server query.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.body]
   *
   * @param {number} [options.body.startingRecordId] Starting record id
   *
   * @param {number} [options.body.maxRecordsToReturn] Max records to return
   *
   * @param {string} [options.body.applicationName] Application name
   *
   * @param {string} [options.body.applicationUri] Application uri
   *
   * @param {string} [options.body.applicationType] Possible values include:
   * 'Server', 'Client', 'ClientAndServer', 'DiscoveryServer'
   *
   * @param {string} [options.body.productUri] Product uri
   *
   * @param {array} [options.body.serverCapabilities] Server capabilities
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ApplicationRecordListApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  queryApplicationsByIdWithHttpOperationResponse(options?: { body? : models.ApplicationRecordQueryApiModel, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ApplicationRecordListApiModel>>;

  /**
   * @summary Query applications by id.
   *
   * A query model which supports the OPC UA Global Discovery Server query.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.body]
   *
   * @param {number} [options.body.startingRecordId] Starting record id
   *
   * @param {number} [options.body.maxRecordsToReturn] Max records to return
   *
   * @param {string} [options.body.applicationName] Application name
   *
   * @param {string} [options.body.applicationUri] Application uri
   *
   * @param {string} [options.body.applicationType] Possible values include:
   * 'Server', 'Client', 'ClientAndServer', 'DiscoveryServer'
   *
   * @param {string} [options.body.productUri] Product uri
   *
   * @param {array} [options.body.serverCapabilities] Server capabilities
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ApplicationRecordListApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ApplicationRecordListApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ApplicationRecordListApiModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  queryApplicationsById(options?: { body? : models.ApplicationRecordQueryApiModel, customHeaders? : { [headerName: string]: string; } }): Promise<models.ApplicationRecordListApiModel>;
  queryApplicationsById(callback: ServiceCallback<models.ApplicationRecordListApiModel>): void;
  queryApplicationsById(options: { body? : models.ApplicationRecordQueryApiModel, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ApplicationRecordListApiModel>): void;


  /**
   * @summary Subscribe for application events
   *
   * Register a client to receive application events through SignalR.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.body] The user that will receive application
   * events.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  subscribeWithHttpOperationResponse(options?: { body? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Subscribe for application events
   *
   * Register a client to receive application events through SignalR.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.body] The user that will receive application
   * events.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  subscribe(options?: { body? : string, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  subscribe(callback: ServiceCallback<void>): void;
  subscribe(options: { body? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Unsubscribe from application events
   *
   * Unregister a user and stop it from receiving events.
   *
   * @param {string} userId The user id that will not receive any more events
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  unsubscribeWithHttpOperationResponse(userId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Unsubscribe from application events
   *
   * Unregister a user and stop it from receiving events.
   *
   * @param {string} userId The user id that will not receive any more events
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  unsubscribe(userId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  unsubscribe(userId: string, callback: ServiceCallback<void>): void;
  unsubscribe(userId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Get discoverer registration information
   *
   * Returns a discoverer's registration and connectivity information. A
   * discoverer id corresponds to the twin modules module identity.
   *
   * @param {string} discovererId Discoverer identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DiscovererApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getDiscovererWithHttpOperationResponse(discovererId: string, options?: { onlyServerState? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiscovererApiModel>>;

  /**
   * @summary Get discoverer registration information
   *
   * Returns a discoverer's registration and connectivity information. A
   * discoverer id corresponds to the twin modules module identity.
   *
   * @param {string} discovererId Discoverer identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {DiscovererApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {DiscovererApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DiscovererApiModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getDiscoverer(discovererId: string, options?: { onlyServerState? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.DiscovererApiModel>;
  getDiscoverer(discovererId: string, callback: ServiceCallback<models.DiscovererApiModel>): void;
  getDiscoverer(discovererId: string, options: { onlyServerState? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiscovererApiModel>): void;


  /**
   * @summary Update discoverer information
   *
   * Allows a caller to configure recurring discovery runs on the twin module
   * identified by the discoverer id or update site information.
   *
   * @param {string} discovererId discoverer identifier
   *
   * @param {object} body Patch request
   *
   * @param {string} [body.siteId] Site the discoverer is part of
   *
   * @param {string} [body.discovery] Possible values include: 'Off', 'Local',
   * 'Network', 'Fast', 'Scan'
   *
   * @param {object} [body.discoveryConfig]
   *
   * @param {string} [body.discoveryConfig.addressRangesToScan] Address ranges to
   * scan (null == all wired nics)
   *
   * @param {number} [body.discoveryConfig.networkProbeTimeoutMs] Network probe
   * timeout
   *
   * @param {number} [body.discoveryConfig.maxNetworkProbes] Max network probes
   * that should ever run.
   *
   * @param {string} [body.discoveryConfig.portRangesToScan] Port ranges to scan
   * (null == all unassigned)
   *
   * @param {number} [body.discoveryConfig.portProbeTimeoutMs] Port probe timeout
   *
   * @param {number} [body.discoveryConfig.maxPortProbes] Max port probes that
   * should ever run.
   *
   * @param {number} [body.discoveryConfig.minPortProbesPercent] Probes that must
   * always be there as percent of max.
   *
   * @param {number} [body.discoveryConfig.idleTimeBetweenScansSec] Delay time
   * between discovery sweeps in seconds
   *
   * @param {array} [body.discoveryConfig.discoveryUrls] List of preset discovery
   * urls to use
   *
   * @param {array} [body.discoveryConfig.locales] List of locales to filter with
   * during discovery
   *
   * @param {object} [body.discoveryConfig.activationFilter]
   *
   * @param {array} [body.discoveryConfig.activationFilter.trustLists]
   * Certificate trust list identifiers to use for
   * activation, if null, all certificates are
   * trusted.  If empty list, no certificates are
   * trusted which is equal to no filter.
   *
   * @param {array} [body.discoveryConfig.activationFilter.securityPolicies]
   * Endpoint security policies to filter against.
   * If set to null, all policies are in scope.
   *
   * @param {string} [body.discoveryConfig.activationFilter.securityMode]
   * Possible values include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
   *
   * @param {string} [body.logLevel] Possible values include: 'Error',
   * 'Information', 'Debug', 'Verbose'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateDiscovererWithHttpOperationResponse(discovererId: string, body: models.DiscovererUpdateApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Update discoverer information
   *
   * Allows a caller to configure recurring discovery runs on the twin module
   * identified by the discoverer id or update site information.
   *
   * @param {string} discovererId discoverer identifier
   *
   * @param {object} body Patch request
   *
   * @param {string} [body.siteId] Site the discoverer is part of
   *
   * @param {string} [body.discovery] Possible values include: 'Off', 'Local',
   * 'Network', 'Fast', 'Scan'
   *
   * @param {object} [body.discoveryConfig]
   *
   * @param {string} [body.discoveryConfig.addressRangesToScan] Address ranges to
   * scan (null == all wired nics)
   *
   * @param {number} [body.discoveryConfig.networkProbeTimeoutMs] Network probe
   * timeout
   *
   * @param {number} [body.discoveryConfig.maxNetworkProbes] Max network probes
   * that should ever run.
   *
   * @param {string} [body.discoveryConfig.portRangesToScan] Port ranges to scan
   * (null == all unassigned)
   *
   * @param {number} [body.discoveryConfig.portProbeTimeoutMs] Port probe timeout
   *
   * @param {number} [body.discoveryConfig.maxPortProbes] Max port probes that
   * should ever run.
   *
   * @param {number} [body.discoveryConfig.minPortProbesPercent] Probes that must
   * always be there as percent of max.
   *
   * @param {number} [body.discoveryConfig.idleTimeBetweenScansSec] Delay time
   * between discovery sweeps in seconds
   *
   * @param {array} [body.discoveryConfig.discoveryUrls] List of preset discovery
   * urls to use
   *
   * @param {array} [body.discoveryConfig.locales] List of locales to filter with
   * during discovery
   *
   * @param {object} [body.discoveryConfig.activationFilter]
   *
   * @param {array} [body.discoveryConfig.activationFilter.trustLists]
   * Certificate trust list identifiers to use for
   * activation, if null, all certificates are
   * trusted.  If empty list, no certificates are
   * trusted which is equal to no filter.
   *
   * @param {array} [body.discoveryConfig.activationFilter.securityPolicies]
   * Endpoint security policies to filter against.
   * If set to null, all policies are in scope.
   *
   * @param {string} [body.discoveryConfig.activationFilter.securityMode]
   * Possible values include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
   *
   * @param {string} [body.logLevel] Possible values include: 'Error',
   * 'Information', 'Debug', 'Verbose'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateDiscoverer(discovererId: string, body: models.DiscovererUpdateApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  updateDiscoverer(discovererId: string, body: models.DiscovererUpdateApiModel, callback: ServiceCallback<void>): void;
  updateDiscoverer(discovererId: string, body: models.DiscovererUpdateApiModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Enable server discovery
   *
   * Allows a caller to configure recurring discovery runs on the discovery
   * module identified by the module id.
   *
   * @param {string} discovererId discoverer identifier
   *
   * @param {string} mode Discovery mode. Possible values include: 'Off',
   * 'Local', 'Network', 'Fast', 'Scan'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.body] Discovery configuration
   *
   * @param {string} [options.body.addressRangesToScan] Address ranges to scan
   * (null == all wired nics)
   *
   * @param {number} [options.body.networkProbeTimeoutMs] Network probe timeout
   *
   * @param {number} [options.body.maxNetworkProbes] Max network probes that
   * should ever run.
   *
   * @param {string} [options.body.portRangesToScan] Port ranges to scan (null ==
   * all unassigned)
   *
   * @param {number} [options.body.portProbeTimeoutMs] Port probe timeout
   *
   * @param {number} [options.body.maxPortProbes] Max port probes that should
   * ever run.
   *
   * @param {number} [options.body.minPortProbesPercent] Probes that must always
   * be there as percent of max.
   *
   * @param {number} [options.body.idleTimeBetweenScansSec] Delay time between
   * discovery sweeps in seconds
   *
   * @param {array} [options.body.discoveryUrls] List of preset discovery urls to
   * use
   *
   * @param {array} [options.body.locales] List of locales to filter with during
   * discovery
   *
   * @param {object} [options.body.activationFilter]
   *
   * @param {array} [options.body.activationFilter.trustLists] Certificate trust
   * list identifiers to use for
   * activation, if null, all certificates are
   * trusted.  If empty list, no certificates are
   * trusted which is equal to no filter.
   *
   * @param {array} [options.body.activationFilter.securityPolicies] Endpoint
   * security policies to filter against.
   * If set to null, all policies are in scope.
   *
   * @param {string} [options.body.activationFilter.securityMode] Possible values
   * include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  setDiscoveryModeWithHttpOperationResponse(discovererId: string, mode: string, options?: { body? : models.DiscoveryConfigApiModel, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Enable server discovery
   *
   * Allows a caller to configure recurring discovery runs on the discovery
   * module identified by the module id.
   *
   * @param {string} discovererId discoverer identifier
   *
   * @param {string} mode Discovery mode. Possible values include: 'Off',
   * 'Local', 'Network', 'Fast', 'Scan'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.body] Discovery configuration
   *
   * @param {string} [options.body.addressRangesToScan] Address ranges to scan
   * (null == all wired nics)
   *
   * @param {number} [options.body.networkProbeTimeoutMs] Network probe timeout
   *
   * @param {number} [options.body.maxNetworkProbes] Max network probes that
   * should ever run.
   *
   * @param {string} [options.body.portRangesToScan] Port ranges to scan (null ==
   * all unassigned)
   *
   * @param {number} [options.body.portProbeTimeoutMs] Port probe timeout
   *
   * @param {number} [options.body.maxPortProbes] Max port probes that should
   * ever run.
   *
   * @param {number} [options.body.minPortProbesPercent] Probes that must always
   * be there as percent of max.
   *
   * @param {number} [options.body.idleTimeBetweenScansSec] Delay time between
   * discovery sweeps in seconds
   *
   * @param {array} [options.body.discoveryUrls] List of preset discovery urls to
   * use
   *
   * @param {array} [options.body.locales] List of locales to filter with during
   * discovery
   *
   * @param {object} [options.body.activationFilter]
   *
   * @param {array} [options.body.activationFilter.trustLists] Certificate trust
   * list identifiers to use for
   * activation, if null, all certificates are
   * trusted.  If empty list, no certificates are
   * trusted which is equal to no filter.
   *
   * @param {array} [options.body.activationFilter.securityPolicies] Endpoint
   * security policies to filter against.
   * If set to null, all policies are in scope.
   *
   * @param {string} [options.body.activationFilter.securityMode] Possible values
   * include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  setDiscoveryMode(discovererId: string, mode: string, options?: { body? : models.DiscoveryConfigApiModel, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  setDiscoveryMode(discovererId: string, mode: string, callback: ServiceCallback<void>): void;
  setDiscoveryMode(discovererId: string, mode: string, options: { body? : models.DiscoveryConfigApiModel, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Get list of discoverers
   *
   * Get all registered discoverers and therefore twin modules in paged form. The
   * returned model can contain a continuation token if more results are
   * available. Call this operation again using the token to retrieve more
   * results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {string} [options.continuationToken] Optional Continuation token
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DiscovererListApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getListOfDiscoverersWithHttpOperationResponse(options?: { onlyServerState? : boolean, continuationToken? : string, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiscovererListApiModel>>;

  /**
   * @summary Get list of discoverers
   *
   * Get all registered discoverers and therefore twin modules in paged form. The
   * returned model can contain a continuation token if more results are
   * available. Call this operation again using the token to retrieve more
   * results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {string} [options.continuationToken] Optional Continuation token
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {DiscovererListApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {DiscovererListApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DiscovererListApiModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getListOfDiscoverers(options?: { onlyServerState? : boolean, continuationToken? : string, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.DiscovererListApiModel>;
  getListOfDiscoverers(callback: ServiceCallback<models.DiscovererListApiModel>): void;
  getListOfDiscoverers(options: { onlyServerState? : boolean, continuationToken? : string, pageSize? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiscovererListApiModel>): void;


  /**
   * @summary Query discoverers
   *
   * Get all discoverers that match a specified query. The returned model can
   * contain a continuation token if more results are available. Call the
   * GetListOfDiscoverers operation using the token to retrieve more results.
   *
   * @param {object} body Discoverers query model
   *
   * @param {string} [body.siteId] Site of the discoverer
   *
   * @param {string} [body.discovery] Possible values include: 'Off', 'Local',
   * 'Network', 'Fast', 'Scan'
   *
   * @param {boolean} [body.connected] Included connected or disconnected
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DiscovererListApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  queryDiscoverersWithHttpOperationResponse(body: models.DiscovererQueryApiModel, options?: { onlyServerState? : boolean, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiscovererListApiModel>>;

  /**
   * @summary Query discoverers
   *
   * Get all discoverers that match a specified query. The returned model can
   * contain a continuation token if more results are available. Call the
   * GetListOfDiscoverers operation using the token to retrieve more results.
   *
   * @param {object} body Discoverers query model
   *
   * @param {string} [body.siteId] Site of the discoverer
   *
   * @param {string} [body.discovery] Possible values include: 'Off', 'Local',
   * 'Network', 'Fast', 'Scan'
   *
   * @param {boolean} [body.connected] Included connected or disconnected
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {DiscovererListApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {DiscovererListApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DiscovererListApiModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  queryDiscoverers(body: models.DiscovererQueryApiModel, options?: { onlyServerState? : boolean, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.DiscovererListApiModel>;
  queryDiscoverers(body: models.DiscovererQueryApiModel, callback: ServiceCallback<models.DiscovererListApiModel>): void;
  queryDiscoverers(body: models.DiscovererQueryApiModel, options: { onlyServerState? : boolean, pageSize? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiscovererListApiModel>): void;


  /**
   * @summary Get filtered list of discoverers
   *
   * Get a list of discoverers filtered using the specified query parameters. The
   * returned model can contain a continuation token if more results are
   * available. Call the GetListOfDiscoverers operation using the token to
   * retrieve more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.siteId] Site of the discoverer
   *
   * @param {string} [options.discovery] Discovery mode of discoverer. Possible
   * values include: 'Off', 'Local', 'Network', 'Fast', 'Scan'
   *
   * @param {boolean} [options.connected] Included connected or disconnected
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DiscovererListApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getFilteredListOfDiscoverersWithHttpOperationResponse(options?: { siteId? : string, discovery? : string, connected? : boolean, onlyServerState? : boolean, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.DiscovererListApiModel>>;

  /**
   * @summary Get filtered list of discoverers
   *
   * Get a list of discoverers filtered using the specified query parameters. The
   * returned model can contain a continuation token if more results are
   * available. Call the GetListOfDiscoverers operation using the token to
   * retrieve more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.siteId] Site of the discoverer
   *
   * @param {string} [options.discovery] Discovery mode of discoverer. Possible
   * values include: 'Off', 'Local', 'Network', 'Fast', 'Scan'
   *
   * @param {boolean} [options.connected] Included connected or disconnected
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {DiscovererListApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {DiscovererListApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DiscovererListApiModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getFilteredListOfDiscoverers(options?: { siteId? : string, discovery? : string, connected? : boolean, onlyServerState? : boolean, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.DiscovererListApiModel>;
  getFilteredListOfDiscoverers(callback: ServiceCallback<models.DiscovererListApiModel>): void;
  getFilteredListOfDiscoverers(options: { siteId? : string, discovery? : string, connected? : boolean, onlyServerState? : boolean, pageSize? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.DiscovererListApiModel>): void;


  /**
   * @summary Subscribe to discoverer registry events
   *
   * Register a user to receive discoverer events through SignalR.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.body] The user id that will receive discoverer
   * events.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  subscribe1WithHttpOperationResponse(options?: { body? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Subscribe to discoverer registry events
   *
   * Register a user to receive discoverer events through SignalR.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.body] The user id that will receive discoverer
   * events.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  subscribe1(options?: { body? : string, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  subscribe1(callback: ServiceCallback<void>): void;
  subscribe1(options: { body? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Unsubscribe registry events
   *
   * Unregister a user and stop it from receiving discoverer events.
   *
   * @param {string} userId The user id that will not receive any more discoverer
   * events
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  unsubscribe1WithHttpOperationResponse(userId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Unsubscribe registry events
   *
   * Unregister a user and stop it from receiving discoverer events.
   *
   * @param {string} userId The user id that will not receive any more discoverer
   * events
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  unsubscribe1(userId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  unsubscribe1(userId: string, callback: ServiceCallback<void>): void;
  unsubscribe1(userId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Subscribe to discovery progress from discoverer
   *
   * Register a client to receive discovery progress events through SignalR from
   * a particular discoverer.
   *
   * @param {string} discovererId The discoverer to subscribe to
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.body] The user id that will receive discovery
   * events.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  subscribeByDiscovererIdWithHttpOperationResponse(discovererId: string, options?: { body? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Subscribe to discovery progress from discoverer
   *
   * Register a client to receive discovery progress events through SignalR from
   * a particular discoverer.
   *
   * @param {string} discovererId The discoverer to subscribe to
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.body] The user id that will receive discovery
   * events.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  subscribeByDiscovererId(discovererId: string, options?: { body? : string, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  subscribeByDiscovererId(discovererId: string, callback: ServiceCallback<void>): void;
  subscribeByDiscovererId(discovererId: string, options: { body? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Subscribe to discovery progress for a request
   *
   * Register a client to receive discovery progress events through SignalR for a
   * particular request.
   *
   * @param {string} requestId The request to monitor
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.body] The user id that will receive discovery
   * events.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  subscribeByRequestIdWithHttpOperationResponse(requestId: string, options?: { body? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Subscribe to discovery progress for a request
   *
   * Register a client to receive discovery progress events through SignalR for a
   * particular request.
   *
   * @param {string} requestId The request to monitor
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.body] The user id that will receive discovery
   * events.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  subscribeByRequestId(requestId: string, options?: { body? : string, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  subscribeByRequestId(requestId: string, callback: ServiceCallback<void>): void;
  subscribeByRequestId(requestId: string, options: { body? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Unsubscribe from discovery progress for a request.
   *
   * Unregister a client and stop it from receiving discovery events for a
   * particular request.
   *
   * @param {string} requestId The request to unsubscribe from
   *
   * @param {string} userId The user id that will not receive any more discovery
   * progress
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  unsubscribeByRequestIdWithHttpOperationResponse(requestId: string, userId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Unsubscribe from discovery progress for a request.
   *
   * Unregister a client and stop it from receiving discovery events for a
   * particular request.
   *
   * @param {string} requestId The request to unsubscribe from
   *
   * @param {string} userId The user id that will not receive any more discovery
   * progress
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  unsubscribeByRequestId(requestId: string, userId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  unsubscribeByRequestId(requestId: string, userId: string, callback: ServiceCallback<void>): void;
  unsubscribeByRequestId(requestId: string, userId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Unsubscribe from discovery progress from discoverer.
   *
   * Unregister a client and stop it from receiving discovery events.
   *
   * @param {string} discovererId The discoverer to unsubscribe from
   *
   * @param {string} userId The user id that will not receive any more discovery
   * progress
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  unsubscribeByDiscovererIdWithHttpOperationResponse(discovererId: string, userId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Unsubscribe from discovery progress from discoverer.
   *
   * Unregister a client and stop it from receiving discovery events.
   *
   * @param {string} discovererId The discoverer to unsubscribe from
   *
   * @param {string} userId The user id that will not receive any more discovery
   * progress
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  unsubscribeByDiscovererId(discovererId: string, userId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  unsubscribeByDiscovererId(discovererId: string, userId: string, callback: ServiceCallback<void>): void;
  unsubscribeByDiscovererId(discovererId: string, userId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Activate endpoint
   *
   * Activates an endpoint for subsequent use in twin service. All endpoints must
   * be activated using this API or through a activation filter during
   * application registration or discovery.
   *
   * @param {string} endpointId endpoint identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  activateEndpointWithHttpOperationResponse(endpointId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Activate endpoint
   *
   * Activates an endpoint for subsequent use in twin service. All endpoints must
   * be activated using this API or through a activation filter during
   * application registration or discovery.
   *
   * @param {string} endpointId endpoint identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  activateEndpoint(endpointId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  activateEndpoint(endpointId: string, callback: ServiceCallback<void>): void;
  activateEndpoint(endpointId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Get endpoint information
   *
   * Gets information about an endpoint.
   *
   * @param {string} endpointId endpoint identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<EndpointInfoApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getEndpointWithHttpOperationResponse(endpointId: string, options?: { onlyServerState? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EndpointInfoApiModel>>;

  /**
   * @summary Get endpoint information
   *
   * Gets information about an endpoint.
   *
   * @param {string} endpointId endpoint identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {EndpointInfoApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {EndpointInfoApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link EndpointInfoApiModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getEndpoint(endpointId: string, options?: { onlyServerState? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.EndpointInfoApiModel>;
  getEndpoint(endpointId: string, callback: ServiceCallback<models.EndpointInfoApiModel>): void;
  getEndpoint(endpointId: string, options: { onlyServerState? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EndpointInfoApiModel>): void;


  /**
   * @summary Get list of endpoints
   *
   * Get all registered endpoints in paged form. The returned model can contain a
   * continuation token if more results are available. Call this operation again
   * using the token to retrieve more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {string} [options.continuationToken] Optional Continuation token
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<EndpointInfoListApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getListOfEndpointsWithHttpOperationResponse(options?: { onlyServerState? : boolean, continuationToken? : string, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EndpointInfoListApiModel>>;

  /**
   * @summary Get list of endpoints
   *
   * Get all registered endpoints in paged form. The returned model can contain a
   * continuation token if more results are available. Call this operation again
   * using the token to retrieve more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {string} [options.continuationToken] Optional Continuation token
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {EndpointInfoListApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {EndpointInfoListApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link EndpointInfoListApiModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getListOfEndpoints(options?: { onlyServerState? : boolean, continuationToken? : string, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.EndpointInfoListApiModel>;
  getListOfEndpoints(callback: ServiceCallback<models.EndpointInfoListApiModel>): void;
  getListOfEndpoints(options: { onlyServerState? : boolean, continuationToken? : string, pageSize? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EndpointInfoListApiModel>): void;


  /**
   * @summary Query endpoints
   *
   * Return endpoints that match the specified query. The returned model can
   * contain a continuation token if more results are available. Call the
   * GetListOfEndpoints operation using the token to retrieve more results.
   *
   * @param {object} body Query to match
   *
   * @param {string} [body.url] Endoint url for direct server access
   *
   * @param {buffer} [body.certificate] Certificate of the endpoint
   *
   * @param {string} [body.securityMode] Possible values include: 'Best', 'Sign',
   * 'SignAndEncrypt', 'None'
   *
   * @param {string} [body.securityPolicy] Security policy uri
   *
   * @param {boolean} [body.activated] Whether the endpoint was activated
   *
   * @param {boolean} [body.connected] Whether the endpoint is connected on
   * supervisor.
   *
   * @param {string} [body.endpointState] Possible values include: 'Connecting',
   * 'NotReachable', 'Busy', 'NoTrust', 'CertificateInvalid', 'Ready', 'Error'
   *
   * @param {boolean} [body.includeNotSeenSince] Whether to include endpoints
   * that were soft deleted
   *
   * @param {string} [body.discovererId] Discoverer id to filter with
   *
   * @param {string} [body.applicationId] Application id to filter
   *
   * @param {string} [body.supervisorId] Supervisor id to filter with
   *
   * @param {string} [body.siteOrGatewayId] Site or gateway id to filter with
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<EndpointInfoListApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  queryEndpointsWithHttpOperationResponse(body: models.EndpointRegistrationQueryApiModel, options?: { onlyServerState? : boolean, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EndpointInfoListApiModel>>;

  /**
   * @summary Query endpoints
   *
   * Return endpoints that match the specified query. The returned model can
   * contain a continuation token if more results are available. Call the
   * GetListOfEndpoints operation using the token to retrieve more results.
   *
   * @param {object} body Query to match
   *
   * @param {string} [body.url] Endoint url for direct server access
   *
   * @param {buffer} [body.certificate] Certificate of the endpoint
   *
   * @param {string} [body.securityMode] Possible values include: 'Best', 'Sign',
   * 'SignAndEncrypt', 'None'
   *
   * @param {string} [body.securityPolicy] Security policy uri
   *
   * @param {boolean} [body.activated] Whether the endpoint was activated
   *
   * @param {boolean} [body.connected] Whether the endpoint is connected on
   * supervisor.
   *
   * @param {string} [body.endpointState] Possible values include: 'Connecting',
   * 'NotReachable', 'Busy', 'NoTrust', 'CertificateInvalid', 'Ready', 'Error'
   *
   * @param {boolean} [body.includeNotSeenSince] Whether to include endpoints
   * that were soft deleted
   *
   * @param {string} [body.discovererId] Discoverer id to filter with
   *
   * @param {string} [body.applicationId] Application id to filter
   *
   * @param {string} [body.supervisorId] Supervisor id to filter with
   *
   * @param {string} [body.siteOrGatewayId] Site or gateway id to filter with
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {EndpointInfoListApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {EndpointInfoListApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link EndpointInfoListApiModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  queryEndpoints(body: models.EndpointRegistrationQueryApiModel, options?: { onlyServerState? : boolean, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.EndpointInfoListApiModel>;
  queryEndpoints(body: models.EndpointRegistrationQueryApiModel, callback: ServiceCallback<models.EndpointInfoListApiModel>): void;
  queryEndpoints(body: models.EndpointRegistrationQueryApiModel, options: { onlyServerState? : boolean, pageSize? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EndpointInfoListApiModel>): void;


  /**
   * @summary Get filtered list of endpoints
   *
   * Get a list of endpoints filtered using the specified query parameters. The
   * returned model can contain a continuation token if more results are
   * available. Call the GetListOfEndpoints operation using the token to retrieve
   * more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.url] Endoint url for direct server access
   *
   * @param {buffer} [options.certificate] Certificate of the endpoint
   *
   * @param {string} [options.securityMode] Security Mode. Possible values
   * include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
   *
   * @param {string} [options.securityPolicy] Security policy uri
   *
   * @param {boolean} [options.activated] Whether the endpoint was activated
   *
   * @param {boolean} [options.connected] Whether the endpoint is connected on
   * supervisor.
   *
   * @param {string} [options.endpointState] The last state of the the activated
   * endpoint. Possible values include: 'Connecting', 'NotReachable', 'Busy',
   * 'NoTrust', 'CertificateInvalid', 'Ready', 'Error'
   *
   * @param {boolean} [options.includeNotSeenSince] Whether to include endpoints
   * that were soft deleted
   *
   * @param {string} [options.discovererId] Discoverer id to filter with
   *
   * @param {string} [options.applicationId] Application id to filter
   *
   * @param {string} [options.supervisorId] Supervisor id to filter with
   *
   * @param {string} [options.siteOrGatewayId] Site or gateway id to filter with
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<EndpointInfoListApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getFilteredListOfEndpointsWithHttpOperationResponse(options?: { url? : string, certificate? : Buffer, securityMode? : string, securityPolicy? : string, activated? : boolean, connected? : boolean, endpointState? : string, includeNotSeenSince? : boolean, discovererId? : string, applicationId? : string, supervisorId? : string, siteOrGatewayId? : string, onlyServerState? : boolean, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.EndpointInfoListApiModel>>;

  /**
   * @summary Get filtered list of endpoints
   *
   * Get a list of endpoints filtered using the specified query parameters. The
   * returned model can contain a continuation token if more results are
   * available. Call the GetListOfEndpoints operation using the token to retrieve
   * more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.url] Endoint url for direct server access
   *
   * @param {buffer} [options.certificate] Certificate of the endpoint
   *
   * @param {string} [options.securityMode] Security Mode. Possible values
   * include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
   *
   * @param {string} [options.securityPolicy] Security policy uri
   *
   * @param {boolean} [options.activated] Whether the endpoint was activated
   *
   * @param {boolean} [options.connected] Whether the endpoint is connected on
   * supervisor.
   *
   * @param {string} [options.endpointState] The last state of the the activated
   * endpoint. Possible values include: 'Connecting', 'NotReachable', 'Busy',
   * 'NoTrust', 'CertificateInvalid', 'Ready', 'Error'
   *
   * @param {boolean} [options.includeNotSeenSince] Whether to include endpoints
   * that were soft deleted
   *
   * @param {string} [options.discovererId] Discoverer id to filter with
   *
   * @param {string} [options.applicationId] Application id to filter
   *
   * @param {string} [options.supervisorId] Supervisor id to filter with
   *
   * @param {string} [options.siteOrGatewayId] Site or gateway id to filter with
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {EndpointInfoListApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {EndpointInfoListApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link EndpointInfoListApiModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getFilteredListOfEndpoints(options?: { url? : string, certificate? : Buffer, securityMode? : string, securityPolicy? : string, activated? : boolean, connected? : boolean, endpointState? : string, includeNotSeenSince? : boolean, discovererId? : string, applicationId? : string, supervisorId? : string, siteOrGatewayId? : string, onlyServerState? : boolean, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.EndpointInfoListApiModel>;
  getFilteredListOfEndpoints(callback: ServiceCallback<models.EndpointInfoListApiModel>): void;
  getFilteredListOfEndpoints(options: { url? : string, certificate? : Buffer, securityMode? : string, securityPolicy? : string, activated? : boolean, connected? : boolean, endpointState? : string, includeNotSeenSince? : boolean, discovererId? : string, applicationId? : string, supervisorId? : string, siteOrGatewayId? : string, onlyServerState? : boolean, pageSize? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.EndpointInfoListApiModel>): void;


  /**
   * @summary Deactivate endpoint
   *
   * Deactivates the endpoint and disable access through twin service.
   *
   * @param {string} endpointId endpoint identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deactivateEndpointWithHttpOperationResponse(endpointId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Deactivate endpoint
   *
   * Deactivates the endpoint and disable access through twin service.
   *
   * @param {string} endpointId endpoint identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deactivateEndpoint(endpointId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  deactivateEndpoint(endpointId: string, callback: ServiceCallback<void>): void;
  deactivateEndpoint(endpointId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Subscribe for endpoint events
   *
   * Register a user to receive endpoint events through SignalR.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.body] The user id that will receive endpoint
   * events.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  subscribe2WithHttpOperationResponse(options?: { body? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Subscribe for endpoint events
   *
   * Register a user to receive endpoint events through SignalR.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.body] The user id that will receive endpoint
   * events.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  subscribe2(options?: { body? : string, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  subscribe2(callback: ServiceCallback<void>): void;
  subscribe2(options: { body? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Unsubscribe from endpoint events
   *
   * Unregister a user and stop it from receiving endpoint events.
   *
   * @param {string} userId The user id that will not receive any more endpoint
   * events
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  unsubscribe2WithHttpOperationResponse(userId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Unsubscribe from endpoint events
   *
   * Unregister a user and stop it from receiving endpoint events.
   *
   * @param {string} userId The user id that will not receive any more endpoint
   * events
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  unsubscribe2(userId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  unsubscribe2(userId: string, callback: ServiceCallback<void>): void;
  unsubscribe2(userId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Get Gateway registration information
   *
   * Returns a Gateway's registration and connectivity information. A Gateway id
   * corresponds to the twin modules module identity.
   *
   * @param {string} gatewayId Gateway identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GatewayInfoApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getGatewayWithHttpOperationResponse(gatewayId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GatewayInfoApiModel>>;

  /**
   * @summary Get Gateway registration information
   *
   * Returns a Gateway's registration and connectivity information. A Gateway id
   * corresponds to the twin modules module identity.
   *
   * @param {string} gatewayId Gateway identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {GatewayInfoApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {GatewayInfoApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GatewayInfoApiModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getGateway(gatewayId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.GatewayInfoApiModel>;
  getGateway(gatewayId: string, callback: ServiceCallback<models.GatewayInfoApiModel>): void;
  getGateway(gatewayId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GatewayInfoApiModel>): void;


  /**
   * @summary Update Gateway configuration
   *
   * Allows a caller to configure operations on the Gateway module identified by
   * the Gateway id.
   *
   * @param {string} gatewayId Gateway identifier
   *
   * @param {object} body Patch request
   *
   * @param {string} [body.siteId] Site of the Gateway
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateGatewayWithHttpOperationResponse(gatewayId: string, body: models.GatewayUpdateApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Update Gateway configuration
   *
   * Allows a caller to configure operations on the Gateway module identified by
   * the Gateway id.
   *
   * @param {string} gatewayId Gateway identifier
   *
   * @param {object} body Patch request
   *
   * @param {string} [body.siteId] Site of the Gateway
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateGateway(gatewayId: string, body: models.GatewayUpdateApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  updateGateway(gatewayId: string, body: models.GatewayUpdateApiModel, callback: ServiceCallback<void>): void;
  updateGateway(gatewayId: string, body: models.GatewayUpdateApiModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Get list of Gateways
   *
   * Get all registered Gateways and therefore twin modules in paged form. The
   * returned model can contain a continuation token if more results are
   * available. Call this operation again using the token to retrieve more
   * results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.continuationToken] Optional Continuation token
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GatewayListApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getListOfGatewayWithHttpOperationResponse(options?: { continuationToken? : string, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GatewayListApiModel>>;

  /**
   * @summary Get list of Gateways
   *
   * Get all registered Gateways and therefore twin modules in paged form. The
   * returned model can contain a continuation token if more results are
   * available. Call this operation again using the token to retrieve more
   * results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.continuationToken] Optional Continuation token
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {GatewayListApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {GatewayListApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GatewayListApiModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getListOfGateway(options?: { continuationToken? : string, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.GatewayListApiModel>;
  getListOfGateway(callback: ServiceCallback<models.GatewayListApiModel>): void;
  getListOfGateway(options: { continuationToken? : string, pageSize? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GatewayListApiModel>): void;


  /**
   * @summary Query Gateways
   *
   * Get all Gateways that match a specified query. The returned model can
   * contain a continuation token if more results are available. Call the
   * GetListOfGateway operation using the token to retrieve more results.
   *
   * @param {object} body Gateway query model
   *
   * @param {string} [body.siteId] Site of the Gateway
   *
   * @param {boolean} [body.connected] Included connected or disconnected
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GatewayListApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  queryGatewayWithHttpOperationResponse(body: models.GatewayQueryApiModel, options?: { pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GatewayListApiModel>>;

  /**
   * @summary Query Gateways
   *
   * Get all Gateways that match a specified query. The returned model can
   * contain a continuation token if more results are available. Call the
   * GetListOfGateway operation using the token to retrieve more results.
   *
   * @param {object} body Gateway query model
   *
   * @param {string} [body.siteId] Site of the Gateway
   *
   * @param {boolean} [body.connected] Included connected or disconnected
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {GatewayListApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {GatewayListApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GatewayListApiModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  queryGateway(body: models.GatewayQueryApiModel, options?: { pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.GatewayListApiModel>;
  queryGateway(body: models.GatewayQueryApiModel, callback: ServiceCallback<models.GatewayListApiModel>): void;
  queryGateway(body: models.GatewayQueryApiModel, options: { pageSize? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GatewayListApiModel>): void;


  /**
   * @summary Get filtered list of Gateways
   *
   * Get a list of Gateways filtered using the specified query parameters. The
   * returned model can contain a continuation token if more results are
   * available. Call the GetListOfGateway operation using the token to retrieve
   * more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.siteId] Site of the Gateway
   *
   * @param {boolean} [options.connected] Included connected or disconnected
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GatewayListApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getFilteredListOfGatewayWithHttpOperationResponse(options?: { siteId? : string, connected? : boolean, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.GatewayListApiModel>>;

  /**
   * @summary Get filtered list of Gateways
   *
   * Get a list of Gateways filtered using the specified query parameters. The
   * returned model can contain a continuation token if more results are
   * available. Call the GetListOfGateway operation using the token to retrieve
   * more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.siteId] Site of the Gateway
   *
   * @param {boolean} [options.connected] Included connected or disconnected
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {GatewayListApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {GatewayListApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GatewayListApiModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getFilteredListOfGateway(options?: { siteId? : string, connected? : boolean, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.GatewayListApiModel>;
  getFilteredListOfGateway(callback: ServiceCallback<models.GatewayListApiModel>): void;
  getFilteredListOfGateway(options: { siteId? : string, connected? : boolean, pageSize? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.GatewayListApiModel>): void;


  /**
   * @summary Subscribe to Gateway registry events
   *
   * Register a user to receive Gateway events through SignalR.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.body] The user id that will receive Gateway events.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  subscribe3WithHttpOperationResponse(options?: { body? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Subscribe to Gateway registry events
   *
   * Register a user to receive Gateway events through SignalR.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.body] The user id that will receive Gateway events.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  subscribe3(options?: { body? : string, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  subscribe3(callback: ServiceCallback<void>): void;
  subscribe3(options: { body? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Unsubscribe registry events
   *
   * Unregister a user and stop it from receiving Gateway events.
   *
   * @param {string} userId The user id that will not receive any more Gateway
   * events
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  unsubscribe3WithHttpOperationResponse(userId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Unsubscribe registry events
   *
   * Unregister a user and stop it from receiving Gateway events.
   *
   * @param {string} userId The user id that will not receive any more Gateway
   * events
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  unsubscribe3(userId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  unsubscribe3(userId: string, callback: ServiceCallback<void>): void;
  unsubscribe3(userId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Get publisher registration information
   *
   * Returns a publisher's registration and connectivity information. A publisher
   * id corresponds to the twin modules module identity.
   *
   * @param {string} publisherId Publisher identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PublisherApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getPublisherWithHttpOperationResponse(publisherId: string, options?: { onlyServerState? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PublisherApiModel>>;

  /**
   * @summary Get publisher registration information
   *
   * Returns a publisher's registration and connectivity information. A publisher
   * id corresponds to the twin modules module identity.
   *
   * @param {string} publisherId Publisher identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {PublisherApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {PublisherApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PublisherApiModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getPublisher(publisherId: string, options?: { onlyServerState? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.PublisherApiModel>;
  getPublisher(publisherId: string, callback: ServiceCallback<models.PublisherApiModel>): void;
  getPublisher(publisherId: string, options: { onlyServerState? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PublisherApiModel>): void;


  /**
   * @summary Update publisher configuration
   *
   * Allows a caller to configure operations on the publisher module identified
   * by the publisher id.
   *
   * @param {string} publisherId Publisher identifier
   *
   * @param {object} body Patch request
   *
   * @param {string} [body.siteId] Site of the publisher
   *
   * @param {object} [body.configuration]
   *
   * @param {object} [body.configuration.capabilities] Capabilities
   *
   * @param {string} [body.configuration.jobCheckInterval] Interval to check job
   *
   * @param {string} [body.configuration.heartbeatInterval] Heartbeat interval
   *
   * @param {number} [body.configuration.maxWorkers] Parallel jobs
   *
   * @param {string} [body.configuration.jobOrchestratorUrl] Job orchestrator
   * endpoint url
   *
   * @param {string} [body.logLevel] Possible values include: 'Error',
   * 'Information', 'Debug', 'Verbose'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updatePublisherWithHttpOperationResponse(publisherId: string, body: models.PublisherUpdateApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Update publisher configuration
   *
   * Allows a caller to configure operations on the publisher module identified
   * by the publisher id.
   *
   * @param {string} publisherId Publisher identifier
   *
   * @param {object} body Patch request
   *
   * @param {string} [body.siteId] Site of the publisher
   *
   * @param {object} [body.configuration]
   *
   * @param {object} [body.configuration.capabilities] Capabilities
   *
   * @param {string} [body.configuration.jobCheckInterval] Interval to check job
   *
   * @param {string} [body.configuration.heartbeatInterval] Heartbeat interval
   *
   * @param {number} [body.configuration.maxWorkers] Parallel jobs
   *
   * @param {string} [body.configuration.jobOrchestratorUrl] Job orchestrator
   * endpoint url
   *
   * @param {string} [body.logLevel] Possible values include: 'Error',
   * 'Information', 'Debug', 'Verbose'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updatePublisher(publisherId: string, body: models.PublisherUpdateApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  updatePublisher(publisherId: string, body: models.PublisherUpdateApiModel, callback: ServiceCallback<void>): void;
  updatePublisher(publisherId: string, body: models.PublisherUpdateApiModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Get list of publishers
   *
   * Get all registered publishers and therefore twin modules in paged form. The
   * returned model can contain a continuation token if more results are
   * available. Call this operation again using the token to retrieve more
   * results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {string} [options.continuationToken] Optional Continuation token
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PublisherListApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getListOfPublisherWithHttpOperationResponse(options?: { onlyServerState? : boolean, continuationToken? : string, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PublisherListApiModel>>;

  /**
   * @summary Get list of publishers
   *
   * Get all registered publishers and therefore twin modules in paged form. The
   * returned model can contain a continuation token if more results are
   * available. Call this operation again using the token to retrieve more
   * results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {string} [options.continuationToken] Optional Continuation token
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {PublisherListApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {PublisherListApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PublisherListApiModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getListOfPublisher(options?: { onlyServerState? : boolean, continuationToken? : string, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.PublisherListApiModel>;
  getListOfPublisher(callback: ServiceCallback<models.PublisherListApiModel>): void;
  getListOfPublisher(options: { onlyServerState? : boolean, continuationToken? : string, pageSize? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PublisherListApiModel>): void;


  /**
   * @summary Query publishers
   *
   * Get all publishers that match a specified query. The returned model can
   * contain a continuation token if more results are available. Call the
   * GetListOfPublisher operation using the token to retrieve more results.
   *
   * @param {object} body Publisher query model
   *
   * @param {string} [body.siteId] Site of the publisher
   *
   * @param {boolean} [body.connected] Included connected or disconnected
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PublisherListApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  queryPublisherWithHttpOperationResponse(body: models.PublisherQueryApiModel, options?: { onlyServerState? : boolean, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PublisherListApiModel>>;

  /**
   * @summary Query publishers
   *
   * Get all publishers that match a specified query. The returned model can
   * contain a continuation token if more results are available. Call the
   * GetListOfPublisher operation using the token to retrieve more results.
   *
   * @param {object} body Publisher query model
   *
   * @param {string} [body.siteId] Site of the publisher
   *
   * @param {boolean} [body.connected] Included connected or disconnected
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {PublisherListApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {PublisherListApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PublisherListApiModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  queryPublisher(body: models.PublisherQueryApiModel, options?: { onlyServerState? : boolean, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.PublisherListApiModel>;
  queryPublisher(body: models.PublisherQueryApiModel, callback: ServiceCallback<models.PublisherListApiModel>): void;
  queryPublisher(body: models.PublisherQueryApiModel, options: { onlyServerState? : boolean, pageSize? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PublisherListApiModel>): void;


  /**
   * @summary Get filtered list of publishers
   *
   * Get a list of publishers filtered using the specified query parameters. The
   * returned model can contain a continuation token if more results are
   * available. Call the GetListOfPublisher operation using the token to retrieve
   * more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.siteId] Site of the publisher
   *
   * @param {boolean} [options.connected] Included connected or disconnected
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PublisherListApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getFilteredListOfPublisherWithHttpOperationResponse(options?: { siteId? : string, connected? : boolean, onlyServerState? : boolean, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.PublisherListApiModel>>;

  /**
   * @summary Get filtered list of publishers
   *
   * Get a list of publishers filtered using the specified query parameters. The
   * returned model can contain a continuation token if more results are
   * available. Call the GetListOfPublisher operation using the token to retrieve
   * more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.siteId] Site of the publisher
   *
   * @param {boolean} [options.connected] Included connected or disconnected
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {PublisherListApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {PublisherListApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PublisherListApiModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getFilteredListOfPublisher(options?: { siteId? : string, connected? : boolean, onlyServerState? : boolean, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.PublisherListApiModel>;
  getFilteredListOfPublisher(callback: ServiceCallback<models.PublisherListApiModel>): void;
  getFilteredListOfPublisher(options: { siteId? : string, connected? : boolean, onlyServerState? : boolean, pageSize? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.PublisherListApiModel>): void;


  /**
   * @summary Subscribe to publisher registry events
   *
   * Register a user to receive publisher events through SignalR.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.body] The user id that will receive publisher
   * events.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  subscribe4WithHttpOperationResponse(options?: { body? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Subscribe to publisher registry events
   *
   * Register a user to receive publisher events through SignalR.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.body] The user id that will receive publisher
   * events.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  subscribe4(options?: { body? : string, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  subscribe4(callback: ServiceCallback<void>): void;
  subscribe4(options: { body? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Unsubscribe registry events
   *
   * Unregister a user and stop it from receiving publisher events.
   *
   * @param {string} userId The user id that will not receive any more publisher
   * events
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  unsubscribe4WithHttpOperationResponse(userId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Unsubscribe registry events
   *
   * Unregister a user and stop it from receiving publisher events.
   *
   * @param {string} userId The user id that will not receive any more publisher
   * events
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  unsubscribe4(userId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  unsubscribe4(userId: string, callback: ServiceCallback<void>): void;
  unsubscribe4(userId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Return the service status in the form of the service status
   * api model.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<StatusResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getStatusWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StatusResponseApiModel>>;

  /**
   * @summary Return the service status in the form of the service status
   * api model.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {StatusResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {StatusResponseApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link StatusResponseApiModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getStatus(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StatusResponseApiModel>;
  getStatus(callback: ServiceCallback<models.StatusResponseApiModel>): void;
  getStatus(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StatusResponseApiModel>): void;


  /**
   * @summary Get supervisor registration information
   *
   * Returns a supervisor's registration and connectivity information. A
   * supervisor id corresponds to the twin modules module identity.
   *
   * @param {string} supervisorId Supervisor identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SupervisorApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getSupervisorWithHttpOperationResponse(supervisorId: string, options?: { onlyServerState? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SupervisorApiModel>>;

  /**
   * @summary Get supervisor registration information
   *
   * Returns a supervisor's registration and connectivity information. A
   * supervisor id corresponds to the twin modules module identity.
   *
   * @param {string} supervisorId Supervisor identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {SupervisorApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {SupervisorApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SupervisorApiModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getSupervisor(supervisorId: string, options?: { onlyServerState? : boolean, customHeaders? : { [headerName: string]: string; } }): Promise<models.SupervisorApiModel>;
  getSupervisor(supervisorId: string, callback: ServiceCallback<models.SupervisorApiModel>): void;
  getSupervisor(supervisorId: string, options: { onlyServerState? : boolean, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SupervisorApiModel>): void;


  /**
   * @summary Update supervisor information
   *
   * Allows a caller to configure recurring discovery runs on the twin module
   * identified by the supervisor id or update site information.
   *
   * @param {string} supervisorId supervisor identifier
   *
   * @param {object} body Patch request
   *
   * @param {string} [body.siteId] Site of the supervisor
   *
   * @param {string} [body.logLevel] Possible values include: 'Error',
   * 'Information', 'Debug', 'Verbose'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateSupervisorWithHttpOperationResponse(supervisorId: string, body: models.SupervisorUpdateApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Update supervisor information
   *
   * Allows a caller to configure recurring discovery runs on the twin module
   * identified by the supervisor id or update site information.
   *
   * @param {string} supervisorId supervisor identifier
   *
   * @param {object} body Patch request
   *
   * @param {string} [body.siteId] Site of the supervisor
   *
   * @param {string} [body.logLevel] Possible values include: 'Error',
   * 'Information', 'Debug', 'Verbose'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateSupervisor(supervisorId: string, body: models.SupervisorUpdateApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  updateSupervisor(supervisorId: string, body: models.SupervisorUpdateApiModel, callback: ServiceCallback<void>): void;
  updateSupervisor(supervisorId: string, body: models.SupervisorUpdateApiModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Get runtime status of supervisor
   *
   * Allows a caller to get runtime status for a supervisor.
   *
   * @param {string} supervisorId supervisor identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SupervisorStatusApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getSupervisorStatusWithHttpOperationResponse(supervisorId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SupervisorStatusApiModel>>;

  /**
   * @summary Get runtime status of supervisor
   *
   * Allows a caller to get runtime status for a supervisor.
   *
   * @param {string} supervisorId supervisor identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {SupervisorStatusApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {SupervisorStatusApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SupervisorStatusApiModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getSupervisorStatus(supervisorId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SupervisorStatusApiModel>;
  getSupervisorStatus(supervisorId: string, callback: ServiceCallback<models.SupervisorStatusApiModel>): void;
  getSupervisorStatus(supervisorId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SupervisorStatusApiModel>): void;


  /**
   * @summary Reset supervisor
   *
   * Allows a caller to reset the twin module using its supervisor identity
   * identifier.
   *
   * @param {string} supervisorId supervisor identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  resetSupervisorWithHttpOperationResponse(supervisorId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Reset supervisor
   *
   * Allows a caller to reset the twin module using its supervisor identity
   * identifier.
   *
   * @param {string} supervisorId supervisor identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  resetSupervisor(supervisorId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  resetSupervisor(supervisorId: string, callback: ServiceCallback<void>): void;
  resetSupervisor(supervisorId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Get list of supervisors
   *
   * Get all registered supervisors and therefore twin modules in paged form. The
   * returned model can contain a continuation token if more results are
   * available. Call this operation again using the token to retrieve more
   * results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {string} [options.continuationToken] Optional Continuation token
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SupervisorListApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getListOfSupervisorsWithHttpOperationResponse(options?: { onlyServerState? : boolean, continuationToken? : string, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SupervisorListApiModel>>;

  /**
   * @summary Get list of supervisors
   *
   * Get all registered supervisors and therefore twin modules in paged form. The
   * returned model can contain a continuation token if more results are
   * available. Call this operation again using the token to retrieve more
   * results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {string} [options.continuationToken] Optional Continuation token
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {SupervisorListApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {SupervisorListApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SupervisorListApiModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getListOfSupervisors(options?: { onlyServerState? : boolean, continuationToken? : string, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.SupervisorListApiModel>;
  getListOfSupervisors(callback: ServiceCallback<models.SupervisorListApiModel>): void;
  getListOfSupervisors(options: { onlyServerState? : boolean, continuationToken? : string, pageSize? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SupervisorListApiModel>): void;


  /**
   * @summary Query supervisors
   *
   * Get all supervisors that match a specified query. The returned model can
   * contain a continuation token if more results are available. Call the
   * GetListOfSupervisors operation using the token to retrieve more results.
   *
   * @param {object} body Supervisors query model
   *
   * @param {string} [body.siteId] Site of the supervisor
   *
   * @param {boolean} [body.connected] Included connected or disconnected
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SupervisorListApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  querySupervisorsWithHttpOperationResponse(body: models.SupervisorQueryApiModel, options?: { onlyServerState? : boolean, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SupervisorListApiModel>>;

  /**
   * @summary Query supervisors
   *
   * Get all supervisors that match a specified query. The returned model can
   * contain a continuation token if more results are available. Call the
   * GetListOfSupervisors operation using the token to retrieve more results.
   *
   * @param {object} body Supervisors query model
   *
   * @param {string} [body.siteId] Site of the supervisor
   *
   * @param {boolean} [body.connected] Included connected or disconnected
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {SupervisorListApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {SupervisorListApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SupervisorListApiModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  querySupervisors(body: models.SupervisorQueryApiModel, options?: { onlyServerState? : boolean, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.SupervisorListApiModel>;
  querySupervisors(body: models.SupervisorQueryApiModel, callback: ServiceCallback<models.SupervisorListApiModel>): void;
  querySupervisors(body: models.SupervisorQueryApiModel, options: { onlyServerState? : boolean, pageSize? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SupervisorListApiModel>): void;


  /**
   * @summary Get filtered list of supervisors
   *
   * Get a list of supervisors filtered using the specified query parameters. The
   * returned model can contain a continuation token if more results are
   * available. Call the GetListOfSupervisors operation using the token to
   * retrieve more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.siteId] Site of the supervisor
   *
   * @param {boolean} [options.connected] Included connected or disconnected
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SupervisorListApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getFilteredListOfSupervisorsWithHttpOperationResponse(options?: { siteId? : string, connected? : boolean, onlyServerState? : boolean, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SupervisorListApiModel>>;

  /**
   * @summary Get filtered list of supervisors
   *
   * Get a list of supervisors filtered using the specified query parameters. The
   * returned model can contain a continuation token if more results are
   * available. Call the GetListOfSupervisors operation using the token to
   * retrieve more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.siteId] Site of the supervisor
   *
   * @param {boolean} [options.connected] Included connected or disconnected
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {SupervisorListApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {SupervisorListApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SupervisorListApiModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getFilteredListOfSupervisors(options?: { siteId? : string, connected? : boolean, onlyServerState? : boolean, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.SupervisorListApiModel>;
  getFilteredListOfSupervisors(callback: ServiceCallback<models.SupervisorListApiModel>): void;
  getFilteredListOfSupervisors(options: { siteId? : string, connected? : boolean, onlyServerState? : boolean, pageSize? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SupervisorListApiModel>): void;


  /**
   * @summary Subscribe to supervisor registry events
   *
   * Register a user to receive supervisor events through SignalR.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.body] The user id that will receive supervisor
   * events.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  subscribe5WithHttpOperationResponse(options?: { body? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Subscribe to supervisor registry events
   *
   * Register a user to receive supervisor events through SignalR.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.body] The user id that will receive supervisor
   * events.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  subscribe5(options?: { body? : string, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  subscribe5(callback: ServiceCallback<void>): void;
  subscribe5(options: { body? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Unsubscribe registry events
   *
   * Unregister a user and stop it from receiving supervisor events.
   *
   * @param {string} userId The user id that will not receive any more supervisor
   * events
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  unsubscribe5WithHttpOperationResponse(userId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Unsubscribe registry events
   *
   * Unregister a user and stop it from receiving supervisor events.
   *
   * @param {string} userId The user id that will not receive any more supervisor
   * events
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  unsubscribe5(userId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  unsubscribe5(userId: string, callback: ServiceCallback<void>): void;
  unsubscribe5(userId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

export { AzureOpcRegistryClient, models as AzureOpcRegistryModels };
