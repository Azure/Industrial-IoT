/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

'use strict';

const msRest = require('ms-rest');
const ServiceClient = msRest.ServiceClient;
const WebResource = msRest.WebResource;

const models = require('./models');


/**
 * @summary Get list of applications
 *
 * Get all registered applications in paged form.
 * The returned model can contain a continuation token if more results are
 * available.
 * Call this operation again using the token to retrieve more results.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.continuationToken] Optional Continuation
 * token
 *
 * @param {number} [options.pageSize] Optional number of results to
 * return
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ApplicationInfoListApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getListOfApplications(options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let continuationToken = (options && options.continuationToken !== undefined) ? options.continuationToken : undefined;
  let pageSize = (options && options.pageSize !== undefined) ? options.pageSize : undefined;
  // Validate
  try {
    if (continuationToken !== null && continuationToken !== undefined && typeof continuationToken.valueOf() !== 'string') {
      throw new Error('continuationToken must be of type string.');
    }
    if (pageSize !== null && pageSize !== undefined && typeof pageSize !== 'number') {
      throw new Error('pageSize must be of type number.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/applications';
  let queryParameters = [];
  if (continuationToken !== null && continuationToken !== undefined) {
    queryParameters.push('continuationToken=' + encodeURIComponent(continuationToken));
  }
  if (pageSize !== null && pageSize !== undefined) {
    queryParameters.push('pageSize=' + encodeURIComponent(pageSize.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ApplicationInfoListApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Create new application
 *
 * The application is registered using the provided information, but it
 * is not associated with a supervisor.  This is useful for when you need
 * to register clients or you want to register a server that is located
 * in a network not reachable through a Twin module.
 *
 * @param {object} request Application registration request
 *
 * @param {string} request.applicationUri Unique application uri
 *
 * @param {string} [request.applicationType] Type of application. Possible
 * values include: 'Server', 'Client', 'ClientAndServer', 'DiscoveryServer'
 *
 * @param {string} [request.productUri] Product uri of the application.
 *
 * @param {string} [request.applicationName] Default name of the server or
 * client.
 *
 * @param {string} [request.locale] Locale of default name
 *
 * @param {string} [request.siteId] Site of the application
 *
 * @param {object} [request.localizedNames] Localized names key off locale id.
 *
 * @param {array} [request.capabilities] The OPC UA defined capabilities of the
 * server.
 *
 * @param {array} [request.discoveryUrls] Discovery urls of the server.
 *
 * @param {string} [request.discoveryProfileUri] The discovery profile uri of
 * the server.
 *
 * @param {string} [request.gatewayServerUri] Gateway server uri
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ApplicationRegistrationResponseApiModel} for
 *                      more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _createApplication(request, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (request === null || request === undefined) {
      throw new Error('request cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/applications';

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (request !== null && request !== undefined) {
      let requestModelMapper = new client.models['ApplicationRegistrationRequestApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, request, 'request');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(request, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ApplicationRegistrationResponseApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Register new server
 *
 * Registers a server solely using a discovery url. Requires that
 * the onboarding agent service is running and the server can be
 * located by a supervisor in its network using the discovery url.
 *
 * @param {object} request Server registration request
 *
 * @param {string} request.discoveryUrl Discovery url to use for registration
 *
 * @param {string} [request.id] Registration id
 *
 * @param {object} [request.callback] An optional callback hook to register.
 *
 * @param {string} [request.callback.uri] Uri to call - should use https scheme
 * in which
 * case security is enforced.
 *
 * @param {string} [request.callback.method] Http Method to use for callback.
 * Possible values include: 'Get', 'Post', 'Put', 'Delete'
 *
 * @param {string} [request.callback.authenticationHeader] Authentication
 * header to add or null if not needed
 *
 * @param {object} [request.activationFilter] Upon discovery, activate all
 * endpoints with this filter.
 *
 * @param {array} [request.activationFilter.trustLists] Certificate trust list
 * identifiers to use for
 * activation, if null, all certificates are
 * trusted.  If empty list, no certificates are
 * trusted which is equal to no filter.
 *
 * @param {array} [request.activationFilter.securityPolicies] Endpoint security
 * policies to filter against.
 * If set to null, all policies are in scope.
 *
 * @param {string} [request.activationFilter.securityMode] Security mode level
 * to activate. If null,
 * then Microsoft.Azure.IIoT.OpcUa.Registry.Models.SecurityMode.Best is
 * assumed. Possible values include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _registerServer(request, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (request === null || request === undefined) {
      throw new Error('request cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/applications';

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (request !== null && request !== undefined) {
      let requestModelMapper = new client.models['ServerRegistrationRequestApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, request, 'request');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(request, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Purge applications
 *
 * Purges all applications that have not been seen for a specified amount of
 * time.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.notSeenFor] A duration in milliseconds
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteAllDisabledApplications(options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let notSeenFor = (options && options.notSeenFor !== undefined) ? options.notSeenFor : undefined;
  // Validate
  try {
    if (notSeenFor !== null && notSeenFor !== undefined && typeof notSeenFor.valueOf() !== 'string') {
      throw new Error('notSeenFor must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/applications';
  let queryParameters = [];
  if (notSeenFor !== null && notSeenFor !== undefined) {
    queryParameters.push('notSeenFor=' + encodeURIComponent(notSeenFor));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Disable an enabled application.
 *
 * A manager can disable an application.
 *
 * @param {string} applicationId The application id
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _disableApplication(applicationId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (applicationId === null || applicationId === undefined || typeof applicationId.valueOf() !== 'string') {
      throw new Error('applicationId cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/applications/{applicationId}/disable';
  requestUrl = requestUrl.replace('{applicationId}', encodeURIComponent(applicationId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Re-enable a disabled application.
 *
 * A manager can enable an application.
 *
 * @param {string} applicationId The application id
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _enableApplication(applicationId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (applicationId === null || applicationId === undefined || typeof applicationId.valueOf() !== 'string') {
      throw new Error('applicationId cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/applications/{applicationId}/enable';
  requestUrl = requestUrl.replace('{applicationId}', encodeURIComponent(applicationId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Discover servers
 *
 * Registers servers by running a discovery scan in a supervisor's
 * network. Requires that the onboarding agent service is running.
 *
 * @param {object} request Discovery request
 *
 * @param {string} [request.id] Id of discovery request
 *
 * @param {string} [request.discovery] Discovery mode to use. Possible values
 * include: 'Off', 'Local', 'Network', 'Fast', 'Scan'
 *
 * @param {object} [request.configuration] Scan configuration to use
 *
 * @param {string} [request.configuration.addressRangesToScan] Address ranges
 * to scan (null == all wired nics)
 *
 * @param {number} [request.configuration.networkProbeTimeoutMs] Network probe
 * timeout
 *
 * @param {number} [request.configuration.maxNetworkProbes] Max network probes
 * that should ever run.
 *
 * @param {string} [request.configuration.portRangesToScan] Port ranges to scan
 * (null == all unassigned)
 *
 * @param {number} [request.configuration.portProbeTimeoutMs] Port probe
 * timeout
 *
 * @param {number} [request.configuration.maxPortProbes] Max port probes that
 * should ever run.
 *
 * @param {number} [request.configuration.minPortProbesPercent] Probes that
 * must always be there as percent of max.
 *
 * @param {number} [request.configuration.idleTimeBetweenScansSec] Delay time
 * between discovery sweeps in seconds
 *
 * @param {array} [request.configuration.discoveryUrls] List of preset
 * discovery urls to use
 *
 * @param {array} [request.configuration.locales] List of locales to filter
 * with during discovery
 *
 * @param {array} [request.configuration.callbacks] Callbacks to invoke once
 * onboarding finishes
 *
 * @param {object} [request.configuration.activationFilter] Activate all twins
 * with this filter during onboarding.
 *
 * @param {array} [request.configuration.activationFilter.trustLists]
 * Certificate trust list identifiers to use for
 * activation, if null, all certificates are
 * trusted.  If empty list, no certificates are
 * trusted which is equal to no filter.
 *
 * @param {array} [request.configuration.activationFilter.securityPolicies]
 * Endpoint security policies to filter against.
 * If set to null, all policies are in scope.
 *
 * @param {string} [request.configuration.activationFilter.securityMode]
 * Security mode level to activate. If null,
 * then Microsoft.Azure.IIoT.OpcUa.Registry.Models.SecurityMode.Best is
 * assumed. Possible values include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _discoverServer(request, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (request === null || request === undefined) {
      throw new Error('request cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/applications/discover';

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (request !== null && request !== undefined) {
      let requestModelMapper = new client.models['DiscoveryRequestApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, request, 'request');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(request, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Get application registration
 *
 * @param {string} applicationId Application id for the server
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ApplicationRegistrationApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getApplicationRegistration(applicationId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (applicationId === null || applicationId === undefined || typeof applicationId.valueOf() !== 'string') {
      throw new Error('applicationId cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/applications/{applicationId}';
  requestUrl = requestUrl.replace('{applicationId}', encodeURIComponent(applicationId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ApplicationRegistrationApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Unregister application
 *
 * Unregisters and deletes application and all its associated endpoints.
 *
 * @param {string} applicationId The identifier of the application
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteApplication(applicationId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (applicationId === null || applicationId === undefined || typeof applicationId.valueOf() !== 'string') {
      throw new Error('applicationId cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/applications/{applicationId}';
  requestUrl = requestUrl.replace('{applicationId}', encodeURIComponent(applicationId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Update application registration
 *
 * The application information is updated with new properties.  Note that
 * this information might be overridden if the application is re-discovered
 * during a discovery run (recurring or one-time).
 *
 * @param {string} applicationId The identifier of the application
 *
 * @param {object} request Application update request
 *
 * @param {string} [request.productUri] Product uri
 *
 * @param {string} [request.applicationName] Default name of the server or
 * client.
 *
 * @param {string} [request.locale] Locale of default name - defaults to "en"
 *
 * @param {object} [request.localizedNames] Localized names keyed off locale
 * id.
 * To remove entry, set value for locale id to null.
 *
 * @param {buffer} [request.certificate] Application public cert
 *
 * @param {array} [request.capabilities] Capabilities of the application
 *
 * @param {array} [request.discoveryUrls] Discovery urls of the application
 *
 * @param {string} [request.discoveryProfileUri] Discovery profile uri
 *
 * @param {string} [request.gatewayServerUri] Gateway server uri
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _updateApplicationRegistration(applicationId, request, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (applicationId === null || applicationId === undefined || typeof applicationId.valueOf() !== 'string') {
      throw new Error('applicationId cannot be null or undefined and it must be of type string.');
    }
    if (request === null || request === undefined) {
      throw new Error('request cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/applications/{applicationId}';
  requestUrl = requestUrl.replace('{applicationId}', encodeURIComponent(applicationId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (request !== null && request !== undefined) {
      let requestModelMapper = new client.models['ApplicationRegistrationUpdateApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, request, 'request');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(request, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Get list of sites
 *
 * List all sites applications are registered in.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.continuationToken] Optional Continuation
 * token
 *
 * @param {number} [options.pageSize] Optional number of results to
 * return
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ApplicationSiteListApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getListOfSites(options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let continuationToken = (options && options.continuationToken !== undefined) ? options.continuationToken : undefined;
  let pageSize = (options && options.pageSize !== undefined) ? options.pageSize : undefined;
  // Validate
  try {
    if (continuationToken !== null && continuationToken !== undefined && typeof continuationToken.valueOf() !== 'string') {
      throw new Error('continuationToken must be of type string.');
    }
    if (pageSize !== null && pageSize !== undefined && typeof pageSize !== 'number') {
      throw new Error('pageSize must be of type number.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/applications/sites';
  let queryParameters = [];
  if (continuationToken !== null && continuationToken !== undefined) {
    queryParameters.push('continuationToken=' + encodeURIComponent(continuationToken));
  }
  if (pageSize !== null && pageSize !== undefined) {
    queryParameters.push('pageSize=' + encodeURIComponent(pageSize.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ApplicationSiteListApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Get filtered list of applications
 *
 * Get a list of applications filtered using the specified query parameters.
 * The returned model can contain a continuation token if more results are
 * available.
 * Call the GetListOfApplications operation using the token to retrieve
 * more results.
 *
 * @param {object} query Applications Query model
 *
 * @param {string} [query.applicationType] Type of application. Possible values
 * include: 'Server', 'Client', 'ClientAndServer', 'DiscoveryServer'
 *
 * @param {string} [query.applicationUri] Application uri
 *
 * @param {string} [query.productUri] Product uri
 *
 * @param {string} [query.applicationName] Name of application
 *
 * @param {string} [query.locale] Locale of application name - default is "en"
 *
 * @param {string} [query.capability] Application capability to query with
 *
 * @param {string} [query.discoveryProfileUri] Discovery profile uri
 *
 * @param {string} [query.gatewayServerUri] Gateway server uri
 *
 * @param {string} [query.siteOrSupervisorId] Supervisor or site the
 * application belongs to.
 *
 * @param {boolean} [query.includeNotSeenSince] Whether to include apps that
 * were soft deleted
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {number} [options.pageSize] Number of results to return
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ApplicationInfoListApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getFilteredListOfApplications(query, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let pageSize = (options && options.pageSize !== undefined) ? options.pageSize : undefined;
  // Validate
  try {
    if (query === null || query === undefined) {
      throw new Error('query cannot be null or undefined.');
    }
    if (pageSize !== null && pageSize !== undefined && typeof pageSize !== 'number') {
      throw new Error('pageSize must be of type number.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/applications/query';
  let queryParameters = [];
  if (pageSize !== null && pageSize !== undefined) {
    queryParameters.push('pageSize=' + encodeURIComponent(pageSize.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (query !== null && query !== undefined) {
      let requestModelMapper = new client.models['ApplicationRegistrationQueryApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, query, 'query');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(query, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ApplicationInfoListApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Query applications
 *
 * List applications that match a query model.
 * The returned model can contain a continuation token if more results are
 * available.
 * Call the GetListOfApplications operation using the token to retrieve
 * more results.
 *
 * @param {object} query Application query
 *
 * @param {string} [query.applicationType] Type of application. Possible values
 * include: 'Server', 'Client', 'ClientAndServer', 'DiscoveryServer'
 *
 * @param {string} [query.applicationUri] Application uri
 *
 * @param {string} [query.productUri] Product uri
 *
 * @param {string} [query.applicationName] Name of application
 *
 * @param {string} [query.locale] Locale of application name - default is "en"
 *
 * @param {string} [query.capability] Application capability to query with
 *
 * @param {string} [query.discoveryProfileUri] Discovery profile uri
 *
 * @param {string} [query.gatewayServerUri] Gateway server uri
 *
 * @param {string} [query.siteOrSupervisorId] Supervisor or site the
 * application belongs to.
 *
 * @param {boolean} [query.includeNotSeenSince] Whether to include apps that
 * were soft deleted
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {number} [options.pageSize] Optional number of results to
 * return
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ApplicationInfoListApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _queryApplications(query, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let pageSize = (options && options.pageSize !== undefined) ? options.pageSize : undefined;
  // Validate
  try {
    if (query === null || query === undefined) {
      throw new Error('query cannot be null or undefined.');
    }
    if (pageSize !== null && pageSize !== undefined && typeof pageSize !== 'number') {
      throw new Error('pageSize must be of type number.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/applications/query';
  let queryParameters = [];
  if (pageSize !== null && pageSize !== undefined) {
    queryParameters.push('pageSize=' + encodeURIComponent(pageSize.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (query !== null && query !== undefined) {
      let requestModelMapper = new client.models['ApplicationRegistrationQueryApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, query, 'query');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(query, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ApplicationInfoListApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Query applications by id.
 *
 * A query model which supports the OPC UA Global Discovery Server query.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.query]
 *
 * @param {number} [options.query.startingRecordId] Starting record id
 *
 * @param {number} [options.query.maxRecordsToReturn] Max records to return
 *
 * @param {string} [options.query.applicationName] Application name
 *
 * @param {string} [options.query.applicationUri] Application uri
 *
 * @param {string} [options.query.applicationType] Application type. Possible
 * values include: 'Server', 'Client', 'ClientAndServer', 'DiscoveryServer'
 *
 * @param {string} [options.query.productUri] Product uri
 *
 * @param {array} [options.query.serverCapabilities] Server capabilities
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ApplicationRecordListApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _queryApplicationsById(options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let query = (options && options.query !== undefined) ? options.query : undefined;

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/applications/querybyid';

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (query !== null && query !== undefined) {
      let requestModelMapper = new client.models['ApplicationRecordQueryApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, query, 'query');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(query, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ApplicationRecordListApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Activate endpoint
 *
 * Activates an endpoint for subsequent use in twin service.
 * All endpoints must be activated using this API or through a
 * activation filter during application registration or discovery.
 *
 * @param {string} endpointId endpoint identifier
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _activateEndpoint(endpointId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (endpointId === null || endpointId === undefined || typeof endpointId.valueOf() !== 'string') {
      throw new Error('endpointId cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/endpoints/{endpointId}/activate';
  requestUrl = requestUrl.replace('{endpointId}', encodeURIComponent(endpointId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Get endpoint information
 *
 * Gets information about an endpoint.
 *
 * @param {string} endpointId endpoint identifier
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {boolean} [options.onlyServerState] Whether to include only server
 * state, or display current client state of the endpoint if
 * available
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link EndpointInfoApiModel} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getEndpoint(endpointId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let onlyServerState = (options && options.onlyServerState !== undefined) ? options.onlyServerState : undefined;
  // Validate
  try {
    if (endpointId === null || endpointId === undefined || typeof endpointId.valueOf() !== 'string') {
      throw new Error('endpointId cannot be null or undefined and it must be of type string.');
    }
    if (onlyServerState !== null && onlyServerState !== undefined && typeof onlyServerState !== 'boolean') {
      throw new Error('onlyServerState must be of type boolean.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/endpoints/{endpointId}';
  requestUrl = requestUrl.replace('{endpointId}', encodeURIComponent(endpointId));
  let queryParameters = [];
  if (onlyServerState !== null && onlyServerState !== undefined) {
    queryParameters.push('onlyServerState=' + encodeURIComponent(onlyServerState.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['EndpointInfoApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Update endpoint information
 *
 * @param {string} endpointId endpoint identifier
 *
 * @param {object} request Endpoint update request
 *
 * @param {object} [request.user] User authentication to change on the
 * endpoint.
 *
 * @param {string} [request.user.type] Type of credential. Possible values
 * include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
 *
 * @param {object} [request.user.value] Value to pass to server
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _updateEndpoint(endpointId, request, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (endpointId === null || endpointId === undefined || typeof endpointId.valueOf() !== 'string') {
      throw new Error('endpointId cannot be null or undefined and it must be of type string.');
    }
    if (request === null || request === undefined) {
      throw new Error('request cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/endpoints/{endpointId}';
  requestUrl = requestUrl.replace('{endpointId}', encodeURIComponent(endpointId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (request !== null && request !== undefined) {
      let requestModelMapper = new client.models['EndpointRegistrationUpdateApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, request, 'request');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(request, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Get list of endpoints
 *
 * Get all registered endpoints in paged form.
 * The returned model can contain a continuation token if more results are
 * available.
 * Call this operation again using the token to retrieve more results.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {boolean} [options.onlyServerState] Whether to include only server
 * state, or display current client state of the endpoint if available
 *
 * @param {string} [options.continuationToken] Optional Continuation token
 *
 * @param {number} [options.pageSize] Optional number of results to return
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link EndpointInfoListApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getListOfEndpoints(options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let onlyServerState = (options && options.onlyServerState !== undefined) ? options.onlyServerState : undefined;
  let continuationToken = (options && options.continuationToken !== undefined) ? options.continuationToken : undefined;
  let pageSize = (options && options.pageSize !== undefined) ? options.pageSize : undefined;
  // Validate
  try {
    if (onlyServerState !== null && onlyServerState !== undefined && typeof onlyServerState !== 'boolean') {
      throw new Error('onlyServerState must be of type boolean.');
    }
    if (continuationToken !== null && continuationToken !== undefined && typeof continuationToken.valueOf() !== 'string') {
      throw new Error('continuationToken must be of type string.');
    }
    if (pageSize !== null && pageSize !== undefined && typeof pageSize !== 'number') {
      throw new Error('pageSize must be of type number.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/endpoints';
  let queryParameters = [];
  if (onlyServerState !== null && onlyServerState !== undefined) {
    queryParameters.push('onlyServerState=' + encodeURIComponent(onlyServerState.toString()));
  }
  if (continuationToken !== null && continuationToken !== undefined) {
    queryParameters.push('continuationToken=' + encodeURIComponent(continuationToken));
  }
  if (pageSize !== null && pageSize !== undefined) {
    queryParameters.push('pageSize=' + encodeURIComponent(pageSize.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['EndpointInfoListApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Get filtered list of endpoints
 *
 * Get a list of endpoints filtered using the specified query parameters.
 * The returned model can contain a continuation token if more results are
 * available.
 * Call the GetListOfEndpoints operation using the token to retrieve
 * more results.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.url] Endoint url for direct server access
 *
 * @param {string} [options.userAuthentication] Type of credential selected for
 * authentication. Possible values include: 'None', 'UserName',
 * 'X509Certificate', 'JwtToken'
 *
 * @param {buffer} [options.certificate] Certificate of the endpoint
 *
 * @param {string} [options.securityMode] Security Mode. Possible values
 * include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
 *
 * @param {string} [options.securityPolicy] Security policy uri
 *
 * @param {boolean} [options.activated] Whether the endpoint was activated
 *
 * @param {boolean} [options.connected] Whether the endpoint is connected on
 * supervisor.
 *
 * @param {string} [options.endpointState] The last state of the the activated
 * endpoint. Possible values include: 'Connecting', 'NotReachable', 'Busy',
 * 'NoTrust', 'CertificateInvalid', 'Ready', 'Error'
 *
 * @param {boolean} [options.includeNotSeenSince] Whether to include endpoints
 * that were soft deleted
 *
 * @param {boolean} [options.onlyServerState] Whether to include only server
 * state, or display
 * current client state of the endpoint if available
 *
 * @param {number} [options.pageSize] Optional number of results to
 * return
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link EndpointInfoListApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getFilteredListOfEndpoints(options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let url = (options && options.url !== undefined) ? options.url : undefined;
  let userAuthentication = (options && options.userAuthentication !== undefined) ? options.userAuthentication : undefined;
  let certificate = (options && options.certificate !== undefined) ? options.certificate : undefined;
  let securityMode = (options && options.securityMode !== undefined) ? options.securityMode : undefined;
  let securityPolicy = (options && options.securityPolicy !== undefined) ? options.securityPolicy : undefined;
  let activated = (options && options.activated !== undefined) ? options.activated : undefined;
  let connected = (options && options.connected !== undefined) ? options.connected : undefined;
  let endpointState = (options && options.endpointState !== undefined) ? options.endpointState : undefined;
  let includeNotSeenSince = (options && options.includeNotSeenSince !== undefined) ? options.includeNotSeenSince : undefined;
  let onlyServerState = (options && options.onlyServerState !== undefined) ? options.onlyServerState : undefined;
  let pageSize = (options && options.pageSize !== undefined) ? options.pageSize : undefined;
  // Validate
  try {
    if (url !== null && url !== undefined && typeof url.valueOf() !== 'string') {
      throw new Error('url must be of type string.');
    }
    if (userAuthentication !== null && userAuthentication !== undefined && typeof userAuthentication.valueOf() !== 'string') {
      throw new Error('userAuthentication must be of type string.');
    }
    if (certificate && !Buffer.isBuffer(certificate)) {
      throw new Error('certificate must be of type buffer.');
    }
    if (securityMode !== null && securityMode !== undefined && typeof securityMode.valueOf() !== 'string') {
      throw new Error('securityMode must be of type string.');
    }
    if (securityPolicy !== null && securityPolicy !== undefined && typeof securityPolicy.valueOf() !== 'string') {
      throw new Error('securityPolicy must be of type string.');
    }
    if (activated !== null && activated !== undefined && typeof activated !== 'boolean') {
      throw new Error('activated must be of type boolean.');
    }
    if (connected !== null && connected !== undefined && typeof connected !== 'boolean') {
      throw new Error('connected must be of type boolean.');
    }
    if (endpointState !== null && endpointState !== undefined && typeof endpointState.valueOf() !== 'string') {
      throw new Error('endpointState must be of type string.');
    }
    if (includeNotSeenSince !== null && includeNotSeenSince !== undefined && typeof includeNotSeenSince !== 'boolean') {
      throw new Error('includeNotSeenSince must be of type boolean.');
    }
    if (onlyServerState !== null && onlyServerState !== undefined && typeof onlyServerState !== 'boolean') {
      throw new Error('onlyServerState must be of type boolean.');
    }
    if (pageSize !== null && pageSize !== undefined && typeof pageSize !== 'number') {
      throw new Error('pageSize must be of type number.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/endpoints/query';
  let queryParameters = [];
  if (url !== null && url !== undefined) {
    queryParameters.push('Url=' + encodeURIComponent(url));
  }
  if (userAuthentication !== null && userAuthentication !== undefined) {
    queryParameters.push('UserAuthentication=' + encodeURIComponent(userAuthentication));
  }
  if (certificate !== null && certificate !== undefined) {
    queryParameters.push('Certificate=' + encodeURIComponent(client.serializeObject(certificate)));
  }
  if (securityMode !== null && securityMode !== undefined) {
    queryParameters.push('SecurityMode=' + encodeURIComponent(securityMode));
  }
  if (securityPolicy !== null && securityPolicy !== undefined) {
    queryParameters.push('SecurityPolicy=' + encodeURIComponent(securityPolicy));
  }
  if (activated !== null && activated !== undefined) {
    queryParameters.push('Activated=' + encodeURIComponent(activated.toString()));
  }
  if (connected !== null && connected !== undefined) {
    queryParameters.push('Connected=' + encodeURIComponent(connected.toString()));
  }
  if (endpointState !== null && endpointState !== undefined) {
    queryParameters.push('EndpointState=' + encodeURIComponent(endpointState));
  }
  if (includeNotSeenSince !== null && includeNotSeenSince !== undefined) {
    queryParameters.push('IncludeNotSeenSince=' + encodeURIComponent(includeNotSeenSince.toString()));
  }
  if (onlyServerState !== null && onlyServerState !== undefined) {
    queryParameters.push('onlyServerState=' + encodeURIComponent(onlyServerState.toString()));
  }
  if (pageSize !== null && pageSize !== undefined) {
    queryParameters.push('pageSize=' + encodeURIComponent(pageSize.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['EndpointInfoListApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Query endpoints
 *
 * Return endpoints that match the specified query.
 * The returned model can contain a continuation token if more results are
 * available.
 * Call the GetListOfEndpoints operation using the token to retrieve
 * more results.
 *
 * @param {object} query Query to match
 *
 * @param {string} [query.url] Endoint url for direct server access
 *
 * @param {string} [query.userAuthentication] Type of credential selected for
 * authentication. Possible values include: 'None', 'UserName',
 * 'X509Certificate', 'JwtToken'
 *
 * @param {buffer} [query.certificate] Certificate of the endpoint
 *
 * @param {string} [query.securityMode] Security Mode. Possible values include:
 * 'Best', 'Sign', 'SignAndEncrypt', 'None'
 *
 * @param {string} [query.securityPolicy] Security policy uri
 *
 * @param {boolean} [query.activated] Whether the endpoint was activated
 *
 * @param {boolean} [query.connected] Whether the endpoint is connected on
 * supervisor.
 *
 * @param {string} [query.endpointState] The last state of the the activated
 * endpoint. Possible values include: 'Connecting', 'NotReachable', 'Busy',
 * 'NoTrust', 'CertificateInvalid', 'Ready', 'Error'
 *
 * @param {boolean} [query.includeNotSeenSince] Whether to include endpoints
 * that were soft deleted
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {boolean} [options.onlyServerState] Whether to include only server
 * state, or display current client state of the endpoint if available
 *
 * @param {number} [options.pageSize] Optional number of results to return
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link EndpointInfoListApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _queryEndpoints(query, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let onlyServerState = (options && options.onlyServerState !== undefined) ? options.onlyServerState : undefined;
  let pageSize = (options && options.pageSize !== undefined) ? options.pageSize : undefined;
  // Validate
  try {
    if (query === null || query === undefined) {
      throw new Error('query cannot be null or undefined.');
    }
    if (onlyServerState !== null && onlyServerState !== undefined && typeof onlyServerState !== 'boolean') {
      throw new Error('onlyServerState must be of type boolean.');
    }
    if (pageSize !== null && pageSize !== undefined && typeof pageSize !== 'number') {
      throw new Error('pageSize must be of type number.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/endpoints/query';
  let queryParameters = [];
  if (onlyServerState !== null && onlyServerState !== undefined) {
    queryParameters.push('onlyServerState=' + encodeURIComponent(onlyServerState.toString()));
  }
  if (pageSize !== null && pageSize !== undefined) {
    queryParameters.push('pageSize=' + encodeURIComponent(pageSize.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (query !== null && query !== undefined) {
      let requestModelMapper = new client.models['EndpointRegistrationQueryApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, query, 'query');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(query, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['EndpointInfoListApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Deactivate endpoint
 *
 * Deactivates the endpoint and disable access through twin service.
 *
 * @param {string} endpointId endpoint identifier
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deactivateEndpoint(endpointId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (endpointId === null || endpointId === undefined || typeof endpointId.valueOf() !== 'string') {
      throw new Error('endpointId cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/endpoints/{endpointId}/deactivate';
  requestUrl = requestUrl.replace('{endpointId}', encodeURIComponent(endpointId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Return the service status in the form of the service status
 * api model.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link StatusResponseApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getStatus(options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/status';

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['StatusResponseApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Get supervisor registration information
 *
 * Returns a supervisor's registration and connectivity information.
 * A supervisor id corresponds to the twin modules module identity.
 *
 * @param {string} supervisorId Supervisor identifier
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {boolean} [options.onlyServerState] Whether to include only server
 * state, or display current client state of the endpoint if
 * available
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SupervisorApiModel} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getSupervisor(supervisorId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let onlyServerState = (options && options.onlyServerState !== undefined) ? options.onlyServerState : undefined;
  // Validate
  try {
    if (supervisorId === null || supervisorId === undefined || typeof supervisorId.valueOf() !== 'string') {
      throw new Error('supervisorId cannot be null or undefined and it must be of type string.');
    }
    if (onlyServerState !== null && onlyServerState !== undefined && typeof onlyServerState !== 'boolean') {
      throw new Error('onlyServerState must be of type boolean.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/supervisors/{supervisorId}';
  requestUrl = requestUrl.replace('{supervisorId}', encodeURIComponent(supervisorId));
  let queryParameters = [];
  if (onlyServerState !== null && onlyServerState !== undefined) {
    queryParameters.push('onlyServerState=' + encodeURIComponent(onlyServerState.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SupervisorApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Update supervisor information
 *
 * Allows a caller to configure recurring discovery runs on the twin module
 * identified by the supervisor id or update site information.
 *
 * @param {string} supervisorId supervisor identifier
 *
 * @param {object} request Patch request
 *
 * @param {string} [request.siteId] Site of the supervisor
 *
 * @param {string} [request.discovery] Whether the supervisor is in discovery
 * mode.
 * If null, does not change. Possible values include: 'Off', 'Local',
 * 'Network', 'Fast', 'Scan'
 *
 * @param {object} [request.discoveryConfig] Supervisor discovery configuration
 *
 * @param {string} [request.discoveryConfig.addressRangesToScan] Address ranges
 * to scan (null == all wired nics)
 *
 * @param {number} [request.discoveryConfig.networkProbeTimeoutMs] Network
 * probe timeout
 *
 * @param {number} [request.discoveryConfig.maxNetworkProbes] Max network
 * probes that should ever run.
 *
 * @param {string} [request.discoveryConfig.portRangesToScan] Port ranges to
 * scan (null == all unassigned)
 *
 * @param {number} [request.discoveryConfig.portProbeTimeoutMs] Port probe
 * timeout
 *
 * @param {number} [request.discoveryConfig.maxPortProbes] Max port probes that
 * should ever run.
 *
 * @param {number} [request.discoveryConfig.minPortProbesPercent] Probes that
 * must always be there as percent of max.
 *
 * @param {number} [request.discoveryConfig.idleTimeBetweenScansSec] Delay time
 * between discovery sweeps in seconds
 *
 * @param {array} [request.discoveryConfig.discoveryUrls] List of preset
 * discovery urls to use
 *
 * @param {array} [request.discoveryConfig.locales] List of locales to filter
 * with during discovery
 *
 * @param {array} [request.discoveryConfig.callbacks] Callbacks to invoke once
 * onboarding finishes
 *
 * @param {object} [request.discoveryConfig.activationFilter] Activate all
 * twins with this filter during onboarding.
 *
 * @param {array} [request.discoveryConfig.activationFilter.trustLists]
 * Certificate trust list identifiers to use for
 * activation, if null, all certificates are
 * trusted.  If empty list, no certificates are
 * trusted which is equal to no filter.
 *
 * @param {array} [request.discoveryConfig.activationFilter.securityPolicies]
 * Endpoint security policies to filter against.
 * If set to null, all policies are in scope.
 *
 * @param {string} [request.discoveryConfig.activationFilter.securityMode]
 * Security mode level to activate. If null,
 * then Microsoft.Azure.IIoT.OpcUa.Registry.Models.SecurityMode.Best is
 * assumed. Possible values include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
 *
 * @param {array} [request.discoveryCallbacks] Callbacks to add or remove (see
 * below)
 *
 * @param {boolean} [request.removeDiscoveryCallbacks] Whether to add or remove
 * callbacks
 *
 * @param {string} [request.logLevel] Current log level. Possible values
 * include: 'Error', 'Information', 'Debug', 'Verbose'
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _updateSupervisor(supervisorId, request, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (supervisorId === null || supervisorId === undefined || typeof supervisorId.valueOf() !== 'string') {
      throw new Error('supervisorId cannot be null or undefined and it must be of type string.');
    }
    if (request === null || request === undefined) {
      throw new Error('request cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/supervisors/{supervisorId}';
  requestUrl = requestUrl.replace('{supervisorId}', encodeURIComponent(supervisorId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (request !== null && request !== undefined) {
      let requestModelMapper = new client.models['SupervisorUpdateApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, request, 'request');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(request, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Get runtime status of supervisor
 *
 * Allows a caller to get runtime status for a supervisor.
 *
 * @param {string} supervisorId supervisor identifier
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SupervisorStatusApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getSupervisorStatus(supervisorId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (supervisorId === null || supervisorId === undefined || typeof supervisorId.valueOf() !== 'string') {
      throw new Error('supervisorId cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/supervisors/{supervisorId}/status';
  requestUrl = requestUrl.replace('{supervisorId}', encodeURIComponent(supervisorId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SupervisorStatusApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Reset supervisor
 *
 * Allows a caller to reset the twin module using its supervisor
 * identity identifier.
 *
 * @param {string} supervisorId supervisor identifier
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _resetSupervisor(supervisorId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (supervisorId === null || supervisorId === undefined || typeof supervisorId.valueOf() !== 'string') {
      throw new Error('supervisorId cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/supervisors/{supervisorId}/reset';
  requestUrl = requestUrl.replace('{supervisorId}', encodeURIComponent(supervisorId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Get list of supervisors
 *
 * Get all registered supervisors and therefore twin modules in paged form.
 * The returned model can contain a continuation token if more results are
 * available.
 * Call this operation again using the token to retrieve more results.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {boolean} [options.onlyServerState] Whether to include only server
 * state, or display current client state of the endpoint if available
 *
 * @param {string} [options.continuationToken] Optional Continuation token
 *
 * @param {number} [options.pageSize] Optional number of results to return
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SupervisorListApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getListOfSupervisors(options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let onlyServerState = (options && options.onlyServerState !== undefined) ? options.onlyServerState : undefined;
  let continuationToken = (options && options.continuationToken !== undefined) ? options.continuationToken : undefined;
  let pageSize = (options && options.pageSize !== undefined) ? options.pageSize : undefined;
  // Validate
  try {
    if (onlyServerState !== null && onlyServerState !== undefined && typeof onlyServerState !== 'boolean') {
      throw new Error('onlyServerState must be of type boolean.');
    }
    if (continuationToken !== null && continuationToken !== undefined && typeof continuationToken.valueOf() !== 'string') {
      throw new Error('continuationToken must be of type string.');
    }
    if (pageSize !== null && pageSize !== undefined && typeof pageSize !== 'number') {
      throw new Error('pageSize must be of type number.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/supervisors';
  let queryParameters = [];
  if (onlyServerState !== null && onlyServerState !== undefined) {
    queryParameters.push('onlyServerState=' + encodeURIComponent(onlyServerState.toString()));
  }
  if (continuationToken !== null && continuationToken !== undefined) {
    queryParameters.push('continuationToken=' + encodeURIComponent(continuationToken));
  }
  if (pageSize !== null && pageSize !== undefined) {
    queryParameters.push('pageSize=' + encodeURIComponent(pageSize.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SupervisorListApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Get filtered list of supervisors
 *
 * Get a list of supervisors filtered using the specified query parameters.
 * The returned model can contain a continuation token if more results are
 * available.
 * Call the GetListOfSupervisors operation using the token to retrieve
 * more results.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.siteId] Site of the supervisor
 *
 * @param {string} [options.discovery] Discovery mode of supervisor. Possible
 * values include: 'Off', 'Local', 'Network', 'Fast', 'Scan'
 *
 * @param {boolean} [options.connected] Included connected or disconnected
 *
 * @param {boolean} [options.onlyServerState] Whether to include only server
 * state, or display current client state of the endpoint if
 * available
 *
 * @param {number} [options.pageSize] Number of results to return
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SupervisorListApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getFilteredListOfSupervisors(options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let siteId = (options && options.siteId !== undefined) ? options.siteId : undefined;
  let discovery = (options && options.discovery !== undefined) ? options.discovery : undefined;
  let connected = (options && options.connected !== undefined) ? options.connected : undefined;
  let onlyServerState = (options && options.onlyServerState !== undefined) ? options.onlyServerState : undefined;
  let pageSize = (options && options.pageSize !== undefined) ? options.pageSize : undefined;
  // Validate
  try {
    if (siteId !== null && siteId !== undefined && typeof siteId.valueOf() !== 'string') {
      throw new Error('siteId must be of type string.');
    }
    if (discovery !== null && discovery !== undefined && typeof discovery.valueOf() !== 'string') {
      throw new Error('discovery must be of type string.');
    }
    if (connected !== null && connected !== undefined && typeof connected !== 'boolean') {
      throw new Error('connected must be of type boolean.');
    }
    if (onlyServerState !== null && onlyServerState !== undefined && typeof onlyServerState !== 'boolean') {
      throw new Error('onlyServerState must be of type boolean.');
    }
    if (pageSize !== null && pageSize !== undefined && typeof pageSize !== 'number') {
      throw new Error('pageSize must be of type number.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/supervisors/query';
  let queryParameters = [];
  if (siteId !== null && siteId !== undefined) {
    queryParameters.push('SiteId=' + encodeURIComponent(siteId));
  }
  if (discovery !== null && discovery !== undefined) {
    queryParameters.push('Discovery=' + encodeURIComponent(discovery));
  }
  if (connected !== null && connected !== undefined) {
    queryParameters.push('Connected=' + encodeURIComponent(connected.toString()));
  }
  if (onlyServerState !== null && onlyServerState !== undefined) {
    queryParameters.push('onlyServerState=' + encodeURIComponent(onlyServerState.toString()));
  }
  if (pageSize !== null && pageSize !== undefined) {
    queryParameters.push('pageSize=' + encodeURIComponent(pageSize.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SupervisorListApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Query supervisors
 *
 * Get all supervisors that match a specified query.
 * The returned model can contain a continuation token if more results are
 * available.
 * Call the GetListOfSupervisors operation using the token to retrieve
 * more results.
 *
 * @param {object} query Supervisors query model
 *
 * @param {string} [query.siteId] Site of the supervisor
 *
 * @param {string} [query.discovery] Discovery mode of supervisor. Possible
 * values include: 'Off', 'Local', 'Network', 'Fast', 'Scan'
 *
 * @param {boolean} [query.connected] Included connected or disconnected
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {boolean} [options.onlyServerState] Whether to include only server
 * state, or display current client state of the endpoint if
 * available
 *
 * @param {number} [options.pageSize] Number of results to return
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SupervisorListApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _querySupervisors(query, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let onlyServerState = (options && options.onlyServerState !== undefined) ? options.onlyServerState : undefined;
  let pageSize = (options && options.pageSize !== undefined) ? options.pageSize : undefined;
  // Validate
  try {
    if (query === null || query === undefined) {
      throw new Error('query cannot be null or undefined.');
    }
    if (onlyServerState !== null && onlyServerState !== undefined && typeof onlyServerState !== 'boolean') {
      throw new Error('onlyServerState must be of type boolean.');
    }
    if (pageSize !== null && pageSize !== undefined && typeof pageSize !== 'number') {
      throw new Error('pageSize must be of type number.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/supervisors/query';
  let queryParameters = [];
  if (onlyServerState !== null && onlyServerState !== undefined) {
    queryParameters.push('onlyServerState=' + encodeURIComponent(onlyServerState.toString()));
  }
  if (pageSize !== null && pageSize !== undefined) {
    queryParameters.push('pageSize=' + encodeURIComponent(pageSize.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (query !== null && query !== undefined) {
      let requestModelMapper = new client.models['SupervisorQueryApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, query, 'query');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(query, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SupervisorListApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a AzureOpcRegistryClient. */
class AzureOpcRegistryClient extends ServiceClient {
  /**
   * Create a AzureOpcRegistryClient.
   * @param {credentials} credentials - Subscription credentials which uniquely identify client subscription.
   * @param {string} [baseUri] - The base URI of the service.
   * @param {object} [options] - The parameter options
   * @param {Array} [options.filters] - Filters to be added to the request pipeline
   * @param {object} [options.requestOptions] - Options for the underlying request object
   * {@link https://github.com/request/request#requestoptions-callback Options doc}
   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
   */
  constructor(credentials, baseUri, options) {
    if (credentials === null || credentials === undefined) {
      throw new Error('\'credentials\' cannot be null.');
    }

    if (!options) options = {};

    super(credentials, options);

    this.baseUri = baseUri;
    if (!this.baseUri) {
      this.baseUri = 'http://localhost';
    }
    this.credentials = credentials;

    let packageInfo = this.getPackageJsonInfo(__dirname);
    this.addUserAgentInfo(`${packageInfo.name}/${packageInfo.version}`);
    this.models = models;
    this._getListOfApplications = _getListOfApplications;
    this._createApplication = _createApplication;
    this._registerServer = _registerServer;
    this._deleteAllDisabledApplications = _deleteAllDisabledApplications;
    this._disableApplication = _disableApplication;
    this._enableApplication = _enableApplication;
    this._discoverServer = _discoverServer;
    this._getApplicationRegistration = _getApplicationRegistration;
    this._deleteApplication = _deleteApplication;
    this._updateApplicationRegistration = _updateApplicationRegistration;
    this._getListOfSites = _getListOfSites;
    this._getFilteredListOfApplications = _getFilteredListOfApplications;
    this._queryApplications = _queryApplications;
    this._queryApplicationsById = _queryApplicationsById;
    this._activateEndpoint = _activateEndpoint;
    this._getEndpoint = _getEndpoint;
    this._updateEndpoint = _updateEndpoint;
    this._getListOfEndpoints = _getListOfEndpoints;
    this._getFilteredListOfEndpoints = _getFilteredListOfEndpoints;
    this._queryEndpoints = _queryEndpoints;
    this._deactivateEndpoint = _deactivateEndpoint;
    this._getStatus = _getStatus;
    this._getSupervisor = _getSupervisor;
    this._updateSupervisor = _updateSupervisor;
    this._getSupervisorStatus = _getSupervisorStatus;
    this._resetSupervisor = _resetSupervisor;
    this._getListOfSupervisors = _getListOfSupervisors;
    this._getFilteredListOfSupervisors = _getFilteredListOfSupervisors;
    this._querySupervisors = _querySupervisors;
    msRest.addSerializationMixin(this);
  }

  /**
   * @summary Get list of applications
   *
   * Get all registered applications in paged form.
   * The returned model can contain a continuation token if more results are
   * available.
   * Call this operation again using the token to retrieve more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.continuationToken] Optional Continuation
   * token
   *
   * @param {number} [options.pageSize] Optional number of results to
   * return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ApplicationInfoListApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getListOfApplicationsWithHttpOperationResponse(options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getListOfApplications(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Get list of applications
   *
   * Get all registered applications in paged form.
   * The returned model can contain a continuation token if more results are
   * available.
   * Call this operation again using the token to retrieve more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.continuationToken] Optional Continuation
   * token
   *
   * @param {number} [options.pageSize] Optional number of results to
   * return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ApplicationInfoListApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ApplicationInfoListApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getListOfApplications(options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getListOfApplications(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getListOfApplications(options, optionalCallback);
    }
  }

  /**
   * @summary Create new application
   *
   * The application is registered using the provided information, but it
   * is not associated with a supervisor.  This is useful for when you need
   * to register clients or you want to register a server that is located
   * in a network not reachable through a Twin module.
   *
   * @param {object} request Application registration request
   *
   * @param {string} request.applicationUri Unique application uri
   *
   * @param {string} [request.applicationType] Type of application. Possible
   * values include: 'Server', 'Client', 'ClientAndServer', 'DiscoveryServer'
   *
   * @param {string} [request.productUri] Product uri of the application.
   *
   * @param {string} [request.applicationName] Default name of the server or
   * client.
   *
   * @param {string} [request.locale] Locale of default name
   *
   * @param {string} [request.siteId] Site of the application
   *
   * @param {object} [request.localizedNames] Localized names key off locale id.
   *
   * @param {array} [request.capabilities] The OPC UA defined capabilities of the
   * server.
   *
   * @param {array} [request.discoveryUrls] Discovery urls of the server.
   *
   * @param {string} [request.discoveryProfileUri] The discovery profile uri of
   * the server.
   *
   * @param {string} [request.gatewayServerUri] Gateway server uri
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ApplicationRegistrationResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  createApplicationWithHttpOperationResponse(request, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._createApplication(request, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Create new application
   *
   * The application is registered using the provided information, but it
   * is not associated with a supervisor.  This is useful for when you need
   * to register clients or you want to register a server that is located
   * in a network not reachable through a Twin module.
   *
   * @param {object} request Application registration request
   *
   * @param {string} request.applicationUri Unique application uri
   *
   * @param {string} [request.applicationType] Type of application. Possible
   * values include: 'Server', 'Client', 'ClientAndServer', 'DiscoveryServer'
   *
   * @param {string} [request.productUri] Product uri of the application.
   *
   * @param {string} [request.applicationName] Default name of the server or
   * client.
   *
   * @param {string} [request.locale] Locale of default name
   *
   * @param {string} [request.siteId] Site of the application
   *
   * @param {object} [request.localizedNames] Localized names key off locale id.
   *
   * @param {array} [request.capabilities] The OPC UA defined capabilities of the
   * server.
   *
   * @param {array} [request.discoveryUrls] Discovery urls of the server.
   *
   * @param {string} [request.discoveryProfileUri] The discovery profile uri of
   * the server.
   *
   * @param {string} [request.gatewayServerUri] Gateway server uri
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ApplicationRegistrationResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ApplicationRegistrationResponseApiModel} for
   *                      more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  createApplication(request, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._createApplication(request, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._createApplication(request, options, optionalCallback);
    }
  }

  /**
   * @summary Register new server
   *
   * Registers a server solely using a discovery url. Requires that
   * the onboarding agent service is running and the server can be
   * located by a supervisor in its network using the discovery url.
   *
   * @param {object} request Server registration request
   *
   * @param {string} request.discoveryUrl Discovery url to use for registration
   *
   * @param {string} [request.id] Registration id
   *
   * @param {object} [request.callback] An optional callback hook to register.
   *
   * @param {string} [request.callback.uri] Uri to call - should use https scheme
   * in which
   * case security is enforced.
   *
   * @param {string} [request.callback.method] Http Method to use for callback.
   * Possible values include: 'Get', 'Post', 'Put', 'Delete'
   *
   * @param {string} [request.callback.authenticationHeader] Authentication
   * header to add or null if not needed
   *
   * @param {object} [request.activationFilter] Upon discovery, activate all
   * endpoints with this filter.
   *
   * @param {array} [request.activationFilter.trustLists] Certificate trust list
   * identifiers to use for
   * activation, if null, all certificates are
   * trusted.  If empty list, no certificates are
   * trusted which is equal to no filter.
   *
   * @param {array} [request.activationFilter.securityPolicies] Endpoint security
   * policies to filter against.
   * If set to null, all policies are in scope.
   *
   * @param {string} [request.activationFilter.securityMode] Security mode level
   * to activate. If null,
   * then Microsoft.Azure.IIoT.OpcUa.Registry.Models.SecurityMode.Best is
   * assumed. Possible values include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  registerServerWithHttpOperationResponse(request, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._registerServer(request, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Register new server
   *
   * Registers a server solely using a discovery url. Requires that
   * the onboarding agent service is running and the server can be
   * located by a supervisor in its network using the discovery url.
   *
   * @param {object} request Server registration request
   *
   * @param {string} request.discoveryUrl Discovery url to use for registration
   *
   * @param {string} [request.id] Registration id
   *
   * @param {object} [request.callback] An optional callback hook to register.
   *
   * @param {string} [request.callback.uri] Uri to call - should use https scheme
   * in which
   * case security is enforced.
   *
   * @param {string} [request.callback.method] Http Method to use for callback.
   * Possible values include: 'Get', 'Post', 'Put', 'Delete'
   *
   * @param {string} [request.callback.authenticationHeader] Authentication
   * header to add or null if not needed
   *
   * @param {object} [request.activationFilter] Upon discovery, activate all
   * endpoints with this filter.
   *
   * @param {array} [request.activationFilter.trustLists] Certificate trust list
   * identifiers to use for
   * activation, if null, all certificates are
   * trusted.  If empty list, no certificates are
   * trusted which is equal to no filter.
   *
   * @param {array} [request.activationFilter.securityPolicies] Endpoint security
   * policies to filter against.
   * If set to null, all policies are in scope.
   *
   * @param {string} [request.activationFilter.securityMode] Security mode level
   * to activate. If null,
   * then Microsoft.Azure.IIoT.OpcUa.Registry.Models.SecurityMode.Best is
   * assumed. Possible values include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  registerServer(request, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._registerServer(request, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._registerServer(request, options, optionalCallback);
    }
  }

  /**
   * @summary Purge applications
   *
   * Purges all applications that have not been seen for a specified amount of
   * time.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.notSeenFor] A duration in milliseconds
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteAllDisabledApplicationsWithHttpOperationResponse(options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteAllDisabledApplications(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Purge applications
   *
   * Purges all applications that have not been seen for a specified amount of
   * time.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.notSeenFor] A duration in milliseconds
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteAllDisabledApplications(options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteAllDisabledApplications(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteAllDisabledApplications(options, optionalCallback);
    }
  }

  /**
   * @summary Disable an enabled application.
   *
   * A manager can disable an application.
   *
   * @param {string} applicationId The application id
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  disableApplicationWithHttpOperationResponse(applicationId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._disableApplication(applicationId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Disable an enabled application.
   *
   * A manager can disable an application.
   *
   * @param {string} applicationId The application id
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  disableApplication(applicationId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._disableApplication(applicationId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._disableApplication(applicationId, options, optionalCallback);
    }
  }

  /**
   * @summary Re-enable a disabled application.
   *
   * A manager can enable an application.
   *
   * @param {string} applicationId The application id
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  enableApplicationWithHttpOperationResponse(applicationId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._enableApplication(applicationId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Re-enable a disabled application.
   *
   * A manager can enable an application.
   *
   * @param {string} applicationId The application id
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  enableApplication(applicationId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._enableApplication(applicationId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._enableApplication(applicationId, options, optionalCallback);
    }
  }

  /**
   * @summary Discover servers
   *
   * Registers servers by running a discovery scan in a supervisor's
   * network. Requires that the onboarding agent service is running.
   *
   * @param {object} request Discovery request
   *
   * @param {string} [request.id] Id of discovery request
   *
   * @param {string} [request.discovery] Discovery mode to use. Possible values
   * include: 'Off', 'Local', 'Network', 'Fast', 'Scan'
   *
   * @param {object} [request.configuration] Scan configuration to use
   *
   * @param {string} [request.configuration.addressRangesToScan] Address ranges
   * to scan (null == all wired nics)
   *
   * @param {number} [request.configuration.networkProbeTimeoutMs] Network probe
   * timeout
   *
   * @param {number} [request.configuration.maxNetworkProbes] Max network probes
   * that should ever run.
   *
   * @param {string} [request.configuration.portRangesToScan] Port ranges to scan
   * (null == all unassigned)
   *
   * @param {number} [request.configuration.portProbeTimeoutMs] Port probe
   * timeout
   *
   * @param {number} [request.configuration.maxPortProbes] Max port probes that
   * should ever run.
   *
   * @param {number} [request.configuration.minPortProbesPercent] Probes that
   * must always be there as percent of max.
   *
   * @param {number} [request.configuration.idleTimeBetweenScansSec] Delay time
   * between discovery sweeps in seconds
   *
   * @param {array} [request.configuration.discoveryUrls] List of preset
   * discovery urls to use
   *
   * @param {array} [request.configuration.locales] List of locales to filter
   * with during discovery
   *
   * @param {array} [request.configuration.callbacks] Callbacks to invoke once
   * onboarding finishes
   *
   * @param {object} [request.configuration.activationFilter] Activate all twins
   * with this filter during onboarding.
   *
   * @param {array} [request.configuration.activationFilter.trustLists]
   * Certificate trust list identifiers to use for
   * activation, if null, all certificates are
   * trusted.  If empty list, no certificates are
   * trusted which is equal to no filter.
   *
   * @param {array} [request.configuration.activationFilter.securityPolicies]
   * Endpoint security policies to filter against.
   * If set to null, all policies are in scope.
   *
   * @param {string} [request.configuration.activationFilter.securityMode]
   * Security mode level to activate. If null,
   * then Microsoft.Azure.IIoT.OpcUa.Registry.Models.SecurityMode.Best is
   * assumed. Possible values include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  discoverServerWithHttpOperationResponse(request, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._discoverServer(request, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Discover servers
   *
   * Registers servers by running a discovery scan in a supervisor's
   * network. Requires that the onboarding agent service is running.
   *
   * @param {object} request Discovery request
   *
   * @param {string} [request.id] Id of discovery request
   *
   * @param {string} [request.discovery] Discovery mode to use. Possible values
   * include: 'Off', 'Local', 'Network', 'Fast', 'Scan'
   *
   * @param {object} [request.configuration] Scan configuration to use
   *
   * @param {string} [request.configuration.addressRangesToScan] Address ranges
   * to scan (null == all wired nics)
   *
   * @param {number} [request.configuration.networkProbeTimeoutMs] Network probe
   * timeout
   *
   * @param {number} [request.configuration.maxNetworkProbes] Max network probes
   * that should ever run.
   *
   * @param {string} [request.configuration.portRangesToScan] Port ranges to scan
   * (null == all unassigned)
   *
   * @param {number} [request.configuration.portProbeTimeoutMs] Port probe
   * timeout
   *
   * @param {number} [request.configuration.maxPortProbes] Max port probes that
   * should ever run.
   *
   * @param {number} [request.configuration.minPortProbesPercent] Probes that
   * must always be there as percent of max.
   *
   * @param {number} [request.configuration.idleTimeBetweenScansSec] Delay time
   * between discovery sweeps in seconds
   *
   * @param {array} [request.configuration.discoveryUrls] List of preset
   * discovery urls to use
   *
   * @param {array} [request.configuration.locales] List of locales to filter
   * with during discovery
   *
   * @param {array} [request.configuration.callbacks] Callbacks to invoke once
   * onboarding finishes
   *
   * @param {object} [request.configuration.activationFilter] Activate all twins
   * with this filter during onboarding.
   *
   * @param {array} [request.configuration.activationFilter.trustLists]
   * Certificate trust list identifiers to use for
   * activation, if null, all certificates are
   * trusted.  If empty list, no certificates are
   * trusted which is equal to no filter.
   *
   * @param {array} [request.configuration.activationFilter.securityPolicies]
   * Endpoint security policies to filter against.
   * If set to null, all policies are in scope.
   *
   * @param {string} [request.configuration.activationFilter.securityMode]
   * Security mode level to activate. If null,
   * then Microsoft.Azure.IIoT.OpcUa.Registry.Models.SecurityMode.Best is
   * assumed. Possible values include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  discoverServer(request, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._discoverServer(request, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._discoverServer(request, options, optionalCallback);
    }
  }

  /**
   * @summary Get application registration
   *
   * @param {string} applicationId Application id for the server
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ApplicationRegistrationApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getApplicationRegistrationWithHttpOperationResponse(applicationId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getApplicationRegistration(applicationId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Get application registration
   *
   * @param {string} applicationId Application id for the server
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ApplicationRegistrationApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ApplicationRegistrationApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getApplicationRegistration(applicationId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getApplicationRegistration(applicationId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getApplicationRegistration(applicationId, options, optionalCallback);
    }
  }

  /**
   * @summary Unregister application
   *
   * Unregisters and deletes application and all its associated endpoints.
   *
   * @param {string} applicationId The identifier of the application
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteApplicationWithHttpOperationResponse(applicationId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteApplication(applicationId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Unregister application
   *
   * Unregisters and deletes application and all its associated endpoints.
   *
   * @param {string} applicationId The identifier of the application
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteApplication(applicationId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteApplication(applicationId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteApplication(applicationId, options, optionalCallback);
    }
  }

  /**
   * @summary Update application registration
   *
   * The application information is updated with new properties.  Note that
   * this information might be overridden if the application is re-discovered
   * during a discovery run (recurring or one-time).
   *
   * @param {string} applicationId The identifier of the application
   *
   * @param {object} request Application update request
   *
   * @param {string} [request.productUri] Product uri
   *
   * @param {string} [request.applicationName] Default name of the server or
   * client.
   *
   * @param {string} [request.locale] Locale of default name - defaults to "en"
   *
   * @param {object} [request.localizedNames] Localized names keyed off locale
   * id.
   * To remove entry, set value for locale id to null.
   *
   * @param {buffer} [request.certificate] Application public cert
   *
   * @param {array} [request.capabilities] Capabilities of the application
   *
   * @param {array} [request.discoveryUrls] Discovery urls of the application
   *
   * @param {string} [request.discoveryProfileUri] Discovery profile uri
   *
   * @param {string} [request.gatewayServerUri] Gateway server uri
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  updateApplicationRegistrationWithHttpOperationResponse(applicationId, request, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._updateApplicationRegistration(applicationId, request, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Update application registration
   *
   * The application information is updated with new properties.  Note that
   * this information might be overridden if the application is re-discovered
   * during a discovery run (recurring or one-time).
   *
   * @param {string} applicationId The identifier of the application
   *
   * @param {object} request Application update request
   *
   * @param {string} [request.productUri] Product uri
   *
   * @param {string} [request.applicationName] Default name of the server or
   * client.
   *
   * @param {string} [request.locale] Locale of default name - defaults to "en"
   *
   * @param {object} [request.localizedNames] Localized names keyed off locale
   * id.
   * To remove entry, set value for locale id to null.
   *
   * @param {buffer} [request.certificate] Application public cert
   *
   * @param {array} [request.capabilities] Capabilities of the application
   *
   * @param {array} [request.discoveryUrls] Discovery urls of the application
   *
   * @param {string} [request.discoveryProfileUri] Discovery profile uri
   *
   * @param {string} [request.gatewayServerUri] Gateway server uri
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  updateApplicationRegistration(applicationId, request, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._updateApplicationRegistration(applicationId, request, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._updateApplicationRegistration(applicationId, request, options, optionalCallback);
    }
  }

  /**
   * @summary Get list of sites
   *
   * List all sites applications are registered in.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.continuationToken] Optional Continuation
   * token
   *
   * @param {number} [options.pageSize] Optional number of results to
   * return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ApplicationSiteListApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getListOfSitesWithHttpOperationResponse(options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getListOfSites(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Get list of sites
   *
   * List all sites applications are registered in.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.continuationToken] Optional Continuation
   * token
   *
   * @param {number} [options.pageSize] Optional number of results to
   * return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ApplicationSiteListApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ApplicationSiteListApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getListOfSites(options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getListOfSites(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getListOfSites(options, optionalCallback);
    }
  }

  /**
   * @summary Get filtered list of applications
   *
   * Get a list of applications filtered using the specified query parameters.
   * The returned model can contain a continuation token if more results are
   * available.
   * Call the GetListOfApplications operation using the token to retrieve
   * more results.
   *
   * @param {object} query Applications Query model
   *
   * @param {string} [query.applicationType] Type of application. Possible values
   * include: 'Server', 'Client', 'ClientAndServer', 'DiscoveryServer'
   *
   * @param {string} [query.applicationUri] Application uri
   *
   * @param {string} [query.productUri] Product uri
   *
   * @param {string} [query.applicationName] Name of application
   *
   * @param {string} [query.locale] Locale of application name - default is "en"
   *
   * @param {string} [query.capability] Application capability to query with
   *
   * @param {string} [query.discoveryProfileUri] Discovery profile uri
   *
   * @param {string} [query.gatewayServerUri] Gateway server uri
   *
   * @param {string} [query.siteOrSupervisorId] Supervisor or site the
   * application belongs to.
   *
   * @param {boolean} [query.includeNotSeenSince] Whether to include apps that
   * were soft deleted
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ApplicationInfoListApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getFilteredListOfApplicationsWithHttpOperationResponse(query, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getFilteredListOfApplications(query, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Get filtered list of applications
   *
   * Get a list of applications filtered using the specified query parameters.
   * The returned model can contain a continuation token if more results are
   * available.
   * Call the GetListOfApplications operation using the token to retrieve
   * more results.
   *
   * @param {object} query Applications Query model
   *
   * @param {string} [query.applicationType] Type of application. Possible values
   * include: 'Server', 'Client', 'ClientAndServer', 'DiscoveryServer'
   *
   * @param {string} [query.applicationUri] Application uri
   *
   * @param {string} [query.productUri] Product uri
   *
   * @param {string} [query.applicationName] Name of application
   *
   * @param {string} [query.locale] Locale of application name - default is "en"
   *
   * @param {string} [query.capability] Application capability to query with
   *
   * @param {string} [query.discoveryProfileUri] Discovery profile uri
   *
   * @param {string} [query.gatewayServerUri] Gateway server uri
   *
   * @param {string} [query.siteOrSupervisorId] Supervisor or site the
   * application belongs to.
   *
   * @param {boolean} [query.includeNotSeenSince] Whether to include apps that
   * were soft deleted
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ApplicationInfoListApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ApplicationInfoListApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getFilteredListOfApplications(query, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getFilteredListOfApplications(query, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getFilteredListOfApplications(query, options, optionalCallback);
    }
  }

  /**
   * @summary Query applications
   *
   * List applications that match a query model.
   * The returned model can contain a continuation token if more results are
   * available.
   * Call the GetListOfApplications operation using the token to retrieve
   * more results.
   *
   * @param {object} query Application query
   *
   * @param {string} [query.applicationType] Type of application. Possible values
   * include: 'Server', 'Client', 'ClientAndServer', 'DiscoveryServer'
   *
   * @param {string} [query.applicationUri] Application uri
   *
   * @param {string} [query.productUri] Product uri
   *
   * @param {string} [query.applicationName] Name of application
   *
   * @param {string} [query.locale] Locale of application name - default is "en"
   *
   * @param {string} [query.capability] Application capability to query with
   *
   * @param {string} [query.discoveryProfileUri] Discovery profile uri
   *
   * @param {string} [query.gatewayServerUri] Gateway server uri
   *
   * @param {string} [query.siteOrSupervisorId] Supervisor or site the
   * application belongs to.
   *
   * @param {boolean} [query.includeNotSeenSince] Whether to include apps that
   * were soft deleted
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.pageSize] Optional number of results to
   * return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ApplicationInfoListApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  queryApplicationsWithHttpOperationResponse(query, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._queryApplications(query, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Query applications
   *
   * List applications that match a query model.
   * The returned model can contain a continuation token if more results are
   * available.
   * Call the GetListOfApplications operation using the token to retrieve
   * more results.
   *
   * @param {object} query Application query
   *
   * @param {string} [query.applicationType] Type of application. Possible values
   * include: 'Server', 'Client', 'ClientAndServer', 'DiscoveryServer'
   *
   * @param {string} [query.applicationUri] Application uri
   *
   * @param {string} [query.productUri] Product uri
   *
   * @param {string} [query.applicationName] Name of application
   *
   * @param {string} [query.locale] Locale of application name - default is "en"
   *
   * @param {string} [query.capability] Application capability to query with
   *
   * @param {string} [query.discoveryProfileUri] Discovery profile uri
   *
   * @param {string} [query.gatewayServerUri] Gateway server uri
   *
   * @param {string} [query.siteOrSupervisorId] Supervisor or site the
   * application belongs to.
   *
   * @param {boolean} [query.includeNotSeenSince] Whether to include apps that
   * were soft deleted
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.pageSize] Optional number of results to
   * return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ApplicationInfoListApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ApplicationInfoListApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  queryApplications(query, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._queryApplications(query, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._queryApplications(query, options, optionalCallback);
    }
  }

  /**
   * @summary Query applications by id.
   *
   * A query model which supports the OPC UA Global Discovery Server query.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.query]
   *
   * @param {number} [options.query.startingRecordId] Starting record id
   *
   * @param {number} [options.query.maxRecordsToReturn] Max records to return
   *
   * @param {string} [options.query.applicationName] Application name
   *
   * @param {string} [options.query.applicationUri] Application uri
   *
   * @param {string} [options.query.applicationType] Application type. Possible
   * values include: 'Server', 'Client', 'ClientAndServer', 'DiscoveryServer'
   *
   * @param {string} [options.query.productUri] Product uri
   *
   * @param {array} [options.query.serverCapabilities] Server capabilities
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ApplicationRecordListApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  queryApplicationsByIdWithHttpOperationResponse(options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._queryApplicationsById(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Query applications by id.
   *
   * A query model which supports the OPC UA Global Discovery Server query.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.query]
   *
   * @param {number} [options.query.startingRecordId] Starting record id
   *
   * @param {number} [options.query.maxRecordsToReturn] Max records to return
   *
   * @param {string} [options.query.applicationName] Application name
   *
   * @param {string} [options.query.applicationUri] Application uri
   *
   * @param {string} [options.query.applicationType] Application type. Possible
   * values include: 'Server', 'Client', 'ClientAndServer', 'DiscoveryServer'
   *
   * @param {string} [options.query.productUri] Product uri
   *
   * @param {array} [options.query.serverCapabilities] Server capabilities
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ApplicationRecordListApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ApplicationRecordListApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  queryApplicationsById(options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._queryApplicationsById(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._queryApplicationsById(options, optionalCallback);
    }
  }

  /**
   * @summary Activate endpoint
   *
   * Activates an endpoint for subsequent use in twin service.
   * All endpoints must be activated using this API or through a
   * activation filter during application registration or discovery.
   *
   * @param {string} endpointId endpoint identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  activateEndpointWithHttpOperationResponse(endpointId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._activateEndpoint(endpointId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Activate endpoint
   *
   * Activates an endpoint for subsequent use in twin service.
   * All endpoints must be activated using this API or through a
   * activation filter during application registration or discovery.
   *
   * @param {string} endpointId endpoint identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  activateEndpoint(endpointId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._activateEndpoint(endpointId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._activateEndpoint(endpointId, options, optionalCallback);
    }
  }

  /**
   * @summary Get endpoint information
   *
   * Gets information about an endpoint.
   *
   * @param {string} endpointId endpoint identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if
   * available
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<EndpointInfoApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getEndpointWithHttpOperationResponse(endpointId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getEndpoint(endpointId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Get endpoint information
   *
   * Gets information about an endpoint.
   *
   * @param {string} endpointId endpoint identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if
   * available
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {EndpointInfoApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link EndpointInfoApiModel} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getEndpoint(endpointId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getEndpoint(endpointId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getEndpoint(endpointId, options, optionalCallback);
    }
  }

  /**
   * @summary Update endpoint information
   *
   * @param {string} endpointId endpoint identifier
   *
   * @param {object} request Endpoint update request
   *
   * @param {object} [request.user] User authentication to change on the
   * endpoint.
   *
   * @param {string} [request.user.type] Type of credential. Possible values
   * include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [request.user.value] Value to pass to server
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  updateEndpointWithHttpOperationResponse(endpointId, request, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._updateEndpoint(endpointId, request, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Update endpoint information
   *
   * @param {string} endpointId endpoint identifier
   *
   * @param {object} request Endpoint update request
   *
   * @param {object} [request.user] User authentication to change on the
   * endpoint.
   *
   * @param {string} [request.user.type] Type of credential. Possible values
   * include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [request.user.value] Value to pass to server
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  updateEndpoint(endpointId, request, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._updateEndpoint(endpointId, request, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._updateEndpoint(endpointId, request, options, optionalCallback);
    }
  }

  /**
   * @summary Get list of endpoints
   *
   * Get all registered endpoints in paged form.
   * The returned model can contain a continuation token if more results are
   * available.
   * Call this operation again using the token to retrieve more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {string} [options.continuationToken] Optional Continuation token
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<EndpointInfoListApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getListOfEndpointsWithHttpOperationResponse(options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getListOfEndpoints(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Get list of endpoints
   *
   * Get all registered endpoints in paged form.
   * The returned model can contain a continuation token if more results are
   * available.
   * Call this operation again using the token to retrieve more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {string} [options.continuationToken] Optional Continuation token
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {EndpointInfoListApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link EndpointInfoListApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getListOfEndpoints(options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getListOfEndpoints(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getListOfEndpoints(options, optionalCallback);
    }
  }

  /**
   * @summary Get filtered list of endpoints
   *
   * Get a list of endpoints filtered using the specified query parameters.
   * The returned model can contain a continuation token if more results are
   * available.
   * Call the GetListOfEndpoints operation using the token to retrieve
   * more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.url] Endoint url for direct server access
   *
   * @param {string} [options.userAuthentication] Type of credential selected for
   * authentication. Possible values include: 'None', 'UserName',
   * 'X509Certificate', 'JwtToken'
   *
   * @param {buffer} [options.certificate] Certificate of the endpoint
   *
   * @param {string} [options.securityMode] Security Mode. Possible values
   * include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
   *
   * @param {string} [options.securityPolicy] Security policy uri
   *
   * @param {boolean} [options.activated] Whether the endpoint was activated
   *
   * @param {boolean} [options.connected] Whether the endpoint is connected on
   * supervisor.
   *
   * @param {string} [options.endpointState] The last state of the the activated
   * endpoint. Possible values include: 'Connecting', 'NotReachable', 'Busy',
   * 'NoTrust', 'CertificateInvalid', 'Ready', 'Error'
   *
   * @param {boolean} [options.includeNotSeenSince] Whether to include endpoints
   * that were soft deleted
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display
   * current client state of the endpoint if available
   *
   * @param {number} [options.pageSize] Optional number of results to
   * return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<EndpointInfoListApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getFilteredListOfEndpointsWithHttpOperationResponse(options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getFilteredListOfEndpoints(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Get filtered list of endpoints
   *
   * Get a list of endpoints filtered using the specified query parameters.
   * The returned model can contain a continuation token if more results are
   * available.
   * Call the GetListOfEndpoints operation using the token to retrieve
   * more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.url] Endoint url for direct server access
   *
   * @param {string} [options.userAuthentication] Type of credential selected for
   * authentication. Possible values include: 'None', 'UserName',
   * 'X509Certificate', 'JwtToken'
   *
   * @param {buffer} [options.certificate] Certificate of the endpoint
   *
   * @param {string} [options.securityMode] Security Mode. Possible values
   * include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
   *
   * @param {string} [options.securityPolicy] Security policy uri
   *
   * @param {boolean} [options.activated] Whether the endpoint was activated
   *
   * @param {boolean} [options.connected] Whether the endpoint is connected on
   * supervisor.
   *
   * @param {string} [options.endpointState] The last state of the the activated
   * endpoint. Possible values include: 'Connecting', 'NotReachable', 'Busy',
   * 'NoTrust', 'CertificateInvalid', 'Ready', 'Error'
   *
   * @param {boolean} [options.includeNotSeenSince] Whether to include endpoints
   * that were soft deleted
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display
   * current client state of the endpoint if available
   *
   * @param {number} [options.pageSize] Optional number of results to
   * return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {EndpointInfoListApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link EndpointInfoListApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getFilteredListOfEndpoints(options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getFilteredListOfEndpoints(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getFilteredListOfEndpoints(options, optionalCallback);
    }
  }

  /**
   * @summary Query endpoints
   *
   * Return endpoints that match the specified query.
   * The returned model can contain a continuation token if more results are
   * available.
   * Call the GetListOfEndpoints operation using the token to retrieve
   * more results.
   *
   * @param {object} query Query to match
   *
   * @param {string} [query.url] Endoint url for direct server access
   *
   * @param {string} [query.userAuthentication] Type of credential selected for
   * authentication. Possible values include: 'None', 'UserName',
   * 'X509Certificate', 'JwtToken'
   *
   * @param {buffer} [query.certificate] Certificate of the endpoint
   *
   * @param {string} [query.securityMode] Security Mode. Possible values include:
   * 'Best', 'Sign', 'SignAndEncrypt', 'None'
   *
   * @param {string} [query.securityPolicy] Security policy uri
   *
   * @param {boolean} [query.activated] Whether the endpoint was activated
   *
   * @param {boolean} [query.connected] Whether the endpoint is connected on
   * supervisor.
   *
   * @param {string} [query.endpointState] The last state of the the activated
   * endpoint. Possible values include: 'Connecting', 'NotReachable', 'Busy',
   * 'NoTrust', 'CertificateInvalid', 'Ready', 'Error'
   *
   * @param {boolean} [query.includeNotSeenSince] Whether to include endpoints
   * that were soft deleted
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<EndpointInfoListApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  queryEndpointsWithHttpOperationResponse(query, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._queryEndpoints(query, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Query endpoints
   *
   * Return endpoints that match the specified query.
   * The returned model can contain a continuation token if more results are
   * available.
   * Call the GetListOfEndpoints operation using the token to retrieve
   * more results.
   *
   * @param {object} query Query to match
   *
   * @param {string} [query.url] Endoint url for direct server access
   *
   * @param {string} [query.userAuthentication] Type of credential selected for
   * authentication. Possible values include: 'None', 'UserName',
   * 'X509Certificate', 'JwtToken'
   *
   * @param {buffer} [query.certificate] Certificate of the endpoint
   *
   * @param {string} [query.securityMode] Security Mode. Possible values include:
   * 'Best', 'Sign', 'SignAndEncrypt', 'None'
   *
   * @param {string} [query.securityPolicy] Security policy uri
   *
   * @param {boolean} [query.activated] Whether the endpoint was activated
   *
   * @param {boolean} [query.connected] Whether the endpoint is connected on
   * supervisor.
   *
   * @param {string} [query.endpointState] The last state of the the activated
   * endpoint. Possible values include: 'Connecting', 'NotReachable', 'Busy',
   * 'NoTrust', 'CertificateInvalid', 'Ready', 'Error'
   *
   * @param {boolean} [query.includeNotSeenSince] Whether to include endpoints
   * that were soft deleted
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {EndpointInfoListApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link EndpointInfoListApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  queryEndpoints(query, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._queryEndpoints(query, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._queryEndpoints(query, options, optionalCallback);
    }
  }

  /**
   * @summary Deactivate endpoint
   *
   * Deactivates the endpoint and disable access through twin service.
   *
   * @param {string} endpointId endpoint identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deactivateEndpointWithHttpOperationResponse(endpointId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deactivateEndpoint(endpointId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Deactivate endpoint
   *
   * Deactivates the endpoint and disable access through twin service.
   *
   * @param {string} endpointId endpoint identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deactivateEndpoint(endpointId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deactivateEndpoint(endpointId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deactivateEndpoint(endpointId, options, optionalCallback);
    }
  }

  /**
   * @summary Return the service status in the form of the service status
   * api model.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<StatusResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getStatusWithHttpOperationResponse(options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getStatus(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Return the service status in the form of the service status
   * api model.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {StatusResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link StatusResponseApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getStatus(options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getStatus(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getStatus(options, optionalCallback);
    }
  }

  /**
   * @summary Get supervisor registration information
   *
   * Returns a supervisor's registration and connectivity information.
   * A supervisor id corresponds to the twin modules module identity.
   *
   * @param {string} supervisorId Supervisor identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if
   * available
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SupervisorApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getSupervisorWithHttpOperationResponse(supervisorId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getSupervisor(supervisorId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Get supervisor registration information
   *
   * Returns a supervisor's registration and connectivity information.
   * A supervisor id corresponds to the twin modules module identity.
   *
   * @param {string} supervisorId Supervisor identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if
   * available
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SupervisorApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SupervisorApiModel} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getSupervisor(supervisorId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getSupervisor(supervisorId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getSupervisor(supervisorId, options, optionalCallback);
    }
  }

  /**
   * @summary Update supervisor information
   *
   * Allows a caller to configure recurring discovery runs on the twin module
   * identified by the supervisor id or update site information.
   *
   * @param {string} supervisorId supervisor identifier
   *
   * @param {object} request Patch request
   *
   * @param {string} [request.siteId] Site of the supervisor
   *
   * @param {string} [request.discovery] Whether the supervisor is in discovery
   * mode.
   * If null, does not change. Possible values include: 'Off', 'Local',
   * 'Network', 'Fast', 'Scan'
   *
   * @param {object} [request.discoveryConfig] Supervisor discovery configuration
   *
   * @param {string} [request.discoveryConfig.addressRangesToScan] Address ranges
   * to scan (null == all wired nics)
   *
   * @param {number} [request.discoveryConfig.networkProbeTimeoutMs] Network
   * probe timeout
   *
   * @param {number} [request.discoveryConfig.maxNetworkProbes] Max network
   * probes that should ever run.
   *
   * @param {string} [request.discoveryConfig.portRangesToScan] Port ranges to
   * scan (null == all unassigned)
   *
   * @param {number} [request.discoveryConfig.portProbeTimeoutMs] Port probe
   * timeout
   *
   * @param {number} [request.discoveryConfig.maxPortProbes] Max port probes that
   * should ever run.
   *
   * @param {number} [request.discoveryConfig.minPortProbesPercent] Probes that
   * must always be there as percent of max.
   *
   * @param {number} [request.discoveryConfig.idleTimeBetweenScansSec] Delay time
   * between discovery sweeps in seconds
   *
   * @param {array} [request.discoveryConfig.discoveryUrls] List of preset
   * discovery urls to use
   *
   * @param {array} [request.discoveryConfig.locales] List of locales to filter
   * with during discovery
   *
   * @param {array} [request.discoveryConfig.callbacks] Callbacks to invoke once
   * onboarding finishes
   *
   * @param {object} [request.discoveryConfig.activationFilter] Activate all
   * twins with this filter during onboarding.
   *
   * @param {array} [request.discoveryConfig.activationFilter.trustLists]
   * Certificate trust list identifiers to use for
   * activation, if null, all certificates are
   * trusted.  If empty list, no certificates are
   * trusted which is equal to no filter.
   *
   * @param {array} [request.discoveryConfig.activationFilter.securityPolicies]
   * Endpoint security policies to filter against.
   * If set to null, all policies are in scope.
   *
   * @param {string} [request.discoveryConfig.activationFilter.securityMode]
   * Security mode level to activate. If null,
   * then Microsoft.Azure.IIoT.OpcUa.Registry.Models.SecurityMode.Best is
   * assumed. Possible values include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
   *
   * @param {array} [request.discoveryCallbacks] Callbacks to add or remove (see
   * below)
   *
   * @param {boolean} [request.removeDiscoveryCallbacks] Whether to add or remove
   * callbacks
   *
   * @param {string} [request.logLevel] Current log level. Possible values
   * include: 'Error', 'Information', 'Debug', 'Verbose'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  updateSupervisorWithHttpOperationResponse(supervisorId, request, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._updateSupervisor(supervisorId, request, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Update supervisor information
   *
   * Allows a caller to configure recurring discovery runs on the twin module
   * identified by the supervisor id or update site information.
   *
   * @param {string} supervisorId supervisor identifier
   *
   * @param {object} request Patch request
   *
   * @param {string} [request.siteId] Site of the supervisor
   *
   * @param {string} [request.discovery] Whether the supervisor is in discovery
   * mode.
   * If null, does not change. Possible values include: 'Off', 'Local',
   * 'Network', 'Fast', 'Scan'
   *
   * @param {object} [request.discoveryConfig] Supervisor discovery configuration
   *
   * @param {string} [request.discoveryConfig.addressRangesToScan] Address ranges
   * to scan (null == all wired nics)
   *
   * @param {number} [request.discoveryConfig.networkProbeTimeoutMs] Network
   * probe timeout
   *
   * @param {number} [request.discoveryConfig.maxNetworkProbes] Max network
   * probes that should ever run.
   *
   * @param {string} [request.discoveryConfig.portRangesToScan] Port ranges to
   * scan (null == all unassigned)
   *
   * @param {number} [request.discoveryConfig.portProbeTimeoutMs] Port probe
   * timeout
   *
   * @param {number} [request.discoveryConfig.maxPortProbes] Max port probes that
   * should ever run.
   *
   * @param {number} [request.discoveryConfig.minPortProbesPercent] Probes that
   * must always be there as percent of max.
   *
   * @param {number} [request.discoveryConfig.idleTimeBetweenScansSec] Delay time
   * between discovery sweeps in seconds
   *
   * @param {array} [request.discoveryConfig.discoveryUrls] List of preset
   * discovery urls to use
   *
   * @param {array} [request.discoveryConfig.locales] List of locales to filter
   * with during discovery
   *
   * @param {array} [request.discoveryConfig.callbacks] Callbacks to invoke once
   * onboarding finishes
   *
   * @param {object} [request.discoveryConfig.activationFilter] Activate all
   * twins with this filter during onboarding.
   *
   * @param {array} [request.discoveryConfig.activationFilter.trustLists]
   * Certificate trust list identifiers to use for
   * activation, if null, all certificates are
   * trusted.  If empty list, no certificates are
   * trusted which is equal to no filter.
   *
   * @param {array} [request.discoveryConfig.activationFilter.securityPolicies]
   * Endpoint security policies to filter against.
   * If set to null, all policies are in scope.
   *
   * @param {string} [request.discoveryConfig.activationFilter.securityMode]
   * Security mode level to activate. If null,
   * then Microsoft.Azure.IIoT.OpcUa.Registry.Models.SecurityMode.Best is
   * assumed. Possible values include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
   *
   * @param {array} [request.discoveryCallbacks] Callbacks to add or remove (see
   * below)
   *
   * @param {boolean} [request.removeDiscoveryCallbacks] Whether to add or remove
   * callbacks
   *
   * @param {string} [request.logLevel] Current log level. Possible values
   * include: 'Error', 'Information', 'Debug', 'Verbose'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  updateSupervisor(supervisorId, request, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._updateSupervisor(supervisorId, request, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._updateSupervisor(supervisorId, request, options, optionalCallback);
    }
  }

  /**
   * @summary Get runtime status of supervisor
   *
   * Allows a caller to get runtime status for a supervisor.
   *
   * @param {string} supervisorId supervisor identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SupervisorStatusApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getSupervisorStatusWithHttpOperationResponse(supervisorId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getSupervisorStatus(supervisorId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Get runtime status of supervisor
   *
   * Allows a caller to get runtime status for a supervisor.
   *
   * @param {string} supervisorId supervisor identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SupervisorStatusApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SupervisorStatusApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getSupervisorStatus(supervisorId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getSupervisorStatus(supervisorId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getSupervisorStatus(supervisorId, options, optionalCallback);
    }
  }

  /**
   * @summary Reset supervisor
   *
   * Allows a caller to reset the twin module using its supervisor
   * identity identifier.
   *
   * @param {string} supervisorId supervisor identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  resetSupervisorWithHttpOperationResponse(supervisorId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._resetSupervisor(supervisorId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Reset supervisor
   *
   * Allows a caller to reset the twin module using its supervisor
   * identity identifier.
   *
   * @param {string} supervisorId supervisor identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  resetSupervisor(supervisorId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._resetSupervisor(supervisorId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._resetSupervisor(supervisorId, options, optionalCallback);
    }
  }

  /**
   * @summary Get list of supervisors
   *
   * Get all registered supervisors and therefore twin modules in paged form.
   * The returned model can contain a continuation token if more results are
   * available.
   * Call this operation again using the token to retrieve more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {string} [options.continuationToken] Optional Continuation token
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SupervisorListApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getListOfSupervisorsWithHttpOperationResponse(options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getListOfSupervisors(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Get list of supervisors
   *
   * Get all registered supervisors and therefore twin modules in paged form.
   * The returned model can contain a continuation token if more results are
   * available.
   * Call this operation again using the token to retrieve more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {string} [options.continuationToken] Optional Continuation token
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SupervisorListApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SupervisorListApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getListOfSupervisors(options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getListOfSupervisors(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getListOfSupervisors(options, optionalCallback);
    }
  }

  /**
   * @summary Get filtered list of supervisors
   *
   * Get a list of supervisors filtered using the specified query parameters.
   * The returned model can contain a continuation token if more results are
   * available.
   * Call the GetListOfSupervisors operation using the token to retrieve
   * more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.siteId] Site of the supervisor
   *
   * @param {string} [options.discovery] Discovery mode of supervisor. Possible
   * values include: 'Off', 'Local', 'Network', 'Fast', 'Scan'
   *
   * @param {boolean} [options.connected] Included connected or disconnected
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if
   * available
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SupervisorListApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getFilteredListOfSupervisorsWithHttpOperationResponse(options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getFilteredListOfSupervisors(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Get filtered list of supervisors
   *
   * Get a list of supervisors filtered using the specified query parameters.
   * The returned model can contain a continuation token if more results are
   * available.
   * Call the GetListOfSupervisors operation using the token to retrieve
   * more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.siteId] Site of the supervisor
   *
   * @param {string} [options.discovery] Discovery mode of supervisor. Possible
   * values include: 'Off', 'Local', 'Network', 'Fast', 'Scan'
   *
   * @param {boolean} [options.connected] Included connected or disconnected
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if
   * available
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SupervisorListApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SupervisorListApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getFilteredListOfSupervisors(options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getFilteredListOfSupervisors(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getFilteredListOfSupervisors(options, optionalCallback);
    }
  }

  /**
   * @summary Query supervisors
   *
   * Get all supervisors that match a specified query.
   * The returned model can contain a continuation token if more results are
   * available.
   * Call the GetListOfSupervisors operation using the token to retrieve
   * more results.
   *
   * @param {object} query Supervisors query model
   *
   * @param {string} [query.siteId] Site of the supervisor
   *
   * @param {string} [query.discovery] Discovery mode of supervisor. Possible
   * values include: 'Off', 'Local', 'Network', 'Fast', 'Scan'
   *
   * @param {boolean} [query.connected] Included connected or disconnected
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if
   * available
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SupervisorListApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  querySupervisorsWithHttpOperationResponse(query, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._querySupervisors(query, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Query supervisors
   *
   * Get all supervisors that match a specified query.
   * The returned model can contain a continuation token if more results are
   * available.
   * Call the GetListOfSupervisors operation using the token to retrieve
   * more results.
   *
   * @param {object} query Supervisors query model
   *
   * @param {string} [query.siteId] Site of the supervisor
   *
   * @param {string} [query.discovery] Discovery mode of supervisor. Possible
   * values include: 'Off', 'Local', 'Network', 'Fast', 'Scan'
   *
   * @param {boolean} [query.connected] Included connected or disconnected
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if
   * available
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SupervisorListApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SupervisorListApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  querySupervisors(query, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._querySupervisors(query, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._querySupervisors(query, options, optionalCallback);
    }
  }

}

module.exports = AzureOpcRegistryClient;
module.exports['default'] = AzureOpcRegistryClient;
module.exports.AzureOpcRegistryClient = AzureOpcRegistryClient;
module.exports.AzureOpcRegistryModels = models;
