/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

'use strict';

const msRest = require('ms-rest');
const ServiceClient = msRest.ServiceClient;
const WebResource = msRest.WebResource;

const models = require('./models');


/**
 * @summary Register new server
 *
 * Registers a server solely using a discovery url. Requires that the
 * onboarding agent service is running and the server can be located by a
 * supervisor in its network using the discovery url.
 *
 * @param {object} body Server registration request
 *
 * @param {string} body.discoveryUrl Discovery url to use for registration
 *
 * @param {string} [body.id] Registration id
 *
 * @param {object} [body.activationFilter]
 *
 * @param {array} [body.activationFilter.trustLists] Certificate trust list
 * identifiers to use for
 * activation, if null, all certificates are
 * trusted.  If empty list, no certificates are
 * trusted which is equal to no filter.
 *
 * @param {array} [body.activationFilter.securityPolicies] Endpoint security
 * policies to filter against.
 * If set to null, all policies are in scope.
 *
 * @param {string} [body.activationFilter.securityMode] Possible values
 * include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _registerServer(body, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/applications';

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['ServerRegistrationRequestApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Create new application
 *
 * The application is registered using the provided information, but it is not
 * associated with a supervisor. This is useful for when you need to register
 * clients or you want to register a server that is located in a network not
 * reachable through a Twin module.
 *
 * @param {object} body Application registration request
 *
 * @param {string} body.applicationUri Unique application uri
 *
 * @param {string} [body.applicationType] Possible values include: 'Server',
 * 'Client', 'ClientAndServer', 'DiscoveryServer'
 *
 * @param {string} [body.productUri] Product uri of the application.
 *
 * @param {string} [body.applicationName] Default name of the server or client.
 *
 * @param {string} [body.locale] Locale of default name
 *
 * @param {string} [body.siteId] Site of the application
 *
 * @param {object} [body.localizedNames] Localized names key off locale id.
 *
 * @param {array} [body.capabilities] The OPC UA defined capabilities of the
 * server.
 *
 * @param {array} [body.discoveryUrls] Discovery urls of the server.
 *
 * @param {string} [body.discoveryProfileUri] The discovery profile uri of the
 * server.
 *
 * @param {string} [body.gatewayServerUri] Gateway server uri
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ApplicationRegistrationResponseApiModel} for
 *                      more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _createApplication(body, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/applications';

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['ApplicationRegistrationRequestApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ApplicationRegistrationResponseApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Purge applications
 *
 * Purges all applications that have not been seen for a specified amount of
 * time.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.notSeenFor] A duration in milliseconds
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteAllDisabledApplications(options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let notSeenFor = (options && options.notSeenFor !== undefined) ? options.notSeenFor : undefined;
  // Validate
  try {
    if (notSeenFor !== null && notSeenFor !== undefined && typeof notSeenFor.valueOf() !== 'string') {
      throw new Error('notSeenFor must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/applications';
  let queryParameters = [];
  if (notSeenFor !== null && notSeenFor !== undefined) {
    queryParameters.push('notSeenFor=' + encodeURIComponent(notSeenFor));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Get list of applications
 *
 * Get all registered applications in paged form. The returned model can
 * contain a continuation token if more results are available. Call this
 * operation again using the token to retrieve more results.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.continuationToken] Optional Continuation token
 *
 * @param {number} [options.pageSize] Optional number of results to return
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ApplicationInfoListApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getListOfApplications(options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let continuationToken = (options && options.continuationToken !== undefined) ? options.continuationToken : undefined;
  let pageSize = (options && options.pageSize !== undefined) ? options.pageSize : undefined;
  // Validate
  try {
    if (continuationToken !== null && continuationToken !== undefined && typeof continuationToken.valueOf() !== 'string') {
      throw new Error('continuationToken must be of type string.');
    }
    if (pageSize !== null && pageSize !== undefined && typeof pageSize !== 'number') {
      throw new Error('pageSize must be of type number.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/applications';
  let queryParameters = [];
  if (continuationToken !== null && continuationToken !== undefined) {
    queryParameters.push('continuationToken=' + encodeURIComponent(continuationToken));
  }
  if (pageSize !== null && pageSize !== undefined) {
    queryParameters.push('pageSize=' + encodeURIComponent(pageSize.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ApplicationInfoListApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Disable an enabled application.
 *
 * A manager can disable an application.
 *
 * @param {string} applicationId The application id
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _disableApplication(applicationId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (applicationId === null || applicationId === undefined || typeof applicationId.valueOf() !== 'string') {
      throw new Error('applicationId cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/applications/{applicationId}/disable';
  requestUrl = requestUrl.replace('{applicationId}', encodeURIComponent(applicationId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Re-enable a disabled application.
 *
 * A manager can enable an application.
 *
 * @param {string} applicationId The application id
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _enableApplication(applicationId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (applicationId === null || applicationId === undefined || typeof applicationId.valueOf() !== 'string') {
      throw new Error('applicationId cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/applications/{applicationId}/enable';
  requestUrl = requestUrl.replace('{applicationId}', encodeURIComponent(applicationId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Discover servers
 *
 * Registers servers by running a discovery scan in a supervisor's network.
 * Requires that the onboarding agent service is running.
 *
 * @param {object} body Discovery request
 *
 * @param {string} [body.id] Id of discovery request
 *
 * @param {string} [body.discovery] Possible values include: 'Off', 'Local',
 * 'Network', 'Fast', 'Scan'
 *
 * @param {object} [body.configuration]
 *
 * @param {string} [body.configuration.addressRangesToScan] Address ranges to
 * scan (null == all wired nics)
 *
 * @param {number} [body.configuration.networkProbeTimeoutMs] Network probe
 * timeout
 *
 * @param {number} [body.configuration.maxNetworkProbes] Max network probes
 * that should ever run.
 *
 * @param {string} [body.configuration.portRangesToScan] Port ranges to scan
 * (null == all unassigned)
 *
 * @param {number} [body.configuration.portProbeTimeoutMs] Port probe timeout
 *
 * @param {number} [body.configuration.maxPortProbes] Max port probes that
 * should ever run.
 *
 * @param {number} [body.configuration.minPortProbesPercent] Probes that must
 * always be there as percent of max.
 *
 * @param {number} [body.configuration.idleTimeBetweenScansSec] Delay time
 * between discovery sweeps in seconds
 *
 * @param {array} [body.configuration.discoveryUrls] List of preset discovery
 * urls to use
 *
 * @param {array} [body.configuration.locales] List of locales to filter with
 * during discovery
 *
 * @param {object} [body.configuration.activationFilter]
 *
 * @param {array} [body.configuration.activationFilter.trustLists] Certificate
 * trust list identifiers to use for
 * activation, if null, all certificates are
 * trusted.  If empty list, no certificates are
 * trusted which is equal to no filter.
 *
 * @param {array} [body.configuration.activationFilter.securityPolicies]
 * Endpoint security policies to filter against.
 * If set to null, all policies are in scope.
 *
 * @param {string} [body.configuration.activationFilter.securityMode] Possible
 * values include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _discoverServer(body, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/applications/discover';

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['DiscoveryRequestApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Cancel discovery
 *
 * Cancels a discovery request using the request identifier.
 *
 * @param {string} requestId Discovery request
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _cancel(requestId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (requestId === null || requestId === undefined || typeof requestId.valueOf() !== 'string') {
      throw new Error('requestId cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/applications/discover/{requestId}';
  requestUrl = requestUrl.replace('{requestId}', encodeURIComponent(requestId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Get application registration
 *
 * @param {string} applicationId Application id for the server
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ApplicationRegistrationApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getApplicationRegistration(applicationId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (applicationId === null || applicationId === undefined || typeof applicationId.valueOf() !== 'string') {
      throw new Error('applicationId cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/applications/{applicationId}';
  requestUrl = requestUrl.replace('{applicationId}', encodeURIComponent(applicationId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ApplicationRegistrationApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Update application registration
 *
 * The application information is updated with new properties. Note that this
 * information might be overridden if the application is re-discovered during a
 * discovery run (recurring or one-time).
 *
 * @param {string} applicationId The identifier of the application
 *
 * @param {object} body Application update request
 *
 * @param {string} [body.productUri] Product uri
 *
 * @param {string} [body.applicationName] Default name of the server or client.
 *
 * @param {string} [body.locale] Locale of default name - defaults to "en"
 *
 * @param {object} [body.localizedNames] Localized names keyed off locale id.
 * To remove entry, set value for locale id to null.
 *
 * @param {buffer} [body.certificate] Application public cert
 *
 * @param {array} [body.capabilities] Capabilities of the application
 *
 * @param {array} [body.discoveryUrls] Discovery urls of the application
 *
 * @param {string} [body.discoveryProfileUri] Discovery profile uri
 *
 * @param {string} [body.gatewayServerUri] Gateway server uri
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _updateApplicationRegistration(applicationId, body, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (applicationId === null || applicationId === undefined || typeof applicationId.valueOf() !== 'string') {
      throw new Error('applicationId cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/applications/{applicationId}';
  requestUrl = requestUrl.replace('{applicationId}', encodeURIComponent(applicationId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['ApplicationRegistrationUpdateApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Unregister application
 *
 * Unregisters and deletes application and all its associated endpoints.
 *
 * @param {string} applicationId The identifier of the application
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deleteApplication(applicationId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (applicationId === null || applicationId === undefined || typeof applicationId.valueOf() !== 'string') {
      throw new Error('applicationId cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/applications/{applicationId}';
  requestUrl = requestUrl.replace('{applicationId}', encodeURIComponent(applicationId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Get list of sites
 *
 * List all sites applications are registered in.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.continuationToken] Optional Continuation token
 *
 * @param {number} [options.pageSize] Optional number of results to return
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ApplicationSiteListApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getListOfSites(options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let continuationToken = (options && options.continuationToken !== undefined) ? options.continuationToken : undefined;
  let pageSize = (options && options.pageSize !== undefined) ? options.pageSize : undefined;
  // Validate
  try {
    if (continuationToken !== null && continuationToken !== undefined && typeof continuationToken.valueOf() !== 'string') {
      throw new Error('continuationToken must be of type string.');
    }
    if (pageSize !== null && pageSize !== undefined && typeof pageSize !== 'number') {
      throw new Error('pageSize must be of type number.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/applications/sites';
  let queryParameters = [];
  if (continuationToken !== null && continuationToken !== undefined) {
    queryParameters.push('continuationToken=' + encodeURIComponent(continuationToken));
  }
  if (pageSize !== null && pageSize !== undefined) {
    queryParameters.push('pageSize=' + encodeURIComponent(pageSize.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ApplicationSiteListApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Query applications
 *
 * List applications that match a query model. The returned model can contain a
 * continuation token if more results are available. Call the
 * GetListOfApplications operation using the token to retrieve more results.
 *
 * @param {object} body Application query
 *
 * @param {string} [body.applicationType] Possible values include: 'Server',
 * 'Client', 'ClientAndServer', 'DiscoveryServer'
 *
 * @param {string} [body.applicationUri] Application uri
 *
 * @param {string} [body.productUri] Product uri
 *
 * @param {string} [body.applicationName] Name of application
 *
 * @param {string} [body.locale] Locale of application name - default is "en"
 *
 * @param {string} [body.capability] Application capability to query with
 *
 * @param {string} [body.discoveryProfileUri] Discovery profile uri
 *
 * @param {string} [body.gatewayServerUri] Gateway server uri
 *
 * @param {string} [body.siteOrGatewayId] Supervisor or site the application
 * belongs to.
 *
 * @param {boolean} [body.includeNotSeenSince] Whether to include apps that
 * were soft deleted
 *
 * @param {string} [body.discovererId] Discoverer id to filter with
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {number} [options.pageSize] Optional number of results to return
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ApplicationInfoListApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _queryApplications(body, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let pageSize = (options && options.pageSize !== undefined) ? options.pageSize : undefined;
  // Validate
  try {
    if (pageSize !== null && pageSize !== undefined && typeof pageSize !== 'number') {
      throw new Error('pageSize must be of type number.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/applications/query';
  let queryParameters = [];
  if (pageSize !== null && pageSize !== undefined) {
    queryParameters.push('pageSize=' + encodeURIComponent(pageSize.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['ApplicationRegistrationQueryApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ApplicationInfoListApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Get filtered list of applications
 *
 * Get a list of applications filtered using the specified query parameters.
 * The returned model can contain a continuation token if more results are
 * available. Call the GetListOfApplications operation using the token to
 * retrieve more results.
 *
 * @param {object} body Applications Query model
 *
 * @param {string} [body.applicationType] Possible values include: 'Server',
 * 'Client', 'ClientAndServer', 'DiscoveryServer'
 *
 * @param {string} [body.applicationUri] Application uri
 *
 * @param {string} [body.productUri] Product uri
 *
 * @param {string} [body.applicationName] Name of application
 *
 * @param {string} [body.locale] Locale of application name - default is "en"
 *
 * @param {string} [body.capability] Application capability to query with
 *
 * @param {string} [body.discoveryProfileUri] Discovery profile uri
 *
 * @param {string} [body.gatewayServerUri] Gateway server uri
 *
 * @param {string} [body.siteOrGatewayId] Supervisor or site the application
 * belongs to.
 *
 * @param {boolean} [body.includeNotSeenSince] Whether to include apps that
 * were soft deleted
 *
 * @param {string} [body.discovererId] Discoverer id to filter with
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {number} [options.pageSize] Number of results to return
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link ApplicationInfoListApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getFilteredListOfApplications(body, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let pageSize = (options && options.pageSize !== undefined) ? options.pageSize : undefined;
  // Validate
  try {
    if (pageSize !== null && pageSize !== undefined && typeof pageSize !== 'number') {
      throw new Error('pageSize must be of type number.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/applications/query';
  let queryParameters = [];
  if (pageSize !== null && pageSize !== undefined) {
    queryParameters.push('pageSize=' + encodeURIComponent(pageSize.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['ApplicationRegistrationQueryApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['ApplicationInfoListApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Subscribe for application events
 *
 * Register a client to receive application events through SignalR.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.body] The user that will receive application
 * events.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _subscribe(options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let body = (options && options.body !== undefined) ? options.body : undefined;
  // Validate
  try {
    if (body !== null && body !== undefined && typeof body.valueOf() !== 'string') {
      throw new Error('body must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/applications/events';

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = {
        required: false,
        serializedName: 'body',
        type: {
          name: 'String'
        }
      };
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Unsubscribe from application events
 *
 * Unregister a user and stop it from receiving events.
 *
 * @param {string} userId The user id that will not receive any more events
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _unsubscribe(userId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (userId === null || userId === undefined || typeof userId.valueOf() !== 'string') {
      throw new Error('userId cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/applications/events/{userId}';
  requestUrl = requestUrl.replace('{userId}', encodeURIComponent(userId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Get discoverer registration information
 *
 * Returns a discoverer's registration and connectivity information. A
 * discoverer id corresponds to the twin modules module identity.
 *
 * @param {string} discovererId Discoverer identifier
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {boolean} [options.onlyServerState] Whether to include only server
 * state, or display current client state of the endpoint if available
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link DiscovererApiModel} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getDiscoverer(discovererId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let onlyServerState = (options && options.onlyServerState !== undefined) ? options.onlyServerState : undefined;
  // Validate
  try {
    if (discovererId === null || discovererId === undefined || typeof discovererId.valueOf() !== 'string') {
      throw new Error('discovererId cannot be null or undefined and it must be of type string.');
    }
    if (onlyServerState !== null && onlyServerState !== undefined && typeof onlyServerState !== 'boolean') {
      throw new Error('onlyServerState must be of type boolean.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/discovery/{discovererId}';
  requestUrl = requestUrl.replace('{discovererId}', encodeURIComponent(discovererId));
  let queryParameters = [];
  if (onlyServerState !== null && onlyServerState !== undefined) {
    queryParameters.push('onlyServerState=' + encodeURIComponent(onlyServerState.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['DiscovererApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Update discoverer information
 *
 * Allows a caller to configure recurring discovery runs on the twin module
 * identified by the discoverer id or update site information.
 *
 * @param {string} discovererId discoverer identifier
 *
 * @param {object} body Patch request
 *
 * @param {string} [body.siteId] Site the discoverer is part of
 *
 * @param {string} [body.discovery] Possible values include: 'Off', 'Local',
 * 'Network', 'Fast', 'Scan'
 *
 * @param {object} [body.discoveryConfig]
 *
 * @param {string} [body.discoveryConfig.addressRangesToScan] Address ranges to
 * scan (null == all wired nics)
 *
 * @param {number} [body.discoveryConfig.networkProbeTimeoutMs] Network probe
 * timeout
 *
 * @param {number} [body.discoveryConfig.maxNetworkProbes] Max network probes
 * that should ever run.
 *
 * @param {string} [body.discoveryConfig.portRangesToScan] Port ranges to scan
 * (null == all unassigned)
 *
 * @param {number} [body.discoveryConfig.portProbeTimeoutMs] Port probe timeout
 *
 * @param {number} [body.discoveryConfig.maxPortProbes] Max port probes that
 * should ever run.
 *
 * @param {number} [body.discoveryConfig.minPortProbesPercent] Probes that must
 * always be there as percent of max.
 *
 * @param {number} [body.discoveryConfig.idleTimeBetweenScansSec] Delay time
 * between discovery sweeps in seconds
 *
 * @param {array} [body.discoveryConfig.discoveryUrls] List of preset discovery
 * urls to use
 *
 * @param {array} [body.discoveryConfig.locales] List of locales to filter with
 * during discovery
 *
 * @param {object} [body.discoveryConfig.activationFilter]
 *
 * @param {array} [body.discoveryConfig.activationFilter.trustLists]
 * Certificate trust list identifiers to use for
 * activation, if null, all certificates are
 * trusted.  If empty list, no certificates are
 * trusted which is equal to no filter.
 *
 * @param {array} [body.discoveryConfig.activationFilter.securityPolicies]
 * Endpoint security policies to filter against.
 * If set to null, all policies are in scope.
 *
 * @param {string} [body.discoveryConfig.activationFilter.securityMode]
 * Possible values include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
 *
 * @param {string} [body.logLevel] Possible values include: 'Error',
 * 'Information', 'Debug', 'Verbose'
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _updateDiscoverer(discovererId, body, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (discovererId === null || discovererId === undefined || typeof discovererId.valueOf() !== 'string') {
      throw new Error('discovererId cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/discovery/{discovererId}';
  requestUrl = requestUrl.replace('{discovererId}', encodeURIComponent(discovererId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['DiscovererUpdateApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Enable server discovery
 *
 * Allows a caller to configure recurring discovery runs on the discovery
 * module identified by the module id.
 *
 * @param {string} discovererId discoverer identifier
 *
 * @param {string} mode Discovery mode. Possible values include: 'Off',
 * 'Local', 'Network', 'Fast', 'Scan'
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.body] Discovery configuration
 *
 * @param {string} [options.body.addressRangesToScan] Address ranges to scan
 * (null == all wired nics)
 *
 * @param {number} [options.body.networkProbeTimeoutMs] Network probe timeout
 *
 * @param {number} [options.body.maxNetworkProbes] Max network probes that
 * should ever run.
 *
 * @param {string} [options.body.portRangesToScan] Port ranges to scan (null ==
 * all unassigned)
 *
 * @param {number} [options.body.portProbeTimeoutMs] Port probe timeout
 *
 * @param {number} [options.body.maxPortProbes] Max port probes that should
 * ever run.
 *
 * @param {number} [options.body.minPortProbesPercent] Probes that must always
 * be there as percent of max.
 *
 * @param {number} [options.body.idleTimeBetweenScansSec] Delay time between
 * discovery sweeps in seconds
 *
 * @param {array} [options.body.discoveryUrls] List of preset discovery urls to
 * use
 *
 * @param {array} [options.body.locales] List of locales to filter with during
 * discovery
 *
 * @param {object} [options.body.activationFilter]
 *
 * @param {array} [options.body.activationFilter.trustLists] Certificate trust
 * list identifiers to use for
 * activation, if null, all certificates are
 * trusted.  If empty list, no certificates are
 * trusted which is equal to no filter.
 *
 * @param {array} [options.body.activationFilter.securityPolicies] Endpoint
 * security policies to filter against.
 * If set to null, all policies are in scope.
 *
 * @param {string} [options.body.activationFilter.securityMode] Possible values
 * include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _setDiscoveryMode(discovererId, mode, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let body = (options && options.body !== undefined) ? options.body : undefined;
  // Validate
  try {
    if (discovererId === null || discovererId === undefined || typeof discovererId.valueOf() !== 'string') {
      throw new Error('discovererId cannot be null or undefined and it must be of type string.');
    }
    if (mode) {
      let allowedValues = [ 'Off', 'Local', 'Network', 'Fast', 'Scan' ];
      if (!allowedValues.some( function(item) { return item === mode; })) {
        throw new Error(mode + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    } else {
      throw new Error('mode cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/discovery/{discovererId}';
  requestUrl = requestUrl.replace('{discovererId}', encodeURIComponent(discovererId));
  let queryParameters = [];
  queryParameters.push('mode=' + encodeURIComponent(mode));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['DiscoveryConfigApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Get list of discoverers
 *
 * Get all registered discoverers and therefore twin modules in paged form. The
 * returned model can contain a continuation token if more results are
 * available. Call this operation again using the token to retrieve more
 * results.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {boolean} [options.onlyServerState] Whether to include only server
 * state, or display current client state of the endpoint if available
 *
 * @param {string} [options.continuationToken] Optional Continuation token
 *
 * @param {number} [options.pageSize] Optional number of results to return
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link DiscovererListApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getListOfDiscoverers(options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let onlyServerState = (options && options.onlyServerState !== undefined) ? options.onlyServerState : undefined;
  let continuationToken = (options && options.continuationToken !== undefined) ? options.continuationToken : undefined;
  let pageSize = (options && options.pageSize !== undefined) ? options.pageSize : undefined;
  // Validate
  try {
    if (onlyServerState !== null && onlyServerState !== undefined && typeof onlyServerState !== 'boolean') {
      throw new Error('onlyServerState must be of type boolean.');
    }
    if (continuationToken !== null && continuationToken !== undefined && typeof continuationToken.valueOf() !== 'string') {
      throw new Error('continuationToken must be of type string.');
    }
    if (pageSize !== null && pageSize !== undefined && typeof pageSize !== 'number') {
      throw new Error('pageSize must be of type number.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/discovery';
  let queryParameters = [];
  if (onlyServerState !== null && onlyServerState !== undefined) {
    queryParameters.push('onlyServerState=' + encodeURIComponent(onlyServerState.toString()));
  }
  if (continuationToken !== null && continuationToken !== undefined) {
    queryParameters.push('continuationToken=' + encodeURIComponent(continuationToken));
  }
  if (pageSize !== null && pageSize !== undefined) {
    queryParameters.push('pageSize=' + encodeURIComponent(pageSize.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['DiscovererListApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Query discoverers
 *
 * Get all discoverers that match a specified query. The returned model can
 * contain a continuation token if more results are available. Call the
 * GetListOfDiscoverers operation using the token to retrieve more results.
 *
 * @param {object} body Discoverers query model
 *
 * @param {string} [body.siteId] Site of the discoverer
 *
 * @param {string} [body.discovery] Possible values include: 'Off', 'Local',
 * 'Network', 'Fast', 'Scan'
 *
 * @param {boolean} [body.connected] Included connected or disconnected
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {boolean} [options.onlyServerState] Whether to include only server
 * state, or display current client state of the endpoint if available
 *
 * @param {number} [options.pageSize] Number of results to return
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link DiscovererListApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _queryDiscoverers(body, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let onlyServerState = (options && options.onlyServerState !== undefined) ? options.onlyServerState : undefined;
  let pageSize = (options && options.pageSize !== undefined) ? options.pageSize : undefined;
  // Validate
  try {
    if (onlyServerState !== null && onlyServerState !== undefined && typeof onlyServerState !== 'boolean') {
      throw new Error('onlyServerState must be of type boolean.');
    }
    if (pageSize !== null && pageSize !== undefined && typeof pageSize !== 'number') {
      throw new Error('pageSize must be of type number.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/discovery/query';
  let queryParameters = [];
  if (onlyServerState !== null && onlyServerState !== undefined) {
    queryParameters.push('onlyServerState=' + encodeURIComponent(onlyServerState.toString()));
  }
  if (pageSize !== null && pageSize !== undefined) {
    queryParameters.push('pageSize=' + encodeURIComponent(pageSize.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['DiscovererQueryApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['DiscovererListApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Get filtered list of discoverers
 *
 * Get a list of discoverers filtered using the specified query parameters. The
 * returned model can contain a continuation token if more results are
 * available. Call the GetListOfDiscoverers operation using the token to
 * retrieve more results.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.siteId] Site of the discoverer
 *
 * @param {string} [options.discovery] Discovery mode of discoverer. Possible
 * values include: 'Off', 'Local', 'Network', 'Fast', 'Scan'
 *
 * @param {boolean} [options.connected] Included connected or disconnected
 *
 * @param {boolean} [options.onlyServerState] Whether to include only server
 * state, or display current client state of the endpoint if available
 *
 * @param {number} [options.pageSize] Number of results to return
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link DiscovererListApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getFilteredListOfDiscoverers(options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let siteId = (options && options.siteId !== undefined) ? options.siteId : undefined;
  let discovery = (options && options.discovery !== undefined) ? options.discovery : undefined;
  let connected = (options && options.connected !== undefined) ? options.connected : undefined;
  let onlyServerState = (options && options.onlyServerState !== undefined) ? options.onlyServerState : undefined;
  let pageSize = (options && options.pageSize !== undefined) ? options.pageSize : undefined;
  // Validate
  try {
    if (siteId !== null && siteId !== undefined && typeof siteId.valueOf() !== 'string') {
      throw new Error('siteId must be of type string.');
    }
    if (discovery) {
      let allowedValues = [ 'Off', 'Local', 'Network', 'Fast', 'Scan' ];
      if (!allowedValues.some( function(item) { return item === discovery; })) {
        throw new Error(discovery + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    }
    if (connected !== null && connected !== undefined && typeof connected !== 'boolean') {
      throw new Error('connected must be of type boolean.');
    }
    if (onlyServerState !== null && onlyServerState !== undefined && typeof onlyServerState !== 'boolean') {
      throw new Error('onlyServerState must be of type boolean.');
    }
    if (pageSize !== null && pageSize !== undefined && typeof pageSize !== 'number') {
      throw new Error('pageSize must be of type number.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/discovery/query';
  let queryParameters = [];
  if (siteId !== null && siteId !== undefined) {
    queryParameters.push('siteId=' + encodeURIComponent(siteId));
  }
  if (discovery !== null && discovery !== undefined) {
    queryParameters.push('discovery=' + encodeURIComponent(discovery));
  }
  if (connected !== null && connected !== undefined) {
    queryParameters.push('connected=' + encodeURIComponent(connected.toString()));
  }
  if (onlyServerState !== null && onlyServerState !== undefined) {
    queryParameters.push('onlyServerState=' + encodeURIComponent(onlyServerState.toString()));
  }
  if (pageSize !== null && pageSize !== undefined) {
    queryParameters.push('pageSize=' + encodeURIComponent(pageSize.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['DiscovererListApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Subscribe to discoverer registry events
 *
 * Register a user to receive discoverer events through SignalR.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.body] The user id that will receive discoverer
 * events.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _subscribe1(options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let body = (options && options.body !== undefined) ? options.body : undefined;
  // Validate
  try {
    if (body !== null && body !== undefined && typeof body.valueOf() !== 'string') {
      throw new Error('body must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/discovery/events';

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = {
        required: false,
        serializedName: 'body',
        type: {
          name: 'String'
        }
      };
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Unsubscribe registry events
 *
 * Unregister a user and stop it from receiving discoverer events.
 *
 * @param {string} userId The user id that will not receive any more discoverer
 * events
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _unsubscribe1(userId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (userId === null || userId === undefined || typeof userId.valueOf() !== 'string') {
      throw new Error('userId cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/discovery/events/{userId}';
  requestUrl = requestUrl.replace('{userId}', encodeURIComponent(userId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Subscribe to discovery progress from discoverer
 *
 * Register a client to receive discovery progress events through SignalR from
 * a particular discoverer.
 *
 * @param {string} discovererId The discoverer to subscribe to
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.body] The user id that will receive discovery
 * events.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _subscribeByDiscovererId(discovererId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let body = (options && options.body !== undefined) ? options.body : undefined;
  // Validate
  try {
    if (discovererId === null || discovererId === undefined || typeof discovererId.valueOf() !== 'string') {
      throw new Error('discovererId cannot be null or undefined and it must be of type string.');
    }
    if (body !== null && body !== undefined && typeof body.valueOf() !== 'string') {
      throw new Error('body must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/discovery/{discovererId}/events';
  requestUrl = requestUrl.replace('{discovererId}', encodeURIComponent(discovererId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = {
        required: false,
        serializedName: 'body',
        type: {
          name: 'String'
        }
      };
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Subscribe to discovery progress for a request
 *
 * Register a client to receive discovery progress events through SignalR for a
 * particular request.
 *
 * @param {string} requestId The request to monitor
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.body] The user id that will receive discovery
 * events.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _subscribeByRequestId(requestId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let body = (options && options.body !== undefined) ? options.body : undefined;
  // Validate
  try {
    if (requestId === null || requestId === undefined || typeof requestId.valueOf() !== 'string') {
      throw new Error('requestId cannot be null or undefined and it must be of type string.');
    }
    if (body !== null && body !== undefined && typeof body.valueOf() !== 'string') {
      throw new Error('body must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/discovery/requests/{requestId}/events';
  requestUrl = requestUrl.replace('{requestId}', encodeURIComponent(requestId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = {
        required: false,
        serializedName: 'body',
        type: {
          name: 'String'
        }
      };
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Unsubscribe from discovery progress for a request.
 *
 * Unregister a client and stop it from receiving discovery events for a
 * particular request.
 *
 * @param {string} requestId The request to unsubscribe from
 *
 * @param {string} userId The user id that will not receive any more discovery
 * progress
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _unsubscribeByRequestId(requestId, userId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (requestId === null || requestId === undefined || typeof requestId.valueOf() !== 'string') {
      throw new Error('requestId cannot be null or undefined and it must be of type string.');
    }
    if (userId === null || userId === undefined || typeof userId.valueOf() !== 'string') {
      throw new Error('userId cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/discovery/requests/{requestId}/events/{userId}';
  requestUrl = requestUrl.replace('{requestId}', encodeURIComponent(requestId));
  requestUrl = requestUrl.replace('{userId}', encodeURIComponent(userId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Unsubscribe from discovery progress from discoverer.
 *
 * Unregister a client and stop it from receiving discovery events.
 *
 * @param {string} discovererId The discoverer to unsubscribe from
 *
 * @param {string} userId The user id that will not receive any more discovery
 * progress
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _unsubscribeByDiscovererId(discovererId, userId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (discovererId === null || discovererId === undefined || typeof discovererId.valueOf() !== 'string') {
      throw new Error('discovererId cannot be null or undefined and it must be of type string.');
    }
    if (userId === null || userId === undefined || typeof userId.valueOf() !== 'string') {
      throw new Error('userId cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/discovery/{discovererId}/events/{userId}';
  requestUrl = requestUrl.replace('{discovererId}', encodeURIComponent(discovererId));
  requestUrl = requestUrl.replace('{userId}', encodeURIComponent(userId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Activate endpoint
 *
 * Activates an endpoint for subsequent use in twin service. All endpoints must
 * be activated using this API or through a activation filter during
 * application registration or discovery.
 *
 * @param {string} endpointId endpoint identifier
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _activateEndpoint(endpointId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (endpointId === null || endpointId === undefined || typeof endpointId.valueOf() !== 'string') {
      throw new Error('endpointId cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/endpoints/{endpointId}/activate';
  requestUrl = requestUrl.replace('{endpointId}', encodeURIComponent(endpointId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Get endpoint information
 *
 * Gets information about an endpoint.
 *
 * @param {string} endpointId endpoint identifier
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {boolean} [options.onlyServerState] Whether to include only server
 * state, or display current client state of the endpoint if available
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link EndpointInfoApiModel} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getEndpoint(endpointId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let onlyServerState = (options && options.onlyServerState !== undefined) ? options.onlyServerState : undefined;
  // Validate
  try {
    if (endpointId === null || endpointId === undefined || typeof endpointId.valueOf() !== 'string') {
      throw new Error('endpointId cannot be null or undefined and it must be of type string.');
    }
    if (onlyServerState !== null && onlyServerState !== undefined && typeof onlyServerState !== 'boolean') {
      throw new Error('onlyServerState must be of type boolean.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/endpoints/{endpointId}';
  requestUrl = requestUrl.replace('{endpointId}', encodeURIComponent(endpointId));
  let queryParameters = [];
  if (onlyServerState !== null && onlyServerState !== undefined) {
    queryParameters.push('onlyServerState=' + encodeURIComponent(onlyServerState.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['EndpointInfoApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Get list of endpoints
 *
 * Get all registered endpoints in paged form. The returned model can contain a
 * continuation token if more results are available. Call this operation again
 * using the token to retrieve more results.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {boolean} [options.onlyServerState] Whether to include only server
 * state, or display current client state of the endpoint if available
 *
 * @param {string} [options.continuationToken] Optional Continuation token
 *
 * @param {number} [options.pageSize] Optional number of results to return
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link EndpointInfoListApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getListOfEndpoints(options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let onlyServerState = (options && options.onlyServerState !== undefined) ? options.onlyServerState : undefined;
  let continuationToken = (options && options.continuationToken !== undefined) ? options.continuationToken : undefined;
  let pageSize = (options && options.pageSize !== undefined) ? options.pageSize : undefined;
  // Validate
  try {
    if (onlyServerState !== null && onlyServerState !== undefined && typeof onlyServerState !== 'boolean') {
      throw new Error('onlyServerState must be of type boolean.');
    }
    if (continuationToken !== null && continuationToken !== undefined && typeof continuationToken.valueOf() !== 'string') {
      throw new Error('continuationToken must be of type string.');
    }
    if (pageSize !== null && pageSize !== undefined && typeof pageSize !== 'number') {
      throw new Error('pageSize must be of type number.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/endpoints';
  let queryParameters = [];
  if (onlyServerState !== null && onlyServerState !== undefined) {
    queryParameters.push('onlyServerState=' + encodeURIComponent(onlyServerState.toString()));
  }
  if (continuationToken !== null && continuationToken !== undefined) {
    queryParameters.push('continuationToken=' + encodeURIComponent(continuationToken));
  }
  if (pageSize !== null && pageSize !== undefined) {
    queryParameters.push('pageSize=' + encodeURIComponent(pageSize.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['EndpointInfoListApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Query endpoints
 *
 * Return endpoints that match the specified query. The returned model can
 * contain a continuation token if more results are available. Call the
 * GetListOfEndpoints operation using the token to retrieve more results.
 *
 * @param {object} body Query to match
 *
 * @param {string} [body.url] Endoint url for direct server access
 *
 * @param {buffer} [body.certificate] Certificate of the endpoint
 *
 * @param {string} [body.securityMode] Possible values include: 'Best', 'Sign',
 * 'SignAndEncrypt', 'None'
 *
 * @param {string} [body.securityPolicy] Security policy uri
 *
 * @param {boolean} [body.activated] Whether the endpoint was activated
 *
 * @param {boolean} [body.connected] Whether the endpoint is connected on
 * supervisor.
 *
 * @param {string} [body.endpointState] Possible values include: 'Connecting',
 * 'NotReachable', 'Busy', 'NoTrust', 'CertificateInvalid', 'Ready', 'Error'
 *
 * @param {boolean} [body.includeNotSeenSince] Whether to include endpoints
 * that were soft deleted
 *
 * @param {string} [body.discovererId] Discoverer id to filter with
 *
 * @param {string} [body.applicationId] Application id to filter
 *
 * @param {string} [body.supervisorId] Supervisor id to filter with
 *
 * @param {string} [body.siteOrGatewayId] Site or gateway id to filter with
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {boolean} [options.onlyServerState] Whether to include only server
 * state, or display current client state of the endpoint if available
 *
 * @param {number} [options.pageSize] Optional number of results to return
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link EndpointInfoListApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _queryEndpoints(body, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let onlyServerState = (options && options.onlyServerState !== undefined) ? options.onlyServerState : undefined;
  let pageSize = (options && options.pageSize !== undefined) ? options.pageSize : undefined;
  // Validate
  try {
    if (onlyServerState !== null && onlyServerState !== undefined && typeof onlyServerState !== 'boolean') {
      throw new Error('onlyServerState must be of type boolean.');
    }
    if (pageSize !== null && pageSize !== undefined && typeof pageSize !== 'number') {
      throw new Error('pageSize must be of type number.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/endpoints/query';
  let queryParameters = [];
  if (onlyServerState !== null && onlyServerState !== undefined) {
    queryParameters.push('onlyServerState=' + encodeURIComponent(onlyServerState.toString()));
  }
  if (pageSize !== null && pageSize !== undefined) {
    queryParameters.push('pageSize=' + encodeURIComponent(pageSize.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['EndpointRegistrationQueryApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['EndpointInfoListApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Get filtered list of endpoints
 *
 * Get a list of endpoints filtered using the specified query parameters. The
 * returned model can contain a continuation token if more results are
 * available. Call the GetListOfEndpoints operation using the token to retrieve
 * more results.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.url] Endoint url for direct server access
 *
 * @param {buffer} [options.certificate] Certificate of the endpoint
 *
 * @param {string} [options.securityMode] Security Mode. Possible values
 * include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
 *
 * @param {string} [options.securityPolicy] Security policy uri
 *
 * @param {boolean} [options.activated] Whether the endpoint was activated
 *
 * @param {boolean} [options.connected] Whether the endpoint is connected on
 * supervisor.
 *
 * @param {string} [options.endpointState] The last state of the the activated
 * endpoint. Possible values include: 'Connecting', 'NotReachable', 'Busy',
 * 'NoTrust', 'CertificateInvalid', 'Ready', 'Error'
 *
 * @param {boolean} [options.includeNotSeenSince] Whether to include endpoints
 * that were soft deleted
 *
 * @param {string} [options.discovererId] Discoverer id to filter with
 *
 * @param {string} [options.applicationId] Application id to filter
 *
 * @param {string} [options.supervisorId] Supervisor id to filter with
 *
 * @param {string} [options.siteOrGatewayId] Site or gateway id to filter with
 *
 * @param {boolean} [options.onlyServerState] Whether to include only server
 * state, or display current client state of the endpoint if available
 *
 * @param {number} [options.pageSize] Optional number of results to return
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link EndpointInfoListApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getFilteredListOfEndpoints(options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let url = (options && options.url !== undefined) ? options.url : undefined;
  let certificate = (options && options.certificate !== undefined) ? options.certificate : undefined;
  let securityMode = (options && options.securityMode !== undefined) ? options.securityMode : undefined;
  let securityPolicy = (options && options.securityPolicy !== undefined) ? options.securityPolicy : undefined;
  let activated = (options && options.activated !== undefined) ? options.activated : undefined;
  let connected = (options && options.connected !== undefined) ? options.connected : undefined;
  let endpointState = (options && options.endpointState !== undefined) ? options.endpointState : undefined;
  let includeNotSeenSince = (options && options.includeNotSeenSince !== undefined) ? options.includeNotSeenSince : undefined;
  let discovererId = (options && options.discovererId !== undefined) ? options.discovererId : undefined;
  let applicationId = (options && options.applicationId !== undefined) ? options.applicationId : undefined;
  let supervisorId = (options && options.supervisorId !== undefined) ? options.supervisorId : undefined;
  let siteOrGatewayId = (options && options.siteOrGatewayId !== undefined) ? options.siteOrGatewayId : undefined;
  let onlyServerState = (options && options.onlyServerState !== undefined) ? options.onlyServerState : undefined;
  let pageSize = (options && options.pageSize !== undefined) ? options.pageSize : undefined;
  // Validate
  try {
    if (url !== null && url !== undefined && typeof url.valueOf() !== 'string') {
      throw new Error('url must be of type string.');
    }
    if (certificate && !Buffer.isBuffer(certificate)) {
      throw new Error('certificate must be of type buffer.');
    }
    if (securityMode) {
      let allowedValues = [ 'Best', 'Sign', 'SignAndEncrypt', 'None' ];
      if (!allowedValues.some( function(item) { return item === securityMode; })) {
        throw new Error(securityMode + ' is not a valid value. The valid values are: ' + allowedValues);
      }
    }
    if (securityPolicy !== null && securityPolicy !== undefined && typeof securityPolicy.valueOf() !== 'string') {
      throw new Error('securityPolicy must be of type string.');
    }
    if (activated !== null && activated !== undefined && typeof activated !== 'boolean') {
      throw new Error('activated must be of type boolean.');
    }
    if (connected !== null && connected !== undefined && typeof connected !== 'boolean') {
      throw new Error('connected must be of type boolean.');
    }
    if (endpointState) {
      let allowedValues1 = [ 'Connecting', 'NotReachable', 'Busy', 'NoTrust', 'CertificateInvalid', 'Ready', 'Error' ];
      if (!allowedValues1.some( function(item) { return item === endpointState; })) {
        throw new Error(endpointState + ' is not a valid value. The valid values are: ' + allowedValues1);
      }
    }
    if (includeNotSeenSince !== null && includeNotSeenSince !== undefined && typeof includeNotSeenSince !== 'boolean') {
      throw new Error('includeNotSeenSince must be of type boolean.');
    }
    if (discovererId !== null && discovererId !== undefined && typeof discovererId.valueOf() !== 'string') {
      throw new Error('discovererId must be of type string.');
    }
    if (applicationId !== null && applicationId !== undefined && typeof applicationId.valueOf() !== 'string') {
      throw new Error('applicationId must be of type string.');
    }
    if (supervisorId !== null && supervisorId !== undefined && typeof supervisorId.valueOf() !== 'string') {
      throw new Error('supervisorId must be of type string.');
    }
    if (siteOrGatewayId !== null && siteOrGatewayId !== undefined && typeof siteOrGatewayId.valueOf() !== 'string') {
      throw new Error('siteOrGatewayId must be of type string.');
    }
    if (onlyServerState !== null && onlyServerState !== undefined && typeof onlyServerState !== 'boolean') {
      throw new Error('onlyServerState must be of type boolean.');
    }
    if (pageSize !== null && pageSize !== undefined && typeof pageSize !== 'number') {
      throw new Error('pageSize must be of type number.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/endpoints/query';
  let queryParameters = [];
  if (url !== null && url !== undefined) {
    queryParameters.push('url=' + encodeURIComponent(url));
  }
  if (certificate !== null && certificate !== undefined) {
    queryParameters.push('certificate=' + encodeURIComponent(client.serializeObject(certificate)));
  }
  if (securityMode !== null && securityMode !== undefined) {
    queryParameters.push('securityMode=' + encodeURIComponent(securityMode));
  }
  if (securityPolicy !== null && securityPolicy !== undefined) {
    queryParameters.push('securityPolicy=' + encodeURIComponent(securityPolicy));
  }
  if (activated !== null && activated !== undefined) {
    queryParameters.push('activated=' + encodeURIComponent(activated.toString()));
  }
  if (connected !== null && connected !== undefined) {
    queryParameters.push('connected=' + encodeURIComponent(connected.toString()));
  }
  if (endpointState !== null && endpointState !== undefined) {
    queryParameters.push('endpointState=' + encodeURIComponent(endpointState));
  }
  if (includeNotSeenSince !== null && includeNotSeenSince !== undefined) {
    queryParameters.push('includeNotSeenSince=' + encodeURIComponent(includeNotSeenSince.toString()));
  }
  if (discovererId !== null && discovererId !== undefined) {
    queryParameters.push('discovererId=' + encodeURIComponent(discovererId));
  }
  if (applicationId !== null && applicationId !== undefined) {
    queryParameters.push('applicationId=' + encodeURIComponent(applicationId));
  }
  if (supervisorId !== null && supervisorId !== undefined) {
    queryParameters.push('supervisorId=' + encodeURIComponent(supervisorId));
  }
  if (siteOrGatewayId !== null && siteOrGatewayId !== undefined) {
    queryParameters.push('siteOrGatewayId=' + encodeURIComponent(siteOrGatewayId));
  }
  if (onlyServerState !== null && onlyServerState !== undefined) {
    queryParameters.push('onlyServerState=' + encodeURIComponent(onlyServerState.toString()));
  }
  if (pageSize !== null && pageSize !== undefined) {
    queryParameters.push('pageSize=' + encodeURIComponent(pageSize.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['EndpointInfoListApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Deactivate endpoint
 *
 * Deactivates the endpoint and disable access through twin service.
 *
 * @param {string} endpointId endpoint identifier
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _deactivateEndpoint(endpointId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (endpointId === null || endpointId === undefined || typeof endpointId.valueOf() !== 'string') {
      throw new Error('endpointId cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/endpoints/{endpointId}/deactivate';
  requestUrl = requestUrl.replace('{endpointId}', encodeURIComponent(endpointId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Subscribe for endpoint events
 *
 * Register a user to receive endpoint events through SignalR.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.body] The user id that will receive endpoint
 * events.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _subscribe2(options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let body = (options && options.body !== undefined) ? options.body : undefined;
  // Validate
  try {
    if (body !== null && body !== undefined && typeof body.valueOf() !== 'string') {
      throw new Error('body must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/endpoints/events';

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = {
        required: false,
        serializedName: 'body',
        type: {
          name: 'String'
        }
      };
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Unsubscribe from endpoint events
 *
 * Unregister a user and stop it from receiving endpoint events.
 *
 * @param {string} userId The user id that will not receive any more endpoint
 * events
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _unsubscribe2(userId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (userId === null || userId === undefined || typeof userId.valueOf() !== 'string') {
      throw new Error('userId cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/endpoints/events/{userId}';
  requestUrl = requestUrl.replace('{userId}', encodeURIComponent(userId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Get Gateway registration information
 *
 * Returns a Gateway's registration and connectivity information. A Gateway id
 * corresponds to the twin modules module identity.
 *
 * @param {string} gatewayId Gateway identifier
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GatewayInfoApiModel} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getGateway(gatewayId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (gatewayId === null || gatewayId === undefined || typeof gatewayId.valueOf() !== 'string') {
      throw new Error('gatewayId cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/gateways/{GatewayId}';
  requestUrl = requestUrl.replace('{GatewayId}', encodeURIComponent(gatewayId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GatewayInfoApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Update Gateway configuration
 *
 * Allows a caller to configure operations on the Gateway module identified by
 * the Gateway id.
 *
 * @param {string} gatewayId Gateway identifier
 *
 * @param {object} body Patch request
 *
 * @param {string} [body.siteId] Site of the Gateway
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _updateGateway(gatewayId, body, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (gatewayId === null || gatewayId === undefined || typeof gatewayId.valueOf() !== 'string') {
      throw new Error('gatewayId cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/gateways/{GatewayId}';
  requestUrl = requestUrl.replace('{GatewayId}', encodeURIComponent(gatewayId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['GatewayUpdateApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Get list of Gateways
 *
 * Get all registered Gateways and therefore twin modules in paged form. The
 * returned model can contain a continuation token if more results are
 * available. Call this operation again using the token to retrieve more
 * results.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.continuationToken] Optional Continuation token
 *
 * @param {number} [options.pageSize] Optional number of results to return
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GatewayListApiModel} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getListOfGateway(options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let continuationToken = (options && options.continuationToken !== undefined) ? options.continuationToken : undefined;
  let pageSize = (options && options.pageSize !== undefined) ? options.pageSize : undefined;
  // Validate
  try {
    if (continuationToken !== null && continuationToken !== undefined && typeof continuationToken.valueOf() !== 'string') {
      throw new Error('continuationToken must be of type string.');
    }
    if (pageSize !== null && pageSize !== undefined && typeof pageSize !== 'number') {
      throw new Error('pageSize must be of type number.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/gateways';
  let queryParameters = [];
  if (continuationToken !== null && continuationToken !== undefined) {
    queryParameters.push('continuationToken=' + encodeURIComponent(continuationToken));
  }
  if (pageSize !== null && pageSize !== undefined) {
    queryParameters.push('pageSize=' + encodeURIComponent(pageSize.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GatewayListApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Query Gateways
 *
 * Get all Gateways that match a specified query. The returned model can
 * contain a continuation token if more results are available. Call the
 * GetListOfGateway operation using the token to retrieve more results.
 *
 * @param {object} body Gateway query model
 *
 * @param {string} [body.siteId] Site of the Gateway
 *
 * @param {boolean} [body.connected] Included connected or disconnected
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {number} [options.pageSize] Number of results to return
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GatewayListApiModel} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _queryGateway(body, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let pageSize = (options && options.pageSize !== undefined) ? options.pageSize : undefined;
  // Validate
  try {
    if (pageSize !== null && pageSize !== undefined && typeof pageSize !== 'number') {
      throw new Error('pageSize must be of type number.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/gateways/query';
  let queryParameters = [];
  if (pageSize !== null && pageSize !== undefined) {
    queryParameters.push('pageSize=' + encodeURIComponent(pageSize.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['GatewayQueryApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GatewayListApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Get filtered list of Gateways
 *
 * Get a list of Gateways filtered using the specified query parameters. The
 * returned model can contain a continuation token if more results are
 * available. Call the GetListOfGateway operation using the token to retrieve
 * more results.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.siteId] Site of the Gateway
 *
 * @param {boolean} [options.connected] Included connected or disconnected
 *
 * @param {number} [options.pageSize] Number of results to return
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link GatewayListApiModel} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getFilteredListOfGateway(options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let siteId = (options && options.siteId !== undefined) ? options.siteId : undefined;
  let connected = (options && options.connected !== undefined) ? options.connected : undefined;
  let pageSize = (options && options.pageSize !== undefined) ? options.pageSize : undefined;
  // Validate
  try {
    if (siteId !== null && siteId !== undefined && typeof siteId.valueOf() !== 'string') {
      throw new Error('siteId must be of type string.');
    }
    if (connected !== null && connected !== undefined && typeof connected !== 'boolean') {
      throw new Error('connected must be of type boolean.');
    }
    if (pageSize !== null && pageSize !== undefined && typeof pageSize !== 'number') {
      throw new Error('pageSize must be of type number.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/gateways/query';
  let queryParameters = [];
  if (siteId !== null && siteId !== undefined) {
    queryParameters.push('siteId=' + encodeURIComponent(siteId));
  }
  if (connected !== null && connected !== undefined) {
    queryParameters.push('connected=' + encodeURIComponent(connected.toString()));
  }
  if (pageSize !== null && pageSize !== undefined) {
    queryParameters.push('pageSize=' + encodeURIComponent(pageSize.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['GatewayListApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Subscribe to Gateway registry events
 *
 * Register a user to receive Gateway events through SignalR.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.body] The user id that will receive Gateway events.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _subscribe3(options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let body = (options && options.body !== undefined) ? options.body : undefined;
  // Validate
  try {
    if (body !== null && body !== undefined && typeof body.valueOf() !== 'string') {
      throw new Error('body must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/gateways/events';

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = {
        required: false,
        serializedName: 'body',
        type: {
          name: 'String'
        }
      };
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Unsubscribe registry events
 *
 * Unregister a user and stop it from receiving Gateway events.
 *
 * @param {string} userId The user id that will not receive any more Gateway
 * events
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _unsubscribe3(userId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (userId === null || userId === undefined || typeof userId.valueOf() !== 'string') {
      throw new Error('userId cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/gateways/events/{userId}';
  requestUrl = requestUrl.replace('{userId}', encodeURIComponent(userId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Get publisher registration information
 *
 * Returns a publisher's registration and connectivity information. A publisher
 * id corresponds to the twin modules module identity.
 *
 * @param {string} publisherId Publisher identifier
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {boolean} [options.onlyServerState] Whether to include only server
 * state, or display current client state of the endpoint if available
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link PublisherApiModel} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getPublisher(publisherId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let onlyServerState = (options && options.onlyServerState !== undefined) ? options.onlyServerState : undefined;
  // Validate
  try {
    if (publisherId === null || publisherId === undefined || typeof publisherId.valueOf() !== 'string') {
      throw new Error('publisherId cannot be null or undefined and it must be of type string.');
    }
    if (onlyServerState !== null && onlyServerState !== undefined && typeof onlyServerState !== 'boolean') {
      throw new Error('onlyServerState must be of type boolean.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/publishers/{publisherId}';
  requestUrl = requestUrl.replace('{publisherId}', encodeURIComponent(publisherId));
  let queryParameters = [];
  if (onlyServerState !== null && onlyServerState !== undefined) {
    queryParameters.push('onlyServerState=' + encodeURIComponent(onlyServerState.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['PublisherApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Update publisher configuration
 *
 * Allows a caller to configure operations on the publisher module identified
 * by the publisher id.
 *
 * @param {string} publisherId Publisher identifier
 *
 * @param {object} body Patch request
 *
 * @param {string} [body.siteId] Site of the publisher
 *
 * @param {object} [body.configuration]
 *
 * @param {object} [body.configuration.capabilities] Capabilities
 *
 * @param {string} [body.configuration.jobCheckInterval] Interval to check job
 *
 * @param {string} [body.configuration.heartbeatInterval] Heartbeat interval
 *
 * @param {number} [body.configuration.maxWorkers] Parallel jobs
 *
 * @param {string} [body.configuration.jobOrchestratorUrl] Job orchestrator
 * endpoint url
 *
 * @param {string} [body.logLevel] Possible values include: 'Error',
 * 'Information', 'Debug', 'Verbose'
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _updatePublisher(publisherId, body, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (publisherId === null || publisherId === undefined || typeof publisherId.valueOf() !== 'string') {
      throw new Error('publisherId cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/publishers/{publisherId}';
  requestUrl = requestUrl.replace('{publisherId}', encodeURIComponent(publisherId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['PublisherUpdateApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Get list of publishers
 *
 * Get all registered publishers and therefore twin modules in paged form. The
 * returned model can contain a continuation token if more results are
 * available. Call this operation again using the token to retrieve more
 * results.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {boolean} [options.onlyServerState] Whether to include only server
 * state, or display current client state of the endpoint if available
 *
 * @param {string} [options.continuationToken] Optional Continuation token
 *
 * @param {number} [options.pageSize] Optional number of results to return
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link PublisherListApiModel} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getListOfPublisher(options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let onlyServerState = (options && options.onlyServerState !== undefined) ? options.onlyServerState : undefined;
  let continuationToken = (options && options.continuationToken !== undefined) ? options.continuationToken : undefined;
  let pageSize = (options && options.pageSize !== undefined) ? options.pageSize : undefined;
  // Validate
  try {
    if (onlyServerState !== null && onlyServerState !== undefined && typeof onlyServerState !== 'boolean') {
      throw new Error('onlyServerState must be of type boolean.');
    }
    if (continuationToken !== null && continuationToken !== undefined && typeof continuationToken.valueOf() !== 'string') {
      throw new Error('continuationToken must be of type string.');
    }
    if (pageSize !== null && pageSize !== undefined && typeof pageSize !== 'number') {
      throw new Error('pageSize must be of type number.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/publishers';
  let queryParameters = [];
  if (onlyServerState !== null && onlyServerState !== undefined) {
    queryParameters.push('onlyServerState=' + encodeURIComponent(onlyServerState.toString()));
  }
  if (continuationToken !== null && continuationToken !== undefined) {
    queryParameters.push('continuationToken=' + encodeURIComponent(continuationToken));
  }
  if (pageSize !== null && pageSize !== undefined) {
    queryParameters.push('pageSize=' + encodeURIComponent(pageSize.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['PublisherListApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Query publishers
 *
 * Get all publishers that match a specified query. The returned model can
 * contain a continuation token if more results are available. Call the
 * GetListOfPublisher operation using the token to retrieve more results.
 *
 * @param {object} body Publisher query model
 *
 * @param {string} [body.siteId] Site for the publishers
 *
 * @param {boolean} [body.connected] Included connected or disconnected
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {boolean} [options.onlyServerState] Whether to include only server
 * state, or display current client state of the endpoint if available
 *
 * @param {number} [options.pageSize] Number of results to return
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link PublisherListApiModel} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _queryPublisher(body, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let onlyServerState = (options && options.onlyServerState !== undefined) ? options.onlyServerState : undefined;
  let pageSize = (options && options.pageSize !== undefined) ? options.pageSize : undefined;
  // Validate
  try {
    if (onlyServerState !== null && onlyServerState !== undefined && typeof onlyServerState !== 'boolean') {
      throw new Error('onlyServerState must be of type boolean.');
    }
    if (pageSize !== null && pageSize !== undefined && typeof pageSize !== 'number') {
      throw new Error('pageSize must be of type number.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/publishers/query';
  let queryParameters = [];
  if (onlyServerState !== null && onlyServerState !== undefined) {
    queryParameters.push('onlyServerState=' + encodeURIComponent(onlyServerState.toString()));
  }
  if (pageSize !== null && pageSize !== undefined) {
    queryParameters.push('pageSize=' + encodeURIComponent(pageSize.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['PublisherQueryApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['PublisherListApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Get filtered list of publishers
 *
 * Get a list of publishers filtered using the specified query parameters. The
 * returned model can contain a continuation token if more results are
 * available. Call the GetListOfPublisher operation using the token to retrieve
 * more results.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.siteId] Site for the publishers
 *
 * @param {boolean} [options.connected] Included connected or disconnected
 *
 * @param {boolean} [options.onlyServerState] Whether to include only server
 * state, or display current client state of the endpoint if available
 *
 * @param {number} [options.pageSize] Number of results to return
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link PublisherListApiModel} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getFilteredListOfPublisher(options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let siteId = (options && options.siteId !== undefined) ? options.siteId : undefined;
  let connected = (options && options.connected !== undefined) ? options.connected : undefined;
  let onlyServerState = (options && options.onlyServerState !== undefined) ? options.onlyServerState : undefined;
  let pageSize = (options && options.pageSize !== undefined) ? options.pageSize : undefined;
  // Validate
  try {
    if (siteId !== null && siteId !== undefined && typeof siteId.valueOf() !== 'string') {
      throw new Error('siteId must be of type string.');
    }
    if (connected !== null && connected !== undefined && typeof connected !== 'boolean') {
      throw new Error('connected must be of type boolean.');
    }
    if (onlyServerState !== null && onlyServerState !== undefined && typeof onlyServerState !== 'boolean') {
      throw new Error('onlyServerState must be of type boolean.');
    }
    if (pageSize !== null && pageSize !== undefined && typeof pageSize !== 'number') {
      throw new Error('pageSize must be of type number.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/publishers/query';
  let queryParameters = [];
  if (siteId !== null && siteId !== undefined) {
    queryParameters.push('siteId=' + encodeURIComponent(siteId));
  }
  if (connected !== null && connected !== undefined) {
    queryParameters.push('connected=' + encodeURIComponent(connected.toString()));
  }
  if (onlyServerState !== null && onlyServerState !== undefined) {
    queryParameters.push('onlyServerState=' + encodeURIComponent(onlyServerState.toString()));
  }
  if (pageSize !== null && pageSize !== undefined) {
    queryParameters.push('pageSize=' + encodeURIComponent(pageSize.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['PublisherListApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Subscribe to publisher registry events
 *
 * Register a user to receive publisher events through SignalR.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.body] The user id that will receive publisher
 * events.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _subscribe4(options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let body = (options && options.body !== undefined) ? options.body : undefined;
  // Validate
  try {
    if (body !== null && body !== undefined && typeof body.valueOf() !== 'string') {
      throw new Error('body must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/publishers/events';

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = {
        required: false,
        serializedName: 'body',
        type: {
          name: 'String'
        }
      };
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Unsubscribe registry events
 *
 * Unregister a user and stop it from receiving publisher events.
 *
 * @param {string} userId The user id that will not receive any more publisher
 * events
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _unsubscribe4(userId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (userId === null || userId === undefined || typeof userId.valueOf() !== 'string') {
      throw new Error('userId cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/publishers/events/{userId}';
  requestUrl = requestUrl.replace('{userId}', encodeURIComponent(userId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Get supervisor registration information
 *
 * Returns a supervisor's registration and connectivity information. A
 * supervisor id corresponds to the twin modules module identity.
 *
 * @param {string} supervisorId Supervisor identifier
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {boolean} [options.onlyServerState] Whether to include only server
 * state, or display current client state of the endpoint if available
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SupervisorApiModel} for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getSupervisor(supervisorId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let onlyServerState = (options && options.onlyServerState !== undefined) ? options.onlyServerState : undefined;
  // Validate
  try {
    if (supervisorId === null || supervisorId === undefined || typeof supervisorId.valueOf() !== 'string') {
      throw new Error('supervisorId cannot be null or undefined and it must be of type string.');
    }
    if (onlyServerState !== null && onlyServerState !== undefined && typeof onlyServerState !== 'boolean') {
      throw new Error('onlyServerState must be of type boolean.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/supervisors/{supervisorId}';
  requestUrl = requestUrl.replace('{supervisorId}', encodeURIComponent(supervisorId));
  let queryParameters = [];
  if (onlyServerState !== null && onlyServerState !== undefined) {
    queryParameters.push('onlyServerState=' + encodeURIComponent(onlyServerState.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SupervisorApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Update supervisor information
 *
 * Allows a caller to configure recurring discovery runs on the twin module
 * identified by the supervisor id or update site information.
 *
 * @param {string} supervisorId supervisor identifier
 *
 * @param {object} body Patch request
 *
 * @param {string} [body.siteId] Site the supervisor is part of
 *
 * @param {string} [body.logLevel] Possible values include: 'Error',
 * 'Information', 'Debug', 'Verbose'
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _updateSupervisor(supervisorId, body, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (supervisorId === null || supervisorId === undefined || typeof supervisorId.valueOf() !== 'string') {
      throw new Error('supervisorId cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/supervisors/{supervisorId}';
  requestUrl = requestUrl.replace('{supervisorId}', encodeURIComponent(supervisorId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PATCH';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['SupervisorUpdateApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Get runtime status of supervisor
 *
 * Allows a caller to get runtime status for a supervisor.
 *
 * @param {string} supervisorId supervisor identifier
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SupervisorStatusApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getSupervisorStatus(supervisorId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (supervisorId === null || supervisorId === undefined || typeof supervisorId.valueOf() !== 'string') {
      throw new Error('supervisorId cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/supervisors/{supervisorId}/status';
  requestUrl = requestUrl.replace('{supervisorId}', encodeURIComponent(supervisorId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SupervisorStatusApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Reset supervisor
 *
 * Allows a caller to reset the twin module using its supervisor identity
 * identifier.
 *
 * @param {string} supervisorId supervisor identifier
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _resetSupervisor(supervisorId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (supervisorId === null || supervisorId === undefined || typeof supervisorId.valueOf() !== 'string') {
      throw new Error('supervisorId cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/supervisors/{supervisorId}/reset';
  requestUrl = requestUrl.replace('{supervisorId}', encodeURIComponent(supervisorId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Get list of supervisors
 *
 * Get all registered supervisors and therefore twin modules in paged form. The
 * returned model can contain a continuation token if more results are
 * available. Call this operation again using the token to retrieve more
 * results.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {boolean} [options.onlyServerState] Whether to include only server
 * state, or display current client state of the endpoint if available
 *
 * @param {string} [options.continuationToken] Optional Continuation token
 *
 * @param {number} [options.pageSize] Optional number of results to return
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SupervisorListApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getListOfSupervisors(options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let onlyServerState = (options && options.onlyServerState !== undefined) ? options.onlyServerState : undefined;
  let continuationToken = (options && options.continuationToken !== undefined) ? options.continuationToken : undefined;
  let pageSize = (options && options.pageSize !== undefined) ? options.pageSize : undefined;
  // Validate
  try {
    if (onlyServerState !== null && onlyServerState !== undefined && typeof onlyServerState !== 'boolean') {
      throw new Error('onlyServerState must be of type boolean.');
    }
    if (continuationToken !== null && continuationToken !== undefined && typeof continuationToken.valueOf() !== 'string') {
      throw new Error('continuationToken must be of type string.');
    }
    if (pageSize !== null && pageSize !== undefined && typeof pageSize !== 'number') {
      throw new Error('pageSize must be of type number.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/supervisors';
  let queryParameters = [];
  if (onlyServerState !== null && onlyServerState !== undefined) {
    queryParameters.push('onlyServerState=' + encodeURIComponent(onlyServerState.toString()));
  }
  if (continuationToken !== null && continuationToken !== undefined) {
    queryParameters.push('continuationToken=' + encodeURIComponent(continuationToken));
  }
  if (pageSize !== null && pageSize !== undefined) {
    queryParameters.push('pageSize=' + encodeURIComponent(pageSize.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SupervisorListApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Query supervisors
 *
 * Get all supervisors that match a specified query. The returned model can
 * contain a continuation token if more results are available. Call the
 * GetListOfSupervisors operation using the token to retrieve more results.
 *
 * @param {object} body Supervisors query model
 *
 * @param {string} [body.siteId] Site for the supervisors
 *
 * @param {boolean} [body.connected] Included connected or disconnected
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {boolean} [options.onlyServerState] Whether to include only server
 * state, or display current client state of the endpoint if available
 *
 * @param {number} [options.pageSize] Number of results to return
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SupervisorListApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _querySupervisors(body, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let onlyServerState = (options && options.onlyServerState !== undefined) ? options.onlyServerState : undefined;
  let pageSize = (options && options.pageSize !== undefined) ? options.pageSize : undefined;
  // Validate
  try {
    if (onlyServerState !== null && onlyServerState !== undefined && typeof onlyServerState !== 'boolean') {
      throw new Error('onlyServerState must be of type boolean.');
    }
    if (pageSize !== null && pageSize !== undefined && typeof pageSize !== 'number') {
      throw new Error('pageSize must be of type number.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/supervisors/query';
  let queryParameters = [];
  if (onlyServerState !== null && onlyServerState !== undefined) {
    queryParameters.push('onlyServerState=' + encodeURIComponent(onlyServerState.toString()));
  }
  if (pageSize !== null && pageSize !== undefined) {
    queryParameters.push('pageSize=' + encodeURIComponent(pageSize.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['SupervisorQueryApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SupervisorListApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Get filtered list of supervisors
 *
 * Get a list of supervisors filtered using the specified query parameters. The
 * returned model can contain a continuation token if more results are
 * available. Call the GetListOfSupervisors operation using the token to
 * retrieve more results.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.siteId] Site for the supervisors
 *
 * @param {boolean} [options.connected] Included connected or disconnected
 *
 * @param {boolean} [options.onlyServerState] Whether to include only server
 * state, or display current client state of the endpoint if available
 *
 * @param {number} [options.pageSize] Number of results to return
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link SupervisorListApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getFilteredListOfSupervisors(options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let siteId = (options && options.siteId !== undefined) ? options.siteId : undefined;
  let connected = (options && options.connected !== undefined) ? options.connected : undefined;
  let onlyServerState = (options && options.onlyServerState !== undefined) ? options.onlyServerState : undefined;
  let pageSize = (options && options.pageSize !== undefined) ? options.pageSize : undefined;
  // Validate
  try {
    if (siteId !== null && siteId !== undefined && typeof siteId.valueOf() !== 'string') {
      throw new Error('siteId must be of type string.');
    }
    if (connected !== null && connected !== undefined && typeof connected !== 'boolean') {
      throw new Error('connected must be of type boolean.');
    }
    if (onlyServerState !== null && onlyServerState !== undefined && typeof onlyServerState !== 'boolean') {
      throw new Error('onlyServerState must be of type boolean.');
    }
    if (pageSize !== null && pageSize !== undefined && typeof pageSize !== 'number') {
      throw new Error('pageSize must be of type number.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/supervisors/query';
  let queryParameters = [];
  if (siteId !== null && siteId !== undefined) {
    queryParameters.push('siteId=' + encodeURIComponent(siteId));
  }
  if (connected !== null && connected !== undefined) {
    queryParameters.push('connected=' + encodeURIComponent(connected.toString()));
  }
  if (onlyServerState !== null && onlyServerState !== undefined) {
    queryParameters.push('onlyServerState=' + encodeURIComponent(onlyServerState.toString()));
  }
  if (pageSize !== null && pageSize !== undefined) {
    queryParameters.push('pageSize=' + encodeURIComponent(pageSize.toString()));
  }
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['SupervisorListApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Subscribe to supervisor registry events
 *
 * Register a user to receive supervisor events through SignalR.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.body] The user id that will receive supervisor
 * events.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _subscribe5(options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let body = (options && options.body !== undefined) ? options.body : undefined;
  // Validate
  try {
    if (body !== null && body !== undefined && typeof body.valueOf() !== 'string') {
      throw new Error('body must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/supervisors/events';

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = {
        required: false,
        serializedName: 'body',
        type: {
          name: 'String'
        }
      };
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Unsubscribe registry events
 *
 * Unregister a user and stop it from receiving supervisor events.
 *
 * @param {string} userId The user id that will not receive any more supervisor
 * events
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _unsubscribe5(userId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (userId === null || userId === undefined || typeof userId.valueOf() !== 'string') {
      throw new Error('userId cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/supervisors/events/{userId}';
  requestUrl = requestUrl.replace('{userId}', encodeURIComponent(userId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a AzureOpcRegistryClient. */
class AzureOpcRegistryClient extends ServiceClient {
  /**
   * Create a AzureOpcRegistryClient.
   * @param {credentials} credentials - Subscription credentials which uniquely identify client subscription.
   * @param {string} [baseUri] - The base URI of the service.
   * @param {object} [options] - The parameter options
   * @param {Array} [options.filters] - Filters to be added to the request pipeline
   * @param {object} [options.requestOptions] - Options for the underlying request object
   * {@link https://github.com/request/request#requestoptions-callback Options doc}
   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
   */
  constructor(credentials, baseUri, options) {
    if (credentials === null || credentials === undefined) {
      throw new Error('\'credentials\' cannot be null.');
    }

    if (!options) options = {};

    super(credentials, options);

    this.baseUri = baseUri;
    if (!this.baseUri) {
      this.baseUri = 'http://localhost:9080';
    }
    this.credentials = credentials;

    let packageInfo = this.getPackageJsonInfo(__dirname);
    this.addUserAgentInfo(`${packageInfo.name}/${packageInfo.version}`);
    this.models = models;
    this._registerServer = _registerServer;
    this._createApplication = _createApplication;
    this._deleteAllDisabledApplications = _deleteAllDisabledApplications;
    this._getListOfApplications = _getListOfApplications;
    this._disableApplication = _disableApplication;
    this._enableApplication = _enableApplication;
    this._discoverServer = _discoverServer;
    this._cancel = _cancel;
    this._getApplicationRegistration = _getApplicationRegistration;
    this._updateApplicationRegistration = _updateApplicationRegistration;
    this._deleteApplication = _deleteApplication;
    this._getListOfSites = _getListOfSites;
    this._queryApplications = _queryApplications;
    this._getFilteredListOfApplications = _getFilteredListOfApplications;
    this._subscribe = _subscribe;
    this._unsubscribe = _unsubscribe;
    this._getDiscoverer = _getDiscoverer;
    this._updateDiscoverer = _updateDiscoverer;
    this._setDiscoveryMode = _setDiscoveryMode;
    this._getListOfDiscoverers = _getListOfDiscoverers;
    this._queryDiscoverers = _queryDiscoverers;
    this._getFilteredListOfDiscoverers = _getFilteredListOfDiscoverers;
    this._subscribe1 = _subscribe1;
    this._unsubscribe1 = _unsubscribe1;
    this._subscribeByDiscovererId = _subscribeByDiscovererId;
    this._subscribeByRequestId = _subscribeByRequestId;
    this._unsubscribeByRequestId = _unsubscribeByRequestId;
    this._unsubscribeByDiscovererId = _unsubscribeByDiscovererId;
    this._activateEndpoint = _activateEndpoint;
    this._getEndpoint = _getEndpoint;
    this._getListOfEndpoints = _getListOfEndpoints;
    this._queryEndpoints = _queryEndpoints;
    this._getFilteredListOfEndpoints = _getFilteredListOfEndpoints;
    this._deactivateEndpoint = _deactivateEndpoint;
    this._subscribe2 = _subscribe2;
    this._unsubscribe2 = _unsubscribe2;
    this._getGateway = _getGateway;
    this._updateGateway = _updateGateway;
    this._getListOfGateway = _getListOfGateway;
    this._queryGateway = _queryGateway;
    this._getFilteredListOfGateway = _getFilteredListOfGateway;
    this._subscribe3 = _subscribe3;
    this._unsubscribe3 = _unsubscribe3;
    this._getPublisher = _getPublisher;
    this._updatePublisher = _updatePublisher;
    this._getListOfPublisher = _getListOfPublisher;
    this._queryPublisher = _queryPublisher;
    this._getFilteredListOfPublisher = _getFilteredListOfPublisher;
    this._subscribe4 = _subscribe4;
    this._unsubscribe4 = _unsubscribe4;
    this._getSupervisor = _getSupervisor;
    this._updateSupervisor = _updateSupervisor;
    this._getSupervisorStatus = _getSupervisorStatus;
    this._resetSupervisor = _resetSupervisor;
    this._getListOfSupervisors = _getListOfSupervisors;
    this._querySupervisors = _querySupervisors;
    this._getFilteredListOfSupervisors = _getFilteredListOfSupervisors;
    this._subscribe5 = _subscribe5;
    this._unsubscribe5 = _unsubscribe5;
    msRest.addSerializationMixin(this);
  }

  /**
   * @summary Register new server
   *
   * Registers a server solely using a discovery url. Requires that the
   * onboarding agent service is running and the server can be located by a
   * supervisor in its network using the discovery url.
   *
   * @param {object} body Server registration request
   *
   * @param {string} body.discoveryUrl Discovery url to use for registration
   *
   * @param {string} [body.id] Registration id
   *
   * @param {object} [body.activationFilter]
   *
   * @param {array} [body.activationFilter.trustLists] Certificate trust list
   * identifiers to use for
   * activation, if null, all certificates are
   * trusted.  If empty list, no certificates are
   * trusted which is equal to no filter.
   *
   * @param {array} [body.activationFilter.securityPolicies] Endpoint security
   * policies to filter against.
   * If set to null, all policies are in scope.
   *
   * @param {string} [body.activationFilter.securityMode] Possible values
   * include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  registerServerWithHttpOperationResponse(body, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._registerServer(body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Register new server
   *
   * Registers a server solely using a discovery url. Requires that the
   * onboarding agent service is running and the server can be located by a
   * supervisor in its network using the discovery url.
   *
   * @param {object} body Server registration request
   *
   * @param {string} body.discoveryUrl Discovery url to use for registration
   *
   * @param {string} [body.id] Registration id
   *
   * @param {object} [body.activationFilter]
   *
   * @param {array} [body.activationFilter.trustLists] Certificate trust list
   * identifiers to use for
   * activation, if null, all certificates are
   * trusted.  If empty list, no certificates are
   * trusted which is equal to no filter.
   *
   * @param {array} [body.activationFilter.securityPolicies] Endpoint security
   * policies to filter against.
   * If set to null, all policies are in scope.
   *
   * @param {string} [body.activationFilter.securityMode] Possible values
   * include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  registerServer(body, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._registerServer(body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._registerServer(body, options, optionalCallback);
    }
  }

  /**
   * @summary Create new application
   *
   * The application is registered using the provided information, but it is not
   * associated with a supervisor. This is useful for when you need to register
   * clients or you want to register a server that is located in a network not
   * reachable through a Twin module.
   *
   * @param {object} body Application registration request
   *
   * @param {string} body.applicationUri Unique application uri
   *
   * @param {string} [body.applicationType] Possible values include: 'Server',
   * 'Client', 'ClientAndServer', 'DiscoveryServer'
   *
   * @param {string} [body.productUri] Product uri of the application.
   *
   * @param {string} [body.applicationName] Default name of the server or client.
   *
   * @param {string} [body.locale] Locale of default name
   *
   * @param {string} [body.siteId] Site of the application
   *
   * @param {object} [body.localizedNames] Localized names key off locale id.
   *
   * @param {array} [body.capabilities] The OPC UA defined capabilities of the
   * server.
   *
   * @param {array} [body.discoveryUrls] Discovery urls of the server.
   *
   * @param {string} [body.discoveryProfileUri] The discovery profile uri of the
   * server.
   *
   * @param {string} [body.gatewayServerUri] Gateway server uri
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ApplicationRegistrationResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  createApplicationWithHttpOperationResponse(body, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._createApplication(body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Create new application
   *
   * The application is registered using the provided information, but it is not
   * associated with a supervisor. This is useful for when you need to register
   * clients or you want to register a server that is located in a network not
   * reachable through a Twin module.
   *
   * @param {object} body Application registration request
   *
   * @param {string} body.applicationUri Unique application uri
   *
   * @param {string} [body.applicationType] Possible values include: 'Server',
   * 'Client', 'ClientAndServer', 'DiscoveryServer'
   *
   * @param {string} [body.productUri] Product uri of the application.
   *
   * @param {string} [body.applicationName] Default name of the server or client.
   *
   * @param {string} [body.locale] Locale of default name
   *
   * @param {string} [body.siteId] Site of the application
   *
   * @param {object} [body.localizedNames] Localized names key off locale id.
   *
   * @param {array} [body.capabilities] The OPC UA defined capabilities of the
   * server.
   *
   * @param {array} [body.discoveryUrls] Discovery urls of the server.
   *
   * @param {string} [body.discoveryProfileUri] The discovery profile uri of the
   * server.
   *
   * @param {string} [body.gatewayServerUri] Gateway server uri
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ApplicationRegistrationResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ApplicationRegistrationResponseApiModel} for
   *                      more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  createApplication(body, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._createApplication(body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._createApplication(body, options, optionalCallback);
    }
  }

  /**
   * @summary Purge applications
   *
   * Purges all applications that have not been seen for a specified amount of
   * time.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.notSeenFor] A duration in milliseconds
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteAllDisabledApplicationsWithHttpOperationResponse(options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteAllDisabledApplications(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Purge applications
   *
   * Purges all applications that have not been seen for a specified amount of
   * time.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.notSeenFor] A duration in milliseconds
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteAllDisabledApplications(options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteAllDisabledApplications(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteAllDisabledApplications(options, optionalCallback);
    }
  }

  /**
   * @summary Get list of applications
   *
   * Get all registered applications in paged form. The returned model can
   * contain a continuation token if more results are available. Call this
   * operation again using the token to retrieve more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.continuationToken] Optional Continuation token
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ApplicationInfoListApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getListOfApplicationsWithHttpOperationResponse(options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getListOfApplications(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Get list of applications
   *
   * Get all registered applications in paged form. The returned model can
   * contain a continuation token if more results are available. Call this
   * operation again using the token to retrieve more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.continuationToken] Optional Continuation token
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ApplicationInfoListApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ApplicationInfoListApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getListOfApplications(options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getListOfApplications(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getListOfApplications(options, optionalCallback);
    }
  }

  /**
   * @summary Disable an enabled application.
   *
   * A manager can disable an application.
   *
   * @param {string} applicationId The application id
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  disableApplicationWithHttpOperationResponse(applicationId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._disableApplication(applicationId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Disable an enabled application.
   *
   * A manager can disable an application.
   *
   * @param {string} applicationId The application id
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  disableApplication(applicationId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._disableApplication(applicationId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._disableApplication(applicationId, options, optionalCallback);
    }
  }

  /**
   * @summary Re-enable a disabled application.
   *
   * A manager can enable an application.
   *
   * @param {string} applicationId The application id
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  enableApplicationWithHttpOperationResponse(applicationId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._enableApplication(applicationId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Re-enable a disabled application.
   *
   * A manager can enable an application.
   *
   * @param {string} applicationId The application id
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  enableApplication(applicationId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._enableApplication(applicationId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._enableApplication(applicationId, options, optionalCallback);
    }
  }

  /**
   * @summary Discover servers
   *
   * Registers servers by running a discovery scan in a supervisor's network.
   * Requires that the onboarding agent service is running.
   *
   * @param {object} body Discovery request
   *
   * @param {string} [body.id] Id of discovery request
   *
   * @param {string} [body.discovery] Possible values include: 'Off', 'Local',
   * 'Network', 'Fast', 'Scan'
   *
   * @param {object} [body.configuration]
   *
   * @param {string} [body.configuration.addressRangesToScan] Address ranges to
   * scan (null == all wired nics)
   *
   * @param {number} [body.configuration.networkProbeTimeoutMs] Network probe
   * timeout
   *
   * @param {number} [body.configuration.maxNetworkProbes] Max network probes
   * that should ever run.
   *
   * @param {string} [body.configuration.portRangesToScan] Port ranges to scan
   * (null == all unassigned)
   *
   * @param {number} [body.configuration.portProbeTimeoutMs] Port probe timeout
   *
   * @param {number} [body.configuration.maxPortProbes] Max port probes that
   * should ever run.
   *
   * @param {number} [body.configuration.minPortProbesPercent] Probes that must
   * always be there as percent of max.
   *
   * @param {number} [body.configuration.idleTimeBetweenScansSec] Delay time
   * between discovery sweeps in seconds
   *
   * @param {array} [body.configuration.discoveryUrls] List of preset discovery
   * urls to use
   *
   * @param {array} [body.configuration.locales] List of locales to filter with
   * during discovery
   *
   * @param {object} [body.configuration.activationFilter]
   *
   * @param {array} [body.configuration.activationFilter.trustLists] Certificate
   * trust list identifiers to use for
   * activation, if null, all certificates are
   * trusted.  If empty list, no certificates are
   * trusted which is equal to no filter.
   *
   * @param {array} [body.configuration.activationFilter.securityPolicies]
   * Endpoint security policies to filter against.
   * If set to null, all policies are in scope.
   *
   * @param {string} [body.configuration.activationFilter.securityMode] Possible
   * values include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  discoverServerWithHttpOperationResponse(body, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._discoverServer(body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Discover servers
   *
   * Registers servers by running a discovery scan in a supervisor's network.
   * Requires that the onboarding agent service is running.
   *
   * @param {object} body Discovery request
   *
   * @param {string} [body.id] Id of discovery request
   *
   * @param {string} [body.discovery] Possible values include: 'Off', 'Local',
   * 'Network', 'Fast', 'Scan'
   *
   * @param {object} [body.configuration]
   *
   * @param {string} [body.configuration.addressRangesToScan] Address ranges to
   * scan (null == all wired nics)
   *
   * @param {number} [body.configuration.networkProbeTimeoutMs] Network probe
   * timeout
   *
   * @param {number} [body.configuration.maxNetworkProbes] Max network probes
   * that should ever run.
   *
   * @param {string} [body.configuration.portRangesToScan] Port ranges to scan
   * (null == all unassigned)
   *
   * @param {number} [body.configuration.portProbeTimeoutMs] Port probe timeout
   *
   * @param {number} [body.configuration.maxPortProbes] Max port probes that
   * should ever run.
   *
   * @param {number} [body.configuration.minPortProbesPercent] Probes that must
   * always be there as percent of max.
   *
   * @param {number} [body.configuration.idleTimeBetweenScansSec] Delay time
   * between discovery sweeps in seconds
   *
   * @param {array} [body.configuration.discoveryUrls] List of preset discovery
   * urls to use
   *
   * @param {array} [body.configuration.locales] List of locales to filter with
   * during discovery
   *
   * @param {object} [body.configuration.activationFilter]
   *
   * @param {array} [body.configuration.activationFilter.trustLists] Certificate
   * trust list identifiers to use for
   * activation, if null, all certificates are
   * trusted.  If empty list, no certificates are
   * trusted which is equal to no filter.
   *
   * @param {array} [body.configuration.activationFilter.securityPolicies]
   * Endpoint security policies to filter against.
   * If set to null, all policies are in scope.
   *
   * @param {string} [body.configuration.activationFilter.securityMode] Possible
   * values include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  discoverServer(body, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._discoverServer(body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._discoverServer(body, options, optionalCallback);
    }
  }

  /**
   * @summary Cancel discovery
   *
   * Cancels a discovery request using the request identifier.
   *
   * @param {string} requestId Discovery request
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  cancelWithHttpOperationResponse(requestId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._cancel(requestId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Cancel discovery
   *
   * Cancels a discovery request using the request identifier.
   *
   * @param {string} requestId Discovery request
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  cancel(requestId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._cancel(requestId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._cancel(requestId, options, optionalCallback);
    }
  }

  /**
   * @summary Get application registration
   *
   * @param {string} applicationId Application id for the server
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ApplicationRegistrationApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getApplicationRegistrationWithHttpOperationResponse(applicationId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getApplicationRegistration(applicationId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Get application registration
   *
   * @param {string} applicationId Application id for the server
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ApplicationRegistrationApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ApplicationRegistrationApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getApplicationRegistration(applicationId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getApplicationRegistration(applicationId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getApplicationRegistration(applicationId, options, optionalCallback);
    }
  }

  /**
   * @summary Update application registration
   *
   * The application information is updated with new properties. Note that this
   * information might be overridden if the application is re-discovered during a
   * discovery run (recurring or one-time).
   *
   * @param {string} applicationId The identifier of the application
   *
   * @param {object} body Application update request
   *
   * @param {string} [body.productUri] Product uri
   *
   * @param {string} [body.applicationName] Default name of the server or client.
   *
   * @param {string} [body.locale] Locale of default name - defaults to "en"
   *
   * @param {object} [body.localizedNames] Localized names keyed off locale id.
   * To remove entry, set value for locale id to null.
   *
   * @param {buffer} [body.certificate] Application public cert
   *
   * @param {array} [body.capabilities] Capabilities of the application
   *
   * @param {array} [body.discoveryUrls] Discovery urls of the application
   *
   * @param {string} [body.discoveryProfileUri] Discovery profile uri
   *
   * @param {string} [body.gatewayServerUri] Gateway server uri
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  updateApplicationRegistrationWithHttpOperationResponse(applicationId, body, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._updateApplicationRegistration(applicationId, body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Update application registration
   *
   * The application information is updated with new properties. Note that this
   * information might be overridden if the application is re-discovered during a
   * discovery run (recurring or one-time).
   *
   * @param {string} applicationId The identifier of the application
   *
   * @param {object} body Application update request
   *
   * @param {string} [body.productUri] Product uri
   *
   * @param {string} [body.applicationName] Default name of the server or client.
   *
   * @param {string} [body.locale] Locale of default name - defaults to "en"
   *
   * @param {object} [body.localizedNames] Localized names keyed off locale id.
   * To remove entry, set value for locale id to null.
   *
   * @param {buffer} [body.certificate] Application public cert
   *
   * @param {array} [body.capabilities] Capabilities of the application
   *
   * @param {array} [body.discoveryUrls] Discovery urls of the application
   *
   * @param {string} [body.discoveryProfileUri] Discovery profile uri
   *
   * @param {string} [body.gatewayServerUri] Gateway server uri
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  updateApplicationRegistration(applicationId, body, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._updateApplicationRegistration(applicationId, body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._updateApplicationRegistration(applicationId, body, options, optionalCallback);
    }
  }

  /**
   * @summary Unregister application
   *
   * Unregisters and deletes application and all its associated endpoints.
   *
   * @param {string} applicationId The identifier of the application
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deleteApplicationWithHttpOperationResponse(applicationId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deleteApplication(applicationId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Unregister application
   *
   * Unregisters and deletes application and all its associated endpoints.
   *
   * @param {string} applicationId The identifier of the application
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteApplication(applicationId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deleteApplication(applicationId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deleteApplication(applicationId, options, optionalCallback);
    }
  }

  /**
   * @summary Get list of sites
   *
   * List all sites applications are registered in.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.continuationToken] Optional Continuation token
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ApplicationSiteListApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getListOfSitesWithHttpOperationResponse(options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getListOfSites(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Get list of sites
   *
   * List all sites applications are registered in.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.continuationToken] Optional Continuation token
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ApplicationSiteListApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ApplicationSiteListApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getListOfSites(options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getListOfSites(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getListOfSites(options, optionalCallback);
    }
  }

  /**
   * @summary Query applications
   *
   * List applications that match a query model. The returned model can contain a
   * continuation token if more results are available. Call the
   * GetListOfApplications operation using the token to retrieve more results.
   *
   * @param {object} body Application query
   *
   * @param {string} [body.applicationType] Possible values include: 'Server',
   * 'Client', 'ClientAndServer', 'DiscoveryServer'
   *
   * @param {string} [body.applicationUri] Application uri
   *
   * @param {string} [body.productUri] Product uri
   *
   * @param {string} [body.applicationName] Name of application
   *
   * @param {string} [body.locale] Locale of application name - default is "en"
   *
   * @param {string} [body.capability] Application capability to query with
   *
   * @param {string} [body.discoveryProfileUri] Discovery profile uri
   *
   * @param {string} [body.gatewayServerUri] Gateway server uri
   *
   * @param {string} [body.siteOrGatewayId] Supervisor or site the application
   * belongs to.
   *
   * @param {boolean} [body.includeNotSeenSince] Whether to include apps that
   * were soft deleted
   *
   * @param {string} [body.discovererId] Discoverer id to filter with
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ApplicationInfoListApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  queryApplicationsWithHttpOperationResponse(body, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._queryApplications(body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Query applications
   *
   * List applications that match a query model. The returned model can contain a
   * continuation token if more results are available. Call the
   * GetListOfApplications operation using the token to retrieve more results.
   *
   * @param {object} body Application query
   *
   * @param {string} [body.applicationType] Possible values include: 'Server',
   * 'Client', 'ClientAndServer', 'DiscoveryServer'
   *
   * @param {string} [body.applicationUri] Application uri
   *
   * @param {string} [body.productUri] Product uri
   *
   * @param {string} [body.applicationName] Name of application
   *
   * @param {string} [body.locale] Locale of application name - default is "en"
   *
   * @param {string} [body.capability] Application capability to query with
   *
   * @param {string} [body.discoveryProfileUri] Discovery profile uri
   *
   * @param {string} [body.gatewayServerUri] Gateway server uri
   *
   * @param {string} [body.siteOrGatewayId] Supervisor or site the application
   * belongs to.
   *
   * @param {boolean} [body.includeNotSeenSince] Whether to include apps that
   * were soft deleted
   *
   * @param {string} [body.discovererId] Discoverer id to filter with
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ApplicationInfoListApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ApplicationInfoListApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  queryApplications(body, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._queryApplications(body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._queryApplications(body, options, optionalCallback);
    }
  }

  /**
   * @summary Get filtered list of applications
   *
   * Get a list of applications filtered using the specified query parameters.
   * The returned model can contain a continuation token if more results are
   * available. Call the GetListOfApplications operation using the token to
   * retrieve more results.
   *
   * @param {object} body Applications Query model
   *
   * @param {string} [body.applicationType] Possible values include: 'Server',
   * 'Client', 'ClientAndServer', 'DiscoveryServer'
   *
   * @param {string} [body.applicationUri] Application uri
   *
   * @param {string} [body.productUri] Product uri
   *
   * @param {string} [body.applicationName] Name of application
   *
   * @param {string} [body.locale] Locale of application name - default is "en"
   *
   * @param {string} [body.capability] Application capability to query with
   *
   * @param {string} [body.discoveryProfileUri] Discovery profile uri
   *
   * @param {string} [body.gatewayServerUri] Gateway server uri
   *
   * @param {string} [body.siteOrGatewayId] Supervisor or site the application
   * belongs to.
   *
   * @param {boolean} [body.includeNotSeenSince] Whether to include apps that
   * were soft deleted
   *
   * @param {string} [body.discovererId] Discoverer id to filter with
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ApplicationInfoListApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getFilteredListOfApplicationsWithHttpOperationResponse(body, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getFilteredListOfApplications(body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Get filtered list of applications
   *
   * Get a list of applications filtered using the specified query parameters.
   * The returned model can contain a continuation token if more results are
   * available. Call the GetListOfApplications operation using the token to
   * retrieve more results.
   *
   * @param {object} body Applications Query model
   *
   * @param {string} [body.applicationType] Possible values include: 'Server',
   * 'Client', 'ClientAndServer', 'DiscoveryServer'
   *
   * @param {string} [body.applicationUri] Application uri
   *
   * @param {string} [body.productUri] Product uri
   *
   * @param {string} [body.applicationName] Name of application
   *
   * @param {string} [body.locale] Locale of application name - default is "en"
   *
   * @param {string} [body.capability] Application capability to query with
   *
   * @param {string} [body.discoveryProfileUri] Discovery profile uri
   *
   * @param {string} [body.gatewayServerUri] Gateway server uri
   *
   * @param {string} [body.siteOrGatewayId] Supervisor or site the application
   * belongs to.
   *
   * @param {boolean} [body.includeNotSeenSince] Whether to include apps that
   * were soft deleted
   *
   * @param {string} [body.discovererId] Discoverer id to filter with
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {ApplicationInfoListApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ApplicationInfoListApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getFilteredListOfApplications(body, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getFilteredListOfApplications(body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getFilteredListOfApplications(body, options, optionalCallback);
    }
  }

  /**
   * @summary Subscribe for application events
   *
   * Register a client to receive application events through SignalR.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.body] The user that will receive application
   * events.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  subscribeWithHttpOperationResponse(options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._subscribe(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Subscribe for application events
   *
   * Register a client to receive application events through SignalR.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.body] The user that will receive application
   * events.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  subscribe(options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._subscribe(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._subscribe(options, optionalCallback);
    }
  }

  /**
   * @summary Unsubscribe from application events
   *
   * Unregister a user and stop it from receiving events.
   *
   * @param {string} userId The user id that will not receive any more events
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  unsubscribeWithHttpOperationResponse(userId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._unsubscribe(userId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Unsubscribe from application events
   *
   * Unregister a user and stop it from receiving events.
   *
   * @param {string} userId The user id that will not receive any more events
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  unsubscribe(userId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._unsubscribe(userId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._unsubscribe(userId, options, optionalCallback);
    }
  }

  /**
   * @summary Get discoverer registration information
   *
   * Returns a discoverer's registration and connectivity information. A
   * discoverer id corresponds to the twin modules module identity.
   *
   * @param {string} discovererId Discoverer identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DiscovererApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getDiscovererWithHttpOperationResponse(discovererId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getDiscoverer(discovererId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Get discoverer registration information
   *
   * Returns a discoverer's registration and connectivity information. A
   * discoverer id corresponds to the twin modules module identity.
   *
   * @param {string} discovererId Discoverer identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {DiscovererApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DiscovererApiModel} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getDiscoverer(discovererId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getDiscoverer(discovererId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getDiscoverer(discovererId, options, optionalCallback);
    }
  }

  /**
   * @summary Update discoverer information
   *
   * Allows a caller to configure recurring discovery runs on the twin module
   * identified by the discoverer id or update site information.
   *
   * @param {string} discovererId discoverer identifier
   *
   * @param {object} body Patch request
   *
   * @param {string} [body.siteId] Site the discoverer is part of
   *
   * @param {string} [body.discovery] Possible values include: 'Off', 'Local',
   * 'Network', 'Fast', 'Scan'
   *
   * @param {object} [body.discoveryConfig]
   *
   * @param {string} [body.discoveryConfig.addressRangesToScan] Address ranges to
   * scan (null == all wired nics)
   *
   * @param {number} [body.discoveryConfig.networkProbeTimeoutMs] Network probe
   * timeout
   *
   * @param {number} [body.discoveryConfig.maxNetworkProbes] Max network probes
   * that should ever run.
   *
   * @param {string} [body.discoveryConfig.portRangesToScan] Port ranges to scan
   * (null == all unassigned)
   *
   * @param {number} [body.discoveryConfig.portProbeTimeoutMs] Port probe timeout
   *
   * @param {number} [body.discoveryConfig.maxPortProbes] Max port probes that
   * should ever run.
   *
   * @param {number} [body.discoveryConfig.minPortProbesPercent] Probes that must
   * always be there as percent of max.
   *
   * @param {number} [body.discoveryConfig.idleTimeBetweenScansSec] Delay time
   * between discovery sweeps in seconds
   *
   * @param {array} [body.discoveryConfig.discoveryUrls] List of preset discovery
   * urls to use
   *
   * @param {array} [body.discoveryConfig.locales] List of locales to filter with
   * during discovery
   *
   * @param {object} [body.discoveryConfig.activationFilter]
   *
   * @param {array} [body.discoveryConfig.activationFilter.trustLists]
   * Certificate trust list identifiers to use for
   * activation, if null, all certificates are
   * trusted.  If empty list, no certificates are
   * trusted which is equal to no filter.
   *
   * @param {array} [body.discoveryConfig.activationFilter.securityPolicies]
   * Endpoint security policies to filter against.
   * If set to null, all policies are in scope.
   *
   * @param {string} [body.discoveryConfig.activationFilter.securityMode]
   * Possible values include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
   *
   * @param {string} [body.logLevel] Possible values include: 'Error',
   * 'Information', 'Debug', 'Verbose'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  updateDiscovererWithHttpOperationResponse(discovererId, body, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._updateDiscoverer(discovererId, body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Update discoverer information
   *
   * Allows a caller to configure recurring discovery runs on the twin module
   * identified by the discoverer id or update site information.
   *
   * @param {string} discovererId discoverer identifier
   *
   * @param {object} body Patch request
   *
   * @param {string} [body.siteId] Site the discoverer is part of
   *
   * @param {string} [body.discovery] Possible values include: 'Off', 'Local',
   * 'Network', 'Fast', 'Scan'
   *
   * @param {object} [body.discoveryConfig]
   *
   * @param {string} [body.discoveryConfig.addressRangesToScan] Address ranges to
   * scan (null == all wired nics)
   *
   * @param {number} [body.discoveryConfig.networkProbeTimeoutMs] Network probe
   * timeout
   *
   * @param {number} [body.discoveryConfig.maxNetworkProbes] Max network probes
   * that should ever run.
   *
   * @param {string} [body.discoveryConfig.portRangesToScan] Port ranges to scan
   * (null == all unassigned)
   *
   * @param {number} [body.discoveryConfig.portProbeTimeoutMs] Port probe timeout
   *
   * @param {number} [body.discoveryConfig.maxPortProbes] Max port probes that
   * should ever run.
   *
   * @param {number} [body.discoveryConfig.minPortProbesPercent] Probes that must
   * always be there as percent of max.
   *
   * @param {number} [body.discoveryConfig.idleTimeBetweenScansSec] Delay time
   * between discovery sweeps in seconds
   *
   * @param {array} [body.discoveryConfig.discoveryUrls] List of preset discovery
   * urls to use
   *
   * @param {array} [body.discoveryConfig.locales] List of locales to filter with
   * during discovery
   *
   * @param {object} [body.discoveryConfig.activationFilter]
   *
   * @param {array} [body.discoveryConfig.activationFilter.trustLists]
   * Certificate trust list identifiers to use for
   * activation, if null, all certificates are
   * trusted.  If empty list, no certificates are
   * trusted which is equal to no filter.
   *
   * @param {array} [body.discoveryConfig.activationFilter.securityPolicies]
   * Endpoint security policies to filter against.
   * If set to null, all policies are in scope.
   *
   * @param {string} [body.discoveryConfig.activationFilter.securityMode]
   * Possible values include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
   *
   * @param {string} [body.logLevel] Possible values include: 'Error',
   * 'Information', 'Debug', 'Verbose'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  updateDiscoverer(discovererId, body, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._updateDiscoverer(discovererId, body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._updateDiscoverer(discovererId, body, options, optionalCallback);
    }
  }

  /**
   * @summary Enable server discovery
   *
   * Allows a caller to configure recurring discovery runs on the discovery
   * module identified by the module id.
   *
   * @param {string} discovererId discoverer identifier
   *
   * @param {string} mode Discovery mode. Possible values include: 'Off',
   * 'Local', 'Network', 'Fast', 'Scan'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.body] Discovery configuration
   *
   * @param {string} [options.body.addressRangesToScan] Address ranges to scan
   * (null == all wired nics)
   *
   * @param {number} [options.body.networkProbeTimeoutMs] Network probe timeout
   *
   * @param {number} [options.body.maxNetworkProbes] Max network probes that
   * should ever run.
   *
   * @param {string} [options.body.portRangesToScan] Port ranges to scan (null ==
   * all unassigned)
   *
   * @param {number} [options.body.portProbeTimeoutMs] Port probe timeout
   *
   * @param {number} [options.body.maxPortProbes] Max port probes that should
   * ever run.
   *
   * @param {number} [options.body.minPortProbesPercent] Probes that must always
   * be there as percent of max.
   *
   * @param {number} [options.body.idleTimeBetweenScansSec] Delay time between
   * discovery sweeps in seconds
   *
   * @param {array} [options.body.discoveryUrls] List of preset discovery urls to
   * use
   *
   * @param {array} [options.body.locales] List of locales to filter with during
   * discovery
   *
   * @param {object} [options.body.activationFilter]
   *
   * @param {array} [options.body.activationFilter.trustLists] Certificate trust
   * list identifiers to use for
   * activation, if null, all certificates are
   * trusted.  If empty list, no certificates are
   * trusted which is equal to no filter.
   *
   * @param {array} [options.body.activationFilter.securityPolicies] Endpoint
   * security policies to filter against.
   * If set to null, all policies are in scope.
   *
   * @param {string} [options.body.activationFilter.securityMode] Possible values
   * include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  setDiscoveryModeWithHttpOperationResponse(discovererId, mode, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._setDiscoveryMode(discovererId, mode, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Enable server discovery
   *
   * Allows a caller to configure recurring discovery runs on the discovery
   * module identified by the module id.
   *
   * @param {string} discovererId discoverer identifier
   *
   * @param {string} mode Discovery mode. Possible values include: 'Off',
   * 'Local', 'Network', 'Fast', 'Scan'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.body] Discovery configuration
   *
   * @param {string} [options.body.addressRangesToScan] Address ranges to scan
   * (null == all wired nics)
   *
   * @param {number} [options.body.networkProbeTimeoutMs] Network probe timeout
   *
   * @param {number} [options.body.maxNetworkProbes] Max network probes that
   * should ever run.
   *
   * @param {string} [options.body.portRangesToScan] Port ranges to scan (null ==
   * all unassigned)
   *
   * @param {number} [options.body.portProbeTimeoutMs] Port probe timeout
   *
   * @param {number} [options.body.maxPortProbes] Max port probes that should
   * ever run.
   *
   * @param {number} [options.body.minPortProbesPercent] Probes that must always
   * be there as percent of max.
   *
   * @param {number} [options.body.idleTimeBetweenScansSec] Delay time between
   * discovery sweeps in seconds
   *
   * @param {array} [options.body.discoveryUrls] List of preset discovery urls to
   * use
   *
   * @param {array} [options.body.locales] List of locales to filter with during
   * discovery
   *
   * @param {object} [options.body.activationFilter]
   *
   * @param {array} [options.body.activationFilter.trustLists] Certificate trust
   * list identifiers to use for
   * activation, if null, all certificates are
   * trusted.  If empty list, no certificates are
   * trusted which is equal to no filter.
   *
   * @param {array} [options.body.activationFilter.securityPolicies] Endpoint
   * security policies to filter against.
   * If set to null, all policies are in scope.
   *
   * @param {string} [options.body.activationFilter.securityMode] Possible values
   * include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  setDiscoveryMode(discovererId, mode, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._setDiscoveryMode(discovererId, mode, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._setDiscoveryMode(discovererId, mode, options, optionalCallback);
    }
  }

  /**
   * @summary Get list of discoverers
   *
   * Get all registered discoverers and therefore twin modules in paged form. The
   * returned model can contain a continuation token if more results are
   * available. Call this operation again using the token to retrieve more
   * results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {string} [options.continuationToken] Optional Continuation token
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DiscovererListApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getListOfDiscoverersWithHttpOperationResponse(options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getListOfDiscoverers(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Get list of discoverers
   *
   * Get all registered discoverers and therefore twin modules in paged form. The
   * returned model can contain a continuation token if more results are
   * available. Call this operation again using the token to retrieve more
   * results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {string} [options.continuationToken] Optional Continuation token
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {DiscovererListApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DiscovererListApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getListOfDiscoverers(options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getListOfDiscoverers(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getListOfDiscoverers(options, optionalCallback);
    }
  }

  /**
   * @summary Query discoverers
   *
   * Get all discoverers that match a specified query. The returned model can
   * contain a continuation token if more results are available. Call the
   * GetListOfDiscoverers operation using the token to retrieve more results.
   *
   * @param {object} body Discoverers query model
   *
   * @param {string} [body.siteId] Site of the discoverer
   *
   * @param {string} [body.discovery] Possible values include: 'Off', 'Local',
   * 'Network', 'Fast', 'Scan'
   *
   * @param {boolean} [body.connected] Included connected or disconnected
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DiscovererListApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  queryDiscoverersWithHttpOperationResponse(body, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._queryDiscoverers(body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Query discoverers
   *
   * Get all discoverers that match a specified query. The returned model can
   * contain a continuation token if more results are available. Call the
   * GetListOfDiscoverers operation using the token to retrieve more results.
   *
   * @param {object} body Discoverers query model
   *
   * @param {string} [body.siteId] Site of the discoverer
   *
   * @param {string} [body.discovery] Possible values include: 'Off', 'Local',
   * 'Network', 'Fast', 'Scan'
   *
   * @param {boolean} [body.connected] Included connected or disconnected
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {DiscovererListApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DiscovererListApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  queryDiscoverers(body, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._queryDiscoverers(body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._queryDiscoverers(body, options, optionalCallback);
    }
  }

  /**
   * @summary Get filtered list of discoverers
   *
   * Get a list of discoverers filtered using the specified query parameters. The
   * returned model can contain a continuation token if more results are
   * available. Call the GetListOfDiscoverers operation using the token to
   * retrieve more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.siteId] Site of the discoverer
   *
   * @param {string} [options.discovery] Discovery mode of discoverer. Possible
   * values include: 'Off', 'Local', 'Network', 'Fast', 'Scan'
   *
   * @param {boolean} [options.connected] Included connected or disconnected
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<DiscovererListApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getFilteredListOfDiscoverersWithHttpOperationResponse(options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getFilteredListOfDiscoverers(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Get filtered list of discoverers
   *
   * Get a list of discoverers filtered using the specified query parameters. The
   * returned model can contain a continuation token if more results are
   * available. Call the GetListOfDiscoverers operation using the token to
   * retrieve more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.siteId] Site of the discoverer
   *
   * @param {string} [options.discovery] Discovery mode of discoverer. Possible
   * values include: 'Off', 'Local', 'Network', 'Fast', 'Scan'
   *
   * @param {boolean} [options.connected] Included connected or disconnected
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {DiscovererListApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link DiscovererListApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getFilteredListOfDiscoverers(options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getFilteredListOfDiscoverers(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getFilteredListOfDiscoverers(options, optionalCallback);
    }
  }

  /**
   * @summary Subscribe to discoverer registry events
   *
   * Register a user to receive discoverer events through SignalR.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.body] The user id that will receive discoverer
   * events.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  subscribe1WithHttpOperationResponse(options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._subscribe1(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Subscribe to discoverer registry events
   *
   * Register a user to receive discoverer events through SignalR.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.body] The user id that will receive discoverer
   * events.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  subscribe1(options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._subscribe1(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._subscribe1(options, optionalCallback);
    }
  }

  /**
   * @summary Unsubscribe registry events
   *
   * Unregister a user and stop it from receiving discoverer events.
   *
   * @param {string} userId The user id that will not receive any more discoverer
   * events
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  unsubscribe1WithHttpOperationResponse(userId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._unsubscribe1(userId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Unsubscribe registry events
   *
   * Unregister a user and stop it from receiving discoverer events.
   *
   * @param {string} userId The user id that will not receive any more discoverer
   * events
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  unsubscribe1(userId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._unsubscribe1(userId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._unsubscribe1(userId, options, optionalCallback);
    }
  }

  /**
   * @summary Subscribe to discovery progress from discoverer
   *
   * Register a client to receive discovery progress events through SignalR from
   * a particular discoverer.
   *
   * @param {string} discovererId The discoverer to subscribe to
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.body] The user id that will receive discovery
   * events.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  subscribeByDiscovererIdWithHttpOperationResponse(discovererId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._subscribeByDiscovererId(discovererId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Subscribe to discovery progress from discoverer
   *
   * Register a client to receive discovery progress events through SignalR from
   * a particular discoverer.
   *
   * @param {string} discovererId The discoverer to subscribe to
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.body] The user id that will receive discovery
   * events.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  subscribeByDiscovererId(discovererId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._subscribeByDiscovererId(discovererId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._subscribeByDiscovererId(discovererId, options, optionalCallback);
    }
  }

  /**
   * @summary Subscribe to discovery progress for a request
   *
   * Register a client to receive discovery progress events through SignalR for a
   * particular request.
   *
   * @param {string} requestId The request to monitor
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.body] The user id that will receive discovery
   * events.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  subscribeByRequestIdWithHttpOperationResponse(requestId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._subscribeByRequestId(requestId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Subscribe to discovery progress for a request
   *
   * Register a client to receive discovery progress events through SignalR for a
   * particular request.
   *
   * @param {string} requestId The request to monitor
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.body] The user id that will receive discovery
   * events.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  subscribeByRequestId(requestId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._subscribeByRequestId(requestId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._subscribeByRequestId(requestId, options, optionalCallback);
    }
  }

  /**
   * @summary Unsubscribe from discovery progress for a request.
   *
   * Unregister a client and stop it from receiving discovery events for a
   * particular request.
   *
   * @param {string} requestId The request to unsubscribe from
   *
   * @param {string} userId The user id that will not receive any more discovery
   * progress
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  unsubscribeByRequestIdWithHttpOperationResponse(requestId, userId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._unsubscribeByRequestId(requestId, userId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Unsubscribe from discovery progress for a request.
   *
   * Unregister a client and stop it from receiving discovery events for a
   * particular request.
   *
   * @param {string} requestId The request to unsubscribe from
   *
   * @param {string} userId The user id that will not receive any more discovery
   * progress
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  unsubscribeByRequestId(requestId, userId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._unsubscribeByRequestId(requestId, userId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._unsubscribeByRequestId(requestId, userId, options, optionalCallback);
    }
  }

  /**
   * @summary Unsubscribe from discovery progress from discoverer.
   *
   * Unregister a client and stop it from receiving discovery events.
   *
   * @param {string} discovererId The discoverer to unsubscribe from
   *
   * @param {string} userId The user id that will not receive any more discovery
   * progress
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  unsubscribeByDiscovererIdWithHttpOperationResponse(discovererId, userId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._unsubscribeByDiscovererId(discovererId, userId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Unsubscribe from discovery progress from discoverer.
   *
   * Unregister a client and stop it from receiving discovery events.
   *
   * @param {string} discovererId The discoverer to unsubscribe from
   *
   * @param {string} userId The user id that will not receive any more discovery
   * progress
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  unsubscribeByDiscovererId(discovererId, userId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._unsubscribeByDiscovererId(discovererId, userId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._unsubscribeByDiscovererId(discovererId, userId, options, optionalCallback);
    }
  }

  /**
   * @summary Activate endpoint
   *
   * Activates an endpoint for subsequent use in twin service. All endpoints must
   * be activated using this API or through a activation filter during
   * application registration or discovery.
   *
   * @param {string} endpointId endpoint identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  activateEndpointWithHttpOperationResponse(endpointId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._activateEndpoint(endpointId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Activate endpoint
   *
   * Activates an endpoint for subsequent use in twin service. All endpoints must
   * be activated using this API or through a activation filter during
   * application registration or discovery.
   *
   * @param {string} endpointId endpoint identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  activateEndpoint(endpointId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._activateEndpoint(endpointId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._activateEndpoint(endpointId, options, optionalCallback);
    }
  }

  /**
   * @summary Get endpoint information
   *
   * Gets information about an endpoint.
   *
   * @param {string} endpointId endpoint identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<EndpointInfoApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getEndpointWithHttpOperationResponse(endpointId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getEndpoint(endpointId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Get endpoint information
   *
   * Gets information about an endpoint.
   *
   * @param {string} endpointId endpoint identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {EndpointInfoApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link EndpointInfoApiModel} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getEndpoint(endpointId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getEndpoint(endpointId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getEndpoint(endpointId, options, optionalCallback);
    }
  }

  /**
   * @summary Get list of endpoints
   *
   * Get all registered endpoints in paged form. The returned model can contain a
   * continuation token if more results are available. Call this operation again
   * using the token to retrieve more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {string} [options.continuationToken] Optional Continuation token
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<EndpointInfoListApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getListOfEndpointsWithHttpOperationResponse(options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getListOfEndpoints(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Get list of endpoints
   *
   * Get all registered endpoints in paged form. The returned model can contain a
   * continuation token if more results are available. Call this operation again
   * using the token to retrieve more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {string} [options.continuationToken] Optional Continuation token
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {EndpointInfoListApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link EndpointInfoListApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getListOfEndpoints(options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getListOfEndpoints(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getListOfEndpoints(options, optionalCallback);
    }
  }

  /**
   * @summary Query endpoints
   *
   * Return endpoints that match the specified query. The returned model can
   * contain a continuation token if more results are available. Call the
   * GetListOfEndpoints operation using the token to retrieve more results.
   *
   * @param {object} body Query to match
   *
   * @param {string} [body.url] Endoint url for direct server access
   *
   * @param {buffer} [body.certificate] Certificate of the endpoint
   *
   * @param {string} [body.securityMode] Possible values include: 'Best', 'Sign',
   * 'SignAndEncrypt', 'None'
   *
   * @param {string} [body.securityPolicy] Security policy uri
   *
   * @param {boolean} [body.activated] Whether the endpoint was activated
   *
   * @param {boolean} [body.connected] Whether the endpoint is connected on
   * supervisor.
   *
   * @param {string} [body.endpointState] Possible values include: 'Connecting',
   * 'NotReachable', 'Busy', 'NoTrust', 'CertificateInvalid', 'Ready', 'Error'
   *
   * @param {boolean} [body.includeNotSeenSince] Whether to include endpoints
   * that were soft deleted
   *
   * @param {string} [body.discovererId] Discoverer id to filter with
   *
   * @param {string} [body.applicationId] Application id to filter
   *
   * @param {string} [body.supervisorId] Supervisor id to filter with
   *
   * @param {string} [body.siteOrGatewayId] Site or gateway id to filter with
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<EndpointInfoListApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  queryEndpointsWithHttpOperationResponse(body, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._queryEndpoints(body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Query endpoints
   *
   * Return endpoints that match the specified query. The returned model can
   * contain a continuation token if more results are available. Call the
   * GetListOfEndpoints operation using the token to retrieve more results.
   *
   * @param {object} body Query to match
   *
   * @param {string} [body.url] Endoint url for direct server access
   *
   * @param {buffer} [body.certificate] Certificate of the endpoint
   *
   * @param {string} [body.securityMode] Possible values include: 'Best', 'Sign',
   * 'SignAndEncrypt', 'None'
   *
   * @param {string} [body.securityPolicy] Security policy uri
   *
   * @param {boolean} [body.activated] Whether the endpoint was activated
   *
   * @param {boolean} [body.connected] Whether the endpoint is connected on
   * supervisor.
   *
   * @param {string} [body.endpointState] Possible values include: 'Connecting',
   * 'NotReachable', 'Busy', 'NoTrust', 'CertificateInvalid', 'Ready', 'Error'
   *
   * @param {boolean} [body.includeNotSeenSince] Whether to include endpoints
   * that were soft deleted
   *
   * @param {string} [body.discovererId] Discoverer id to filter with
   *
   * @param {string} [body.applicationId] Application id to filter
   *
   * @param {string} [body.supervisorId] Supervisor id to filter with
   *
   * @param {string} [body.siteOrGatewayId] Site or gateway id to filter with
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {EndpointInfoListApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link EndpointInfoListApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  queryEndpoints(body, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._queryEndpoints(body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._queryEndpoints(body, options, optionalCallback);
    }
  }

  /**
   * @summary Get filtered list of endpoints
   *
   * Get a list of endpoints filtered using the specified query parameters. The
   * returned model can contain a continuation token if more results are
   * available. Call the GetListOfEndpoints operation using the token to retrieve
   * more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.url] Endoint url for direct server access
   *
   * @param {buffer} [options.certificate] Certificate of the endpoint
   *
   * @param {string} [options.securityMode] Security Mode. Possible values
   * include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
   *
   * @param {string} [options.securityPolicy] Security policy uri
   *
   * @param {boolean} [options.activated] Whether the endpoint was activated
   *
   * @param {boolean} [options.connected] Whether the endpoint is connected on
   * supervisor.
   *
   * @param {string} [options.endpointState] The last state of the the activated
   * endpoint. Possible values include: 'Connecting', 'NotReachable', 'Busy',
   * 'NoTrust', 'CertificateInvalid', 'Ready', 'Error'
   *
   * @param {boolean} [options.includeNotSeenSince] Whether to include endpoints
   * that were soft deleted
   *
   * @param {string} [options.discovererId] Discoverer id to filter with
   *
   * @param {string} [options.applicationId] Application id to filter
   *
   * @param {string} [options.supervisorId] Supervisor id to filter with
   *
   * @param {string} [options.siteOrGatewayId] Site or gateway id to filter with
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<EndpointInfoListApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getFilteredListOfEndpointsWithHttpOperationResponse(options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getFilteredListOfEndpoints(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Get filtered list of endpoints
   *
   * Get a list of endpoints filtered using the specified query parameters. The
   * returned model can contain a continuation token if more results are
   * available. Call the GetListOfEndpoints operation using the token to retrieve
   * more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.url] Endoint url for direct server access
   *
   * @param {buffer} [options.certificate] Certificate of the endpoint
   *
   * @param {string} [options.securityMode] Security Mode. Possible values
   * include: 'Best', 'Sign', 'SignAndEncrypt', 'None'
   *
   * @param {string} [options.securityPolicy] Security policy uri
   *
   * @param {boolean} [options.activated] Whether the endpoint was activated
   *
   * @param {boolean} [options.connected] Whether the endpoint is connected on
   * supervisor.
   *
   * @param {string} [options.endpointState] The last state of the the activated
   * endpoint. Possible values include: 'Connecting', 'NotReachable', 'Busy',
   * 'NoTrust', 'CertificateInvalid', 'Ready', 'Error'
   *
   * @param {boolean} [options.includeNotSeenSince] Whether to include endpoints
   * that were soft deleted
   *
   * @param {string} [options.discovererId] Discoverer id to filter with
   *
   * @param {string} [options.applicationId] Application id to filter
   *
   * @param {string} [options.supervisorId] Supervisor id to filter with
   *
   * @param {string} [options.siteOrGatewayId] Site or gateway id to filter with
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {EndpointInfoListApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link EndpointInfoListApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getFilteredListOfEndpoints(options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getFilteredListOfEndpoints(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getFilteredListOfEndpoints(options, optionalCallback);
    }
  }

  /**
   * @summary Deactivate endpoint
   *
   * Deactivates the endpoint and disable access through twin service.
   *
   * @param {string} endpointId endpoint identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  deactivateEndpointWithHttpOperationResponse(endpointId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._deactivateEndpoint(endpointId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Deactivate endpoint
   *
   * Deactivates the endpoint and disable access through twin service.
   *
   * @param {string} endpointId endpoint identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  deactivateEndpoint(endpointId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._deactivateEndpoint(endpointId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._deactivateEndpoint(endpointId, options, optionalCallback);
    }
  }

  /**
   * @summary Subscribe for endpoint events
   *
   * Register a user to receive endpoint events through SignalR.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.body] The user id that will receive endpoint
   * events.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  subscribe2WithHttpOperationResponse(options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._subscribe2(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Subscribe for endpoint events
   *
   * Register a user to receive endpoint events through SignalR.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.body] The user id that will receive endpoint
   * events.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  subscribe2(options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._subscribe2(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._subscribe2(options, optionalCallback);
    }
  }

  /**
   * @summary Unsubscribe from endpoint events
   *
   * Unregister a user and stop it from receiving endpoint events.
   *
   * @param {string} userId The user id that will not receive any more endpoint
   * events
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  unsubscribe2WithHttpOperationResponse(userId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._unsubscribe2(userId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Unsubscribe from endpoint events
   *
   * Unregister a user and stop it from receiving endpoint events.
   *
   * @param {string} userId The user id that will not receive any more endpoint
   * events
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  unsubscribe2(userId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._unsubscribe2(userId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._unsubscribe2(userId, options, optionalCallback);
    }
  }

  /**
   * @summary Get Gateway registration information
   *
   * Returns a Gateway's registration and connectivity information. A Gateway id
   * corresponds to the twin modules module identity.
   *
   * @param {string} gatewayId Gateway identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GatewayInfoApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getGatewayWithHttpOperationResponse(gatewayId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getGateway(gatewayId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Get Gateway registration information
   *
   * Returns a Gateway's registration and connectivity information. A Gateway id
   * corresponds to the twin modules module identity.
   *
   * @param {string} gatewayId Gateway identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GatewayInfoApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GatewayInfoApiModel} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getGateway(gatewayId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getGateway(gatewayId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getGateway(gatewayId, options, optionalCallback);
    }
  }

  /**
   * @summary Update Gateway configuration
   *
   * Allows a caller to configure operations on the Gateway module identified by
   * the Gateway id.
   *
   * @param {string} gatewayId Gateway identifier
   *
   * @param {object} body Patch request
   *
   * @param {string} [body.siteId] Site of the Gateway
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  updateGatewayWithHttpOperationResponse(gatewayId, body, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._updateGateway(gatewayId, body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Update Gateway configuration
   *
   * Allows a caller to configure operations on the Gateway module identified by
   * the Gateway id.
   *
   * @param {string} gatewayId Gateway identifier
   *
   * @param {object} body Patch request
   *
   * @param {string} [body.siteId] Site of the Gateway
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  updateGateway(gatewayId, body, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._updateGateway(gatewayId, body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._updateGateway(gatewayId, body, options, optionalCallback);
    }
  }

  /**
   * @summary Get list of Gateways
   *
   * Get all registered Gateways and therefore twin modules in paged form. The
   * returned model can contain a continuation token if more results are
   * available. Call this operation again using the token to retrieve more
   * results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.continuationToken] Optional Continuation token
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GatewayListApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getListOfGatewayWithHttpOperationResponse(options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getListOfGateway(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Get list of Gateways
   *
   * Get all registered Gateways and therefore twin modules in paged form. The
   * returned model can contain a continuation token if more results are
   * available. Call this operation again using the token to retrieve more
   * results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.continuationToken] Optional Continuation token
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GatewayListApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GatewayListApiModel} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getListOfGateway(options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getListOfGateway(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getListOfGateway(options, optionalCallback);
    }
  }

  /**
   * @summary Query Gateways
   *
   * Get all Gateways that match a specified query. The returned model can
   * contain a continuation token if more results are available. Call the
   * GetListOfGateway operation using the token to retrieve more results.
   *
   * @param {object} body Gateway query model
   *
   * @param {string} [body.siteId] Site of the Gateway
   *
   * @param {boolean} [body.connected] Included connected or disconnected
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GatewayListApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  queryGatewayWithHttpOperationResponse(body, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._queryGateway(body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Query Gateways
   *
   * Get all Gateways that match a specified query. The returned model can
   * contain a continuation token if more results are available. Call the
   * GetListOfGateway operation using the token to retrieve more results.
   *
   * @param {object} body Gateway query model
   *
   * @param {string} [body.siteId] Site of the Gateway
   *
   * @param {boolean} [body.connected] Included connected or disconnected
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GatewayListApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GatewayListApiModel} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  queryGateway(body, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._queryGateway(body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._queryGateway(body, options, optionalCallback);
    }
  }

  /**
   * @summary Get filtered list of Gateways
   *
   * Get a list of Gateways filtered using the specified query parameters. The
   * returned model can contain a continuation token if more results are
   * available. Call the GetListOfGateway operation using the token to retrieve
   * more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.siteId] Site of the Gateway
   *
   * @param {boolean} [options.connected] Included connected or disconnected
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<GatewayListApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getFilteredListOfGatewayWithHttpOperationResponse(options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getFilteredListOfGateway(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Get filtered list of Gateways
   *
   * Get a list of Gateways filtered using the specified query parameters. The
   * returned model can contain a continuation token if more results are
   * available. Call the GetListOfGateway operation using the token to retrieve
   * more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.siteId] Site of the Gateway
   *
   * @param {boolean} [options.connected] Included connected or disconnected
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {GatewayListApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link GatewayListApiModel} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getFilteredListOfGateway(options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getFilteredListOfGateway(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getFilteredListOfGateway(options, optionalCallback);
    }
  }

  /**
   * @summary Subscribe to Gateway registry events
   *
   * Register a user to receive Gateway events through SignalR.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.body] The user id that will receive Gateway events.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  subscribe3WithHttpOperationResponse(options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._subscribe3(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Subscribe to Gateway registry events
   *
   * Register a user to receive Gateway events through SignalR.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.body] The user id that will receive Gateway events.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  subscribe3(options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._subscribe3(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._subscribe3(options, optionalCallback);
    }
  }

  /**
   * @summary Unsubscribe registry events
   *
   * Unregister a user and stop it from receiving Gateway events.
   *
   * @param {string} userId The user id that will not receive any more Gateway
   * events
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  unsubscribe3WithHttpOperationResponse(userId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._unsubscribe3(userId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Unsubscribe registry events
   *
   * Unregister a user and stop it from receiving Gateway events.
   *
   * @param {string} userId The user id that will not receive any more Gateway
   * events
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  unsubscribe3(userId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._unsubscribe3(userId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._unsubscribe3(userId, options, optionalCallback);
    }
  }

  /**
   * @summary Get publisher registration information
   *
   * Returns a publisher's registration and connectivity information. A publisher
   * id corresponds to the twin modules module identity.
   *
   * @param {string} publisherId Publisher identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PublisherApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getPublisherWithHttpOperationResponse(publisherId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getPublisher(publisherId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Get publisher registration information
   *
   * Returns a publisher's registration and connectivity information. A publisher
   * id corresponds to the twin modules module identity.
   *
   * @param {string} publisherId Publisher identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {PublisherApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PublisherApiModel} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getPublisher(publisherId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getPublisher(publisherId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getPublisher(publisherId, options, optionalCallback);
    }
  }

  /**
   * @summary Update publisher configuration
   *
   * Allows a caller to configure operations on the publisher module identified
   * by the publisher id.
   *
   * @param {string} publisherId Publisher identifier
   *
   * @param {object} body Patch request
   *
   * @param {string} [body.siteId] Site of the publisher
   *
   * @param {object} [body.configuration]
   *
   * @param {object} [body.configuration.capabilities] Capabilities
   *
   * @param {string} [body.configuration.jobCheckInterval] Interval to check job
   *
   * @param {string} [body.configuration.heartbeatInterval] Heartbeat interval
   *
   * @param {number} [body.configuration.maxWorkers] Parallel jobs
   *
   * @param {string} [body.configuration.jobOrchestratorUrl] Job orchestrator
   * endpoint url
   *
   * @param {string} [body.logLevel] Possible values include: 'Error',
   * 'Information', 'Debug', 'Verbose'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  updatePublisherWithHttpOperationResponse(publisherId, body, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._updatePublisher(publisherId, body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Update publisher configuration
   *
   * Allows a caller to configure operations on the publisher module identified
   * by the publisher id.
   *
   * @param {string} publisherId Publisher identifier
   *
   * @param {object} body Patch request
   *
   * @param {string} [body.siteId] Site of the publisher
   *
   * @param {object} [body.configuration]
   *
   * @param {object} [body.configuration.capabilities] Capabilities
   *
   * @param {string} [body.configuration.jobCheckInterval] Interval to check job
   *
   * @param {string} [body.configuration.heartbeatInterval] Heartbeat interval
   *
   * @param {number} [body.configuration.maxWorkers] Parallel jobs
   *
   * @param {string} [body.configuration.jobOrchestratorUrl] Job orchestrator
   * endpoint url
   *
   * @param {string} [body.logLevel] Possible values include: 'Error',
   * 'Information', 'Debug', 'Verbose'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  updatePublisher(publisherId, body, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._updatePublisher(publisherId, body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._updatePublisher(publisherId, body, options, optionalCallback);
    }
  }

  /**
   * @summary Get list of publishers
   *
   * Get all registered publishers and therefore twin modules in paged form. The
   * returned model can contain a continuation token if more results are
   * available. Call this operation again using the token to retrieve more
   * results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {string} [options.continuationToken] Optional Continuation token
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PublisherListApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getListOfPublisherWithHttpOperationResponse(options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getListOfPublisher(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Get list of publishers
   *
   * Get all registered publishers and therefore twin modules in paged form. The
   * returned model can contain a continuation token if more results are
   * available. Call this operation again using the token to retrieve more
   * results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {string} [options.continuationToken] Optional Continuation token
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {PublisherListApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PublisherListApiModel} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getListOfPublisher(options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getListOfPublisher(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getListOfPublisher(options, optionalCallback);
    }
  }

  /**
   * @summary Query publishers
   *
   * Get all publishers that match a specified query. The returned model can
   * contain a continuation token if more results are available. Call the
   * GetListOfPublisher operation using the token to retrieve more results.
   *
   * @param {object} body Publisher query model
   *
   * @param {string} [body.siteId] Site for the publishers
   *
   * @param {boolean} [body.connected] Included connected or disconnected
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PublisherListApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  queryPublisherWithHttpOperationResponse(body, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._queryPublisher(body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Query publishers
   *
   * Get all publishers that match a specified query. The returned model can
   * contain a continuation token if more results are available. Call the
   * GetListOfPublisher operation using the token to retrieve more results.
   *
   * @param {object} body Publisher query model
   *
   * @param {string} [body.siteId] Site for the publishers
   *
   * @param {boolean} [body.connected] Included connected or disconnected
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {PublisherListApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PublisherListApiModel} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  queryPublisher(body, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._queryPublisher(body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._queryPublisher(body, options, optionalCallback);
    }
  }

  /**
   * @summary Get filtered list of publishers
   *
   * Get a list of publishers filtered using the specified query parameters. The
   * returned model can contain a continuation token if more results are
   * available. Call the GetListOfPublisher operation using the token to retrieve
   * more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.siteId] Site for the publishers
   *
   * @param {boolean} [options.connected] Included connected or disconnected
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PublisherListApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getFilteredListOfPublisherWithHttpOperationResponse(options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getFilteredListOfPublisher(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Get filtered list of publishers
   *
   * Get a list of publishers filtered using the specified query parameters. The
   * returned model can contain a continuation token if more results are
   * available. Call the GetListOfPublisher operation using the token to retrieve
   * more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.siteId] Site for the publishers
   *
   * @param {boolean} [options.connected] Included connected or disconnected
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {PublisherListApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PublisherListApiModel} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getFilteredListOfPublisher(options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getFilteredListOfPublisher(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getFilteredListOfPublisher(options, optionalCallback);
    }
  }

  /**
   * @summary Subscribe to publisher registry events
   *
   * Register a user to receive publisher events through SignalR.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.body] The user id that will receive publisher
   * events.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  subscribe4WithHttpOperationResponse(options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._subscribe4(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Subscribe to publisher registry events
   *
   * Register a user to receive publisher events through SignalR.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.body] The user id that will receive publisher
   * events.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  subscribe4(options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._subscribe4(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._subscribe4(options, optionalCallback);
    }
  }

  /**
   * @summary Unsubscribe registry events
   *
   * Unregister a user and stop it from receiving publisher events.
   *
   * @param {string} userId The user id that will not receive any more publisher
   * events
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  unsubscribe4WithHttpOperationResponse(userId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._unsubscribe4(userId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Unsubscribe registry events
   *
   * Unregister a user and stop it from receiving publisher events.
   *
   * @param {string} userId The user id that will not receive any more publisher
   * events
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  unsubscribe4(userId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._unsubscribe4(userId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._unsubscribe4(userId, options, optionalCallback);
    }
  }

  /**
   * @summary Get supervisor registration information
   *
   * Returns a supervisor's registration and connectivity information. A
   * supervisor id corresponds to the twin modules module identity.
   *
   * @param {string} supervisorId Supervisor identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SupervisorApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getSupervisorWithHttpOperationResponse(supervisorId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getSupervisor(supervisorId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Get supervisor registration information
   *
   * Returns a supervisor's registration and connectivity information. A
   * supervisor id corresponds to the twin modules module identity.
   *
   * @param {string} supervisorId Supervisor identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SupervisorApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SupervisorApiModel} for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getSupervisor(supervisorId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getSupervisor(supervisorId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getSupervisor(supervisorId, options, optionalCallback);
    }
  }

  /**
   * @summary Update supervisor information
   *
   * Allows a caller to configure recurring discovery runs on the twin module
   * identified by the supervisor id or update site information.
   *
   * @param {string} supervisorId supervisor identifier
   *
   * @param {object} body Patch request
   *
   * @param {string} [body.siteId] Site the supervisor is part of
   *
   * @param {string} [body.logLevel] Possible values include: 'Error',
   * 'Information', 'Debug', 'Verbose'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  updateSupervisorWithHttpOperationResponse(supervisorId, body, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._updateSupervisor(supervisorId, body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Update supervisor information
   *
   * Allows a caller to configure recurring discovery runs on the twin module
   * identified by the supervisor id or update site information.
   *
   * @param {string} supervisorId supervisor identifier
   *
   * @param {object} body Patch request
   *
   * @param {string} [body.siteId] Site the supervisor is part of
   *
   * @param {string} [body.logLevel] Possible values include: 'Error',
   * 'Information', 'Debug', 'Verbose'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  updateSupervisor(supervisorId, body, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._updateSupervisor(supervisorId, body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._updateSupervisor(supervisorId, body, options, optionalCallback);
    }
  }

  /**
   * @summary Get runtime status of supervisor
   *
   * Allows a caller to get runtime status for a supervisor.
   *
   * @param {string} supervisorId supervisor identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SupervisorStatusApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getSupervisorStatusWithHttpOperationResponse(supervisorId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getSupervisorStatus(supervisorId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Get runtime status of supervisor
   *
   * Allows a caller to get runtime status for a supervisor.
   *
   * @param {string} supervisorId supervisor identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SupervisorStatusApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SupervisorStatusApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getSupervisorStatus(supervisorId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getSupervisorStatus(supervisorId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getSupervisorStatus(supervisorId, options, optionalCallback);
    }
  }

  /**
   * @summary Reset supervisor
   *
   * Allows a caller to reset the twin module using its supervisor identity
   * identifier.
   *
   * @param {string} supervisorId supervisor identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  resetSupervisorWithHttpOperationResponse(supervisorId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._resetSupervisor(supervisorId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Reset supervisor
   *
   * Allows a caller to reset the twin module using its supervisor identity
   * identifier.
   *
   * @param {string} supervisorId supervisor identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  resetSupervisor(supervisorId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._resetSupervisor(supervisorId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._resetSupervisor(supervisorId, options, optionalCallback);
    }
  }

  /**
   * @summary Get list of supervisors
   *
   * Get all registered supervisors and therefore twin modules in paged form. The
   * returned model can contain a continuation token if more results are
   * available. Call this operation again using the token to retrieve more
   * results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {string} [options.continuationToken] Optional Continuation token
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SupervisorListApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getListOfSupervisorsWithHttpOperationResponse(options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getListOfSupervisors(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Get list of supervisors
   *
   * Get all registered supervisors and therefore twin modules in paged form. The
   * returned model can contain a continuation token if more results are
   * available. Call this operation again using the token to retrieve more
   * results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {string} [options.continuationToken] Optional Continuation token
   *
   * @param {number} [options.pageSize] Optional number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SupervisorListApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SupervisorListApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getListOfSupervisors(options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getListOfSupervisors(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getListOfSupervisors(options, optionalCallback);
    }
  }

  /**
   * @summary Query supervisors
   *
   * Get all supervisors that match a specified query. The returned model can
   * contain a continuation token if more results are available. Call the
   * GetListOfSupervisors operation using the token to retrieve more results.
   *
   * @param {object} body Supervisors query model
   *
   * @param {string} [body.siteId] Site for the supervisors
   *
   * @param {boolean} [body.connected] Included connected or disconnected
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SupervisorListApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  querySupervisorsWithHttpOperationResponse(body, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._querySupervisors(body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Query supervisors
   *
   * Get all supervisors that match a specified query. The returned model can
   * contain a continuation token if more results are available. Call the
   * GetListOfSupervisors operation using the token to retrieve more results.
   *
   * @param {object} body Supervisors query model
   *
   * @param {string} [body.siteId] Site for the supervisors
   *
   * @param {boolean} [body.connected] Included connected or disconnected
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SupervisorListApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SupervisorListApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  querySupervisors(body, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._querySupervisors(body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._querySupervisors(body, options, optionalCallback);
    }
  }

  /**
   * @summary Get filtered list of supervisors
   *
   * Get a list of supervisors filtered using the specified query parameters. The
   * returned model can contain a continuation token if more results are
   * available. Call the GetListOfSupervisors operation using the token to
   * retrieve more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.siteId] Site for the supervisors
   *
   * @param {boolean} [options.connected] Included connected or disconnected
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SupervisorListApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getFilteredListOfSupervisorsWithHttpOperationResponse(options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getFilteredListOfSupervisors(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Get filtered list of supervisors
   *
   * Get a list of supervisors filtered using the specified query parameters. The
   * returned model can contain a continuation token if more results are
   * available. Call the GetListOfSupervisors operation using the token to
   * retrieve more results.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.siteId] Site for the supervisors
   *
   * @param {boolean} [options.connected] Included connected or disconnected
   *
   * @param {boolean} [options.onlyServerState] Whether to include only server
   * state, or display current client state of the endpoint if available
   *
   * @param {number} [options.pageSize] Number of results to return
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {SupervisorListApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SupervisorListApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getFilteredListOfSupervisors(options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getFilteredListOfSupervisors(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getFilteredListOfSupervisors(options, optionalCallback);
    }
  }

  /**
   * @summary Subscribe to supervisor registry events
   *
   * Register a user to receive supervisor events through SignalR.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.body] The user id that will receive supervisor
   * events.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  subscribe5WithHttpOperationResponse(options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._subscribe5(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Subscribe to supervisor registry events
   *
   * Register a user to receive supervisor events through SignalR.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.body] The user id that will receive supervisor
   * events.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  subscribe5(options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._subscribe5(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._subscribe5(options, optionalCallback);
    }
  }

  /**
   * @summary Unsubscribe registry events
   *
   * Unregister a user and stop it from receiving supervisor events.
   *
   * @param {string} userId The user id that will not receive any more supervisor
   * events
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  unsubscribe5WithHttpOperationResponse(userId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._unsubscribe5(userId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Unsubscribe registry events
   *
   * Unregister a user and stop it from receiving supervisor events.
   *
   * @param {string} userId The user id that will not receive any more supervisor
   * events
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  unsubscribe5(userId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._unsubscribe5(userId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._unsubscribe5(userId, options, optionalCallback);
    }
  }

}

module.exports = AzureOpcRegistryClient;
module.exports['default'] = AzureOpcRegistryClient;
module.exports.AzureOpcRegistryClient = AzureOpcRegistryClient;
module.exports.AzureOpcRegistryModels = models;
