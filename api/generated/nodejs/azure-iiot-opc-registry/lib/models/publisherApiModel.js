/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Publisher registration model
 *
 */
class PublisherApiModel {
  /**
   * Create a PublisherApiModel.
   * @property {string} id Publisher id
   * @property {string} [siteId] Site of the publisher
   * @property {buffer} [certificate] Publisher public client cert
   * @property {string} [logLevel] Possible values include: 'Error',
   * 'Information', 'Debug', 'Verbose'
   * @property {object} [configuration]
   * @property {object} [configuration.capabilities] Capabilities
   * @property {string} [configuration.jobCheckInterval] Interval to check job
   * @property {string} [configuration.heartbeatInterval] Heartbeat interval
   * @property {number} [configuration.maxWorkers] Parallel jobs
   * @property {string} [configuration.jobOrchestratorUrl] Job orchestrator
   * endpoint url
   * @property {boolean} [outOfSync] Whether the registration is out of sync
   * between
   * client (module) and server (service) (default: false).
   * @property {boolean} [connected] Whether publisher is connected on this
   * registration
   */
  constructor() {
  }

  /**
   * Defines the metadata of PublisherApiModel
   *
   * @returns {object} metadata of PublisherApiModel
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'PublisherApiModel',
      type: {
        name: 'Composite',
        className: 'PublisherApiModel',
        modelProperties: {
          id: {
            required: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          siteId: {
            required: false,
            serializedName: 'siteId',
            type: {
              name: 'String'
            }
          },
          certificate: {
            required: false,
            serializedName: 'certificate',
            type: {
              name: 'ByteArray'
            }
          },
          logLevel: {
            required: false,
            serializedName: 'logLevel',
            type: {
              name: 'Enum',
              allowedValues: [ 'Error', 'Information', 'Debug', 'Verbose' ]
            }
          },
          configuration: {
            required: false,
            serializedName: 'configuration',
            type: {
              name: 'Composite',
              className: 'PublisherConfigApiModel'
            }
          },
          outOfSync: {
            required: false,
            serializedName: 'outOfSync',
            type: {
              name: 'Boolean'
            }
          },
          connected: {
            required: false,
            serializedName: 'connected',
            type: {
              name: 'Boolean'
            }
          }
        }
      }
    };
  }
}

module.exports = PublisherApiModel;
