/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

'use strict';

const msRest = require('ms-rest');
const ServiceClient = msRest.ServiceClient;
const WebResource = msRest.WebResource;

const models = require('./models');


/**
 * @summary Subscribe to receive samples
 *
 * Register a client to receive publisher samples through SignalR.
 *
 * @param {string} endpointId The endpoint to subscribe to
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {string} [options.userId] The user id that will receive publisher
 * samples.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _subscribe(endpointId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  let userId = (options && options.userId !== undefined) ? options.userId : undefined;
  // Validate
  try {
    if (endpointId === null || endpointId === undefined || typeof endpointId.valueOf() !== 'string') {
      throw new Error('endpointId cannot be null or undefined and it must be of type string.');
    }
    if (userId !== null && userId !== undefined && typeof userId.valueOf() !== 'string') {
      throw new Error('userId must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/monitor/{endpointId}/samples';
  requestUrl = requestUrl.replace('{endpointId}', encodeURIComponent(endpointId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'PUT';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (userId !== null && userId !== undefined) {
      let requestModelMapper = {
        required: false,
        serializedName: 'userId',
        type: {
          name: 'String'
        }
      };
      requestModel = client.serialize(requestModelMapper, userId, 'userId');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(userId, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Unsubscribe from receiving samples.
 *
 * Unregister a client and stop it from receiving samples.
 *
 * @param {string} endpointId The endpoint to unsubscribe from
 *
 * @param {string} userId The user id that will not receive
 * any more published samples
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {null} [result]   - The deserialized result object if an error did not occur.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _unsubscribe(endpointId, userId, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (endpointId === null || endpointId === undefined || typeof endpointId.valueOf() !== 'string') {
      throw new Error('endpointId cannot be null or undefined and it must be of type string.');
    }
    if (userId === null || userId === undefined || typeof userId.valueOf() !== 'string') {
      throw new Error('userId cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/monitor/{endpointId}/samples/{userId}';
  requestUrl = requestUrl.replace('{endpointId}', encodeURIComponent(endpointId));
  requestUrl = requestUrl.replace('{userId}', encodeURIComponent(userId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'DELETE';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Start publishing node values
 *
 * Start publishing variable node values to IoT Hub.
 * The endpoint must be activated and connected and the module client
 * and server must trust each other.
 *
 * @param {string} endpointId The identifier of the activated endpoint.
 *
 * @param {object} request The publish request
 *
 * @param {object} request.item Item to publish
 *
 * @param {string} request.item.nodeId Node to monitor
 *
 * @param {string} [request.item.publishingInterval] Publishing interval to use
 *
 * @param {string} [request.item.samplingInterval] Sampling interval to use
 *
 * @param {object} [request.header] Optional request header
 *
 * @param {object} [request.header.elevation] Optional User elevation
 *
 * @param {string} [request.header.elevation.type] Type of credential. Possible
 * values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
 *
 * @param {object} [request.header.elevation.value] Value to pass to server
 *
 * @param {array} [request.header.locales] Optional list of locales in
 * preference order.
 *
 * @param {object} [request.header.diagnostics] Optional diagnostics
 * configuration
 *
 * @param {string} [request.header.diagnostics.level] Requested level of
 * response diagnostics.
 * (default: Status). Possible values include: 'None', 'Status', 'Operations',
 * 'Diagnostics', 'Verbose'
 *
 * @param {string} [request.header.diagnostics.auditId] Client audit log entry.
 * (default: client generated)
 *
 * @param {date} [request.header.diagnostics.timeStamp] Timestamp of request.
 * (default: client generated)
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link PublishStartResponseApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _startPublishingValues(endpointId, request, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (endpointId === null || endpointId === undefined || typeof endpointId.valueOf() !== 'string') {
      throw new Error('endpointId cannot be null or undefined and it must be of type string.');
    }
    if (request === null || request === undefined) {
      throw new Error('request cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/publish/{endpointId}/start';
  requestUrl = requestUrl.replace('{endpointId}', encodeURIComponent(endpointId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (request !== null && request !== undefined) {
      let requestModelMapper = new client.models['PublishStartRequestApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, request, 'request');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(request, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['PublishStartResponseApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Stop publishing node values
 *
 * Stop publishing variable node values to IoT Hub.
 * The endpoint must be activated and connected and the module client
 * and server must trust each other.
 *
 * @param {string} endpointId The identifier of the activated endpoint.
 *
 * @param {object} request The unpublish request
 *
 * @param {string} request.nodeId Node of published item to unpublish
 *
 * @param {object} [request.header] Optional request header
 *
 * @param {object} [request.header.elevation] Optional User elevation
 *
 * @param {string} [request.header.elevation.type] Type of credential. Possible
 * values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
 *
 * @param {object} [request.header.elevation.value] Value to pass to server
 *
 * @param {array} [request.header.locales] Optional list of locales in
 * preference order.
 *
 * @param {object} [request.header.diagnostics] Optional diagnostics
 * configuration
 *
 * @param {string} [request.header.diagnostics.level] Requested level of
 * response diagnostics.
 * (default: Status). Possible values include: 'None', 'Status', 'Operations',
 * 'Diagnostics', 'Verbose'
 *
 * @param {string} [request.header.diagnostics.auditId] Client audit log entry.
 * (default: client generated)
 *
 * @param {date} [request.header.diagnostics.timeStamp] Timestamp of request.
 * (default: client generated)
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link PublishStopResponseApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _stopPublishingValues(endpointId, request, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (endpointId === null || endpointId === undefined || typeof endpointId.valueOf() !== 'string') {
      throw new Error('endpointId cannot be null or undefined and it must be of type string.');
    }
    if (request === null || request === undefined) {
      throw new Error('request cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/publish/{endpointId}/stop';
  requestUrl = requestUrl.replace('{endpointId}', encodeURIComponent(endpointId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (request !== null && request !== undefined) {
      let requestModelMapper = new client.models['PublishStopRequestApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, request, 'request');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(request, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['PublishStopResponseApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Get next set of published nodes
 *
 * Returns next set of currently published node ids for an endpoint.
 * The endpoint must be activated and connected and the module client
 * and server must trust each other.
 *
 * @param {string} endpointId The identifier of the activated endpoint.
 *
 * @param {string} continuationToken The continuation token to continue with
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link PublishedItemListResponseApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getNextListOfPublishedNodes(endpointId, continuationToken, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (endpointId === null || endpointId === undefined || typeof endpointId.valueOf() !== 'string') {
      throw new Error('endpointId cannot be null or undefined and it must be of type string.');
    }
    if (continuationToken === null || continuationToken === undefined || typeof continuationToken.valueOf() !== 'string') {
      throw new Error('continuationToken cannot be null or undefined and it must be of type string.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/publish/{endpointId}';
  requestUrl = requestUrl.replace('{endpointId}', encodeURIComponent(endpointId));
  let queryParameters = [];
  queryParameters.push('continuationToken=' + encodeURIComponent(continuationToken));
  if (queryParameters.length > 0) {
    requestUrl += '?' + queryParameters.join('&');
  }

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['PublishedItemListResponseApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Get currently published nodes
 *
 * Returns currently published node ids for an endpoint.
 * The endpoint must be activated and connected and the module client
 * and server must trust each other.
 *
 * @param {string} endpointId The identifier of the activated endpoint.
 *
 * @param {object} request The list request
 *
 * @param {string} [request.continuationToken] Continuation token or null to
 * start
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link PublishedItemListResponseApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getFirstListOfPublishedNodes(endpointId, request, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (endpointId === null || endpointId === undefined || typeof endpointId.valueOf() !== 'string') {
      throw new Error('endpointId cannot be null or undefined and it must be of type string.');
    }
    if (request === null || request === undefined) {
      throw new Error('request cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/publish/{endpointId}';
  requestUrl = requestUrl.replace('{endpointId}', encodeURIComponent(endpointId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (request !== null && request !== undefined) {
      let requestModelMapper = new client.models['PublishedItemListRequestApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, request, 'request');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(request, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['PublishedItemListResponseApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Return the service status in the form of the service status
 * api model.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link StatusResponseApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getStatus(options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/status';

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['StatusResponseApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a AzureOpcPublisherClient. */
class AzureOpcPublisherClient extends ServiceClient {
  /**
   * Create a AzureOpcPublisherClient.
   * @param {credentials} credentials - Subscription credentials which uniquely identify client subscription.
   * @param {string} [baseUri] - The base URI of the service.
   * @param {object} [options] - The parameter options
   * @param {Array} [options.filters] - Filters to be added to the request pipeline
   * @param {object} [options.requestOptions] - Options for the underlying request object
   * {@link https://github.com/request/request#requestoptions-callback Options doc}
   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
   */
  constructor(credentials, baseUri, options) {
    if (credentials === null || credentials === undefined) {
      throw new Error('\'credentials\' cannot be null.');
    }

    if (!options) options = {};

    super(credentials, options);

    this.baseUri = baseUri;
    if (!this.baseUri) {
      this.baseUri = '/publisher';
    }
    this.credentials = credentials;

    let packageInfo = this.getPackageJsonInfo(__dirname);
    this.addUserAgentInfo(`${packageInfo.name}/${packageInfo.version}`);
    this.models = models;
    this._subscribe = _subscribe;
    this._unsubscribe = _unsubscribe;
    this._startPublishingValues = _startPublishingValues;
    this._stopPublishingValues = _stopPublishingValues;
    this._getNextListOfPublishedNodes = _getNextListOfPublishedNodes;
    this._getFirstListOfPublishedNodes = _getFirstListOfPublishedNodes;
    this._getStatus = _getStatus;
    msRest.addSerializationMixin(this);
  }

  /**
   * @summary Subscribe to receive samples
   *
   * Register a client to receive publisher samples through SignalR.
   *
   * @param {string} endpointId The endpoint to subscribe to
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.userId] The user id that will receive publisher
   * samples.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  subscribeWithHttpOperationResponse(endpointId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._subscribe(endpointId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Subscribe to receive samples
   *
   * Register a client to receive publisher samples through SignalR.
   *
   * @param {string} endpointId The endpoint to subscribe to
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.userId] The user id that will receive publisher
   * samples.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  subscribe(endpointId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._subscribe(endpointId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._subscribe(endpointId, options, optionalCallback);
    }
  }

  /**
   * @summary Unsubscribe from receiving samples.
   *
   * Unregister a client and stop it from receiving samples.
   *
   * @param {string} endpointId The endpoint to unsubscribe from
   *
   * @param {string} userId The user id that will not receive
   * any more published samples
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  unsubscribeWithHttpOperationResponse(endpointId, userId, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._unsubscribe(endpointId, userId, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Unsubscribe from receiving samples.
   *
   * Unregister a client and stop it from receiving samples.
   *
   * @param {string} endpointId The endpoint to unsubscribe from
   *
   * @param {string} userId The user id that will not receive
   * any more published samples
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  unsubscribe(endpointId, userId, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._unsubscribe(endpointId, userId, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._unsubscribe(endpointId, userId, options, optionalCallback);
    }
  }

  /**
   * @summary Start publishing node values
   *
   * Start publishing variable node values to IoT Hub.
   * The endpoint must be activated and connected and the module client
   * and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} request The publish request
   *
   * @param {object} request.item Item to publish
   *
   * @param {string} request.item.nodeId Node to monitor
   *
   * @param {string} [request.item.publishingInterval] Publishing interval to use
   *
   * @param {string} [request.item.samplingInterval] Sampling interval to use
   *
   * @param {object} [request.header] Optional request header
   *
   * @param {object} [request.header.elevation] Optional User elevation
   *
   * @param {string} [request.header.elevation.type] Type of credential. Possible
   * values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [request.header.elevation.value] Value to pass to server
   *
   * @param {array} [request.header.locales] Optional list of locales in
   * preference order.
   *
   * @param {object} [request.header.diagnostics] Optional diagnostics
   * configuration
   *
   * @param {string} [request.header.diagnostics.level] Requested level of
   * response diagnostics.
   * (default: Status). Possible values include: 'None', 'Status', 'Operations',
   * 'Diagnostics', 'Verbose'
   *
   * @param {string} [request.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [request.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PublishStartResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  startPublishingValuesWithHttpOperationResponse(endpointId, request, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._startPublishingValues(endpointId, request, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Start publishing node values
   *
   * Start publishing variable node values to IoT Hub.
   * The endpoint must be activated and connected and the module client
   * and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} request The publish request
   *
   * @param {object} request.item Item to publish
   *
   * @param {string} request.item.nodeId Node to monitor
   *
   * @param {string} [request.item.publishingInterval] Publishing interval to use
   *
   * @param {string} [request.item.samplingInterval] Sampling interval to use
   *
   * @param {object} [request.header] Optional request header
   *
   * @param {object} [request.header.elevation] Optional User elevation
   *
   * @param {string} [request.header.elevation.type] Type of credential. Possible
   * values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [request.header.elevation.value] Value to pass to server
   *
   * @param {array} [request.header.locales] Optional list of locales in
   * preference order.
   *
   * @param {object} [request.header.diagnostics] Optional diagnostics
   * configuration
   *
   * @param {string} [request.header.diagnostics.level] Requested level of
   * response diagnostics.
   * (default: Status). Possible values include: 'None', 'Status', 'Operations',
   * 'Diagnostics', 'Verbose'
   *
   * @param {string} [request.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [request.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {PublishStartResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PublishStartResponseApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  startPublishingValues(endpointId, request, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._startPublishingValues(endpointId, request, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._startPublishingValues(endpointId, request, options, optionalCallback);
    }
  }

  /**
   * @summary Stop publishing node values
   *
   * Stop publishing variable node values to IoT Hub.
   * The endpoint must be activated and connected and the module client
   * and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} request The unpublish request
   *
   * @param {string} request.nodeId Node of published item to unpublish
   *
   * @param {object} [request.header] Optional request header
   *
   * @param {object} [request.header.elevation] Optional User elevation
   *
   * @param {string} [request.header.elevation.type] Type of credential. Possible
   * values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [request.header.elevation.value] Value to pass to server
   *
   * @param {array} [request.header.locales] Optional list of locales in
   * preference order.
   *
   * @param {object} [request.header.diagnostics] Optional diagnostics
   * configuration
   *
   * @param {string} [request.header.diagnostics.level] Requested level of
   * response diagnostics.
   * (default: Status). Possible values include: 'None', 'Status', 'Operations',
   * 'Diagnostics', 'Verbose'
   *
   * @param {string} [request.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [request.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PublishStopResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  stopPublishingValuesWithHttpOperationResponse(endpointId, request, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._stopPublishingValues(endpointId, request, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Stop publishing node values
   *
   * Stop publishing variable node values to IoT Hub.
   * The endpoint must be activated and connected and the module client
   * and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} request The unpublish request
   *
   * @param {string} request.nodeId Node of published item to unpublish
   *
   * @param {object} [request.header] Optional request header
   *
   * @param {object} [request.header.elevation] Optional User elevation
   *
   * @param {string} [request.header.elevation.type] Type of credential. Possible
   * values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [request.header.elevation.value] Value to pass to server
   *
   * @param {array} [request.header.locales] Optional list of locales in
   * preference order.
   *
   * @param {object} [request.header.diagnostics] Optional diagnostics
   * configuration
   *
   * @param {string} [request.header.diagnostics.level] Requested level of
   * response diagnostics.
   * (default: Status). Possible values include: 'None', 'Status', 'Operations',
   * 'Diagnostics', 'Verbose'
   *
   * @param {string} [request.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [request.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {PublishStopResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PublishStopResponseApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  stopPublishingValues(endpointId, request, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._stopPublishingValues(endpointId, request, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._stopPublishingValues(endpointId, request, options, optionalCallback);
    }
  }

  /**
   * @summary Get next set of published nodes
   *
   * Returns next set of currently published node ids for an endpoint.
   * The endpoint must be activated and connected and the module client
   * and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {string} continuationToken The continuation token to continue with
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PublishedItemListResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getNextListOfPublishedNodesWithHttpOperationResponse(endpointId, continuationToken, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getNextListOfPublishedNodes(endpointId, continuationToken, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Get next set of published nodes
   *
   * Returns next set of currently published node ids for an endpoint.
   * The endpoint must be activated and connected and the module client
   * and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {string} continuationToken The continuation token to continue with
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {PublishedItemListResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PublishedItemListResponseApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getNextListOfPublishedNodes(endpointId, continuationToken, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getNextListOfPublishedNodes(endpointId, continuationToken, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getNextListOfPublishedNodes(endpointId, continuationToken, options, optionalCallback);
    }
  }

  /**
   * @summary Get currently published nodes
   *
   * Returns currently published node ids for an endpoint.
   * The endpoint must be activated and connected and the module client
   * and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} request The list request
   *
   * @param {string} [request.continuationToken] Continuation token or null to
   * start
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<PublishedItemListResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getFirstListOfPublishedNodesWithHttpOperationResponse(endpointId, request, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getFirstListOfPublishedNodes(endpointId, request, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Get currently published nodes
   *
   * Returns currently published node ids for an endpoint.
   * The endpoint must be activated and connected and the module client
   * and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} request The list request
   *
   * @param {string} [request.continuationToken] Continuation token or null to
   * start
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {PublishedItemListResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link PublishedItemListResponseApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getFirstListOfPublishedNodes(endpointId, request, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getFirstListOfPublishedNodes(endpointId, request, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getFirstListOfPublishedNodes(endpointId, request, options, optionalCallback);
    }
  }

  /**
   * @summary Return the service status in the form of the service status
   * api model.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<StatusResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getStatusWithHttpOperationResponse(options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getStatus(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Return the service status in the form of the service status
   * api model.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {StatusResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link StatusResponseApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getStatus(options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getStatus(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getStatus(options, optionalCallback);
    }
  }

}

module.exports = AzureOpcPublisherClient;
module.exports['default'] = AzureOpcPublisherClient;
module.exports.AzureOpcPublisherClient = AzureOpcPublisherClient;
module.exports.AzureOpcPublisherModels = models;
