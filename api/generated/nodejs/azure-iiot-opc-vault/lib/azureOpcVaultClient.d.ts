/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { ServiceClient, ServiceClientOptions, ServiceCallback, HttpOperationResponse, ServiceClientCredentials } from 'ms-rest';
import * as models from "./models";

export default class AzureOpcVaultClient extends ServiceClient {
  /**
   * @class
   * Initializes a new instance of the AzureOpcVaultClient class.
   * @constructor
   *
   * @param {credentials} credentials - Subscription credentials which uniquely identify client subscription.
   *
   * @param {string} [baseUri] - The base URI of the service.
   *
   * @param {object} [options] - The parameter options
   *
   * @param {Array} [options.filters] - Filters to be added to the request pipeline
   *
   * @param {object} [options.requestOptions] - Options for the underlying request object
   * {@link https://github.com/request/request#requestoptions-callback Options doc}
   *
   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
   *
   */
  constructor(credentials: ServiceClientCredentials, baseUri?: string, options?: ServiceClientOptions);

  credentials: ServiceClientCredentials;


  /**
   * @summary Get Issuer CA Certificate chain.
   *
   * @param {string} serialNumber the serial number of the Issuer CA Certificate
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<X509CertificateChainApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getIssuerCertificateChainWithHttpOperationResponse(serialNumber: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.X509CertificateChainApiModel>>;

  /**
   * @summary Get Issuer CA Certificate chain.
   *
   * @param {string} serialNumber the serial number of the Issuer CA Certificate
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {X509CertificateChainApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {X509CertificateChainApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link X509CertificateChainApiModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getIssuerCertificateChain(serialNumber: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.X509CertificateChainApiModel>;
  getIssuerCertificateChain(serialNumber: string, callback: ServiceCallback<models.X509CertificateChainApiModel>): void;
  getIssuerCertificateChain(serialNumber: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.X509CertificateChainApiModel>): void;


  /**
   * @summary Get Issuer CA CRL chain.
   *
   * @param {string} serialNumber the serial number of the Issuer CA Certificate
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<X509CrlChainApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getIssuerCrlChainWithHttpOperationResponse(serialNumber: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.X509CrlChainApiModel>>;

  /**
   * @summary Get Issuer CA CRL chain.
   *
   * @param {string} serialNumber the serial number of the Issuer CA Certificate
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {X509CrlChainApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {X509CrlChainApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link X509CrlChainApiModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getIssuerCrlChain(serialNumber: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.X509CrlChainApiModel>;
  getIssuerCrlChain(serialNumber: string, callback: ServiceCallback<models.X509CrlChainApiModel>): void;
  getIssuerCrlChain(serialNumber: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.X509CrlChainApiModel>): void;


  /**
   * @summary Get Issuer Certificate for Authority Information
   * Access endpoint.
   *
   * @param {string} serialNumber
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<String>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getIssuerCertificateChain1WithHttpOperationResponse(serialNumber: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

  /**
   * @summary Get Issuer Certificate for Authority Information
   * Access endpoint.
   *
   * @param {string} serialNumber
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {String} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {String} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getIssuerCertificateChain1(serialNumber: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
  getIssuerCertificateChain1(serialNumber: string, callback: ServiceCallback<string>): void;
  getIssuerCertificateChain1(serialNumber: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;


  /**
   * @summary Get Issuer CRL in CRL Distribution Endpoint.
   *
   * @param {string} serialNumber
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<String>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getIssuerCrlChain1WithHttpOperationResponse(serialNumber: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<string>>;

  /**
   * @summary Get Issuer CRL in CRL Distribution Endpoint.
   *
   * @param {string} serialNumber
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {String} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {String} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getIssuerCrlChain1(serialNumber: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<string>;
  getIssuerCrlChain1(serialNumber: string, callback: ServiceCallback<string>): void;
  getIssuerCrlChain1(serialNumber: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<string>): void;


  /**
   * @summary Create a certificate request with a certificate signing request
   * (CSR).
   *
   * The request is in the 'New' state after this call. Requires Writer or
   * Manager role.
   *
   * @param {object} body The signing request parameters
   *
   * @param {string} body.entityId Id of entity to sign a certificate for
   *
   * @param {string} body.groupId Certificate group id
   *
   * @param {object} body.certificateRequest Request
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<StartSigningRequestResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  startSigningRequestWithHttpOperationResponse(body: models.StartSigningRequestApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StartSigningRequestResponseApiModel>>;

  /**
   * @summary Create a certificate request with a certificate signing request
   * (CSR).
   *
   * The request is in the 'New' state after this call. Requires Writer or
   * Manager role.
   *
   * @param {object} body The signing request parameters
   *
   * @param {string} body.entityId Id of entity to sign a certificate for
   *
   * @param {string} body.groupId Certificate group id
   *
   * @param {object} body.certificateRequest Request
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {StartSigningRequestResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {StartSigningRequestResponseApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link StartSigningRequestResponseApiModel} for
   *                      more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  startSigningRequest(body: models.StartSigningRequestApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StartSigningRequestResponseApiModel>;
  startSigningRequest(body: models.StartSigningRequestApiModel, callback: ServiceCallback<models.StartSigningRequestResponseApiModel>): void;
  startSigningRequest(body: models.StartSigningRequestApiModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StartSigningRequestResponseApiModel>): void;


  /**
   * @summary Fetch signing request results.
   *
   * Can be called in any state. After a successful fetch in 'Completed' state,
   * the request is moved into 'Accepted' state. Requires Writer role.
   *
   * @param {string} requestId
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<FinishSigningRequestResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  finishSigningRequestWithHttpOperationResponse(requestId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FinishSigningRequestResponseApiModel>>;

  /**
   * @summary Fetch signing request results.
   *
   * Can be called in any state. After a successful fetch in 'Completed' state,
   * the request is moved into 'Accepted' state. Requires Writer role.
   *
   * @param {string} requestId
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {FinishSigningRequestResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {FinishSigningRequestResponseApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link FinishSigningRequestResponseApiModel} for
   *                      more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  finishSigningRequest(requestId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FinishSigningRequestResponseApiModel>;
  finishSigningRequest(requestId: string, callback: ServiceCallback<models.FinishSigningRequestResponseApiModel>): void;
  finishSigningRequest(requestId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FinishSigningRequestResponseApiModel>): void;


  /**
   * @summary Create a certificate request with a new key pair.
   *
   * The request is in the 'New' state after this call. Requires Writer or
   * Manager role.
   *
   * @param {object} body The new key pair request parameters
   *
   * @param {string} body.entityId Entity id
   *
   * @param {string} body.groupId Certificate group
   *
   * @param {string} body.certificateType Possible values include:
   * 'ApplicationInstanceCertificate', 'HttpsCertificate',
   * 'UserCredentialCertificate'
   *
   * @param {string} body.subjectName Subject name
   *
   * @param {array} [body.domainNames] Domain names
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<StartNewKeyPairRequestResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  startNewKeyPairRequestWithHttpOperationResponse(body: models.StartNewKeyPairRequestApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StartNewKeyPairRequestResponseApiModel>>;

  /**
   * @summary Create a certificate request with a new key pair.
   *
   * The request is in the 'New' state after this call. Requires Writer or
   * Manager role.
   *
   * @param {object} body The new key pair request parameters
   *
   * @param {string} body.entityId Entity id
   *
   * @param {string} body.groupId Certificate group
   *
   * @param {string} body.certificateType Possible values include:
   * 'ApplicationInstanceCertificate', 'HttpsCertificate',
   * 'UserCredentialCertificate'
   *
   * @param {string} body.subjectName Subject name
   *
   * @param {array} [body.domainNames] Domain names
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {StartNewKeyPairRequestResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {StartNewKeyPairRequestResponseApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link StartNewKeyPairRequestResponseApiModel} for
   *                      more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  startNewKeyPairRequest(body: models.StartNewKeyPairRequestApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StartNewKeyPairRequestResponseApiModel>;
  startNewKeyPairRequest(body: models.StartNewKeyPairRequestApiModel, callback: ServiceCallback<models.StartNewKeyPairRequestResponseApiModel>): void;
  startNewKeyPairRequest(body: models.StartNewKeyPairRequestApiModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StartNewKeyPairRequestResponseApiModel>): void;


  /**
   * @summary Fetch certificate request result.
   *
   * Can be called in any state. Fetches private key in 'Completed' state. After
   * a successful fetch in 'Completed' state, the request is moved into
   * 'Accepted' state. Requires Writer role.
   *
   * @param {string} requestId
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<FinishNewKeyPairRequestResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  finishNewKeyPairRequestWithHttpOperationResponse(requestId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.FinishNewKeyPairRequestResponseApiModel>>;

  /**
   * @summary Fetch certificate request result.
   *
   * Can be called in any state. Fetches private key in 'Completed' state. After
   * a successful fetch in 'Completed' state, the request is moved into
   * 'Accepted' state. Requires Writer role.
   *
   * @param {string} requestId
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {FinishNewKeyPairRequestResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {FinishNewKeyPairRequestResponseApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link FinishNewKeyPairRequestResponseApiModel} for
   *                      more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  finishNewKeyPairRequest(requestId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.FinishNewKeyPairRequestResponseApiModel>;
  finishNewKeyPairRequest(requestId: string, callback: ServiceCallback<models.FinishNewKeyPairRequestResponseApiModel>): void;
  finishNewKeyPairRequest(requestId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.FinishNewKeyPairRequestResponseApiModel>): void;


  /**
   * @summary Approve the certificate request.
   *
   * Validates the request with the application database. - If Approved: - New
   * Key Pair request: Creates the new key pair in the requested format, signs
   * the certificate and stores the private key for later securely in KeyVault. -
   * Cert Signing Request: Creates and signs the certificate. Deletes the CSR
   * from the database. Stores the signed certificate for later use in the
   * Database. The request is in the 'Approved' or 'Rejected' state after this
   * call. Requires Approver role. Approver needs signing rights in KeyVault.
   *
   * @param {string} requestId The certificate request id
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  approveRequestWithHttpOperationResponse(requestId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Approve the certificate request.
   *
   * Validates the request with the application database. - If Approved: - New
   * Key Pair request: Creates the new key pair in the requested format, signs
   * the certificate and stores the private key for later securely in KeyVault. -
   * Cert Signing Request: Creates and signs the certificate. Deletes the CSR
   * from the database. Stores the signed certificate for later use in the
   * Database. The request is in the 'Approved' or 'Rejected' state after this
   * call. Requires Approver role. Approver needs signing rights in KeyVault.
   *
   * @param {string} requestId The certificate request id
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  approveRequest(requestId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  approveRequest(requestId: string, callback: ServiceCallback<void>): void;
  approveRequest(requestId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Reject the certificate request.
   *
   * The request is in the 'Rejected' state after this call. Requires Approver
   * role. Approver needs signing rights in KeyVault.
   *
   * @param {string} requestId The certificate request id
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  rejectRequestWithHttpOperationResponse(requestId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Reject the certificate request.
   *
   * The request is in the 'Rejected' state after this call. Requires Approver
   * role. Approver needs signing rights in KeyVault.
   *
   * @param {string} requestId The certificate request id
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  rejectRequest(requestId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  rejectRequest(requestId: string, callback: ServiceCallback<void>): void;
  rejectRequest(requestId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Cancel request
   *
   * The request is in the 'Accepted' state after this call. Requires Writer
   * role.
   *
   * @param {string} requestId The certificate request id
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  acceptRequestWithHttpOperationResponse(requestId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Cancel request
   *
   * The request is in the 'Accepted' state after this call. Requires Writer
   * role.
   *
   * @param {string} requestId The certificate request id
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  acceptRequest(requestId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  acceptRequest(requestId: string, callback: ServiceCallback<void>): void;
  acceptRequest(requestId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Delete request. Physically delete the request.
   *
   * By purging the request it is actually physically deleted from the database,
   * including the public key and other information. Requires Manager role.
   *
   * @param {string} requestId The certificate request id
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteRequestWithHttpOperationResponse(requestId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Delete request. Physically delete the request.
   *
   * By purging the request it is actually physically deleted from the database,
   * including the public key and other information. Requires Manager role.
   *
   * @param {string} requestId The certificate request id
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteRequest(requestId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  deleteRequest(requestId: string, callback: ServiceCallback<void>): void;
  deleteRequest(requestId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Get a specific certificate request.
   *
   * @param {string} requestId The certificate request id
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CertificateRequestRecordApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getRequestWithHttpOperationResponse(requestId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CertificateRequestRecordApiModel>>;

  /**
   * @summary Get a specific certificate request.
   *
   * @param {string} requestId The certificate request id
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {CertificateRequestRecordApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {CertificateRequestRecordApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CertificateRequestRecordApiModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getRequest(requestId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.CertificateRequestRecordApiModel>;
  getRequest(requestId: string, callback: ServiceCallback<models.CertificateRequestRecordApiModel>): void;
  getRequest(requestId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateRequestRecordApiModel>): void;


  /**
   * @summary Query for certificate requests.
   *
   * Get all certificate requests in paged form. The returned model can contain a
   * link to the next page if more results are available. Use ListRequests to
   * continue.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.pageSize] optional, the maximum number of result
   * per page
   *
   * @param {object} [options.body] optional, query filter
   *
   * @param {string} [options.body.entityId] The entity id to filter with
   *
   * @param {string} [options.body.state] Possible values include: 'New',
   * 'Approved', 'Rejected', 'Failure', 'Completed', 'Accepted'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CertificateRequestQueryResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  queryRequestsWithHttpOperationResponse(options?: { pageSize? : number, body? : models.CertificateRequestQueryRequestApiModel, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CertificateRequestQueryResponseApiModel>>;

  /**
   * @summary Query for certificate requests.
   *
   * Get all certificate requests in paged form. The returned model can contain a
   * link to the next page if more results are available. Use ListRequests to
   * continue.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {number} [options.pageSize] optional, the maximum number of result
   * per page
   *
   * @param {object} [options.body] optional, query filter
   *
   * @param {string} [options.body.entityId] The entity id to filter with
   *
   * @param {string} [options.body.state] Possible values include: 'New',
   * 'Approved', 'Rejected', 'Failure', 'Completed', 'Accepted'
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {CertificateRequestQueryResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {CertificateRequestQueryResponseApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CertificateRequestQueryResponseApiModel} for
   *                      more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  queryRequests(options?: { pageSize? : number, body? : models.CertificateRequestQueryRequestApiModel, customHeaders? : { [headerName: string]: string; } }): Promise<models.CertificateRequestQueryResponseApiModel>;
  queryRequests(callback: ServiceCallback<models.CertificateRequestQueryResponseApiModel>): void;
  queryRequests(options: { pageSize? : number, body? : models.CertificateRequestQueryRequestApiModel, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateRequestQueryResponseApiModel>): void;


  /**
   * @summary Lists certificate requests.
   *
   * Get all certificate requests in paged form or continue a current listing or
   * query. The returned model can contain a link to the next page if more
   * results are available.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.nextPageLink] optional, link to next page
   *
   * @param {number} [options.pageSize] optional, the maximum number of result
   * per page
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<CertificateRequestQueryResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  listRequestsWithHttpOperationResponse(options?: { nextPageLink? : string, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.CertificateRequestQueryResponseApiModel>>;

  /**
   * @summary Lists certificate requests.
   *
   * Get all certificate requests in paged form or continue a current listing or
   * query. The returned model can contain a link to the next page if more
   * results are available.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.nextPageLink] optional, link to next page
   *
   * @param {number} [options.pageSize] optional, the maximum number of result
   * per page
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {CertificateRequestQueryResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {CertificateRequestQueryResponseApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link CertificateRequestQueryResponseApiModel} for
   *                      more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  listRequests(options?: { nextPageLink? : string, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.CertificateRequestQueryResponseApiModel>;
  listRequests(callback: ServiceCallback<models.CertificateRequestQueryResponseApiModel>): void;
  listRequests(options: { nextPageLink? : string, pageSize? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.CertificateRequestQueryResponseApiModel>): void;


  /**
   * @summary Return the service status in the form of the service status
   * api model.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<StatusResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getStatusWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StatusResponseApiModel>>;

  /**
   * @summary Return the service status in the form of the service status
   * api model.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {StatusResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {StatusResponseApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link StatusResponseApiModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getStatus(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StatusResponseApiModel>;
  getStatus(callback: ServiceCallback<models.StatusResponseApiModel>): void;
  getStatus(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StatusResponseApiModel>): void;


  /**
   * @summary Get information about all groups.
   *
   * A trust group has a root certificate which issues certificates to entities.
   * Entities can be part of a trust group and thus trust the root certificate
   * and all entities that the root has issued certificates for.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.nextPageLink] optional, link to next page
   *
   * @param {number} [options.pageSize] optional, the maximum number of result
   * per page
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<TrustGroupRegistrationListApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  listGroupsWithHttpOperationResponse(options?: { nextPageLink? : string, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TrustGroupRegistrationListApiModel>>;

  /**
   * @summary Get information about all groups.
   *
   * A trust group has a root certificate which issues certificates to entities.
   * Entities can be part of a trust group and thus trust the root certificate
   * and all entities that the root has issued certificates for.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.nextPageLink] optional, link to next page
   *
   * @param {number} [options.pageSize] optional, the maximum number of result
   * per page
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {TrustGroupRegistrationListApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {TrustGroupRegistrationListApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link TrustGroupRegistrationListApiModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  listGroups(options?: { nextPageLink? : string, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.TrustGroupRegistrationListApiModel>;
  listGroups(callback: ServiceCallback<models.TrustGroupRegistrationListApiModel>): void;
  listGroups(options: { nextPageLink? : string, pageSize? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TrustGroupRegistrationListApiModel>): void;


  /**
   * @summary Create new sub-group of an existing group.
   *
   * Requires manager role.
   *
   * @param {object} body The create request
   *
   * @param {string} body.name The new name of the trust group
   *
   * @param {string} body.parentId The identifer of the parent trust group.
   *
   * @param {string} body.subjectName The subject name of the group as
   * distinguished name.
   *
   * @param {string} [body.issuedLifetime] The lifetime of certificates issued in
   * the group.
   *
   * @param {number} [body.issuedKeySize] The issued certificate key size in
   * bits.
   *
   * @param {string} [body.issuedSignatureAlgorithm] Possible values include:
   * 'Rsa256', 'Rsa384', 'Rsa512', 'Rsa256Pss', 'Rsa384Pss', 'Rsa512Pss'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<TrustGroupRegistrationResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createGroupWithHttpOperationResponse(body: models.TrustGroupRegistrationRequestApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TrustGroupRegistrationResponseApiModel>>;

  /**
   * @summary Create new sub-group of an existing group.
   *
   * Requires manager role.
   *
   * @param {object} body The create request
   *
   * @param {string} body.name The new name of the trust group
   *
   * @param {string} body.parentId The identifer of the parent trust group.
   *
   * @param {string} body.subjectName The subject name of the group as
   * distinguished name.
   *
   * @param {string} [body.issuedLifetime] The lifetime of certificates issued in
   * the group.
   *
   * @param {number} [body.issuedKeySize] The issued certificate key size in
   * bits.
   *
   * @param {string} [body.issuedSignatureAlgorithm] Possible values include:
   * 'Rsa256', 'Rsa384', 'Rsa512', 'Rsa256Pss', 'Rsa384Pss', 'Rsa512Pss'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {TrustGroupRegistrationResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {TrustGroupRegistrationResponseApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link TrustGroupRegistrationResponseApiModel} for
   *                      more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createGroup(body: models.TrustGroupRegistrationRequestApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TrustGroupRegistrationResponseApiModel>;
  createGroup(body: models.TrustGroupRegistrationRequestApiModel, callback: ServiceCallback<models.TrustGroupRegistrationResponseApiModel>): void;
  createGroup(body: models.TrustGroupRegistrationRequestApiModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TrustGroupRegistrationResponseApiModel>): void;


  /**
   * @summary Get group information.
   *
   * A trust group has a root certificate which issues certificates to entities.
   * Entities can be part of a trust group and thus trust the root certificate
   * and all entities that the root has issued certificates for.
   *
   * @param {string} groupId The group id
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<TrustGroupRegistrationApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getGroupWithHttpOperationResponse(groupId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TrustGroupRegistrationApiModel>>;

  /**
   * @summary Get group information.
   *
   * A trust group has a root certificate which issues certificates to entities.
   * Entities can be part of a trust group and thus trust the root certificate
   * and all entities that the root has issued certificates for.
   *
   * @param {string} groupId The group id
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {TrustGroupRegistrationApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {TrustGroupRegistrationApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link TrustGroupRegistrationApiModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getGroup(groupId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TrustGroupRegistrationApiModel>;
  getGroup(groupId: string, callback: ServiceCallback<models.TrustGroupRegistrationApiModel>): void;
  getGroup(groupId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TrustGroupRegistrationApiModel>): void;


  /**
   * @summary Update group registration.
   *
   * Use this function with care and only if you are aware of the security
   * implications. Requires manager role.
   *
   * @param {string} groupId The group id
   *
   * @param {object} body The group configuration
   *
   * @param {string} [body.name] The name of the trust group
   *
   * @param {string} [body.issuedLifetime] The issued certificate lifetime.
   *
   * @param {number} [body.issuedKeySize] The issued certificate key size in
   * bits.
   *
   * @param {string} [body.issuedSignatureAlgorithm] Possible values include:
   * 'Rsa256', 'Rsa384', 'Rsa512', 'Rsa256Pss', 'Rsa384Pss', 'Rsa512Pss'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateGroupWithHttpOperationResponse(groupId: string, body: models.TrustGroupUpdateRequestApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Update group registration.
   *
   * Use this function with care and only if you are aware of the security
   * implications. Requires manager role.
   *
   * @param {string} groupId The group id
   *
   * @param {object} body The group configuration
   *
   * @param {string} [body.name] The name of the trust group
   *
   * @param {string} [body.issuedLifetime] The issued certificate lifetime.
   *
   * @param {number} [body.issuedKeySize] The issued certificate key size in
   * bits.
   *
   * @param {string} [body.issuedSignatureAlgorithm] Possible values include:
   * 'Rsa256', 'Rsa384', 'Rsa512', 'Rsa256Pss', 'Rsa384Pss', 'Rsa512Pss'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateGroup(groupId: string, body: models.TrustGroupUpdateRequestApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  updateGroup(groupId: string, body: models.TrustGroupUpdateRequestApiModel, callback: ServiceCallback<void>): void;
  updateGroup(groupId: string, body: models.TrustGroupUpdateRequestApiModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Delete a group.
   *
   * After this operation the Issuer CA, CRLs and keys become inaccessible. Use
   * this function with extreme caution. Requires manager role.
   *
   * @param {string} groupId The group id
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteGroupWithHttpOperationResponse(groupId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Delete a group.
   *
   * After this operation the Issuer CA, CRLs and keys become inaccessible. Use
   * this function with extreme caution. Requires manager role.
   *
   * @param {string} groupId The group id
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteGroup(groupId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  deleteGroup(groupId: string, callback: ServiceCallback<void>): void;
  deleteGroup(groupId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Create new root group.
   *
   * Requires manager role.
   *
   * @param {object} body The create request
   *
   * @param {string} body.name The new name of the trust group root
   *
   * @param {string} [body.type] Possible values include:
   * 'ApplicationInstanceCertificate', 'HttpsCertificate',
   * 'UserCredentialCertificate'
   *
   * @param {string} body.subjectName The subject name of the group as
   * distinguished name.
   *
   * @param {string} body.lifetime The lifetime of the trust group root
   * certificate.
   *
   * @param {number} [body.keySize] The certificate key size in bits.
   *
   * @param {string} [body.signatureAlgorithm] Possible values include: 'Rsa256',
   * 'Rsa384', 'Rsa512', 'Rsa256Pss', 'Rsa384Pss', 'Rsa512Pss'
   *
   * @param {string} [body.issuedLifetime] The issued certificate lifetime.
   *
   * @param {number} [body.issuedKeySize] The issued certificate key size in
   * bits.
   *
   * @param {string} [body.issuedSignatureAlgorithm] Possible values include:
   * 'Rsa256', 'Rsa384', 'Rsa512', 'Rsa256Pss', 'Rsa384Pss', 'Rsa512Pss'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<TrustGroupRegistrationResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createRootWithHttpOperationResponse(body: models.TrustGroupRootCreateRequestApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.TrustGroupRegistrationResponseApiModel>>;

  /**
   * @summary Create new root group.
   *
   * Requires manager role.
   *
   * @param {object} body The create request
   *
   * @param {string} body.name The new name of the trust group root
   *
   * @param {string} [body.type] Possible values include:
   * 'ApplicationInstanceCertificate', 'HttpsCertificate',
   * 'UserCredentialCertificate'
   *
   * @param {string} body.subjectName The subject name of the group as
   * distinguished name.
   *
   * @param {string} body.lifetime The lifetime of the trust group root
   * certificate.
   *
   * @param {number} [body.keySize] The certificate key size in bits.
   *
   * @param {string} [body.signatureAlgorithm] Possible values include: 'Rsa256',
   * 'Rsa384', 'Rsa512', 'Rsa256Pss', 'Rsa384Pss', 'Rsa512Pss'
   *
   * @param {string} [body.issuedLifetime] The issued certificate lifetime.
   *
   * @param {number} [body.issuedKeySize] The issued certificate key size in
   * bits.
   *
   * @param {string} [body.issuedSignatureAlgorithm] Possible values include:
   * 'Rsa256', 'Rsa384', 'Rsa512', 'Rsa256Pss', 'Rsa384Pss', 'Rsa512Pss'
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {TrustGroupRegistrationResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {TrustGroupRegistrationResponseApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link TrustGroupRegistrationResponseApiModel} for
   *                      more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createRoot(body: models.TrustGroupRootCreateRequestApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.TrustGroupRegistrationResponseApiModel>;
  createRoot(body: models.TrustGroupRootCreateRequestApiModel, callback: ServiceCallback<models.TrustGroupRegistrationResponseApiModel>): void;
  createRoot(body: models.TrustGroupRootCreateRequestApiModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.TrustGroupRegistrationResponseApiModel>): void;


  /**
   * @summary Renew a group CA Certificate.
   *
   * @param {string} groupId
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  renewIssuerCertificateWithHttpOperationResponse(groupId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Renew a group CA Certificate.
   *
   * @param {string} groupId
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  renewIssuerCertificate(groupId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  renewIssuerCertificate(groupId: string, callback: ServiceCallback<void>): void;
  renewIssuerCertificate(groupId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Add trust relationship
   *
   * Define trust between two entities. The entities are identifiers of
   * application, groups, or endpoints.
   *
   * @param {string} entityId The entity identifier, e.g. group, etc.
   *
   * @param {string} trustedEntityId The trusted entity identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  addTrustRelationshipWithHttpOperationResponse(entityId: string, trustedEntityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Add trust relationship
   *
   * Define trust between two entities. The entities are identifiers of
   * application, groups, or endpoints.
   *
   * @param {string} entityId The entity identifier, e.g. group, etc.
   *
   * @param {string} trustedEntityId The trusted entity identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  addTrustRelationship(entityId: string, trustedEntityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  addTrustRelationship(entityId: string, trustedEntityId: string, callback: ServiceCallback<void>): void;
  addTrustRelationship(entityId: string, trustedEntityId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary List trusted certificates
   *
   * Returns all certificates the entity should trust based on the applied trust
   * configuration.
   *
   * @param {string} entityId
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.nextPageLink] optional, link to next page
   *
   * @param {number} [options.pageSize] optional, the maximum number of result
   * per page
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<X509CertificateListApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  listTrustedCertificatesWithHttpOperationResponse(entityId: string, options?: { nextPageLink? : string, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.X509CertificateListApiModel>>;

  /**
   * @summary List trusted certificates
   *
   * Returns all certificates the entity should trust based on the applied trust
   * configuration.
   *
   * @param {string} entityId
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {string} [options.nextPageLink] optional, link to next page
   *
   * @param {number} [options.pageSize] optional, the maximum number of result
   * per page
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {X509CertificateListApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {X509CertificateListApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link X509CertificateListApiModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  listTrustedCertificates(entityId: string, options?: { nextPageLink? : string, pageSize? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.X509CertificateListApiModel>;
  listTrustedCertificates(entityId: string, callback: ServiceCallback<models.X509CertificateListApiModel>): void;
  listTrustedCertificates(entityId: string, options: { nextPageLink? : string, pageSize? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.X509CertificateListApiModel>): void;


  /**
   * @summary Remove a trust relationship
   *
   * Removes trust between two entities. The entities are identifiers of
   * application, groups, or endpoints.
   *
   * @param {string} entityId The entity identifier, e.g. group, etc.
   *
   * @param {string} untrustedEntityId The trusted entity identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  removeTrustRelationshipWithHttpOperationResponse(entityId: string, untrustedEntityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Remove a trust relationship
   *
   * Removes trust between two entities. The entities are identifiers of
   * application, groups, or endpoints.
   *
   * @param {string} entityId The entity identifier, e.g. group, etc.
   *
   * @param {string} untrustedEntityId The trusted entity identifier
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  removeTrustRelationship(entityId: string, untrustedEntityId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  removeTrustRelationship(entityId: string, untrustedEntityId: string, callback: ServiceCallback<void>): void;
  removeTrustRelationship(entityId: string, untrustedEntityId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

export { AzureOpcVaultClient, models as AzureOpcVaultModels };
