/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as moment from "moment";

/**
 * Certificate model
 */
export interface X509CertificateApiModel {
  /**
   * Subject
   */
  subject?: string;
  /**
   * Thumbprint
   */
  thumbprint?: string;
  /**
   * Serial number
   */
  serialNumber?: string;
  /**
   * Not before validity
   */
  notBeforeUtc?: Date;
  /**
   * Not after validity
   */
  notAfterUtc?: Date;
  /**
   * Raw data
   */
  certificate: any;
}

/**
 * Certificate chain
 */
export interface X509CertificateChainApiModel {
  /**
   * Chain
   */
  chain?: X509CertificateApiModel[];
}

/**
 * A X509 certificate revocation list.
 */
export interface X509CrlApiModel {
  /**
   * The Issuer name of the revocation list.
   */
  issuer?: string;
  /**
   * The certificate revocation list.
   */
  crl: any;
}

/**
 * Crl collection model
 */
export interface X509CrlChainApiModel {
  /**
   * Chain
   */
  chain?: X509CrlApiModel[];
}

export interface NotFoundResult {
  readonly statusCode?: number;
}

/**
 * Signing request
*/
export interface StartSigningRequestApiModel {
  /**
   * Id of entity to sign a certificate for
  */
  entityId: string;
  /**
   * Certificate group id
  */
  groupId: string;
  /**
   * Request
  */
  certificateRequest: any;
}

/**
 * Signing request response
*/
export interface StartSigningRequestResponseApiModel {
  /**
   * Request id
  */
  requestId: string;
}

/**
 * Vault operation log model
*/
export interface VaultOperationContextApiModel {
  /**
   * User
  */
  authorityId?: string;
  /**
   * Operation time
  */
  time: Date;
}

/**
 * Certificate request record model
*/
export interface CertificateRequestRecordApiModel {
  /**
   * Request id
  */
  requestId?: string;
  /**
   * Application id
  */
  entityId?: string;
  /**
   * Trust group
  */
  groupId?: string;
  /**
   * Possible values include: 'New', 'Approved', 'Rejected', 'Failure', 'Completed', 'Accepted'
  */
  state?: string;
  /**
   * Possible values include: 'SigningRequest', 'KeyPairRequest'
  */
  type?: string;
  /**
   * Error diagnostics
  */
  errorInfo?: any;
  submitted?: VaultOperationContextApiModel;
  approved?: VaultOperationContextApiModel;
  accepted?: VaultOperationContextApiModel;
}

/**
 * Finish request results
*/
export interface FinishSigningRequestResponseApiModel {
  request?: CertificateRequestRecordApiModel;
  certificate?: X509CertificateApiModel;
}

/**
 * New key pair request
*/
export interface StartNewKeyPairRequestApiModel {
  /**
   * Entity id
  */
  entityId: string;
  /**
   * Certificate group
  */
  groupId: string;
  /**
   * Possible values include: 'ApplicationInstanceCertificate', 'HttpsCertificate',
   * 'UserCredentialCertificate'
  */
  certificateType: string;
  /**
   * Subject name
  */
  subjectName: string;
  /**
   * Domain names
  */
  domainNames?: string[];
}

/**
 * New key pair response
*/
export interface StartNewKeyPairRequestResponseApiModel {
  /**
   * Request id
  */
  requestId: string;
}

/**
 * Private key
*/
export interface PrivateKeyApiModel {
  /**
   * Possible values include: 'RSA', 'ECC', 'AES'
  */
  kty?: string;
  /**
   * RSA modulus.
  */
  n?: Buffer;
  /**
   * RSA public exponent, in Base64.
  */
  e?: Buffer;
  /**
   * RSA Private Key Parameter
  */
  dp?: Buffer;
  /**
   * RSA Private Key Parameter
  */
  dq?: Buffer;
  /**
   * RSA Private Key Parameter
  */
  qi?: Buffer;
  /**
   * RSA secret prime
  */
  p?: Buffer;
  /**
   * RSA secret prime, with p < q
  */
  q?: Buffer;
  crv?: string;
  /**
   * X coordinate for the Elliptic Curve point.
  */
  x?: Buffer;
  /**
   * Y coordinate for the Elliptic Curve point.
  */
  y?: Buffer;
  /**
   * RSA private exponent or ECC private key.
  */
  d?: Buffer;
  /**
   * Symmetric key
  */
  k?: Buffer;
  keyHsm?: Buffer;
}

/**
 * Finish request results
*/
export interface FinishNewKeyPairRequestResponseApiModel {
  request?: CertificateRequestRecordApiModel;
  certificate?: X509CertificateApiModel;
  privateKey?: PrivateKeyApiModel;
}

/**
 * Certificate request query model
*/
export interface CertificateRequestQueryRequestApiModel {
  /**
   * The entity id to filter with
  */
  entityId?: string;
  /**
   * Possible values include: 'New', 'Approved', 'Rejected', 'Failure', 'Completed', 'Accepted'
  */
  state?: string;
}

/**
 * Response model
*/
export interface CertificateRequestQueryResponseApiModel {
  /**
   * The query result.
  */
  requests?: CertificateRequestRecordApiModel[];
  /**
   * Link to the next page of results.
  */
  nextPageLink?: string;
}

/**
 * Status model
*/
export interface StatusResponseApiModel {
  /**
   * Name of this service
  */
  name?: string;
  /**
   * Operational status
  */
  status?: string;
  /**
   * Current time
  */
  readonly currentTime?: string;
  /**
   * Start time of service
  */
  readonly startTime?: string;
  /**
   * Up time of service
  */
  readonly upTime?: number;
  /**
   * Value generated at bootstrap by each instance of the service and
   * used to correlate logs coming from the same instance. The value
   * changes every time the service starts.
  */
  readonly uid?: string;
  /**
   * A property bag with details about the service
  */
  readonly properties?: { [propertyName: string]: string };
  /**
   * A property bag with details about the internal dependencies
  */
  readonly dependencies?: { [propertyName: string]: string };
  readonly metadata?: { [propertyName: string]: string };
}

/**
 * Trust group model
*/
export interface TrustGroupApiModel {
  /**
   * The name of the trust group.
  */
  name: string;
  /**
   * The identifer of the parent trust group.
  */
  parentId?: string;
  /**
   * Possible values include: 'ApplicationInstanceCertificate', 'HttpsCertificate',
   * 'UserCredentialCertificate'
  */
  type?: string;
  /**
   * The subject name of the group as distinguished name.
  */
  subjectName: string;
  /**
   * The lifetime of the trust group certificate.
  */
  lifetime?: string;
  /**
   * The trust group certificate key size in bits.
  */
  keySize?: number;
  /**
   * Possible values include: 'Rsa256', 'Rsa384', 'Rsa512', 'Rsa256Pss', 'Rsa384Pss', 'Rsa512Pss'
  */
  signatureAlgorithm?: string;
  /**
   * The issued certificate lifetime in months.
  */
  issuedLifetime?: string;
  /**
   * The issued certificate key size in bits.
  */
  issuedKeySize?: number;
  /**
   * Possible values include: 'Rsa256', 'Rsa384', 'Rsa512', 'Rsa256Pss', 'Rsa384Pss', 'Rsa512Pss'
  */
  issuedSignatureAlgorithm?: string;
}

/**
 * Trust group registration model
*/
export interface TrustGroupRegistrationApiModel {
  /**
   * The registered id of the trust group
  */
  id: string;
  group: TrustGroupApiModel;
}

/**
 * Trust group registration collection model
*/
export interface TrustGroupRegistrationListApiModel {
  /**
   * Group registrations
  */
  registrations?: TrustGroupRegistrationApiModel[];
  /**
   * Next link
  */
  nextPageLink?: string;
}

/**
 * Trust group registration request model
*/
export interface TrustGroupRegistrationRequestApiModel {
  /**
   * The new name of the trust group
  */
  name: string;
  /**
   * The identifer of the parent trust group.
  */
  parentId: string;
  /**
   * The subject name of the group as distinguished name.
  */
  subjectName: string;
  /**
   * The lifetime of certificates issued in the group.
  */
  issuedLifetime?: string;
  /**
   * The issued certificate key size in bits.
  */
  issuedKeySize?: number;
  /**
   * Possible values include: 'Rsa256', 'Rsa384', 'Rsa512', 'Rsa256Pss', 'Rsa384Pss', 'Rsa512Pss'
  */
  issuedSignatureAlgorithm?: string;
}

/**
 * Trust group registration response model
*/
export interface TrustGroupRegistrationResponseApiModel {
  /**
   * The id of the trust group
  */
  id: string;
}

/**
 * Trust group update model
*/
export interface TrustGroupUpdateRequestApiModel {
  /**
   * The name of the trust group
  */
  name?: string;
  /**
   * The issued certificate lifetime.
  */
  issuedLifetime?: string;
  /**
   * The issued certificate key size in bits.
  */
  issuedKeySize?: number;
  /**
   * Possible values include: 'Rsa256', 'Rsa384', 'Rsa512', 'Rsa256Pss', 'Rsa384Pss', 'Rsa512Pss'
  */
  issuedSignatureAlgorithm?: string;
}

/**
 * Trust group root registration model
*/
export interface TrustGroupRootCreateRequestApiModel {
  /**
   * The new name of the trust group root
  */
  name: string;
  /**
   * Possible values include: 'ApplicationInstanceCertificate', 'HttpsCertificate',
   * 'UserCredentialCertificate'
  */
  type?: string;
  /**
   * The subject name of the group as distinguished name.
  */
  subjectName: string;
  /**
   * The lifetime of the trust group root certificate.
  */
  lifetime: string;
  /**
   * The certificate key size in bits.
  */
  keySize?: number;
  /**
   * Possible values include: 'Rsa256', 'Rsa384', 'Rsa512', 'Rsa256Pss', 'Rsa384Pss', 'Rsa512Pss'
  */
  signatureAlgorithm?: string;
  /**
   * The issued certificate lifetime.
  */
  issuedLifetime?: string;
  /**
   * The issued certificate key size in bits.
  */
  issuedKeySize?: number;
  /**
   * Possible values include: 'Rsa256', 'Rsa384', 'Rsa512', 'Rsa256Pss', 'Rsa384Pss', 'Rsa512Pss'
  */
  issuedSignatureAlgorithm?: string;
}

/**
 * Certificate list
*/
export interface X509CertificateListApiModel {
  /**
   * Certificates
  */
  certificates?: X509CertificateApiModel[];
  /**
   * Next link
  */
  nextPageLink?: string;
}
