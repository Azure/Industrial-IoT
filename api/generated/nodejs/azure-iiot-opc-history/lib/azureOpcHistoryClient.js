/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

'use strict';

const msRest = require('ms-rest');
const ServiceClient = msRest.ServiceClient;
const WebResource = msRest.WebResource;

const models = require('./models');


/**
 * @summary Delete value history at specified times
 *
 * Delete value history using historic access. The endpoint must be activated
 * and connected and the module client and server must trust each other.
 *
 * @param {string} endpointId The identifier of the activated endpoint.
 *
 * @param {object} body The history update request
 *
 * @param {string} [body.nodeId] Node to update
 *
 * @param {array} [body.browsePath] An optional path from NodeId instance to
 * the actual node.
 *
 * @param {object} body.details
 *
 * @param {array} body.details.reqTimes The timestamps to delete
 *
 * @param {object} [body.header]
 *
 * @param {object} [body.header.elevation]
 *
 * @param {string} [body.header.elevation.type] Possible values include:
 * 'None', 'UserName', 'X509Certificate', 'JwtToken'
 *
 * @param {object} [body.header.elevation.value] Value to pass to server
 *
 * @param {array} [body.header.locales] Optional list of locales in preference
 * order.
 *
 * @param {object} [body.header.diagnostics]
 *
 * @param {string} [body.header.diagnostics.level] Possible values include:
 * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
 *
 * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
 * (default: client generated)
 *
 * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
 * (default: client generated)
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link HistoryUpdateResponseApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _historyDeleteValuesAtTimes(endpointId, body, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (endpointId === null || endpointId === undefined || typeof endpointId.valueOf() !== 'string') {
      throw new Error('endpointId cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/delete/{endpointId}/values/pick';
  requestUrl = requestUrl.replace('{endpointId}', encodeURIComponent(endpointId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['DeleteValuesAtTimesDetailsApiModelHistoryUpdateRequestApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['HistoryUpdateResponseApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete historic values
 *
 * Delete historic values using historic access. The endpoint must be activated
 * and connected and the module client and server must trust each other.
 *
 * @param {string} endpointId The identifier of the activated endpoint.
 *
 * @param {object} body The history update request
 *
 * @param {string} [body.nodeId] Node to update
 *
 * @param {array} [body.browsePath] An optional path from NodeId instance to
 * the actual node.
 *
 * @param {object} body.details
 *
 * @param {date} [body.details.startTime] Start time
 *
 * @param {date} [body.details.endTime] End time to delete until
 *
 * @param {object} [body.header]
 *
 * @param {object} [body.header.elevation]
 *
 * @param {string} [body.header.elevation.type] Possible values include:
 * 'None', 'UserName', 'X509Certificate', 'JwtToken'
 *
 * @param {object} [body.header.elevation.value] Value to pass to server
 *
 * @param {array} [body.header.locales] Optional list of locales in preference
 * order.
 *
 * @param {object} [body.header.diagnostics]
 *
 * @param {string} [body.header.diagnostics.level] Possible values include:
 * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
 *
 * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
 * (default: client generated)
 *
 * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
 * (default: client generated)
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link HistoryUpdateResponseApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _historyDeleteValues(endpointId, body, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (endpointId === null || endpointId === undefined || typeof endpointId.valueOf() !== 'string') {
      throw new Error('endpointId cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/delete/{endpointId}/values';
  requestUrl = requestUrl.replace('{endpointId}', encodeURIComponent(endpointId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['DeleteValuesDetailsApiModelHistoryUpdateRequestApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['HistoryUpdateResponseApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete historic values
 *
 * Delete historic values using historic access. The endpoint must be activated
 * and connected and the module client and server must trust each other.
 *
 * @param {string} endpointId The identifier of the activated endpoint.
 *
 * @param {object} body The history update request
 *
 * @param {string} [body.nodeId] Node to update
 *
 * @param {array} [body.browsePath] An optional path from NodeId instance to
 * the actual node.
 *
 * @param {object} body.details
 *
 * @param {date} [body.details.startTime] Start time
 *
 * @param {date} [body.details.endTime] End time to delete until
 *
 * @param {object} [body.header]
 *
 * @param {object} [body.header.elevation]
 *
 * @param {string} [body.header.elevation.type] Possible values include:
 * 'None', 'UserName', 'X509Certificate', 'JwtToken'
 *
 * @param {object} [body.header.elevation.value] Value to pass to server
 *
 * @param {array} [body.header.locales] Optional list of locales in preference
 * order.
 *
 * @param {object} [body.header.diagnostics]
 *
 * @param {string} [body.header.diagnostics.level] Possible values include:
 * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
 *
 * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
 * (default: client generated)
 *
 * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
 * (default: client generated)
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link HistoryUpdateResponseApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _historyDeleteModifiedValues(endpointId, body, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (endpointId === null || endpointId === undefined || typeof endpointId.valueOf() !== 'string') {
      throw new Error('endpointId cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/delete/{endpointId}/values/modified';
  requestUrl = requestUrl.replace('{endpointId}', encodeURIComponent(endpointId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['DeleteModifiedValuesDetailsApiModelHistoryUpdateRequestApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['HistoryUpdateResponseApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Delete historic events
 *
 * Delete historic events using historic access. The endpoint must be activated
 * and connected and the module client and server must trust each other.
 *
 * @param {string} endpointId The identifier of the activated endpoint.
 *
 * @param {object} body The history update request
 *
 * @param {string} [body.nodeId] Node to update
 *
 * @param {array} [body.browsePath] An optional path from NodeId instance to
 * the actual node.
 *
 * @param {object} body.details
 *
 * @param {array} body.details.eventIds Events to delete
 *
 * @param {object} [body.header]
 *
 * @param {object} [body.header.elevation]
 *
 * @param {string} [body.header.elevation.type] Possible values include:
 * 'None', 'UserName', 'X509Certificate', 'JwtToken'
 *
 * @param {object} [body.header.elevation.value] Value to pass to server
 *
 * @param {array} [body.header.locales] Optional list of locales in preference
 * order.
 *
 * @param {object} [body.header.diagnostics]
 *
 * @param {string} [body.header.diagnostics.level] Possible values include:
 * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
 *
 * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
 * (default: client generated)
 *
 * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
 * (default: client generated)
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link HistoryUpdateResponseApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _historyDeleteEvents(endpointId, body, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (endpointId === null || endpointId === undefined || typeof endpointId.valueOf() !== 'string') {
      throw new Error('endpointId cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/delete/{endpointId}/events';
  requestUrl = requestUrl.replace('{endpointId}', encodeURIComponent(endpointId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['DeleteEventsDetailsApiModelHistoryUpdateRequestApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['HistoryUpdateResponseApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Read history using json details
 *
 * Read node history if available using historic access. The endpoint must be
 * activated and connected and the module client and server must trust each
 * other.
 *
 * @param {string} endpointId The identifier of the activated endpoint.
 *
 * @param {object} body The history read request
 *
 * @param {string} [body.nodeId] Node to read from (mandatory)
 *
 * @param {array} [body.browsePath] An optional path from NodeId instance to
 * the actual node.
 *
 * @param {object} [body.details] The HistoryReadDetailsType extension object
 * encoded in json and containing the tunneled
 * Historian reader request.
 *
 * @param {string} [body.indexRange] Index range to read, e.g. 1:2,0:1 for 2
 * slices
 * out of a matrix or 0:1 for the first item in
 * an array, string or bytestring.
 * See 7.22 of part 4: NumericRange.
 *
 * @param {object} [body.header]
 *
 * @param {object} [body.header.elevation]
 *
 * @param {string} [body.header.elevation.type] Possible values include:
 * 'None', 'UserName', 'X509Certificate', 'JwtToken'
 *
 * @param {object} [body.header.elevation.value] Value to pass to server
 *
 * @param {array} [body.header.locales] Optional list of locales in preference
 * order.
 *
 * @param {object} [body.header.diagnostics]
 *
 * @param {string} [body.header.diagnostics.level] Possible values include:
 * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
 *
 * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
 * (default: client generated)
 *
 * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
 * (default: client generated)
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link JTokenHistoryReadResponseApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _historyReadRaw(endpointId, body, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (endpointId === null || endpointId === undefined || typeof endpointId.valueOf() !== 'string') {
      throw new Error('endpointId cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/history/read/{endpointId}';
  requestUrl = requestUrl.replace('{endpointId}', encodeURIComponent(endpointId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['JTokenHistoryReadRequestApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['JTokenHistoryReadResponseApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Read next batch of history as json
 *
 * Read next batch of node history values using historic access. The endpoint
 * must be activated and connected and the module client and server must trust
 * each other.
 *
 * @param {string} endpointId The identifier of the activated endpoint.
 *
 * @param {object} body The history read next request
 *
 * @param {string} body.continuationToken Continuation token to continue
 * reading more
 * results.
 *
 * @param {boolean} [body.abort] Abort reading after this read
 *
 * @param {object} [body.header]
 *
 * @param {object} [body.header.elevation]
 *
 * @param {string} [body.header.elevation.type] Possible values include:
 * 'None', 'UserName', 'X509Certificate', 'JwtToken'
 *
 * @param {object} [body.header.elevation.value] Value to pass to server
 *
 * @param {array} [body.header.locales] Optional list of locales in preference
 * order.
 *
 * @param {object} [body.header.diagnostics]
 *
 * @param {string} [body.header.diagnostics.level] Possible values include:
 * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
 *
 * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
 * (default: client generated)
 *
 * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
 * (default: client generated)
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link JTokenHistoryReadNextResponseApiModel} for
 *                      more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _historyReadRawNext(endpointId, body, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (endpointId === null || endpointId === undefined || typeof endpointId.valueOf() !== 'string') {
      throw new Error('endpointId cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/history/read/{endpointId}/next';
  requestUrl = requestUrl.replace('{endpointId}', encodeURIComponent(endpointId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['HistoryReadNextRequestApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['JTokenHistoryReadNextResponseApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Update node history using raw json
 *
 * Update node history using historic access. The endpoint must be activated
 * and connected and the module client and server must trust each other.
 *
 * @param {string} endpointId The identifier of the activated endpoint.
 *
 * @param {object} body The history update request
 *
 * @param {string} [body.nodeId] Node to update
 *
 * @param {array} [body.browsePath] An optional path from NodeId instance to
 * the actual node.
 *
 * @param {object} body.details The HistoryUpdateDetailsType extension object
 * encoded as json Variant and containing the tunneled
 * update request for the Historian server. The value
 * is updated at edge using above node address.
 *
 * @param {object} [body.header]
 *
 * @param {object} [body.header.elevation]
 *
 * @param {string} [body.header.elevation.type] Possible values include:
 * 'None', 'UserName', 'X509Certificate', 'JwtToken'
 *
 * @param {object} [body.header.elevation.value] Value to pass to server
 *
 * @param {array} [body.header.locales] Optional list of locales in preference
 * order.
 *
 * @param {object} [body.header.diagnostics]
 *
 * @param {string} [body.header.diagnostics.level] Possible values include:
 * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
 *
 * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
 * (default: client generated)
 *
 * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
 * (default: client generated)
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link HistoryUpdateResponseApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _historyUpdateRaw(endpointId, body, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (endpointId === null || endpointId === undefined || typeof endpointId.valueOf() !== 'string') {
      throw new Error('endpointId cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/history/update/{endpointId}';
  requestUrl = requestUrl.replace('{endpointId}', encodeURIComponent(endpointId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['JTokenHistoryUpdateRequestApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['HistoryUpdateResponseApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Insert historic values
 *
 * Insert historic values using historic access. The endpoint must be activated
 * and connected and the module client and server must trust each other.
 *
 * @param {string} endpointId The identifier of the activated endpoint.
 *
 * @param {object} body The history insert request
 *
 * @param {string} [body.nodeId] Node to update
 *
 * @param {array} [body.browsePath] An optional path from NodeId instance to
 * the actual node.
 *
 * @param {object} body.details
 *
 * @param {array} body.details.values Values to insert
 *
 * @param {object} [body.header]
 *
 * @param {object} [body.header.elevation]
 *
 * @param {string} [body.header.elevation.type] Possible values include:
 * 'None', 'UserName', 'X509Certificate', 'JwtToken'
 *
 * @param {object} [body.header.elevation.value] Value to pass to server
 *
 * @param {array} [body.header.locales] Optional list of locales in preference
 * order.
 *
 * @param {object} [body.header.diagnostics]
 *
 * @param {string} [body.header.diagnostics.level] Possible values include:
 * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
 *
 * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
 * (default: client generated)
 *
 * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
 * (default: client generated)
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link HistoryUpdateResponseApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _historyInsertValues(endpointId, body, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (endpointId === null || endpointId === undefined || typeof endpointId.valueOf() !== 'string') {
      throw new Error('endpointId cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/insert/{endpointId}/values';
  requestUrl = requestUrl.replace('{endpointId}', encodeURIComponent(endpointId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['InsertValuesDetailsApiModelHistoryUpdateRequestApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['HistoryUpdateResponseApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Insert historic events
 *
 * Insert historic events using historic access. The endpoint must be activated
 * and connected and the module client and server must trust each other.
 *
 * @param {string} endpointId The identifier of the activated endpoint.
 *
 * @param {object} body The history insert request
 *
 * @param {string} [body.nodeId] Node to update
 *
 * @param {array} [body.browsePath] An optional path from NodeId instance to
 * the actual node.
 *
 * @param {object} body.details
 *
 * @param {object} [body.details.filter]
 *
 * @param {array} [body.details.filter.selectClauses] Select statements
 *
 * @param {object} [body.details.filter.whereClause]
 *
 * @param {array} [body.details.filter.whereClause.elements] The flat list of
 * elements in the filter AST
 *
 * @param {array} body.details.events The new events to insert
 *
 * @param {object} [body.header]
 *
 * @param {object} [body.header.elevation]
 *
 * @param {string} [body.header.elevation.type] Possible values include:
 * 'None', 'UserName', 'X509Certificate', 'JwtToken'
 *
 * @param {object} [body.header.elevation.value] Value to pass to server
 *
 * @param {array} [body.header.locales] Optional list of locales in preference
 * order.
 *
 * @param {object} [body.header.diagnostics]
 *
 * @param {string} [body.header.diagnostics.level] Possible values include:
 * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
 *
 * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
 * (default: client generated)
 *
 * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
 * (default: client generated)
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link HistoryUpdateResponseApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _historyInsertEvents(endpointId, body, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (endpointId === null || endpointId === undefined || typeof endpointId.valueOf() !== 'string') {
      throw new Error('endpointId cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/insert/{endpointId}/events';
  requestUrl = requestUrl.replace('{endpointId}', encodeURIComponent(endpointId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['InsertEventsDetailsApiModelHistoryUpdateRequestApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['HistoryUpdateResponseApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Read historic events
 *
 * Read historic events of a node if available using historic access. The
 * endpoint must be activated and connected and the module client and server
 * must trust each other.
 *
 * @param {string} endpointId The identifier of the activated endpoint.
 *
 * @param {object} body The history read request
 *
 * @param {string} [body.nodeId] Node to read from (mandatory)
 *
 * @param {array} [body.browsePath] An optional path from NodeId instance to
 * the actual node.
 *
 * @param {object} [body.details]
 *
 * @param {date} [body.details.startTime] Start time to read from
 *
 * @param {date} [body.details.endTime] End time to read to
 *
 * @param {number} [body.details.numEvents] Number of events to read
 *
 * @param {object} [body.details.filter]
 *
 * @param {array} [body.details.filter.selectClauses] Select statements
 *
 * @param {object} [body.details.filter.whereClause]
 *
 * @param {array} [body.details.filter.whereClause.elements] The flat list of
 * elements in the filter AST
 *
 * @param {string} [body.indexRange] Index range to read, e.g. 1:2,0:1 for 2
 * slices
 * out of a matrix or 0:1 for the first item in
 * an array, string or bytestring.
 * See 7.22 of part 4: NumericRange.
 *
 * @param {object} [body.header]
 *
 * @param {object} [body.header.elevation]
 *
 * @param {string} [body.header.elevation.type] Possible values include:
 * 'None', 'UserName', 'X509Certificate', 'JwtToken'
 *
 * @param {object} [body.header.elevation.value] Value to pass to server
 *
 * @param {array} [body.header.locales] Optional list of locales in preference
 * order.
 *
 * @param {object} [body.header.diagnostics]
 *
 * @param {string} [body.header.diagnostics.level] Possible values include:
 * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
 *
 * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
 * (default: client generated)
 *
 * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
 * (default: client generated)
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link
 *                      HistoricEventApiModelHistoryReadResponseApiModel} for
 *                      more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _historyReadEvents(endpointId, body, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (endpointId === null || endpointId === undefined || typeof endpointId.valueOf() !== 'string') {
      throw new Error('endpointId cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/read/{endpointId}/events';
  requestUrl = requestUrl.replace('{endpointId}', encodeURIComponent(endpointId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['ReadEventsDetailsApiModelHistoryReadRequestApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['HistoricEventApiModelHistoryReadResponseApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Read next batch of historic events
 *
 * Read next batch of historic events of a node using historic access. The
 * endpoint must be activated and connected and the module client and server
 * must trust each other.
 *
 * @param {string} endpointId The identifier of the activated endpoint.
 *
 * @param {object} body The history read next request
 *
 * @param {string} body.continuationToken Continuation token to continue
 * reading more
 * results.
 *
 * @param {boolean} [body.abort] Abort reading after this read
 *
 * @param {object} [body.header]
 *
 * @param {object} [body.header.elevation]
 *
 * @param {string} [body.header.elevation.type] Possible values include:
 * 'None', 'UserName', 'X509Certificate', 'JwtToken'
 *
 * @param {object} [body.header.elevation.value] Value to pass to server
 *
 * @param {array} [body.header.locales] Optional list of locales in preference
 * order.
 *
 * @param {object} [body.header.diagnostics]
 *
 * @param {string} [body.header.diagnostics.level] Possible values include:
 * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
 *
 * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
 * (default: client generated)
 *
 * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
 * (default: client generated)
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link
 *                      HistoricEventApiModelHistoryReadNextResponseApiModel}
 *                      for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _historyReadEventsNext(endpointId, body, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (endpointId === null || endpointId === undefined || typeof endpointId.valueOf() !== 'string') {
      throw new Error('endpointId cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/read/{endpointId}/events/next';
  requestUrl = requestUrl.replace('{endpointId}', encodeURIComponent(endpointId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['HistoryReadNextRequestApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['HistoricEventApiModelHistoryReadNextResponseApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Read historic processed values at specified times
 *
 * Read processed history values of a node if available using historic access.
 * The endpoint must be activated and connected and the module client and
 * server must trust each other.
 *
 * @param {string} endpointId The identifier of the activated endpoint.
 *
 * @param {object} body The history read request
 *
 * @param {string} [body.nodeId] Node to read from (mandatory)
 *
 * @param {array} [body.browsePath] An optional path from NodeId instance to
 * the actual node.
 *
 * @param {object} [body.details]
 *
 * @param {date} [body.details.startTime] Beginning of period to read. Set to
 * null
 * if no specific start time is specified.
 *
 * @param {date} [body.details.endTime] End of period to read. Set to null if
 * no
 * specific end time is specified.
 *
 * @param {number} [body.details.numValues] The maximum number of values
 * returned for any Node
 * over the time range. If only one time is specified,
 * the time range shall extend to return this number
 * of values. 0 or null indicates that there is no
 * maximum.
 *
 * @param {boolean} [body.details.returnBounds] Whether to return the bounding
 * values or not.
 *
 * @param {string} [body.indexRange] Index range to read, e.g. 1:2,0:1 for 2
 * slices
 * out of a matrix or 0:1 for the first item in
 * an array, string or bytestring.
 * See 7.22 of part 4: NumericRange.
 *
 * @param {object} [body.header]
 *
 * @param {object} [body.header.elevation]
 *
 * @param {string} [body.header.elevation.type] Possible values include:
 * 'None', 'UserName', 'X509Certificate', 'JwtToken'
 *
 * @param {object} [body.header.elevation.value] Value to pass to server
 *
 * @param {array} [body.header.locales] Optional list of locales in preference
 * order.
 *
 * @param {object} [body.header.diagnostics]
 *
 * @param {string} [body.header.diagnostics.level] Possible values include:
 * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
 *
 * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
 * (default: client generated)
 *
 * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
 * (default: client generated)
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link
 *                      HistoricValueApiModelHistoryReadResponseApiModel} for
 *                      more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _historyReadValues(endpointId, body, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (endpointId === null || endpointId === undefined || typeof endpointId.valueOf() !== 'string') {
      throw new Error('endpointId cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/read/{endpointId}/values';
  requestUrl = requestUrl.replace('{endpointId}', encodeURIComponent(endpointId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['ReadValuesDetailsApiModelHistoryReadRequestApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['HistoricValueApiModelHistoryReadResponseApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Read historic values at specified times
 *
 * Read historic values of a node if available using historic access. The
 * endpoint must be activated and connected and the module client and server
 * must trust each other.
 *
 * @param {string} endpointId The identifier of the activated endpoint.
 *
 * @param {object} body The history read request
 *
 * @param {string} [body.nodeId] Node to read from (mandatory)
 *
 * @param {array} [body.browsePath] An optional path from NodeId instance to
 * the actual node.
 *
 * @param {object} [body.details]
 *
 * @param {array} body.details.reqTimes Requested datums
 *
 * @param {boolean} [body.details.useSimpleBounds] Whether to use simple bounds
 *
 * @param {string} [body.indexRange] Index range to read, e.g. 1:2,0:1 for 2
 * slices
 * out of a matrix or 0:1 for the first item in
 * an array, string or bytestring.
 * See 7.22 of part 4: NumericRange.
 *
 * @param {object} [body.header]
 *
 * @param {object} [body.header.elevation]
 *
 * @param {string} [body.header.elevation.type] Possible values include:
 * 'None', 'UserName', 'X509Certificate', 'JwtToken'
 *
 * @param {object} [body.header.elevation.value] Value to pass to server
 *
 * @param {array} [body.header.locales] Optional list of locales in preference
 * order.
 *
 * @param {object} [body.header.diagnostics]
 *
 * @param {string} [body.header.diagnostics.level] Possible values include:
 * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
 *
 * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
 * (default: client generated)
 *
 * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
 * (default: client generated)
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link
 *                      HistoricValueApiModelHistoryReadResponseApiModel} for
 *                      more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _historyReadValuesAtTimes(endpointId, body, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (endpointId === null || endpointId === undefined || typeof endpointId.valueOf() !== 'string') {
      throw new Error('endpointId cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/read/{endpointId}/values/pick';
  requestUrl = requestUrl.replace('{endpointId}', encodeURIComponent(endpointId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['ReadValuesAtTimesDetailsApiModelHistoryReadRequestApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['HistoricValueApiModelHistoryReadResponseApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Read historic processed values at specified times
 *
 * Read processed history values of a node if available using historic access.
 * The endpoint must be activated and connected and the module client and
 * server must trust each other.
 *
 * @param {string} endpointId The identifier of the activated endpoint.
 *
 * @param {object} body The history read request
 *
 * @param {string} [body.nodeId] Node to read from (mandatory)
 *
 * @param {array} [body.browsePath] An optional path from NodeId instance to
 * the actual node.
 *
 * @param {object} [body.details]
 *
 * @param {date} [body.details.startTime] Start time to read from.
 *
 * @param {date} [body.details.endTime] End time to read until
 *
 * @param {number} [body.details.processingInterval] Interval to process
 *
 * @param {string} [body.details.aggregateTypeId] The aggregate type node ids
 *
 * @param {object} [body.details.aggregateConfiguration]
 *
 * @param {boolean}
 * [body.details.aggregateConfiguration.useServerCapabilitiesDefaults] Whether
 * to use the default server caps
 *
 * @param {boolean} [body.details.aggregateConfiguration.treatUncertainAsBad]
 * Whether to treat uncertain as bad
 *
 * @param {number} [body.details.aggregateConfiguration.percentDataBad] Percent
 * of data that is bad
 *
 * @param {number} [body.details.aggregateConfiguration.percentDataGood]
 * Percent of data that is good
 *
 * @param {boolean}
 * [body.details.aggregateConfiguration.useSlopedExtrapolation] Whether to use
 * sloped extrapolation.
 *
 * @param {string} [body.indexRange] Index range to read, e.g. 1:2,0:1 for 2
 * slices
 * out of a matrix or 0:1 for the first item in
 * an array, string or bytestring.
 * See 7.22 of part 4: NumericRange.
 *
 * @param {object} [body.header]
 *
 * @param {object} [body.header.elevation]
 *
 * @param {string} [body.header.elevation.type] Possible values include:
 * 'None', 'UserName', 'X509Certificate', 'JwtToken'
 *
 * @param {object} [body.header.elevation.value] Value to pass to server
 *
 * @param {array} [body.header.locales] Optional list of locales in preference
 * order.
 *
 * @param {object} [body.header.diagnostics]
 *
 * @param {string} [body.header.diagnostics.level] Possible values include:
 * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
 *
 * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
 * (default: client generated)
 *
 * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
 * (default: client generated)
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link
 *                      HistoricValueApiModelHistoryReadResponseApiModel} for
 *                      more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _historyReadProcessedValues(endpointId, body, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (endpointId === null || endpointId === undefined || typeof endpointId.valueOf() !== 'string') {
      throw new Error('endpointId cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/read/{endpointId}/values/processed';
  requestUrl = requestUrl.replace('{endpointId}', encodeURIComponent(endpointId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['ReadProcessedValuesDetailsApiModelHistoryReadRequestApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['HistoricValueApiModelHistoryReadResponseApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Read historic modified values at specified times
 *
 * Read processed history values of a node if available using historic access.
 * The endpoint must be activated and connected and the module client and
 * server must trust each other.
 *
 * @param {string} endpointId The identifier of the activated endpoint.
 *
 * @param {object} body The history read request
 *
 * @param {string} [body.nodeId] Node to read from (mandatory)
 *
 * @param {array} [body.browsePath] An optional path from NodeId instance to
 * the actual node.
 *
 * @param {object} [body.details]
 *
 * @param {date} [body.details.startTime] The start time to read from
 *
 * @param {date} [body.details.endTime] The end time to read to
 *
 * @param {number} [body.details.numValues] The number of values to read
 *
 * @param {string} [body.indexRange] Index range to read, e.g. 1:2,0:1 for 2
 * slices
 * out of a matrix or 0:1 for the first item in
 * an array, string or bytestring.
 * See 7.22 of part 4: NumericRange.
 *
 * @param {object} [body.header]
 *
 * @param {object} [body.header.elevation]
 *
 * @param {string} [body.header.elevation.type] Possible values include:
 * 'None', 'UserName', 'X509Certificate', 'JwtToken'
 *
 * @param {object} [body.header.elevation.value] Value to pass to server
 *
 * @param {array} [body.header.locales] Optional list of locales in preference
 * order.
 *
 * @param {object} [body.header.diagnostics]
 *
 * @param {string} [body.header.diagnostics.level] Possible values include:
 * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
 *
 * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
 * (default: client generated)
 *
 * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
 * (default: client generated)
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link
 *                      HistoricValueApiModelHistoryReadResponseApiModel} for
 *                      more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _historyReadModifiedValues(endpointId, body, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (endpointId === null || endpointId === undefined || typeof endpointId.valueOf() !== 'string') {
      throw new Error('endpointId cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/read/{endpointId}/values/modified';
  requestUrl = requestUrl.replace('{endpointId}', encodeURIComponent(endpointId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['ReadModifiedValuesDetailsApiModelHistoryReadRequestApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['HistoricValueApiModelHistoryReadResponseApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Read next batch of historic values
 *
 * Read next batch of historic values of a node using historic access. The
 * endpoint must be activated and connected and the module client and server
 * must trust each other.
 *
 * @param {string} endpointId The identifier of the activated endpoint.
 *
 * @param {object} body The history read next request
 *
 * @param {string} body.continuationToken Continuation token to continue
 * reading more
 * results.
 *
 * @param {boolean} [body.abort] Abort reading after this read
 *
 * @param {object} [body.header]
 *
 * @param {object} [body.header.elevation]
 *
 * @param {string} [body.header.elevation.type] Possible values include:
 * 'None', 'UserName', 'X509Certificate', 'JwtToken'
 *
 * @param {object} [body.header.elevation.value] Value to pass to server
 *
 * @param {array} [body.header.locales] Optional list of locales in preference
 * order.
 *
 * @param {object} [body.header.diagnostics]
 *
 * @param {string} [body.header.diagnostics.level] Possible values include:
 * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
 *
 * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
 * (default: client generated)
 *
 * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
 * (default: client generated)
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link
 *                      HistoricValueApiModelHistoryReadNextResponseApiModel}
 *                      for more information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _historyReadValueNext(endpointId, body, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (endpointId === null || endpointId === undefined || typeof endpointId.valueOf() !== 'string') {
      throw new Error('endpointId cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/read/{endpointId}/values/next';
  requestUrl = requestUrl.replace('{endpointId}', encodeURIComponent(endpointId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['HistoryReadNextRequestApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['HistoricValueApiModelHistoryReadNextResponseApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Replace historic values
 *
 * Replace historic values using historic access. The endpoint must be
 * activated and connected and the module client and server must trust each
 * other.
 *
 * @param {string} endpointId The identifier of the activated endpoint.
 *
 * @param {object} body The history replace request
 *
 * @param {string} [body.nodeId] Node to update
 *
 * @param {array} [body.browsePath] An optional path from NodeId instance to
 * the actual node.
 *
 * @param {object} body.details
 *
 * @param {array} body.details.values Values to replace
 *
 * @param {object} [body.header]
 *
 * @param {object} [body.header.elevation]
 *
 * @param {string} [body.header.elevation.type] Possible values include:
 * 'None', 'UserName', 'X509Certificate', 'JwtToken'
 *
 * @param {object} [body.header.elevation.value] Value to pass to server
 *
 * @param {array} [body.header.locales] Optional list of locales in preference
 * order.
 *
 * @param {object} [body.header.diagnostics]
 *
 * @param {string} [body.header.diagnostics.level] Possible values include:
 * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
 *
 * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
 * (default: client generated)
 *
 * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
 * (default: client generated)
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link HistoryUpdateResponseApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _historyReplaceValues(endpointId, body, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (endpointId === null || endpointId === undefined || typeof endpointId.valueOf() !== 'string') {
      throw new Error('endpointId cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/replace/{endpointId}/values';
  requestUrl = requestUrl.replace('{endpointId}', encodeURIComponent(endpointId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['ReplaceValuesDetailsApiModelHistoryUpdateRequestApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['HistoryUpdateResponseApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Replace historic events
 *
 * Replace historic events using historic access. The endpoint must be
 * activated and connected and the module client and server must trust each
 * other.
 *
 * @param {string} endpointId The identifier of the activated endpoint.
 *
 * @param {object} body The history replace request
 *
 * @param {string} [body.nodeId] Node to update
 *
 * @param {array} [body.browsePath] An optional path from NodeId instance to
 * the actual node.
 *
 * @param {object} body.details
 *
 * @param {object} [body.details.filter]
 *
 * @param {array} [body.details.filter.selectClauses] Select statements
 *
 * @param {object} [body.details.filter.whereClause]
 *
 * @param {array} [body.details.filter.whereClause.elements] The flat list of
 * elements in the filter AST
 *
 * @param {array} body.details.events The events to replace
 *
 * @param {object} [body.header]
 *
 * @param {object} [body.header.elevation]
 *
 * @param {string} [body.header.elevation.type] Possible values include:
 * 'None', 'UserName', 'X509Certificate', 'JwtToken'
 *
 * @param {object} [body.header.elevation.value] Value to pass to server
 *
 * @param {array} [body.header.locales] Optional list of locales in preference
 * order.
 *
 * @param {object} [body.header.diagnostics]
 *
 * @param {string} [body.header.diagnostics.level] Possible values include:
 * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
 *
 * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
 * (default: client generated)
 *
 * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
 * (default: client generated)
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link HistoryUpdateResponseApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _historyReplaceEvents(endpointId, body, options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  // Validate
  try {
    if (endpointId === null || endpointId === undefined || typeof endpointId.valueOf() !== 'string') {
      throw new Error('endpointId cannot be null or undefined and it must be of type string.');
    }
    if (body === null || body === undefined) {
      throw new Error('body cannot be null or undefined.');
    }
  } catch (error) {
    return callback(error);
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/replace/{endpointId}/events';
  requestUrl = requestUrl.replace('{endpointId}', encodeURIComponent(endpointId));

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'POST';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json-patch+json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (body !== null && body !== undefined) {
      let requestModelMapper = new client.models['ReplaceEventsDetailsApiModelHistoryUpdateRequestApiModel']().mapper();
      requestModel = client.serialize(requestModelMapper, body, 'body');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(`Error "${error.message}" occurred in serializing the ` +
        `payload - ${JSON.stringify(body, null, 2)}.`);
    return callback(serializationError);
  }
  httpRequest.body = requestContent;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['HistoryUpdateResponseApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/**
 * @summary Return the service status in the form of the service status
 * api model.
 *
 * @param {object} [options] Optional Parameters.
 *
 * @param {object} [options.customHeaders] Headers that will be added to the
 * request
 *
 * @param {function} callback - The callback.
 *
 * @returns {function} callback(err, result, request, response)
 *
 *                      {Error}  err        - The Error object if an error occurred, null otherwise.
 *
 *                      {object} [result]   - The deserialized result object if an error did not occur.
 *                      See {@link StatusResponseApiModel} for more
 *                      information.
 *
 *                      {object} [request]  - The HTTP Request object if an error did not occur.
 *
 *                      {stream} [response] - The HTTP Response stream if an error did not occur.
 */
function _getStatus(options, callback) {
   /* jshint validthis: true */
  let client = this;
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  // Construct URL
  let baseUrl = this.baseUri;
  let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + 'v2/status';

  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = 'GET';
  httpRequest.url = requestUrl;
  httpRequest.headers = {};
  // Set Headers
  httpRequest.headers['Content-Type'] = 'application/json; charset=utf-8';
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.body = null;
  // Send Request
  return client.pipeline(httpRequest, (err, response, responseBody) => {
    if (err) {
      return callback(err);
    }
    let statusCode = response.statusCode;
    if (statusCode !== 200) {
      let error = new Error(responseBody);
      error.statusCode = response.statusCode;
      error.request = msRest.stripRequest(httpRequest);
      error.response = msRest.stripResponse(response);
      if (responseBody === '') responseBody = null;
      let parsedErrorResponse;
      try {
        parsedErrorResponse = JSON.parse(responseBody);
        if (parsedErrorResponse) {
          let internalError = null;
          if (parsedErrorResponse.error) internalError = parsedErrorResponse.error;
          error.code = internalError ? internalError.code : parsedErrorResponse.code;
          error.message = internalError ? internalError.message : parsedErrorResponse.message;
        }
      } catch (defaultError) {
        error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                         `- "${responseBody}" for the default response.`;
        return callback(error);
      }
      return callback(error);
    }
    // Create Result
    let result = null;
    if (responseBody === '') responseBody = null;
    // Deserialize Response
    if (statusCode === 200) {
      let parsedResponse = null;
      try {
        parsedResponse = JSON.parse(responseBody);
        result = JSON.parse(responseBody);
        if (parsedResponse !== null && parsedResponse !== undefined) {
          let resultMapper = new client.models['StatusResponseApiModel']().mapper();
          result = client.deserialize(resultMapper, parsedResponse, 'result');
        }
      } catch (error) {
        let deserializationError = new Error(`Error ${error} occurred in deserializing the responseBody - ${responseBody}`);
        deserializationError.request = msRest.stripRequest(httpRequest);
        deserializationError.response = msRest.stripResponse(response);
        return callback(deserializationError);
      }
    }

    return callback(null, result, httpRequest, response);
  });
}

/** Class representing a AzureOpcHistoryClient. */
class AzureOpcHistoryClient extends ServiceClient {
  /**
   * Create a AzureOpcHistoryClient.
   * @param {credentials} credentials - Subscription credentials which uniquely identify client subscription.
   * @param {string} [baseUri] - The base URI of the service.
   * @param {object} [options] - The parameter options
   * @param {Array} [options.filters] - Filters to be added to the request pipeline
   * @param {object} [options.requestOptions] - Options for the underlying request object
   * {@link https://github.com/request/request#requestoptions-callback Options doc}
   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
   */
  constructor(credentials, baseUri, options) {
    if (credentials === null || credentials === undefined) {
      throw new Error('\'credentials\' cannot be null.');
    }

    if (!options) options = {};

    super(credentials, options);

    this.baseUri = baseUri;
    if (!this.baseUri) {
      this.baseUri = 'http://localhost:9080';
    }
    this.credentials = credentials;

    let packageInfo = this.getPackageJsonInfo(__dirname);
    this.addUserAgentInfo(`${packageInfo.name}/${packageInfo.version}`);
    this.models = models;
    this._historyDeleteValuesAtTimes = _historyDeleteValuesAtTimes;
    this._historyDeleteValues = _historyDeleteValues;
    this._historyDeleteModifiedValues = _historyDeleteModifiedValues;
    this._historyDeleteEvents = _historyDeleteEvents;
    this._historyReadRaw = _historyReadRaw;
    this._historyReadRawNext = _historyReadRawNext;
    this._historyUpdateRaw = _historyUpdateRaw;
    this._historyInsertValues = _historyInsertValues;
    this._historyInsertEvents = _historyInsertEvents;
    this._historyReadEvents = _historyReadEvents;
    this._historyReadEventsNext = _historyReadEventsNext;
    this._historyReadValues = _historyReadValues;
    this._historyReadValuesAtTimes = _historyReadValuesAtTimes;
    this._historyReadProcessedValues = _historyReadProcessedValues;
    this._historyReadModifiedValues = _historyReadModifiedValues;
    this._historyReadValueNext = _historyReadValueNext;
    this._historyReplaceValues = _historyReplaceValues;
    this._historyReplaceEvents = _historyReplaceEvents;
    this._getStatus = _getStatus;
    msRest.addSerializationMixin(this);
  }

  /**
   * @summary Delete value history at specified times
   *
   * Delete value history using historic access. The endpoint must be activated
   * and connected and the module client and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The history update request
   *
   * @param {string} [body.nodeId] Node to update
   *
   * @param {array} [body.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} body.details
   *
   * @param {array} body.details.reqTimes The timestamps to delete
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<HistoryUpdateResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  historyDeleteValuesAtTimesWithHttpOperationResponse(endpointId, body, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._historyDeleteValuesAtTimes(endpointId, body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete value history at specified times
   *
   * Delete value history using historic access. The endpoint must be activated
   * and connected and the module client and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The history update request
   *
   * @param {string} [body.nodeId] Node to update
   *
   * @param {array} [body.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} body.details
   *
   * @param {array} body.details.reqTimes The timestamps to delete
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {HistoryUpdateResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link HistoryUpdateResponseApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  historyDeleteValuesAtTimes(endpointId, body, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._historyDeleteValuesAtTimes(endpointId, body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._historyDeleteValuesAtTimes(endpointId, body, options, optionalCallback);
    }
  }

  /**
   * @summary Delete historic values
   *
   * Delete historic values using historic access. The endpoint must be activated
   * and connected and the module client and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The history update request
   *
   * @param {string} [body.nodeId] Node to update
   *
   * @param {array} [body.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} body.details
   *
   * @param {date} [body.details.startTime] Start time
   *
   * @param {date} [body.details.endTime] End time to delete until
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<HistoryUpdateResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  historyDeleteValuesWithHttpOperationResponse(endpointId, body, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._historyDeleteValues(endpointId, body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete historic values
   *
   * Delete historic values using historic access. The endpoint must be activated
   * and connected and the module client and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The history update request
   *
   * @param {string} [body.nodeId] Node to update
   *
   * @param {array} [body.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} body.details
   *
   * @param {date} [body.details.startTime] Start time
   *
   * @param {date} [body.details.endTime] End time to delete until
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {HistoryUpdateResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link HistoryUpdateResponseApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  historyDeleteValues(endpointId, body, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._historyDeleteValues(endpointId, body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._historyDeleteValues(endpointId, body, options, optionalCallback);
    }
  }

  /**
   * @summary Delete historic values
   *
   * Delete historic values using historic access. The endpoint must be activated
   * and connected and the module client and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The history update request
   *
   * @param {string} [body.nodeId] Node to update
   *
   * @param {array} [body.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} body.details
   *
   * @param {date} [body.details.startTime] Start time
   *
   * @param {date} [body.details.endTime] End time to delete until
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<HistoryUpdateResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  historyDeleteModifiedValuesWithHttpOperationResponse(endpointId, body, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._historyDeleteModifiedValues(endpointId, body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete historic values
   *
   * Delete historic values using historic access. The endpoint must be activated
   * and connected and the module client and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The history update request
   *
   * @param {string} [body.nodeId] Node to update
   *
   * @param {array} [body.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} body.details
   *
   * @param {date} [body.details.startTime] Start time
   *
   * @param {date} [body.details.endTime] End time to delete until
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {HistoryUpdateResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link HistoryUpdateResponseApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  historyDeleteModifiedValues(endpointId, body, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._historyDeleteModifiedValues(endpointId, body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._historyDeleteModifiedValues(endpointId, body, options, optionalCallback);
    }
  }

  /**
   * @summary Delete historic events
   *
   * Delete historic events using historic access. The endpoint must be activated
   * and connected and the module client and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The history update request
   *
   * @param {string} [body.nodeId] Node to update
   *
   * @param {array} [body.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} body.details
   *
   * @param {array} body.details.eventIds Events to delete
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<HistoryUpdateResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  historyDeleteEventsWithHttpOperationResponse(endpointId, body, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._historyDeleteEvents(endpointId, body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Delete historic events
   *
   * Delete historic events using historic access. The endpoint must be activated
   * and connected and the module client and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The history update request
   *
   * @param {string} [body.nodeId] Node to update
   *
   * @param {array} [body.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} body.details
   *
   * @param {array} body.details.eventIds Events to delete
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {HistoryUpdateResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link HistoryUpdateResponseApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  historyDeleteEvents(endpointId, body, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._historyDeleteEvents(endpointId, body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._historyDeleteEvents(endpointId, body, options, optionalCallback);
    }
  }

  /**
   * @summary Read history using json details
   *
   * Read node history if available using historic access. The endpoint must be
   * activated and connected and the module client and server must trust each
   * other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The history read request
   *
   * @param {string} [body.nodeId] Node to read from (mandatory)
   *
   * @param {array} [body.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} [body.details] The HistoryReadDetailsType extension object
   * encoded in json and containing the tunneled
   * Historian reader request.
   *
   * @param {string} [body.indexRange] Index range to read, e.g. 1:2,0:1 for 2
   * slices
   * out of a matrix or 0:1 for the first item in
   * an array, string or bytestring.
   * See 7.22 of part 4: NumericRange.
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<JTokenHistoryReadResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  historyReadRawWithHttpOperationResponse(endpointId, body, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._historyReadRaw(endpointId, body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Read history using json details
   *
   * Read node history if available using historic access. The endpoint must be
   * activated and connected and the module client and server must trust each
   * other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The history read request
   *
   * @param {string} [body.nodeId] Node to read from (mandatory)
   *
   * @param {array} [body.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} [body.details] The HistoryReadDetailsType extension object
   * encoded in json and containing the tunneled
   * Historian reader request.
   *
   * @param {string} [body.indexRange] Index range to read, e.g. 1:2,0:1 for 2
   * slices
   * out of a matrix or 0:1 for the first item in
   * an array, string or bytestring.
   * See 7.22 of part 4: NumericRange.
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {JTokenHistoryReadResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link JTokenHistoryReadResponseApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  historyReadRaw(endpointId, body, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._historyReadRaw(endpointId, body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._historyReadRaw(endpointId, body, options, optionalCallback);
    }
  }

  /**
   * @summary Read next batch of history as json
   *
   * Read next batch of node history values using historic access. The endpoint
   * must be activated and connected and the module client and server must trust
   * each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The history read next request
   *
   * @param {string} body.continuationToken Continuation token to continue
   * reading more
   * results.
   *
   * @param {boolean} [body.abort] Abort reading after this read
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<JTokenHistoryReadNextResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  historyReadRawNextWithHttpOperationResponse(endpointId, body, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._historyReadRawNext(endpointId, body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Read next batch of history as json
   *
   * Read next batch of node history values using historic access. The endpoint
   * must be activated and connected and the module client and server must trust
   * each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The history read next request
   *
   * @param {string} body.continuationToken Continuation token to continue
   * reading more
   * results.
   *
   * @param {boolean} [body.abort] Abort reading after this read
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {JTokenHistoryReadNextResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link JTokenHistoryReadNextResponseApiModel} for
   *                      more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  historyReadRawNext(endpointId, body, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._historyReadRawNext(endpointId, body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._historyReadRawNext(endpointId, body, options, optionalCallback);
    }
  }

  /**
   * @summary Update node history using raw json
   *
   * Update node history using historic access. The endpoint must be activated
   * and connected and the module client and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The history update request
   *
   * @param {string} [body.nodeId] Node to update
   *
   * @param {array} [body.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} body.details The HistoryUpdateDetailsType extension object
   * encoded as json Variant and containing the tunneled
   * update request for the Historian server. The value
   * is updated at edge using above node address.
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<HistoryUpdateResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  historyUpdateRawWithHttpOperationResponse(endpointId, body, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._historyUpdateRaw(endpointId, body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Update node history using raw json
   *
   * Update node history using historic access. The endpoint must be activated
   * and connected and the module client and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The history update request
   *
   * @param {string} [body.nodeId] Node to update
   *
   * @param {array} [body.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} body.details The HistoryUpdateDetailsType extension object
   * encoded as json Variant and containing the tunneled
   * update request for the Historian server. The value
   * is updated at edge using above node address.
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {HistoryUpdateResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link HistoryUpdateResponseApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  historyUpdateRaw(endpointId, body, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._historyUpdateRaw(endpointId, body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._historyUpdateRaw(endpointId, body, options, optionalCallback);
    }
  }

  /**
   * @summary Insert historic values
   *
   * Insert historic values using historic access. The endpoint must be activated
   * and connected and the module client and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The history insert request
   *
   * @param {string} [body.nodeId] Node to update
   *
   * @param {array} [body.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} body.details
   *
   * @param {array} body.details.values Values to insert
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<HistoryUpdateResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  historyInsertValuesWithHttpOperationResponse(endpointId, body, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._historyInsertValues(endpointId, body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Insert historic values
   *
   * Insert historic values using historic access. The endpoint must be activated
   * and connected and the module client and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The history insert request
   *
   * @param {string} [body.nodeId] Node to update
   *
   * @param {array} [body.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} body.details
   *
   * @param {array} body.details.values Values to insert
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {HistoryUpdateResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link HistoryUpdateResponseApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  historyInsertValues(endpointId, body, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._historyInsertValues(endpointId, body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._historyInsertValues(endpointId, body, options, optionalCallback);
    }
  }

  /**
   * @summary Insert historic events
   *
   * Insert historic events using historic access. The endpoint must be activated
   * and connected and the module client and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The history insert request
   *
   * @param {string} [body.nodeId] Node to update
   *
   * @param {array} [body.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} body.details
   *
   * @param {object} [body.details.filter]
   *
   * @param {array} [body.details.filter.selectClauses] Select statements
   *
   * @param {object} [body.details.filter.whereClause]
   *
   * @param {array} [body.details.filter.whereClause.elements] The flat list of
   * elements in the filter AST
   *
   * @param {array} body.details.events The new events to insert
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<HistoryUpdateResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  historyInsertEventsWithHttpOperationResponse(endpointId, body, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._historyInsertEvents(endpointId, body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Insert historic events
   *
   * Insert historic events using historic access. The endpoint must be activated
   * and connected and the module client and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The history insert request
   *
   * @param {string} [body.nodeId] Node to update
   *
   * @param {array} [body.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} body.details
   *
   * @param {object} [body.details.filter]
   *
   * @param {array} [body.details.filter.selectClauses] Select statements
   *
   * @param {object} [body.details.filter.whereClause]
   *
   * @param {array} [body.details.filter.whereClause.elements] The flat list of
   * elements in the filter AST
   *
   * @param {array} body.details.events The new events to insert
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {HistoryUpdateResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link HistoryUpdateResponseApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  historyInsertEvents(endpointId, body, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._historyInsertEvents(endpointId, body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._historyInsertEvents(endpointId, body, options, optionalCallback);
    }
  }

  /**
   * @summary Read historic events
   *
   * Read historic events of a node if available using historic access. The
   * endpoint must be activated and connected and the module client and server
   * must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The history read request
   *
   * @param {string} [body.nodeId] Node to read from (mandatory)
   *
   * @param {array} [body.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} [body.details]
   *
   * @param {date} [body.details.startTime] Start time to read from
   *
   * @param {date} [body.details.endTime] End time to read to
   *
   * @param {number} [body.details.numEvents] Number of events to read
   *
   * @param {object} [body.details.filter]
   *
   * @param {array} [body.details.filter.selectClauses] Select statements
   *
   * @param {object} [body.details.filter.whereClause]
   *
   * @param {array} [body.details.filter.whereClause.elements] The flat list of
   * elements in the filter AST
   *
   * @param {string} [body.indexRange] Index range to read, e.g. 1:2,0:1 for 2
   * slices
   * out of a matrix or 0:1 for the first item in
   * an array, string or bytestring.
   * See 7.22 of part 4: NumericRange.
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<HistoricEventApiModelHistoryReadResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  historyReadEventsWithHttpOperationResponse(endpointId, body, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._historyReadEvents(endpointId, body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Read historic events
   *
   * Read historic events of a node if available using historic access. The
   * endpoint must be activated and connected and the module client and server
   * must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The history read request
   *
   * @param {string} [body.nodeId] Node to read from (mandatory)
   *
   * @param {array} [body.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} [body.details]
   *
   * @param {date} [body.details.startTime] Start time to read from
   *
   * @param {date} [body.details.endTime] End time to read to
   *
   * @param {number} [body.details.numEvents] Number of events to read
   *
   * @param {object} [body.details.filter]
   *
   * @param {array} [body.details.filter.selectClauses] Select statements
   *
   * @param {object} [body.details.filter.whereClause]
   *
   * @param {array} [body.details.filter.whereClause.elements] The flat list of
   * elements in the filter AST
   *
   * @param {string} [body.indexRange] Index range to read, e.g. 1:2,0:1 for 2
   * slices
   * out of a matrix or 0:1 for the first item in
   * an array, string or bytestring.
   * See 7.22 of part 4: NumericRange.
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {HistoricEventApiModelHistoryReadResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link
   *                      HistoricEventApiModelHistoryReadResponseApiModel} for
   *                      more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  historyReadEvents(endpointId, body, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._historyReadEvents(endpointId, body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._historyReadEvents(endpointId, body, options, optionalCallback);
    }
  }

  /**
   * @summary Read next batch of historic events
   *
   * Read next batch of historic events of a node using historic access. The
   * endpoint must be activated and connected and the module client and server
   * must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The history read next request
   *
   * @param {string} body.continuationToken Continuation token to continue
   * reading more
   * results.
   *
   * @param {boolean} [body.abort] Abort reading after this read
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<HistoricEventApiModelHistoryReadNextResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  historyReadEventsNextWithHttpOperationResponse(endpointId, body, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._historyReadEventsNext(endpointId, body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Read next batch of historic events
   *
   * Read next batch of historic events of a node using historic access. The
   * endpoint must be activated and connected and the module client and server
   * must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The history read next request
   *
   * @param {string} body.continuationToken Continuation token to continue
   * reading more
   * results.
   *
   * @param {boolean} [body.abort] Abort reading after this read
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {HistoricEventApiModelHistoryReadNextResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link
   *                      HistoricEventApiModelHistoryReadNextResponseApiModel}
   *                      for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  historyReadEventsNext(endpointId, body, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._historyReadEventsNext(endpointId, body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._historyReadEventsNext(endpointId, body, options, optionalCallback);
    }
  }

  /**
   * @summary Read historic processed values at specified times
   *
   * Read processed history values of a node if available using historic access.
   * The endpoint must be activated and connected and the module client and
   * server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The history read request
   *
   * @param {string} [body.nodeId] Node to read from (mandatory)
   *
   * @param {array} [body.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} [body.details]
   *
   * @param {date} [body.details.startTime] Beginning of period to read. Set to
   * null
   * if no specific start time is specified.
   *
   * @param {date} [body.details.endTime] End of period to read. Set to null if
   * no
   * specific end time is specified.
   *
   * @param {number} [body.details.numValues] The maximum number of values
   * returned for any Node
   * over the time range. If only one time is specified,
   * the time range shall extend to return this number
   * of values. 0 or null indicates that there is no
   * maximum.
   *
   * @param {boolean} [body.details.returnBounds] Whether to return the bounding
   * values or not.
   *
   * @param {string} [body.indexRange] Index range to read, e.g. 1:2,0:1 for 2
   * slices
   * out of a matrix or 0:1 for the first item in
   * an array, string or bytestring.
   * See 7.22 of part 4: NumericRange.
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<HistoricValueApiModelHistoryReadResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  historyReadValuesWithHttpOperationResponse(endpointId, body, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._historyReadValues(endpointId, body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Read historic processed values at specified times
   *
   * Read processed history values of a node if available using historic access.
   * The endpoint must be activated and connected and the module client and
   * server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The history read request
   *
   * @param {string} [body.nodeId] Node to read from (mandatory)
   *
   * @param {array} [body.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} [body.details]
   *
   * @param {date} [body.details.startTime] Beginning of period to read. Set to
   * null
   * if no specific start time is specified.
   *
   * @param {date} [body.details.endTime] End of period to read. Set to null if
   * no
   * specific end time is specified.
   *
   * @param {number} [body.details.numValues] The maximum number of values
   * returned for any Node
   * over the time range. If only one time is specified,
   * the time range shall extend to return this number
   * of values. 0 or null indicates that there is no
   * maximum.
   *
   * @param {boolean} [body.details.returnBounds] Whether to return the bounding
   * values or not.
   *
   * @param {string} [body.indexRange] Index range to read, e.g. 1:2,0:1 for 2
   * slices
   * out of a matrix or 0:1 for the first item in
   * an array, string or bytestring.
   * See 7.22 of part 4: NumericRange.
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {HistoricValueApiModelHistoryReadResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link
   *                      HistoricValueApiModelHistoryReadResponseApiModel} for
   *                      more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  historyReadValues(endpointId, body, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._historyReadValues(endpointId, body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._historyReadValues(endpointId, body, options, optionalCallback);
    }
  }

  /**
   * @summary Read historic values at specified times
   *
   * Read historic values of a node if available using historic access. The
   * endpoint must be activated and connected and the module client and server
   * must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The history read request
   *
   * @param {string} [body.nodeId] Node to read from (mandatory)
   *
   * @param {array} [body.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} [body.details]
   *
   * @param {array} body.details.reqTimes Requested datums
   *
   * @param {boolean} [body.details.useSimpleBounds] Whether to use simple bounds
   *
   * @param {string} [body.indexRange] Index range to read, e.g. 1:2,0:1 for 2
   * slices
   * out of a matrix or 0:1 for the first item in
   * an array, string or bytestring.
   * See 7.22 of part 4: NumericRange.
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<HistoricValueApiModelHistoryReadResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  historyReadValuesAtTimesWithHttpOperationResponse(endpointId, body, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._historyReadValuesAtTimes(endpointId, body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Read historic values at specified times
   *
   * Read historic values of a node if available using historic access. The
   * endpoint must be activated and connected and the module client and server
   * must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The history read request
   *
   * @param {string} [body.nodeId] Node to read from (mandatory)
   *
   * @param {array} [body.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} [body.details]
   *
   * @param {array} body.details.reqTimes Requested datums
   *
   * @param {boolean} [body.details.useSimpleBounds] Whether to use simple bounds
   *
   * @param {string} [body.indexRange] Index range to read, e.g. 1:2,0:1 for 2
   * slices
   * out of a matrix or 0:1 for the first item in
   * an array, string or bytestring.
   * See 7.22 of part 4: NumericRange.
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {HistoricValueApiModelHistoryReadResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link
   *                      HistoricValueApiModelHistoryReadResponseApiModel} for
   *                      more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  historyReadValuesAtTimes(endpointId, body, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._historyReadValuesAtTimes(endpointId, body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._historyReadValuesAtTimes(endpointId, body, options, optionalCallback);
    }
  }

  /**
   * @summary Read historic processed values at specified times
   *
   * Read processed history values of a node if available using historic access.
   * The endpoint must be activated and connected and the module client and
   * server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The history read request
   *
   * @param {string} [body.nodeId] Node to read from (mandatory)
   *
   * @param {array} [body.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} [body.details]
   *
   * @param {date} [body.details.startTime] Start time to read from.
   *
   * @param {date} [body.details.endTime] End time to read until
   *
   * @param {number} [body.details.processingInterval] Interval to process
   *
   * @param {string} [body.details.aggregateTypeId] The aggregate type node ids
   *
   * @param {object} [body.details.aggregateConfiguration]
   *
   * @param {boolean}
   * [body.details.aggregateConfiguration.useServerCapabilitiesDefaults] Whether
   * to use the default server caps
   *
   * @param {boolean} [body.details.aggregateConfiguration.treatUncertainAsBad]
   * Whether to treat uncertain as bad
   *
   * @param {number} [body.details.aggregateConfiguration.percentDataBad] Percent
   * of data that is bad
   *
   * @param {number} [body.details.aggregateConfiguration.percentDataGood]
   * Percent of data that is good
   *
   * @param {boolean}
   * [body.details.aggregateConfiguration.useSlopedExtrapolation] Whether to use
   * sloped extrapolation.
   *
   * @param {string} [body.indexRange] Index range to read, e.g. 1:2,0:1 for 2
   * slices
   * out of a matrix or 0:1 for the first item in
   * an array, string or bytestring.
   * See 7.22 of part 4: NumericRange.
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<HistoricValueApiModelHistoryReadResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  historyReadProcessedValuesWithHttpOperationResponse(endpointId, body, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._historyReadProcessedValues(endpointId, body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Read historic processed values at specified times
   *
   * Read processed history values of a node if available using historic access.
   * The endpoint must be activated and connected and the module client and
   * server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The history read request
   *
   * @param {string} [body.nodeId] Node to read from (mandatory)
   *
   * @param {array} [body.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} [body.details]
   *
   * @param {date} [body.details.startTime] Start time to read from.
   *
   * @param {date} [body.details.endTime] End time to read until
   *
   * @param {number} [body.details.processingInterval] Interval to process
   *
   * @param {string} [body.details.aggregateTypeId] The aggregate type node ids
   *
   * @param {object} [body.details.aggregateConfiguration]
   *
   * @param {boolean}
   * [body.details.aggregateConfiguration.useServerCapabilitiesDefaults] Whether
   * to use the default server caps
   *
   * @param {boolean} [body.details.aggregateConfiguration.treatUncertainAsBad]
   * Whether to treat uncertain as bad
   *
   * @param {number} [body.details.aggregateConfiguration.percentDataBad] Percent
   * of data that is bad
   *
   * @param {number} [body.details.aggregateConfiguration.percentDataGood]
   * Percent of data that is good
   *
   * @param {boolean}
   * [body.details.aggregateConfiguration.useSlopedExtrapolation] Whether to use
   * sloped extrapolation.
   *
   * @param {string} [body.indexRange] Index range to read, e.g. 1:2,0:1 for 2
   * slices
   * out of a matrix or 0:1 for the first item in
   * an array, string or bytestring.
   * See 7.22 of part 4: NumericRange.
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {HistoricValueApiModelHistoryReadResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link
   *                      HistoricValueApiModelHistoryReadResponseApiModel} for
   *                      more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  historyReadProcessedValues(endpointId, body, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._historyReadProcessedValues(endpointId, body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._historyReadProcessedValues(endpointId, body, options, optionalCallback);
    }
  }

  /**
   * @summary Read historic modified values at specified times
   *
   * Read processed history values of a node if available using historic access.
   * The endpoint must be activated and connected and the module client and
   * server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The history read request
   *
   * @param {string} [body.nodeId] Node to read from (mandatory)
   *
   * @param {array} [body.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} [body.details]
   *
   * @param {date} [body.details.startTime] The start time to read from
   *
   * @param {date} [body.details.endTime] The end time to read to
   *
   * @param {number} [body.details.numValues] The number of values to read
   *
   * @param {string} [body.indexRange] Index range to read, e.g. 1:2,0:1 for 2
   * slices
   * out of a matrix or 0:1 for the first item in
   * an array, string or bytestring.
   * See 7.22 of part 4: NumericRange.
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<HistoricValueApiModelHistoryReadResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  historyReadModifiedValuesWithHttpOperationResponse(endpointId, body, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._historyReadModifiedValues(endpointId, body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Read historic modified values at specified times
   *
   * Read processed history values of a node if available using historic access.
   * The endpoint must be activated and connected and the module client and
   * server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The history read request
   *
   * @param {string} [body.nodeId] Node to read from (mandatory)
   *
   * @param {array} [body.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} [body.details]
   *
   * @param {date} [body.details.startTime] The start time to read from
   *
   * @param {date} [body.details.endTime] The end time to read to
   *
   * @param {number} [body.details.numValues] The number of values to read
   *
   * @param {string} [body.indexRange] Index range to read, e.g. 1:2,0:1 for 2
   * slices
   * out of a matrix or 0:1 for the first item in
   * an array, string or bytestring.
   * See 7.22 of part 4: NumericRange.
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {HistoricValueApiModelHistoryReadResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link
   *                      HistoricValueApiModelHistoryReadResponseApiModel} for
   *                      more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  historyReadModifiedValues(endpointId, body, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._historyReadModifiedValues(endpointId, body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._historyReadModifiedValues(endpointId, body, options, optionalCallback);
    }
  }

  /**
   * @summary Read next batch of historic values
   *
   * Read next batch of historic values of a node using historic access. The
   * endpoint must be activated and connected and the module client and server
   * must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The history read next request
   *
   * @param {string} body.continuationToken Continuation token to continue
   * reading more
   * results.
   *
   * @param {boolean} [body.abort] Abort reading after this read
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<HistoricValueApiModelHistoryReadNextResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  historyReadValueNextWithHttpOperationResponse(endpointId, body, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._historyReadValueNext(endpointId, body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Read next batch of historic values
   *
   * Read next batch of historic values of a node using historic access. The
   * endpoint must be activated and connected and the module client and server
   * must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The history read next request
   *
   * @param {string} body.continuationToken Continuation token to continue
   * reading more
   * results.
   *
   * @param {boolean} [body.abort] Abort reading after this read
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {HistoricValueApiModelHistoryReadNextResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link
   *                      HistoricValueApiModelHistoryReadNextResponseApiModel}
   *                      for more information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  historyReadValueNext(endpointId, body, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._historyReadValueNext(endpointId, body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._historyReadValueNext(endpointId, body, options, optionalCallback);
    }
  }

  /**
   * @summary Replace historic values
   *
   * Replace historic values using historic access. The endpoint must be
   * activated and connected and the module client and server must trust each
   * other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The history replace request
   *
   * @param {string} [body.nodeId] Node to update
   *
   * @param {array} [body.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} body.details
   *
   * @param {array} body.details.values Values to replace
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<HistoryUpdateResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  historyReplaceValuesWithHttpOperationResponse(endpointId, body, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._historyReplaceValues(endpointId, body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Replace historic values
   *
   * Replace historic values using historic access. The endpoint must be
   * activated and connected and the module client and server must trust each
   * other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The history replace request
   *
   * @param {string} [body.nodeId] Node to update
   *
   * @param {array} [body.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} body.details
   *
   * @param {array} body.details.values Values to replace
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {HistoryUpdateResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link HistoryUpdateResponseApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  historyReplaceValues(endpointId, body, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._historyReplaceValues(endpointId, body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._historyReplaceValues(endpointId, body, options, optionalCallback);
    }
  }

  /**
   * @summary Replace historic events
   *
   * Replace historic events using historic access. The endpoint must be
   * activated and connected and the module client and server must trust each
   * other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The history replace request
   *
   * @param {string} [body.nodeId] Node to update
   *
   * @param {array} [body.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} body.details
   *
   * @param {object} [body.details.filter]
   *
   * @param {array} [body.details.filter.selectClauses] Select statements
   *
   * @param {object} [body.details.filter.whereClause]
   *
   * @param {array} [body.details.filter.whereClause.elements] The flat list of
   * elements in the filter AST
   *
   * @param {array} body.details.events The events to replace
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<HistoryUpdateResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  historyReplaceEventsWithHttpOperationResponse(endpointId, body, options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._historyReplaceEvents(endpointId, body, options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Replace historic events
   *
   * Replace historic events using historic access. The endpoint must be
   * activated and connected and the module client and server must trust each
   * other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} body The history replace request
   *
   * @param {string} [body.nodeId] Node to update
   *
   * @param {array} [body.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} body.details
   *
   * @param {object} [body.details.filter]
   *
   * @param {array} [body.details.filter.selectClauses] Select statements
   *
   * @param {object} [body.details.filter.whereClause]
   *
   * @param {array} [body.details.filter.whereClause.elements] The flat list of
   * elements in the filter AST
   *
   * @param {array} body.details.events The events to replace
   *
   * @param {object} [body.header]
   *
   * @param {object} [body.header.elevation]
   *
   * @param {string} [body.header.elevation.type] Possible values include:
   * 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [body.header.elevation.value] Value to pass to server
   *
   * @param {array} [body.header.locales] Optional list of locales in preference
   * order.
   *
   * @param {object} [body.header.diagnostics]
   *
   * @param {string} [body.header.diagnostics.level] Possible values include:
   * 'None', 'Status', 'Operations', 'Diagnostics', 'Verbose'
   *
   * @param {string} [body.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [body.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {HistoryUpdateResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link HistoryUpdateResponseApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  historyReplaceEvents(endpointId, body, options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._historyReplaceEvents(endpointId, body, options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._historyReplaceEvents(endpointId, body, options, optionalCallback);
    }
  }

  /**
   * @summary Return the service status in the form of the service status
   * api model.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<StatusResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error} - The error object.
   */
  getStatusWithHttpOperationResponse(options) {
    let client = this;
    let self = this;
    return new Promise((resolve, reject) => {
      self._getStatus(options, (err, result, request, response) => {
        let httpOperationResponse = new msRest.HttpOperationResponse(request, response);
        httpOperationResponse.body = result;
        if (err) { reject(err); }
        else { resolve(httpOperationResponse); }
        return;
      });
    });
  }

  /**
   * @summary Return the service status in the form of the service status
   * api model.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {function} [optionalCallback] - The optional callback.
   *
   * @returns {function|Promise} If a callback was passed as the last parameter
   * then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned
   *
   *                      @resolve {StatusResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error} - The error object.
   *
   * {function} optionalCallback(err, result, request, response)
   *
   *                      {Error}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {object} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link StatusResponseApiModel} for more
   *                      information.
   *
   *                      {object} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {stream} [response] - The HTTP Response stream if an error did not occur.
   */
  getStatus(options, optionalCallback) {
    let client = this;
    let self = this;
    if (!optionalCallback && typeof options === 'function') {
      optionalCallback = options;
      options = null;
    }
    if (!optionalCallback) {
      return new Promise((resolve, reject) => {
        self._getStatus(options, (err, result, request, response) => {
          if (err) { reject(err); }
          else { resolve(result); }
          return;
        });
      });
    } else {
      return self._getStatus(options, optionalCallback);
    }
  }

}

module.exports = AzureOpcHistoryClient;
module.exports['default'] = AzureOpcHistoryClient;
module.exports.AzureOpcHistoryClient = AzureOpcHistoryClient;
module.exports.AzureOpcHistoryModels = models;
