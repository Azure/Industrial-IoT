/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { ServiceClient, ServiceClientOptions, ServiceCallback, HttpOperationResponse, ServiceClientCredentials } from 'ms-rest';
import * as models from "./models";

export default class AzureOpcHistoryClient extends ServiceClient {
  /**
   * @class
   * Initializes a new instance of the AzureOpcHistoryClient class.
   * @constructor
   *
   * @param {credentials} credentials - Subscription credentials which uniquely identify client subscription.
   *
   * @param {string} [baseUri] - The base URI of the service.
   *
   * @param {object} [options] - The parameter options
   *
   * @param {Array} [options.filters] - Filters to be added to the request pipeline
   *
   * @param {object} [options.requestOptions] - Options for the underlying request object
   * {@link https://github.com/request/request#requestoptions-callback Options doc}
   *
   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
   *
   */
  constructor(credentials: ServiceClientCredentials, baseUri?: string, options?: ServiceClientOptions);

  credentials: ServiceClientCredentials;


  /**
   * @summary Delete value history at specified times
   *
   * Delete value history using historic access.
   * The endpoint must be activated and connected and the module client
   * and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} request The history update request
   *
   * @param {string} [request.nodeId] Node to update
   *
   * @param {array} [request.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} request.details The HistoryUpdateDetailsType extension
   * object
   * encoded as json Variant and containing the tunneled
   * update request for the Historian server. The value
   * is updated at edge using above node address.
   *
   * @param {array} request.details.reqTimes The timestamps to delete
   *
   * @param {object} [request.header] Optional request header
   *
   * @param {object} [request.header.elevation] Optional User elevation
   *
   * @param {string} [request.header.elevation.type] Type of credential. Possible
   * values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [request.header.elevation.value] Value to pass to server
   *
   * @param {array} [request.header.locales] Optional list of locales in
   * preference order.
   *
   * @param {object} [request.header.diagnostics] Optional diagnostics
   * configuration
   *
   * @param {string} [request.header.diagnostics.level] Requested level of
   * response diagnostics.
   * (default: Status). Possible values include: 'None', 'Status', 'Operations',
   * 'Diagnostics', 'Verbose'
   *
   * @param {string} [request.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [request.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<HistoryUpdateResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  historyDeleteValuesAtTimesWithHttpOperationResponse(endpointId: string, request: models.HistoryUpdateRequestApiModelDeleteValuesAtTimesDetailsApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HistoryUpdateResponseApiModel>>;

  /**
   * @summary Delete value history at specified times
   *
   * Delete value history using historic access.
   * The endpoint must be activated and connected and the module client
   * and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} request The history update request
   *
   * @param {string} [request.nodeId] Node to update
   *
   * @param {array} [request.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} request.details The HistoryUpdateDetailsType extension
   * object
   * encoded as json Variant and containing the tunneled
   * update request for the Historian server. The value
   * is updated at edge using above node address.
   *
   * @param {array} request.details.reqTimes The timestamps to delete
   *
   * @param {object} [request.header] Optional request header
   *
   * @param {object} [request.header.elevation] Optional User elevation
   *
   * @param {string} [request.header.elevation.type] Type of credential. Possible
   * values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [request.header.elevation.value] Value to pass to server
   *
   * @param {array} [request.header.locales] Optional list of locales in
   * preference order.
   *
   * @param {object} [request.header.diagnostics] Optional diagnostics
   * configuration
   *
   * @param {string} [request.header.diagnostics.level] Requested level of
   * response diagnostics.
   * (default: Status). Possible values include: 'None', 'Status', 'Operations',
   * 'Diagnostics', 'Verbose'
   *
   * @param {string} [request.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [request.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {HistoryUpdateResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {HistoryUpdateResponseApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link HistoryUpdateResponseApiModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  historyDeleteValuesAtTimes(endpointId: string, request: models.HistoryUpdateRequestApiModelDeleteValuesAtTimesDetailsApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HistoryUpdateResponseApiModel>;
  historyDeleteValuesAtTimes(endpointId: string, request: models.HistoryUpdateRequestApiModelDeleteValuesAtTimesDetailsApiModel, callback: ServiceCallback<models.HistoryUpdateResponseApiModel>): void;
  historyDeleteValuesAtTimes(endpointId: string, request: models.HistoryUpdateRequestApiModelDeleteValuesAtTimesDetailsApiModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HistoryUpdateResponseApiModel>): void;


  /**
   * @summary Delete historic values
   *
   * Delete historic values using historic access.
   * The endpoint must be activated and connected and the module client
   * and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} request The history update request
   *
   * @param {string} [request.nodeId] Node to update
   *
   * @param {array} [request.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} request.details The HistoryUpdateDetailsType extension
   * object
   * encoded as json Variant and containing the tunneled
   * update request for the Historian server. The value
   * is updated at edge using above node address.
   *
   * @param {date} [request.details.startTime] Start time
   *
   * @param {date} [request.details.endTime] End time to delete until
   *
   * @param {object} [request.header] Optional request header
   *
   * @param {object} [request.header.elevation] Optional User elevation
   *
   * @param {string} [request.header.elevation.type] Type of credential. Possible
   * values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [request.header.elevation.value] Value to pass to server
   *
   * @param {array} [request.header.locales] Optional list of locales in
   * preference order.
   *
   * @param {object} [request.header.diagnostics] Optional diagnostics
   * configuration
   *
   * @param {string} [request.header.diagnostics.level] Requested level of
   * response diagnostics.
   * (default: Status). Possible values include: 'None', 'Status', 'Operations',
   * 'Diagnostics', 'Verbose'
   *
   * @param {string} [request.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [request.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<HistoryUpdateResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  historyDeleteValuesWithHttpOperationResponse(endpointId: string, request: models.HistoryUpdateRequestApiModelDeleteValuesDetailsApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HistoryUpdateResponseApiModel>>;

  /**
   * @summary Delete historic values
   *
   * Delete historic values using historic access.
   * The endpoint must be activated and connected and the module client
   * and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} request The history update request
   *
   * @param {string} [request.nodeId] Node to update
   *
   * @param {array} [request.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} request.details The HistoryUpdateDetailsType extension
   * object
   * encoded as json Variant and containing the tunneled
   * update request for the Historian server. The value
   * is updated at edge using above node address.
   *
   * @param {date} [request.details.startTime] Start time
   *
   * @param {date} [request.details.endTime] End time to delete until
   *
   * @param {object} [request.header] Optional request header
   *
   * @param {object} [request.header.elevation] Optional User elevation
   *
   * @param {string} [request.header.elevation.type] Type of credential. Possible
   * values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [request.header.elevation.value] Value to pass to server
   *
   * @param {array} [request.header.locales] Optional list of locales in
   * preference order.
   *
   * @param {object} [request.header.diagnostics] Optional diagnostics
   * configuration
   *
   * @param {string} [request.header.diagnostics.level] Requested level of
   * response diagnostics.
   * (default: Status). Possible values include: 'None', 'Status', 'Operations',
   * 'Diagnostics', 'Verbose'
   *
   * @param {string} [request.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [request.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {HistoryUpdateResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {HistoryUpdateResponseApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link HistoryUpdateResponseApiModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  historyDeleteValues(endpointId: string, request: models.HistoryUpdateRequestApiModelDeleteValuesDetailsApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HistoryUpdateResponseApiModel>;
  historyDeleteValues(endpointId: string, request: models.HistoryUpdateRequestApiModelDeleteValuesDetailsApiModel, callback: ServiceCallback<models.HistoryUpdateResponseApiModel>): void;
  historyDeleteValues(endpointId: string, request: models.HistoryUpdateRequestApiModelDeleteValuesDetailsApiModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HistoryUpdateResponseApiModel>): void;


  /**
   * @summary Delete historic values
   *
   * Delete historic values using historic access.
   * The endpoint must be activated and connected and the module client
   * and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} request The history update request
   *
   * @param {string} [request.nodeId] Node to update
   *
   * @param {array} [request.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} request.details The HistoryUpdateDetailsType extension
   * object
   * encoded as json Variant and containing the tunneled
   * update request for the Historian server. The value
   * is updated at edge using above node address.
   *
   * @param {date} [request.details.startTime] Start time
   *
   * @param {date} [request.details.endTime] End time to delete until
   *
   * @param {object} [request.header] Optional request header
   *
   * @param {object} [request.header.elevation] Optional User elevation
   *
   * @param {string} [request.header.elevation.type] Type of credential. Possible
   * values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [request.header.elevation.value] Value to pass to server
   *
   * @param {array} [request.header.locales] Optional list of locales in
   * preference order.
   *
   * @param {object} [request.header.diagnostics] Optional diagnostics
   * configuration
   *
   * @param {string} [request.header.diagnostics.level] Requested level of
   * response diagnostics.
   * (default: Status). Possible values include: 'None', 'Status', 'Operations',
   * 'Diagnostics', 'Verbose'
   *
   * @param {string} [request.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [request.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<HistoryUpdateResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  historyDeleteModifiedValuesWithHttpOperationResponse(endpointId: string, request: models.HistoryUpdateRequestApiModelDeleteModifiedValuesDetailsApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HistoryUpdateResponseApiModel>>;

  /**
   * @summary Delete historic values
   *
   * Delete historic values using historic access.
   * The endpoint must be activated and connected and the module client
   * and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} request The history update request
   *
   * @param {string} [request.nodeId] Node to update
   *
   * @param {array} [request.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} request.details The HistoryUpdateDetailsType extension
   * object
   * encoded as json Variant and containing the tunneled
   * update request for the Historian server. The value
   * is updated at edge using above node address.
   *
   * @param {date} [request.details.startTime] Start time
   *
   * @param {date} [request.details.endTime] End time to delete until
   *
   * @param {object} [request.header] Optional request header
   *
   * @param {object} [request.header.elevation] Optional User elevation
   *
   * @param {string} [request.header.elevation.type] Type of credential. Possible
   * values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [request.header.elevation.value] Value to pass to server
   *
   * @param {array} [request.header.locales] Optional list of locales in
   * preference order.
   *
   * @param {object} [request.header.diagnostics] Optional diagnostics
   * configuration
   *
   * @param {string} [request.header.diagnostics.level] Requested level of
   * response diagnostics.
   * (default: Status). Possible values include: 'None', 'Status', 'Operations',
   * 'Diagnostics', 'Verbose'
   *
   * @param {string} [request.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [request.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {HistoryUpdateResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {HistoryUpdateResponseApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link HistoryUpdateResponseApiModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  historyDeleteModifiedValues(endpointId: string, request: models.HistoryUpdateRequestApiModelDeleteModifiedValuesDetailsApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HistoryUpdateResponseApiModel>;
  historyDeleteModifiedValues(endpointId: string, request: models.HistoryUpdateRequestApiModelDeleteModifiedValuesDetailsApiModel, callback: ServiceCallback<models.HistoryUpdateResponseApiModel>): void;
  historyDeleteModifiedValues(endpointId: string, request: models.HistoryUpdateRequestApiModelDeleteModifiedValuesDetailsApiModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HistoryUpdateResponseApiModel>): void;


  /**
   * @summary Delete historic events
   *
   * Delete historic events using historic access.
   * The endpoint must be activated and connected and the module client
   * and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} request The history update request
   *
   * @param {string} [request.nodeId] Node to update
   *
   * @param {array} [request.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} request.details The HistoryUpdateDetailsType extension
   * object
   * encoded as json Variant and containing the tunneled
   * update request for the Historian server. The value
   * is updated at edge using above node address.
   *
   * @param {array} request.details.eventIds Events to delete
   *
   * @param {object} [request.header] Optional request header
   *
   * @param {object} [request.header.elevation] Optional User elevation
   *
   * @param {string} [request.header.elevation.type] Type of credential. Possible
   * values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [request.header.elevation.value] Value to pass to server
   *
   * @param {array} [request.header.locales] Optional list of locales in
   * preference order.
   *
   * @param {object} [request.header.diagnostics] Optional diagnostics
   * configuration
   *
   * @param {string} [request.header.diagnostics.level] Requested level of
   * response diagnostics.
   * (default: Status). Possible values include: 'None', 'Status', 'Operations',
   * 'Diagnostics', 'Verbose'
   *
   * @param {string} [request.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [request.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<HistoryUpdateResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  historyDeleteEventsWithHttpOperationResponse(endpointId: string, request: models.HistoryUpdateRequestApiModelDeleteEventsDetailsApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HistoryUpdateResponseApiModel>>;

  /**
   * @summary Delete historic events
   *
   * Delete historic events using historic access.
   * The endpoint must be activated and connected and the module client
   * and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} request The history update request
   *
   * @param {string} [request.nodeId] Node to update
   *
   * @param {array} [request.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} request.details The HistoryUpdateDetailsType extension
   * object
   * encoded as json Variant and containing the tunneled
   * update request for the Historian server. The value
   * is updated at edge using above node address.
   *
   * @param {array} request.details.eventIds Events to delete
   *
   * @param {object} [request.header] Optional request header
   *
   * @param {object} [request.header.elevation] Optional User elevation
   *
   * @param {string} [request.header.elevation.type] Type of credential. Possible
   * values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [request.header.elevation.value] Value to pass to server
   *
   * @param {array} [request.header.locales] Optional list of locales in
   * preference order.
   *
   * @param {object} [request.header.diagnostics] Optional diagnostics
   * configuration
   *
   * @param {string} [request.header.diagnostics.level] Requested level of
   * response diagnostics.
   * (default: Status). Possible values include: 'None', 'Status', 'Operations',
   * 'Diagnostics', 'Verbose'
   *
   * @param {string} [request.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [request.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {HistoryUpdateResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {HistoryUpdateResponseApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link HistoryUpdateResponseApiModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  historyDeleteEvents(endpointId: string, request: models.HistoryUpdateRequestApiModelDeleteEventsDetailsApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HistoryUpdateResponseApiModel>;
  historyDeleteEvents(endpointId: string, request: models.HistoryUpdateRequestApiModelDeleteEventsDetailsApiModel, callback: ServiceCallback<models.HistoryUpdateResponseApiModel>): void;
  historyDeleteEvents(endpointId: string, request: models.HistoryUpdateRequestApiModelDeleteEventsDetailsApiModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HistoryUpdateResponseApiModel>): void;


  /**
   * @summary Read history using json details
   *
   * Read node history if available using historic access.
   * The endpoint must be activated and connected and the module client
   * and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} request The history read request
   *
   * @param {string} [request.nodeId] Node to read from (mandatory)
   *
   * @param {array} [request.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} [request.details] The HistoryReadDetailsType extension
   * object
   * encoded in json and containing the tunneled
   * Historian reader request.
   *
   * @param {string} [request.indexRange] Index range to read, e.g. 1:2,0:1 for 2
   * slices
   * out of a matrix or 0:1 for the first item in
   * an array, string or bytestring.
   * See 7.22 of part 4: NumericRange.
   *
   * @param {object} [request.header] Optional request header
   *
   * @param {object} [request.header.elevation] Optional User elevation
   *
   * @param {string} [request.header.elevation.type] Type of credential. Possible
   * values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [request.header.elevation.value] Value to pass to server
   *
   * @param {array} [request.header.locales] Optional list of locales in
   * preference order.
   *
   * @param {object} [request.header.diagnostics] Optional diagnostics
   * configuration
   *
   * @param {string} [request.header.diagnostics.level] Requested level of
   * response diagnostics.
   * (default: Status). Possible values include: 'None', 'Status', 'Operations',
   * 'Diagnostics', 'Verbose'
   *
   * @param {string} [request.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [request.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<HistoryReadResponseApiModelJToken>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  historyReadRawWithHttpOperationResponse(endpointId: string, request: models.HistoryReadRequestApiModelJToken, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HistoryReadResponseApiModelJToken>>;

  /**
   * @summary Read history using json details
   *
   * Read node history if available using historic access.
   * The endpoint must be activated and connected and the module client
   * and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} request The history read request
   *
   * @param {string} [request.nodeId] Node to read from (mandatory)
   *
   * @param {array} [request.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} [request.details] The HistoryReadDetailsType extension
   * object
   * encoded in json and containing the tunneled
   * Historian reader request.
   *
   * @param {string} [request.indexRange] Index range to read, e.g. 1:2,0:1 for 2
   * slices
   * out of a matrix or 0:1 for the first item in
   * an array, string or bytestring.
   * See 7.22 of part 4: NumericRange.
   *
   * @param {object} [request.header] Optional request header
   *
   * @param {object} [request.header.elevation] Optional User elevation
   *
   * @param {string} [request.header.elevation.type] Type of credential. Possible
   * values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [request.header.elevation.value] Value to pass to server
   *
   * @param {array} [request.header.locales] Optional list of locales in
   * preference order.
   *
   * @param {object} [request.header.diagnostics] Optional diagnostics
   * configuration
   *
   * @param {string} [request.header.diagnostics.level] Requested level of
   * response diagnostics.
   * (default: Status). Possible values include: 'None', 'Status', 'Operations',
   * 'Diagnostics', 'Verbose'
   *
   * @param {string} [request.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [request.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {HistoryReadResponseApiModelJToken} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {HistoryReadResponseApiModelJToken} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link HistoryReadResponseApiModelJToken} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  historyReadRaw(endpointId: string, request: models.HistoryReadRequestApiModelJToken, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HistoryReadResponseApiModelJToken>;
  historyReadRaw(endpointId: string, request: models.HistoryReadRequestApiModelJToken, callback: ServiceCallback<models.HistoryReadResponseApiModelJToken>): void;
  historyReadRaw(endpointId: string, request: models.HistoryReadRequestApiModelJToken, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HistoryReadResponseApiModelJToken>): void;


  /**
   * @summary Read next batch of history as json
   *
   * Read next batch of node history values using historic access.
   * The endpoint must be activated and connected and the module client
   * and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} request The history read next request
   *
   * @param {string} request.continuationToken Continuation token to continue
   * reading more
   * results.
   *
   * @param {boolean} [request.abort] Abort reading after this read
   *
   * @param {object} [request.header] Optional request header
   *
   * @param {object} [request.header.elevation] Optional User elevation
   *
   * @param {string} [request.header.elevation.type] Type of credential. Possible
   * values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [request.header.elevation.value] Value to pass to server
   *
   * @param {array} [request.header.locales] Optional list of locales in
   * preference order.
   *
   * @param {object} [request.header.diagnostics] Optional diagnostics
   * configuration
   *
   * @param {string} [request.header.diagnostics.level] Requested level of
   * response diagnostics.
   * (default: Status). Possible values include: 'None', 'Status', 'Operations',
   * 'Diagnostics', 'Verbose'
   *
   * @param {string} [request.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [request.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<HistoryReadNextResponseApiModelJToken>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  historyReadRawNextWithHttpOperationResponse(endpointId: string, request: models.HistoryReadNextRequestApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HistoryReadNextResponseApiModelJToken>>;

  /**
   * @summary Read next batch of history as json
   *
   * Read next batch of node history values using historic access.
   * The endpoint must be activated and connected and the module client
   * and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} request The history read next request
   *
   * @param {string} request.continuationToken Continuation token to continue
   * reading more
   * results.
   *
   * @param {boolean} [request.abort] Abort reading after this read
   *
   * @param {object} [request.header] Optional request header
   *
   * @param {object} [request.header.elevation] Optional User elevation
   *
   * @param {string} [request.header.elevation.type] Type of credential. Possible
   * values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [request.header.elevation.value] Value to pass to server
   *
   * @param {array} [request.header.locales] Optional list of locales in
   * preference order.
   *
   * @param {object} [request.header.diagnostics] Optional diagnostics
   * configuration
   *
   * @param {string} [request.header.diagnostics.level] Requested level of
   * response diagnostics.
   * (default: Status). Possible values include: 'None', 'Status', 'Operations',
   * 'Diagnostics', 'Verbose'
   *
   * @param {string} [request.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [request.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {HistoryReadNextResponseApiModelJToken} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {HistoryReadNextResponseApiModelJToken} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link HistoryReadNextResponseApiModelJToken} for
   *                      more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  historyReadRawNext(endpointId: string, request: models.HistoryReadNextRequestApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HistoryReadNextResponseApiModelJToken>;
  historyReadRawNext(endpointId: string, request: models.HistoryReadNextRequestApiModel, callback: ServiceCallback<models.HistoryReadNextResponseApiModelJToken>): void;
  historyReadRawNext(endpointId: string, request: models.HistoryReadNextRequestApiModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HistoryReadNextResponseApiModelJToken>): void;


  /**
   * @summary Update node history using raw json
   *
   * Update node history using historic access.
   * The endpoint must be activated and connected and the module client
   * and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} request The history update request
   *
   * @param {string} [request.nodeId] Node to update
   *
   * @param {array} [request.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} request.details The HistoryUpdateDetailsType extension
   * object
   * encoded as json Variant and containing the tunneled
   * update request for the Historian server. The value
   * is updated at edge using above node address.
   *
   * @param {object} [request.header] Optional request header
   *
   * @param {object} [request.header.elevation] Optional User elevation
   *
   * @param {string} [request.header.elevation.type] Type of credential. Possible
   * values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [request.header.elevation.value] Value to pass to server
   *
   * @param {array} [request.header.locales] Optional list of locales in
   * preference order.
   *
   * @param {object} [request.header.diagnostics] Optional diagnostics
   * configuration
   *
   * @param {string} [request.header.diagnostics.level] Requested level of
   * response diagnostics.
   * (default: Status). Possible values include: 'None', 'Status', 'Operations',
   * 'Diagnostics', 'Verbose'
   *
   * @param {string} [request.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [request.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<HistoryUpdateResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  historyUpdateRawWithHttpOperationResponse(endpointId: string, request: models.HistoryUpdateRequestApiModelJToken, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HistoryUpdateResponseApiModel>>;

  /**
   * @summary Update node history using raw json
   *
   * Update node history using historic access.
   * The endpoint must be activated and connected and the module client
   * and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} request The history update request
   *
   * @param {string} [request.nodeId] Node to update
   *
   * @param {array} [request.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} request.details The HistoryUpdateDetailsType extension
   * object
   * encoded as json Variant and containing the tunneled
   * update request for the Historian server. The value
   * is updated at edge using above node address.
   *
   * @param {object} [request.header] Optional request header
   *
   * @param {object} [request.header.elevation] Optional User elevation
   *
   * @param {string} [request.header.elevation.type] Type of credential. Possible
   * values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [request.header.elevation.value] Value to pass to server
   *
   * @param {array} [request.header.locales] Optional list of locales in
   * preference order.
   *
   * @param {object} [request.header.diagnostics] Optional diagnostics
   * configuration
   *
   * @param {string} [request.header.diagnostics.level] Requested level of
   * response diagnostics.
   * (default: Status). Possible values include: 'None', 'Status', 'Operations',
   * 'Diagnostics', 'Verbose'
   *
   * @param {string} [request.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [request.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {HistoryUpdateResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {HistoryUpdateResponseApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link HistoryUpdateResponseApiModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  historyUpdateRaw(endpointId: string, request: models.HistoryUpdateRequestApiModelJToken, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HistoryUpdateResponseApiModel>;
  historyUpdateRaw(endpointId: string, request: models.HistoryUpdateRequestApiModelJToken, callback: ServiceCallback<models.HistoryUpdateResponseApiModel>): void;
  historyUpdateRaw(endpointId: string, request: models.HistoryUpdateRequestApiModelJToken, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HistoryUpdateResponseApiModel>): void;


  /**
   * @summary Insert historic values
   *
   * Insert historic values using historic access.
   * The endpoint must be activated and connected and the module client
   * and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} request The history insert request
   *
   * @param {string} [request.nodeId] Node to update
   *
   * @param {array} [request.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} request.details The HistoryUpdateDetailsType extension
   * object
   * encoded as json Variant and containing the tunneled
   * update request for the Historian server. The value
   * is updated at edge using above node address.
   *
   * @param {array} request.details.values Values to insert
   *
   * @param {object} [request.header] Optional request header
   *
   * @param {object} [request.header.elevation] Optional User elevation
   *
   * @param {string} [request.header.elevation.type] Type of credential. Possible
   * values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [request.header.elevation.value] Value to pass to server
   *
   * @param {array} [request.header.locales] Optional list of locales in
   * preference order.
   *
   * @param {object} [request.header.diagnostics] Optional diagnostics
   * configuration
   *
   * @param {string} [request.header.diagnostics.level] Requested level of
   * response diagnostics.
   * (default: Status). Possible values include: 'None', 'Status', 'Operations',
   * 'Diagnostics', 'Verbose'
   *
   * @param {string} [request.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [request.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<HistoryUpdateResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  historyInsertValuesWithHttpOperationResponse(endpointId: string, request: models.HistoryUpdateRequestApiModelInsertValuesDetailsApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HistoryUpdateResponseApiModel>>;

  /**
   * @summary Insert historic values
   *
   * Insert historic values using historic access.
   * The endpoint must be activated and connected and the module client
   * and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} request The history insert request
   *
   * @param {string} [request.nodeId] Node to update
   *
   * @param {array} [request.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} request.details The HistoryUpdateDetailsType extension
   * object
   * encoded as json Variant and containing the tunneled
   * update request for the Historian server. The value
   * is updated at edge using above node address.
   *
   * @param {array} request.details.values Values to insert
   *
   * @param {object} [request.header] Optional request header
   *
   * @param {object} [request.header.elevation] Optional User elevation
   *
   * @param {string} [request.header.elevation.type] Type of credential. Possible
   * values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [request.header.elevation.value] Value to pass to server
   *
   * @param {array} [request.header.locales] Optional list of locales in
   * preference order.
   *
   * @param {object} [request.header.diagnostics] Optional diagnostics
   * configuration
   *
   * @param {string} [request.header.diagnostics.level] Requested level of
   * response diagnostics.
   * (default: Status). Possible values include: 'None', 'Status', 'Operations',
   * 'Diagnostics', 'Verbose'
   *
   * @param {string} [request.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [request.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {HistoryUpdateResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {HistoryUpdateResponseApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link HistoryUpdateResponseApiModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  historyInsertValues(endpointId: string, request: models.HistoryUpdateRequestApiModelInsertValuesDetailsApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HistoryUpdateResponseApiModel>;
  historyInsertValues(endpointId: string, request: models.HistoryUpdateRequestApiModelInsertValuesDetailsApiModel, callback: ServiceCallback<models.HistoryUpdateResponseApiModel>): void;
  historyInsertValues(endpointId: string, request: models.HistoryUpdateRequestApiModelInsertValuesDetailsApiModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HistoryUpdateResponseApiModel>): void;


  /**
   * @summary Insert historic events
   *
   * Insert historic events using historic access.
   * The endpoint must be activated and connected and the module client
   * and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} request The history insert request
   *
   * @param {string} [request.nodeId] Node to update
   *
   * @param {array} [request.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} request.details The HistoryUpdateDetailsType extension
   * object
   * encoded as json Variant and containing the tunneled
   * update request for the Historian server. The value
   * is updated at edge using above node address.
   *
   * @param {object} [request.details.filter] The filter to use to select the
   * events
   *
   * @param {array} request.details.events The new events to insert
   *
   * @param {object} [request.header] Optional request header
   *
   * @param {object} [request.header.elevation] Optional User elevation
   *
   * @param {string} [request.header.elevation.type] Type of credential. Possible
   * values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [request.header.elevation.value] Value to pass to server
   *
   * @param {array} [request.header.locales] Optional list of locales in
   * preference order.
   *
   * @param {object} [request.header.diagnostics] Optional diagnostics
   * configuration
   *
   * @param {string} [request.header.diagnostics.level] Requested level of
   * response diagnostics.
   * (default: Status). Possible values include: 'None', 'Status', 'Operations',
   * 'Diagnostics', 'Verbose'
   *
   * @param {string} [request.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [request.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<HistoryUpdateResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  historyInsertEventsWithHttpOperationResponse(endpointId: string, request: models.HistoryUpdateRequestApiModelInsertEventsDetailsApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HistoryUpdateResponseApiModel>>;

  /**
   * @summary Insert historic events
   *
   * Insert historic events using historic access.
   * The endpoint must be activated and connected and the module client
   * and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} request The history insert request
   *
   * @param {string} [request.nodeId] Node to update
   *
   * @param {array} [request.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} request.details The HistoryUpdateDetailsType extension
   * object
   * encoded as json Variant and containing the tunneled
   * update request for the Historian server. The value
   * is updated at edge using above node address.
   *
   * @param {object} [request.details.filter] The filter to use to select the
   * events
   *
   * @param {array} request.details.events The new events to insert
   *
   * @param {object} [request.header] Optional request header
   *
   * @param {object} [request.header.elevation] Optional User elevation
   *
   * @param {string} [request.header.elevation.type] Type of credential. Possible
   * values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [request.header.elevation.value] Value to pass to server
   *
   * @param {array} [request.header.locales] Optional list of locales in
   * preference order.
   *
   * @param {object} [request.header.diagnostics] Optional diagnostics
   * configuration
   *
   * @param {string} [request.header.diagnostics.level] Requested level of
   * response diagnostics.
   * (default: Status). Possible values include: 'None', 'Status', 'Operations',
   * 'Diagnostics', 'Verbose'
   *
   * @param {string} [request.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [request.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {HistoryUpdateResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {HistoryUpdateResponseApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link HistoryUpdateResponseApiModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  historyInsertEvents(endpointId: string, request: models.HistoryUpdateRequestApiModelInsertEventsDetailsApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HistoryUpdateResponseApiModel>;
  historyInsertEvents(endpointId: string, request: models.HistoryUpdateRequestApiModelInsertEventsDetailsApiModel, callback: ServiceCallback<models.HistoryUpdateResponseApiModel>): void;
  historyInsertEvents(endpointId: string, request: models.HistoryUpdateRequestApiModelInsertEventsDetailsApiModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HistoryUpdateResponseApiModel>): void;


  /**
   * @summary Read historic events
   *
   * Read historic events of a node if available using historic access.
   * The endpoint must be activated and connected and the module client
   * and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} request The history read request
   *
   * @param {string} [request.nodeId] Node to read from (mandatory)
   *
   * @param {array} [request.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} [request.details] The HistoryReadDetailsType extension
   * object
   * encoded in json and containing the tunneled
   * Historian reader request.
   *
   * @param {date} [request.details.startTime] Start time to read from
   *
   * @param {date} [request.details.endTime] End time to read to
   *
   * @param {number} [request.details.numEvents] Number of events to read
   *
   * @param {object} [request.details.filter] The filter to use to select the
   * event fields
   *
   * @param {string} [request.indexRange] Index range to read, e.g. 1:2,0:1 for 2
   * slices
   * out of a matrix or 0:1 for the first item in
   * an array, string or bytestring.
   * See 7.22 of part 4: NumericRange.
   *
   * @param {object} [request.header] Optional request header
   *
   * @param {object} [request.header.elevation] Optional User elevation
   *
   * @param {string} [request.header.elevation.type] Type of credential. Possible
   * values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [request.header.elevation.value] Value to pass to server
   *
   * @param {array} [request.header.locales] Optional list of locales in
   * preference order.
   *
   * @param {object} [request.header.diagnostics] Optional diagnostics
   * configuration
   *
   * @param {string} [request.header.diagnostics.level] Requested level of
   * response diagnostics.
   * (default: Status). Possible values include: 'None', 'Status', 'Operations',
   * 'Diagnostics', 'Verbose'
   *
   * @param {string} [request.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [request.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<HistoryReadResponseApiModelHistoricEventApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  historyReadEventsWithHttpOperationResponse(endpointId: string, request: models.HistoryReadRequestApiModelReadEventsDetailsApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HistoryReadResponseApiModelHistoricEventApiModel>>;

  /**
   * @summary Read historic events
   *
   * Read historic events of a node if available using historic access.
   * The endpoint must be activated and connected and the module client
   * and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} request The history read request
   *
   * @param {string} [request.nodeId] Node to read from (mandatory)
   *
   * @param {array} [request.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} [request.details] The HistoryReadDetailsType extension
   * object
   * encoded in json and containing the tunneled
   * Historian reader request.
   *
   * @param {date} [request.details.startTime] Start time to read from
   *
   * @param {date} [request.details.endTime] End time to read to
   *
   * @param {number} [request.details.numEvents] Number of events to read
   *
   * @param {object} [request.details.filter] The filter to use to select the
   * event fields
   *
   * @param {string} [request.indexRange] Index range to read, e.g. 1:2,0:1 for 2
   * slices
   * out of a matrix or 0:1 for the first item in
   * an array, string or bytestring.
   * See 7.22 of part 4: NumericRange.
   *
   * @param {object} [request.header] Optional request header
   *
   * @param {object} [request.header.elevation] Optional User elevation
   *
   * @param {string} [request.header.elevation.type] Type of credential. Possible
   * values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [request.header.elevation.value] Value to pass to server
   *
   * @param {array} [request.header.locales] Optional list of locales in
   * preference order.
   *
   * @param {object} [request.header.diagnostics] Optional diagnostics
   * configuration
   *
   * @param {string} [request.header.diagnostics.level] Requested level of
   * response diagnostics.
   * (default: Status). Possible values include: 'None', 'Status', 'Operations',
   * 'Diagnostics', 'Verbose'
   *
   * @param {string} [request.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [request.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {HistoryReadResponseApiModelHistoricEventApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {HistoryReadResponseApiModelHistoricEventApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link
   *                      HistoryReadResponseApiModelHistoricEventApiModel} for
   *                      more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  historyReadEvents(endpointId: string, request: models.HistoryReadRequestApiModelReadEventsDetailsApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HistoryReadResponseApiModelHistoricEventApiModel>;
  historyReadEvents(endpointId: string, request: models.HistoryReadRequestApiModelReadEventsDetailsApiModel, callback: ServiceCallback<models.HistoryReadResponseApiModelHistoricEventApiModel>): void;
  historyReadEvents(endpointId: string, request: models.HistoryReadRequestApiModelReadEventsDetailsApiModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HistoryReadResponseApiModelHistoricEventApiModel>): void;


  /**
   * @summary Read next batch of historic events
   *
   * Read next batch of historic events of a node using historic access.
   * The endpoint must be activated and connected and the module client
   * and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} request The history read next request
   *
   * @param {string} request.continuationToken Continuation token to continue
   * reading more
   * results.
   *
   * @param {boolean} [request.abort] Abort reading after this read
   *
   * @param {object} [request.header] Optional request header
   *
   * @param {object} [request.header.elevation] Optional User elevation
   *
   * @param {string} [request.header.elevation.type] Type of credential. Possible
   * values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [request.header.elevation.value] Value to pass to server
   *
   * @param {array} [request.header.locales] Optional list of locales in
   * preference order.
   *
   * @param {object} [request.header.diagnostics] Optional diagnostics
   * configuration
   *
   * @param {string} [request.header.diagnostics.level] Requested level of
   * response diagnostics.
   * (default: Status). Possible values include: 'None', 'Status', 'Operations',
   * 'Diagnostics', 'Verbose'
   *
   * @param {string} [request.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [request.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<HistoryReadNextResponseApiModelHistoricEventApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  historyReadEventsNextWithHttpOperationResponse(endpointId: string, request: models.HistoryReadNextRequestApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HistoryReadNextResponseApiModelHistoricEventApiModel>>;

  /**
   * @summary Read next batch of historic events
   *
   * Read next batch of historic events of a node using historic access.
   * The endpoint must be activated and connected and the module client
   * and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} request The history read next request
   *
   * @param {string} request.continuationToken Continuation token to continue
   * reading more
   * results.
   *
   * @param {boolean} [request.abort] Abort reading after this read
   *
   * @param {object} [request.header] Optional request header
   *
   * @param {object} [request.header.elevation] Optional User elevation
   *
   * @param {string} [request.header.elevation.type] Type of credential. Possible
   * values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [request.header.elevation.value] Value to pass to server
   *
   * @param {array} [request.header.locales] Optional list of locales in
   * preference order.
   *
   * @param {object} [request.header.diagnostics] Optional diagnostics
   * configuration
   *
   * @param {string} [request.header.diagnostics.level] Requested level of
   * response diagnostics.
   * (default: Status). Possible values include: 'None', 'Status', 'Operations',
   * 'Diagnostics', 'Verbose'
   *
   * @param {string} [request.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [request.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {HistoryReadNextResponseApiModelHistoricEventApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {HistoryReadNextResponseApiModelHistoricEventApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link
   *                      HistoryReadNextResponseApiModelHistoricEventApiModel}
   *                      for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  historyReadEventsNext(endpointId: string, request: models.HistoryReadNextRequestApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HistoryReadNextResponseApiModelHistoricEventApiModel>;
  historyReadEventsNext(endpointId: string, request: models.HistoryReadNextRequestApiModel, callback: ServiceCallback<models.HistoryReadNextResponseApiModelHistoricEventApiModel>): void;
  historyReadEventsNext(endpointId: string, request: models.HistoryReadNextRequestApiModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HistoryReadNextResponseApiModelHistoricEventApiModel>): void;


  /**
   * @summary Read historic processed values at specified times
   *
   * Read processed history values of a node if available using historic access.
   * The endpoint must be activated and connected and the module client
   * and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} request The history read request
   *
   * @param {string} [request.nodeId] Node to read from (mandatory)
   *
   * @param {array} [request.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} [request.details] The HistoryReadDetailsType extension
   * object
   * encoded in json and containing the tunneled
   * Historian reader request.
   *
   * @param {date} [request.details.startTime] Beginning of period to read. Set
   * to null
   * if no specific start time is specified.
   *
   * @param {date} [request.details.endTime] End of period to read. Set to null
   * if no
   * specific end time is specified.
   *
   * @param {number} [request.details.numValues] The maximum number of values
   * returned for any Node
   * over the time range. If only one time is specified,
   * the time range shall extend to return this number
   * of values. 0 or null indicates that there is no
   * maximum.
   *
   * @param {boolean} [request.details.returnBounds] Whether to return the
   * bounding values or not.
   *
   * @param {string} [request.indexRange] Index range to read, e.g. 1:2,0:1 for 2
   * slices
   * out of a matrix or 0:1 for the first item in
   * an array, string or bytestring.
   * See 7.22 of part 4: NumericRange.
   *
   * @param {object} [request.header] Optional request header
   *
   * @param {object} [request.header.elevation] Optional User elevation
   *
   * @param {string} [request.header.elevation.type] Type of credential. Possible
   * values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [request.header.elevation.value] Value to pass to server
   *
   * @param {array} [request.header.locales] Optional list of locales in
   * preference order.
   *
   * @param {object} [request.header.diagnostics] Optional diagnostics
   * configuration
   *
   * @param {string} [request.header.diagnostics.level] Requested level of
   * response diagnostics.
   * (default: Status). Possible values include: 'None', 'Status', 'Operations',
   * 'Diagnostics', 'Verbose'
   *
   * @param {string} [request.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [request.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<HistoryReadResponseApiModelHistoricValueApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  historyReadValuesWithHttpOperationResponse(endpointId: string, request: models.HistoryReadRequestApiModelReadValuesDetailsApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HistoryReadResponseApiModelHistoricValueApiModel>>;

  /**
   * @summary Read historic processed values at specified times
   *
   * Read processed history values of a node if available using historic access.
   * The endpoint must be activated and connected and the module client
   * and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} request The history read request
   *
   * @param {string} [request.nodeId] Node to read from (mandatory)
   *
   * @param {array} [request.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} [request.details] The HistoryReadDetailsType extension
   * object
   * encoded in json and containing the tunneled
   * Historian reader request.
   *
   * @param {date} [request.details.startTime] Beginning of period to read. Set
   * to null
   * if no specific start time is specified.
   *
   * @param {date} [request.details.endTime] End of period to read. Set to null
   * if no
   * specific end time is specified.
   *
   * @param {number} [request.details.numValues] The maximum number of values
   * returned for any Node
   * over the time range. If only one time is specified,
   * the time range shall extend to return this number
   * of values. 0 or null indicates that there is no
   * maximum.
   *
   * @param {boolean} [request.details.returnBounds] Whether to return the
   * bounding values or not.
   *
   * @param {string} [request.indexRange] Index range to read, e.g. 1:2,0:1 for 2
   * slices
   * out of a matrix or 0:1 for the first item in
   * an array, string or bytestring.
   * See 7.22 of part 4: NumericRange.
   *
   * @param {object} [request.header] Optional request header
   *
   * @param {object} [request.header.elevation] Optional User elevation
   *
   * @param {string} [request.header.elevation.type] Type of credential. Possible
   * values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [request.header.elevation.value] Value to pass to server
   *
   * @param {array} [request.header.locales] Optional list of locales in
   * preference order.
   *
   * @param {object} [request.header.diagnostics] Optional diagnostics
   * configuration
   *
   * @param {string} [request.header.diagnostics.level] Requested level of
   * response diagnostics.
   * (default: Status). Possible values include: 'None', 'Status', 'Operations',
   * 'Diagnostics', 'Verbose'
   *
   * @param {string} [request.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [request.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {HistoryReadResponseApiModelHistoricValueApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {HistoryReadResponseApiModelHistoricValueApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link
   *                      HistoryReadResponseApiModelHistoricValueApiModel} for
   *                      more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  historyReadValues(endpointId: string, request: models.HistoryReadRequestApiModelReadValuesDetailsApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HistoryReadResponseApiModelHistoricValueApiModel>;
  historyReadValues(endpointId: string, request: models.HistoryReadRequestApiModelReadValuesDetailsApiModel, callback: ServiceCallback<models.HistoryReadResponseApiModelHistoricValueApiModel>): void;
  historyReadValues(endpointId: string, request: models.HistoryReadRequestApiModelReadValuesDetailsApiModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HistoryReadResponseApiModelHistoricValueApiModel>): void;


  /**
   * @summary Read historic values at specified times
   *
   * Read historic values of a node if available using historic access.
   * The endpoint must be activated and connected and the module client
   * and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} request The history read request
   *
   * @param {string} [request.nodeId] Node to read from (mandatory)
   *
   * @param {array} [request.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} [request.details] The HistoryReadDetailsType extension
   * object
   * encoded in json and containing the tunneled
   * Historian reader request.
   *
   * @param {array} request.details.reqTimes Requested datums
   *
   * @param {boolean} [request.details.useSimpleBounds] Whether to use simple
   * bounds
   *
   * @param {string} [request.indexRange] Index range to read, e.g. 1:2,0:1 for 2
   * slices
   * out of a matrix or 0:1 for the first item in
   * an array, string or bytestring.
   * See 7.22 of part 4: NumericRange.
   *
   * @param {object} [request.header] Optional request header
   *
   * @param {object} [request.header.elevation] Optional User elevation
   *
   * @param {string} [request.header.elevation.type] Type of credential. Possible
   * values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [request.header.elevation.value] Value to pass to server
   *
   * @param {array} [request.header.locales] Optional list of locales in
   * preference order.
   *
   * @param {object} [request.header.diagnostics] Optional diagnostics
   * configuration
   *
   * @param {string} [request.header.diagnostics.level] Requested level of
   * response diagnostics.
   * (default: Status). Possible values include: 'None', 'Status', 'Operations',
   * 'Diagnostics', 'Verbose'
   *
   * @param {string} [request.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [request.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<HistoryReadResponseApiModelHistoricValueApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  historyReadValuesAtTimesWithHttpOperationResponse(endpointId: string, request: models.HistoryReadRequestApiModelReadValuesAtTimesDetailsApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HistoryReadResponseApiModelHistoricValueApiModel>>;

  /**
   * @summary Read historic values at specified times
   *
   * Read historic values of a node if available using historic access.
   * The endpoint must be activated and connected and the module client
   * and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} request The history read request
   *
   * @param {string} [request.nodeId] Node to read from (mandatory)
   *
   * @param {array} [request.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} [request.details] The HistoryReadDetailsType extension
   * object
   * encoded in json and containing the tunneled
   * Historian reader request.
   *
   * @param {array} request.details.reqTimes Requested datums
   *
   * @param {boolean} [request.details.useSimpleBounds] Whether to use simple
   * bounds
   *
   * @param {string} [request.indexRange] Index range to read, e.g. 1:2,0:1 for 2
   * slices
   * out of a matrix or 0:1 for the first item in
   * an array, string or bytestring.
   * See 7.22 of part 4: NumericRange.
   *
   * @param {object} [request.header] Optional request header
   *
   * @param {object} [request.header.elevation] Optional User elevation
   *
   * @param {string} [request.header.elevation.type] Type of credential. Possible
   * values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [request.header.elevation.value] Value to pass to server
   *
   * @param {array} [request.header.locales] Optional list of locales in
   * preference order.
   *
   * @param {object} [request.header.diagnostics] Optional diagnostics
   * configuration
   *
   * @param {string} [request.header.diagnostics.level] Requested level of
   * response diagnostics.
   * (default: Status). Possible values include: 'None', 'Status', 'Operations',
   * 'Diagnostics', 'Verbose'
   *
   * @param {string} [request.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [request.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {HistoryReadResponseApiModelHistoricValueApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {HistoryReadResponseApiModelHistoricValueApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link
   *                      HistoryReadResponseApiModelHistoricValueApiModel} for
   *                      more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  historyReadValuesAtTimes(endpointId: string, request: models.HistoryReadRequestApiModelReadValuesAtTimesDetailsApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HistoryReadResponseApiModelHistoricValueApiModel>;
  historyReadValuesAtTimes(endpointId: string, request: models.HistoryReadRequestApiModelReadValuesAtTimesDetailsApiModel, callback: ServiceCallback<models.HistoryReadResponseApiModelHistoricValueApiModel>): void;
  historyReadValuesAtTimes(endpointId: string, request: models.HistoryReadRequestApiModelReadValuesAtTimesDetailsApiModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HistoryReadResponseApiModelHistoricValueApiModel>): void;


  /**
   * @summary Read historic processed values at specified times
   *
   * Read processed history values of a node if available using historic access.
   * The endpoint must be activated and connected and the module client
   * and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} request The history read request
   *
   * @param {string} [request.nodeId] Node to read from (mandatory)
   *
   * @param {array} [request.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} [request.details] The HistoryReadDetailsType extension
   * object
   * encoded in json and containing the tunneled
   * Historian reader request.
   *
   * @param {date} [request.details.startTime] Start time to read from.
   *
   * @param {date} [request.details.endTime] End time to read until
   *
   * @param {number} [request.details.processingInterval] Interval to process
   *
   * @param {string} [request.details.aggregateTypeId] The aggregate type node
   * ids
   *
   * @param {object} [request.details.aggregateConfiguration] A configuration for
   * the aggregate
   *
   * @param {boolean}
   * [request.details.aggregateConfiguration.useServerCapabilitiesDefaults]
   * Whether to use the default server caps
   *
   * @param {boolean}
   * [request.details.aggregateConfiguration.treatUncertainAsBad] Whether to
   * treat uncertain as bad
   *
   * @param {number} [request.details.aggregateConfiguration.percentDataBad]
   * Percent of data that is bad
   *
   * @param {number} [request.details.aggregateConfiguration.percentDataGood]
   * Percent of data that is good
   *
   * @param {boolean}
   * [request.details.aggregateConfiguration.useSlopedExtrapolation] Whether to
   * use sloped extrapolation.
   *
   * @param {string} [request.indexRange] Index range to read, e.g. 1:2,0:1 for 2
   * slices
   * out of a matrix or 0:1 for the first item in
   * an array, string or bytestring.
   * See 7.22 of part 4: NumericRange.
   *
   * @param {object} [request.header] Optional request header
   *
   * @param {object} [request.header.elevation] Optional User elevation
   *
   * @param {string} [request.header.elevation.type] Type of credential. Possible
   * values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [request.header.elevation.value] Value to pass to server
   *
   * @param {array} [request.header.locales] Optional list of locales in
   * preference order.
   *
   * @param {object} [request.header.diagnostics] Optional diagnostics
   * configuration
   *
   * @param {string} [request.header.diagnostics.level] Requested level of
   * response diagnostics.
   * (default: Status). Possible values include: 'None', 'Status', 'Operations',
   * 'Diagnostics', 'Verbose'
   *
   * @param {string} [request.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [request.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<HistoryReadResponseApiModelHistoricValueApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  historyReadProcessedValuesWithHttpOperationResponse(endpointId: string, request: models.HistoryReadRequestApiModelReadProcessedValuesDetailsApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HistoryReadResponseApiModelHistoricValueApiModel>>;

  /**
   * @summary Read historic processed values at specified times
   *
   * Read processed history values of a node if available using historic access.
   * The endpoint must be activated and connected and the module client
   * and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} request The history read request
   *
   * @param {string} [request.nodeId] Node to read from (mandatory)
   *
   * @param {array} [request.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} [request.details] The HistoryReadDetailsType extension
   * object
   * encoded in json and containing the tunneled
   * Historian reader request.
   *
   * @param {date} [request.details.startTime] Start time to read from.
   *
   * @param {date} [request.details.endTime] End time to read until
   *
   * @param {number} [request.details.processingInterval] Interval to process
   *
   * @param {string} [request.details.aggregateTypeId] The aggregate type node
   * ids
   *
   * @param {object} [request.details.aggregateConfiguration] A configuration for
   * the aggregate
   *
   * @param {boolean}
   * [request.details.aggregateConfiguration.useServerCapabilitiesDefaults]
   * Whether to use the default server caps
   *
   * @param {boolean}
   * [request.details.aggregateConfiguration.treatUncertainAsBad] Whether to
   * treat uncertain as bad
   *
   * @param {number} [request.details.aggregateConfiguration.percentDataBad]
   * Percent of data that is bad
   *
   * @param {number} [request.details.aggregateConfiguration.percentDataGood]
   * Percent of data that is good
   *
   * @param {boolean}
   * [request.details.aggregateConfiguration.useSlopedExtrapolation] Whether to
   * use sloped extrapolation.
   *
   * @param {string} [request.indexRange] Index range to read, e.g. 1:2,0:1 for 2
   * slices
   * out of a matrix or 0:1 for the first item in
   * an array, string or bytestring.
   * See 7.22 of part 4: NumericRange.
   *
   * @param {object} [request.header] Optional request header
   *
   * @param {object} [request.header.elevation] Optional User elevation
   *
   * @param {string} [request.header.elevation.type] Type of credential. Possible
   * values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [request.header.elevation.value] Value to pass to server
   *
   * @param {array} [request.header.locales] Optional list of locales in
   * preference order.
   *
   * @param {object} [request.header.diagnostics] Optional diagnostics
   * configuration
   *
   * @param {string} [request.header.diagnostics.level] Requested level of
   * response diagnostics.
   * (default: Status). Possible values include: 'None', 'Status', 'Operations',
   * 'Diagnostics', 'Verbose'
   *
   * @param {string} [request.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [request.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {HistoryReadResponseApiModelHistoricValueApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {HistoryReadResponseApiModelHistoricValueApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link
   *                      HistoryReadResponseApiModelHistoricValueApiModel} for
   *                      more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  historyReadProcessedValues(endpointId: string, request: models.HistoryReadRequestApiModelReadProcessedValuesDetailsApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HistoryReadResponseApiModelHistoricValueApiModel>;
  historyReadProcessedValues(endpointId: string, request: models.HistoryReadRequestApiModelReadProcessedValuesDetailsApiModel, callback: ServiceCallback<models.HistoryReadResponseApiModelHistoricValueApiModel>): void;
  historyReadProcessedValues(endpointId: string, request: models.HistoryReadRequestApiModelReadProcessedValuesDetailsApiModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HistoryReadResponseApiModelHistoricValueApiModel>): void;


  /**
   * @summary Read historic modified values at specified times
   *
   * Read processed history values of a node if available using historic access.
   * The endpoint must be activated and connected and the module client
   * and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} request The history read request
   *
   * @param {string} [request.nodeId] Node to read from (mandatory)
   *
   * @param {array} [request.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} [request.details] The HistoryReadDetailsType extension
   * object
   * encoded in json and containing the tunneled
   * Historian reader request.
   *
   * @param {date} [request.details.startTime] The start time to read from
   *
   * @param {date} [request.details.endTime] The end time to read to
   *
   * @param {number} [request.details.numValues] The number of values to read
   *
   * @param {string} [request.indexRange] Index range to read, e.g. 1:2,0:1 for 2
   * slices
   * out of a matrix or 0:1 for the first item in
   * an array, string or bytestring.
   * See 7.22 of part 4: NumericRange.
   *
   * @param {object} [request.header] Optional request header
   *
   * @param {object} [request.header.elevation] Optional User elevation
   *
   * @param {string} [request.header.elevation.type] Type of credential. Possible
   * values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [request.header.elevation.value] Value to pass to server
   *
   * @param {array} [request.header.locales] Optional list of locales in
   * preference order.
   *
   * @param {object} [request.header.diagnostics] Optional diagnostics
   * configuration
   *
   * @param {string} [request.header.diagnostics.level] Requested level of
   * response diagnostics.
   * (default: Status). Possible values include: 'None', 'Status', 'Operations',
   * 'Diagnostics', 'Verbose'
   *
   * @param {string} [request.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [request.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<HistoryReadResponseApiModelHistoricValueApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  historyReadModifiedValuesWithHttpOperationResponse(endpointId: string, request: models.HistoryReadRequestApiModelReadModifiedValuesDetailsApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HistoryReadResponseApiModelHistoricValueApiModel>>;

  /**
   * @summary Read historic modified values at specified times
   *
   * Read processed history values of a node if available using historic access.
   * The endpoint must be activated and connected and the module client
   * and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} request The history read request
   *
   * @param {string} [request.nodeId] Node to read from (mandatory)
   *
   * @param {array} [request.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} [request.details] The HistoryReadDetailsType extension
   * object
   * encoded in json and containing the tunneled
   * Historian reader request.
   *
   * @param {date} [request.details.startTime] The start time to read from
   *
   * @param {date} [request.details.endTime] The end time to read to
   *
   * @param {number} [request.details.numValues] The number of values to read
   *
   * @param {string} [request.indexRange] Index range to read, e.g. 1:2,0:1 for 2
   * slices
   * out of a matrix or 0:1 for the first item in
   * an array, string or bytestring.
   * See 7.22 of part 4: NumericRange.
   *
   * @param {object} [request.header] Optional request header
   *
   * @param {object} [request.header.elevation] Optional User elevation
   *
   * @param {string} [request.header.elevation.type] Type of credential. Possible
   * values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [request.header.elevation.value] Value to pass to server
   *
   * @param {array} [request.header.locales] Optional list of locales in
   * preference order.
   *
   * @param {object} [request.header.diagnostics] Optional diagnostics
   * configuration
   *
   * @param {string} [request.header.diagnostics.level] Requested level of
   * response diagnostics.
   * (default: Status). Possible values include: 'None', 'Status', 'Operations',
   * 'Diagnostics', 'Verbose'
   *
   * @param {string} [request.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [request.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {HistoryReadResponseApiModelHistoricValueApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {HistoryReadResponseApiModelHistoricValueApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link
   *                      HistoryReadResponseApiModelHistoricValueApiModel} for
   *                      more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  historyReadModifiedValues(endpointId: string, request: models.HistoryReadRequestApiModelReadModifiedValuesDetailsApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HistoryReadResponseApiModelHistoricValueApiModel>;
  historyReadModifiedValues(endpointId: string, request: models.HistoryReadRequestApiModelReadModifiedValuesDetailsApiModel, callback: ServiceCallback<models.HistoryReadResponseApiModelHistoricValueApiModel>): void;
  historyReadModifiedValues(endpointId: string, request: models.HistoryReadRequestApiModelReadModifiedValuesDetailsApiModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HistoryReadResponseApiModelHistoricValueApiModel>): void;


  /**
   * @summary Read next batch of historic values
   *
   * Read next batch of historic values of a node using historic access.
   * The endpoint must be activated and connected and the module client
   * and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} request The history read next request
   *
   * @param {string} request.continuationToken Continuation token to continue
   * reading more
   * results.
   *
   * @param {boolean} [request.abort] Abort reading after this read
   *
   * @param {object} [request.header] Optional request header
   *
   * @param {object} [request.header.elevation] Optional User elevation
   *
   * @param {string} [request.header.elevation.type] Type of credential. Possible
   * values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [request.header.elevation.value] Value to pass to server
   *
   * @param {array} [request.header.locales] Optional list of locales in
   * preference order.
   *
   * @param {object} [request.header.diagnostics] Optional diagnostics
   * configuration
   *
   * @param {string} [request.header.diagnostics.level] Requested level of
   * response diagnostics.
   * (default: Status). Possible values include: 'None', 'Status', 'Operations',
   * 'Diagnostics', 'Verbose'
   *
   * @param {string} [request.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [request.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<HistoryReadNextResponseApiModelHistoricValueApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  historyReadValueNextWithHttpOperationResponse(endpointId: string, request: models.HistoryReadNextRequestApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HistoryReadNextResponseApiModelHistoricValueApiModel>>;

  /**
   * @summary Read next batch of historic values
   *
   * Read next batch of historic values of a node using historic access.
   * The endpoint must be activated and connected and the module client
   * and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} request The history read next request
   *
   * @param {string} request.continuationToken Continuation token to continue
   * reading more
   * results.
   *
   * @param {boolean} [request.abort] Abort reading after this read
   *
   * @param {object} [request.header] Optional request header
   *
   * @param {object} [request.header.elevation] Optional User elevation
   *
   * @param {string} [request.header.elevation.type] Type of credential. Possible
   * values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [request.header.elevation.value] Value to pass to server
   *
   * @param {array} [request.header.locales] Optional list of locales in
   * preference order.
   *
   * @param {object} [request.header.diagnostics] Optional diagnostics
   * configuration
   *
   * @param {string} [request.header.diagnostics.level] Requested level of
   * response diagnostics.
   * (default: Status). Possible values include: 'None', 'Status', 'Operations',
   * 'Diagnostics', 'Verbose'
   *
   * @param {string} [request.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [request.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {HistoryReadNextResponseApiModelHistoricValueApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {HistoryReadNextResponseApiModelHistoricValueApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link
   *                      HistoryReadNextResponseApiModelHistoricValueApiModel}
   *                      for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  historyReadValueNext(endpointId: string, request: models.HistoryReadNextRequestApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HistoryReadNextResponseApiModelHistoricValueApiModel>;
  historyReadValueNext(endpointId: string, request: models.HistoryReadNextRequestApiModel, callback: ServiceCallback<models.HistoryReadNextResponseApiModelHistoricValueApiModel>): void;
  historyReadValueNext(endpointId: string, request: models.HistoryReadNextRequestApiModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HistoryReadNextResponseApiModelHistoricValueApiModel>): void;


  /**
   * @summary Replace historic values
   *
   * Replace historic values using historic access.
   * The endpoint must be activated and connected and the module client
   * and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} request The history replace request
   *
   * @param {string} [request.nodeId] Node to update
   *
   * @param {array} [request.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} request.details The HistoryUpdateDetailsType extension
   * object
   * encoded as json Variant and containing the tunneled
   * update request for the Historian server. The value
   * is updated at edge using above node address.
   *
   * @param {array} request.details.values Values to replace
   *
   * @param {object} [request.header] Optional request header
   *
   * @param {object} [request.header.elevation] Optional User elevation
   *
   * @param {string} [request.header.elevation.type] Type of credential. Possible
   * values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [request.header.elevation.value] Value to pass to server
   *
   * @param {array} [request.header.locales] Optional list of locales in
   * preference order.
   *
   * @param {object} [request.header.diagnostics] Optional diagnostics
   * configuration
   *
   * @param {string} [request.header.diagnostics.level] Requested level of
   * response diagnostics.
   * (default: Status). Possible values include: 'None', 'Status', 'Operations',
   * 'Diagnostics', 'Verbose'
   *
   * @param {string} [request.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [request.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<HistoryUpdateResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  historyReplaceValuesWithHttpOperationResponse(endpointId: string, request: models.HistoryUpdateRequestApiModelReplaceValuesDetailsApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HistoryUpdateResponseApiModel>>;

  /**
   * @summary Replace historic values
   *
   * Replace historic values using historic access.
   * The endpoint must be activated and connected and the module client
   * and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} request The history replace request
   *
   * @param {string} [request.nodeId] Node to update
   *
   * @param {array} [request.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} request.details The HistoryUpdateDetailsType extension
   * object
   * encoded as json Variant and containing the tunneled
   * update request for the Historian server. The value
   * is updated at edge using above node address.
   *
   * @param {array} request.details.values Values to replace
   *
   * @param {object} [request.header] Optional request header
   *
   * @param {object} [request.header.elevation] Optional User elevation
   *
   * @param {string} [request.header.elevation.type] Type of credential. Possible
   * values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [request.header.elevation.value] Value to pass to server
   *
   * @param {array} [request.header.locales] Optional list of locales in
   * preference order.
   *
   * @param {object} [request.header.diagnostics] Optional diagnostics
   * configuration
   *
   * @param {string} [request.header.diagnostics.level] Requested level of
   * response diagnostics.
   * (default: Status). Possible values include: 'None', 'Status', 'Operations',
   * 'Diagnostics', 'Verbose'
   *
   * @param {string} [request.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [request.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {HistoryUpdateResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {HistoryUpdateResponseApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link HistoryUpdateResponseApiModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  historyReplaceValues(endpointId: string, request: models.HistoryUpdateRequestApiModelReplaceValuesDetailsApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HistoryUpdateResponseApiModel>;
  historyReplaceValues(endpointId: string, request: models.HistoryUpdateRequestApiModelReplaceValuesDetailsApiModel, callback: ServiceCallback<models.HistoryUpdateResponseApiModel>): void;
  historyReplaceValues(endpointId: string, request: models.HistoryUpdateRequestApiModelReplaceValuesDetailsApiModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HistoryUpdateResponseApiModel>): void;


  /**
   * @summary Replace historic events
   *
   * Replace historic events using historic access.
   * The endpoint must be activated and connected and the module client
   * and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} request The history replace request
   *
   * @param {string} [request.nodeId] Node to update
   *
   * @param {array} [request.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} request.details The HistoryUpdateDetailsType extension
   * object
   * encoded as json Variant and containing the tunneled
   * update request for the Historian server. The value
   * is updated at edge using above node address.
   *
   * @param {object} [request.details.filter] The filter to use to select the
   * events
   *
   * @param {array} request.details.events The events to replace
   *
   * @param {object} [request.header] Optional request header
   *
   * @param {object} [request.header.elevation] Optional User elevation
   *
   * @param {string} [request.header.elevation.type] Type of credential. Possible
   * values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [request.header.elevation.value] Value to pass to server
   *
   * @param {array} [request.header.locales] Optional list of locales in
   * preference order.
   *
   * @param {object} [request.header.diagnostics] Optional diagnostics
   * configuration
   *
   * @param {string} [request.header.diagnostics.level] Requested level of
   * response diagnostics.
   * (default: Status). Possible values include: 'None', 'Status', 'Operations',
   * 'Diagnostics', 'Verbose'
   *
   * @param {string} [request.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [request.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<HistoryUpdateResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  historyReplaceEventsWithHttpOperationResponse(endpointId: string, request: models.HistoryUpdateRequestApiModelReplaceEventsDetailsApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.HistoryUpdateResponseApiModel>>;

  /**
   * @summary Replace historic events
   *
   * Replace historic events using historic access.
   * The endpoint must be activated and connected and the module client
   * and server must trust each other.
   *
   * @param {string} endpointId The identifier of the activated endpoint.
   *
   * @param {object} request The history replace request
   *
   * @param {string} [request.nodeId] Node to update
   *
   * @param {array} [request.browsePath] An optional path from NodeId instance to
   * the actual node.
   *
   * @param {object} request.details The HistoryUpdateDetailsType extension
   * object
   * encoded as json Variant and containing the tunneled
   * update request for the Historian server. The value
   * is updated at edge using above node address.
   *
   * @param {object} [request.details.filter] The filter to use to select the
   * events
   *
   * @param {array} request.details.events The events to replace
   *
   * @param {object} [request.header] Optional request header
   *
   * @param {object} [request.header.elevation] Optional User elevation
   *
   * @param {string} [request.header.elevation.type] Type of credential. Possible
   * values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
   *
   * @param {object} [request.header.elevation.value] Value to pass to server
   *
   * @param {array} [request.header.locales] Optional list of locales in
   * preference order.
   *
   * @param {object} [request.header.diagnostics] Optional diagnostics
   * configuration
   *
   * @param {string} [request.header.diagnostics.level] Requested level of
   * response diagnostics.
   * (default: Status). Possible values include: 'None', 'Status', 'Operations',
   * 'Diagnostics', 'Verbose'
   *
   * @param {string} [request.header.diagnostics.auditId] Client audit log entry.
   * (default: client generated)
   *
   * @param {date} [request.header.diagnostics.timeStamp] Timestamp of request.
   * (default: client generated)
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {HistoryUpdateResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {HistoryUpdateResponseApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link HistoryUpdateResponseApiModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  historyReplaceEvents(endpointId: string, request: models.HistoryUpdateRequestApiModelReplaceEventsDetailsApiModel, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.HistoryUpdateResponseApiModel>;
  historyReplaceEvents(endpointId: string, request: models.HistoryUpdateRequestApiModelReplaceEventsDetailsApiModel, callback: ServiceCallback<models.HistoryUpdateResponseApiModel>): void;
  historyReplaceEvents(endpointId: string, request: models.HistoryUpdateRequestApiModelReplaceEventsDetailsApiModel, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.HistoryUpdateResponseApiModel>): void;


  /**
   * @summary Return the service status in the form of the service status
   * api model.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<StatusResponseApiModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getStatusWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.StatusResponseApiModel>>;

  /**
   * @summary Return the service status in the form of the service status
   * api model.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {StatusResponseApiModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {StatusResponseApiModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link StatusResponseApiModel} for more
   *                      information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getStatus(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.StatusResponseApiModel>;
  getStatus(callback: ServiceCallback<models.StatusResponseApiModel>): void;
  getStatus(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.StatusResponseApiModel>): void;
}

export { AzureOpcHistoryClient, models as AzureOpcHistoryModels };
