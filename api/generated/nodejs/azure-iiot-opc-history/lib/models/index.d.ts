/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as moment from "moment";

/**
 * Deletes data at times
 */
export interface DeleteValuesAtTimesDetailsApiModel {
  /**
   * The timestamps to delete
   */
  reqTimes: Date[];
}

/**
 * Credential model
 */
export interface CredentialApiModel {
  /**
   * Type of credential. Possible values include: 'None', 'UserName', 'X509Certificate', 'JwtToken'
   */
  type?: string;
  /**
   * Value to pass to server
   */
  value?: any;
}

/**
 * Diagnostics configuration
 */
export interface DiagnosticsApiModel {
  /**
   * Requested level of response diagnostics.
   * (default: Status). Possible values include: 'None', 'Status', 'Operations', 'Diagnostics',
   * 'Verbose'
   */
  level?: string;
  /**
   * Client audit log entry.
   * (default: client generated)
   */
  auditId?: string;
  /**
   * Timestamp of request.
   * (default: client generated)
   */
  timeStamp?: Date;
}

/**
 * Request header model
 */
export interface RequestHeaderApiModel {
  /**
   * Optional User elevation
   */
  elevation?: CredentialApiModel;
  /**
   * Optional list of locales in preference order.
   */
  locales?: string[];
  /**
   * Optional diagnostics configuration
   */
  diagnostics?: DiagnosticsApiModel;
}

/**
 * Service result
 */
export interface ServiceResultApiModel {
  /**
   * Error code - if null operation succeeded.
   */
  statusCode?: number;
  /**
   * Error message in case of error or null.
   */
  errorMessage?: string;
  /**
   * Additional diagnostics information
   */
  diagnostics?: any;
}

/**
 * History update results
 */
export interface HistoryUpdateResponseApiModel {
  /**
   * List of results from the update operation
   */
  results?: ServiceResultApiModel[];
  /**
   * Service result in case of service call error
   */
  errorInfo?: ServiceResultApiModel;
}

/**
 * Delete raw modified data
 */
export interface DeleteValuesDetailsApiModel {
  /**
   * Start time
   */
  startTime?: Date;
  /**
   * End time to delete until
   */
  endTime?: Date;
}

/**
 * Delete raw modified data
 */
export interface DeleteModifiedValuesDetailsApiModel {
  /**
   * Start time
   */
  startTime?: Date;
  /**
   * End time to delete until
   */
  endTime?: Date;
}

/**
 * The events to delete
 */
export interface DeleteEventsDetailsApiModel {
  /**
   * Events to delete
   */
  eventIds: Buffer[];
}

/**
 * Request node history read continuation
 */
export interface HistoryReadNextRequestApiModel {
  /**
   * Continuation token to continue reading more
   * results.
   */
  continuationToken: string;
  /**
   * Abort reading after this read
   */
  abort?: boolean;
  /**
   * Optional request header
   */
  header?: RequestHeaderApiModel;
}

/**
 * Modification information
 */
export interface ModificationInfoApiModel {
  /**
   * Modification time
   */
  modificationTime?: Date;
  /**
   * Operation. Possible values include: 'Insert', 'Replace', 'Update', 'Delete'
   */
  updateType?: string;
  /**
   * User who made the change
   */
  userName?: string;
}

/**
 * Historic data
 */
export interface HistoricValueApiModel {
  /**
   * ,
   * The value of data value.
   */
  value?: any;
  /**
   * The status code associated with the value.
   */
  statusCode?: number;
  /**
   * The source timestamp associated with the value.
   */
  sourceTimestamp?: Date;
  /**
   * Additional resolution for the source timestamp.
   */
  sourcePicoseconds?: number;
  /**
   * The server timestamp associated with the value.
   */
  serverTimestamp?: Date;
  /**
   * Additional resolution for the server timestamp.
   */
  serverPicoseconds?: number;
  /**
   * modification information when reading modifications.
   */
  modificationInfo?: ModificationInfoApiModel;
}

/**
 * Insert historic data
 */
export interface InsertValuesDetailsApiModel {
  /**
   * Values to insert
   */
  values: HistoricValueApiModel[];
}

/**
 * Historic event
 */
export interface HistoricEventApiModel {
  /**
   * The selected fields of the event
   */
  eventFields?: any[];
}

/**
 * Insert historic events
 */
export interface InsertEventsDetailsApiModel {
  /**
   * The filter to use to select the events
   */
  filter?: any;
  /**
   * The new events to insert
   */
  events: HistoricEventApiModel[];
}

/**
 * Read event data
 */
export interface ReadEventsDetailsApiModel {
  /**
   * Start time to read from
   */
  startTime?: Date;
  /**
   * End time to read to
   */
  endTime?: Date;
  /**
   * Number of events to read
   */
  numEvents?: number;
  /**
   * The filter to use to select the event fields
   */
  filter?: any;
}

/**
 * Read historic values
 */
export interface ReadValuesDetailsApiModel {
  /**
   * Beginning of period to read. Set to null
   * if no specific start time is specified.
   */
  startTime?: Date;
  /**
   * End of period to read. Set to null if no
   * specific end time is specified.
   */
  endTime?: Date;
  /**
   * The maximum number of values returned for any Node
   * over the time range. If only one time is specified,
   * the time range shall extend to return this number
   * of values. 0 or null indicates that there is no
   * maximum.
   */
  numValues?: number;
  /**
   * Whether to return the bounding values or not.
   */
  returnBounds?: boolean;
}

/**
 * Read data at specified times
 */
export interface ReadValuesAtTimesDetailsApiModel {
  /**
   * Requested datums
   */
  reqTimes: Date[];
  /**
   * Whether to use simple bounds
   */
  useSimpleBounds?: boolean;
}

/**
 * Aggregate configuration
 */
export interface AggregateConfigApiModel {
  /**
   * Whether to use the default server caps
   */
  useServerCapabilitiesDefaults?: boolean;
  /**
   * Whether to treat uncertain as bad
   */
  treatUncertainAsBad?: boolean;
  /**
   * Percent of data that is bad
   */
  percentDataBad?: number;
  /**
   * Percent of data that is good
   */
  percentDataGood?: number;
  /**
   * Whether to use sloped extrapolation.
   */
  useSlopedExtrapolation?: boolean;
}

/**
 * Read processed historic data
 */
export interface ReadProcessedValuesDetailsApiModel {
  /**
   * Start time to read from.
   */
  startTime?: Date;
  /**
   * End time to read until
   */
  endTime?: Date;
  /**
   * Interval to process
   */
  processingInterval?: number;
  /**
   * The aggregate type node ids
   */
  aggregateTypeId?: string;
  /**
   * A configuration for the aggregate
   */
  aggregateConfiguration?: AggregateConfigApiModel;
}

/**
 * Read modified data
 */
export interface ReadModifiedValuesDetailsApiModel {
  /**
   * The start time to read from
   */
  startTime?: Date;
  /**
   * The end time to read to
   */
  endTime?: Date;
  /**
   * The number of values to read
   */
  numValues?: number;
}

/**
 * Replace historic data
 */
export interface ReplaceValuesDetailsApiModel {
  /**
   * Values to replace
   */
  values: HistoricValueApiModel[];
}

/**
 * Replace historic events
 */
export interface ReplaceEventsDetailsApiModel {
  /**
   * The filter to use to select the events
   */
  filter?: any;
  /**
   * The events to replace
   */
  events: HistoricEventApiModel[];
}

/**
 * Status response model
 */
export interface StatusResponseApiModel {
  /**
   * Name of this service
   */
  name?: string;
  /**
   * Operational status
   */
  status?: string;
  /**
   * Current time
   */
  readonly currentTime?: string;
  /**
   * Start time of service
   */
  readonly startTime?: string;
  /**
   * Up time of service
   */
  readonly upTime?: number;
  /**
   * Value generated at bootstrap by each instance of the service and
   * used to correlate logs coming from the same instance. The value
   * changes every time the service starts.
   */
  readonly uid?: string;
  /**
   * A property bag with details about the service
   */
  readonly properties?: { [propertyName: string]: string };
  /**
   * A property bag with details about the internal dependencies
   */
  readonly dependencies?: { [propertyName: string]: string };
  /**
   * Optional meta data.
   */
  readonly metadata?: { [propertyName: string]: string };
}

/**
 * Request node history update
 */
export interface HistoryUpdateRequestApiModelDeleteValuesAtTimesDetailsApiModel {
  /**
   * Node to update
   */
  nodeId?: string;
  /**
   * An optional path from NodeId instance to
   * the actual node.
   */
  browsePath?: string[];
  /**
   * The HistoryUpdateDetailsType extension object
   * encoded as json Variant and containing the tunneled
   * update request for the Historian server. The value
   * is updated at edge using above node address.
   */
  details: DeleteValuesAtTimesDetailsApiModel;
  /**
   * Optional request header
   */
  header?: RequestHeaderApiModel;
}

/**
 * Request node history update
 */
export interface HistoryUpdateRequestApiModelDeleteValuesDetailsApiModel {
  /**
   * Node to update
   */
  nodeId?: string;
  /**
   * An optional path from NodeId instance to
   * the actual node.
   */
  browsePath?: string[];
  /**
   * The HistoryUpdateDetailsType extension object
   * encoded as json Variant and containing the tunneled
   * update request for the Historian server. The value
   * is updated at edge using above node address.
   */
  details: DeleteValuesDetailsApiModel;
  /**
   * Optional request header
   */
  header?: RequestHeaderApiModel;
}

/**
 * Request node history update
 */
export interface HistoryUpdateRequestApiModelDeleteModifiedValuesDetailsApiModel {
  /**
   * Node to update
   */
  nodeId?: string;
  /**
   * An optional path from NodeId instance to
   * the actual node.
   */
  browsePath?: string[];
  /**
   * The HistoryUpdateDetailsType extension object
   * encoded as json Variant and containing the tunneled
   * update request for the Historian server. The value
   * is updated at edge using above node address.
   */
  details: DeleteModifiedValuesDetailsApiModel;
  /**
   * Optional request header
   */
  header?: RequestHeaderApiModel;
}

/**
 * Request node history update
 */
export interface HistoryUpdateRequestApiModelDeleteEventsDetailsApiModel {
  /**
   * Node to update
   */
  nodeId?: string;
  /**
   * An optional path from NodeId instance to
   * the actual node.
   */
  browsePath?: string[];
  /**
   * The HistoryUpdateDetailsType extension object
   * encoded as json Variant and containing the tunneled
   * update request for the Historian server. The value
   * is updated at edge using above node address.
   */
  details: DeleteEventsDetailsApiModel;
  /**
   * Optional request header
   */
  header?: RequestHeaderApiModel;
}

/**
 * Request node history read
 */
export interface HistoryReadRequestApiModelJToken {
  /**
   * Node to read from (mandatory)
   */
  nodeId?: string;
  /**
   * An optional path from NodeId instance to
   * the actual node.
   */
  browsePath?: string[];
  /**
   * The HistoryReadDetailsType extension object
   * encoded in json and containing the tunneled
   * Historian reader request.
   */
  details?: any;
  /**
   * Index range to read, e.g. 1:2,0:1 for 2 slices
   * out of a matrix or 0:1 for the first item in
   * an array, string or bytestring.
   * See 7.22 of part 4: NumericRange.
   */
  indexRange?: string;
  /**
   * Optional request header
   */
  header?: RequestHeaderApiModel;
}

/**
 * History read results
 */
export interface HistoryReadResponseApiModelJToken {
  /**
   * History as json encoded extension object
   */
  history?: any;
  /**
   * Continuation token if more results pending.
   */
  continuationToken?: string;
  /**
   * Service result in case of error
   */
  errorInfo?: ServiceResultApiModel;
}

/**
 * History read continuation result
 */
export interface HistoryReadNextResponseApiModelJToken {
  /**
   * History as json encoded extension object
   */
  history?: any;
  /**
   * Continuation token if more results pending.
   */
  continuationToken?: string;
  /**
   * Service result in case of error
   */
  errorInfo?: ServiceResultApiModel;
}

/**
 * Request node history update
 */
export interface HistoryUpdateRequestApiModelJToken {
  /**
   * Node to update
   */
  nodeId?: string;
  /**
   * An optional path from NodeId instance to
   * the actual node.
   */
  browsePath?: string[];
  /**
   * The HistoryUpdateDetailsType extension object
   * encoded as json Variant and containing the tunneled
   * update request for the Historian server. The value
   * is updated at edge using above node address.
   */
  details: any;
  /**
   * Optional request header
   */
  header?: RequestHeaderApiModel;
}

/**
 * Request node history update
 */
export interface HistoryUpdateRequestApiModelInsertValuesDetailsApiModel {
  /**
   * Node to update
   */
  nodeId?: string;
  /**
   * An optional path from NodeId instance to
   * the actual node.
   */
  browsePath?: string[];
  /**
   * The HistoryUpdateDetailsType extension object
   * encoded as json Variant and containing the tunneled
   * update request for the Historian server. The value
   * is updated at edge using above node address.
   */
  details: InsertValuesDetailsApiModel;
  /**
   * Optional request header
   */
  header?: RequestHeaderApiModel;
}

/**
 * Request node history update
 */
export interface HistoryUpdateRequestApiModelInsertEventsDetailsApiModel {
  /**
   * Node to update
   */
  nodeId?: string;
  /**
   * An optional path from NodeId instance to
   * the actual node.
   */
  browsePath?: string[];
  /**
   * The HistoryUpdateDetailsType extension object
   * encoded as json Variant and containing the tunneled
   * update request for the Historian server. The value
   * is updated at edge using above node address.
   */
  details: InsertEventsDetailsApiModel;
  /**
   * Optional request header
   */
  header?: RequestHeaderApiModel;
}

/**
 * Request node history read
 */
export interface HistoryReadRequestApiModelReadEventsDetailsApiModel {
  /**
   * Node to read from (mandatory)
   */
  nodeId?: string;
  /**
   * An optional path from NodeId instance to
   * the actual node.
   */
  browsePath?: string[];
  /**
   * The HistoryReadDetailsType extension object
   * encoded in json and containing the tunneled
   * Historian reader request.
   */
  details?: ReadEventsDetailsApiModel;
  /**
   * Index range to read, e.g. 1:2,0:1 for 2 slices
   * out of a matrix or 0:1 for the first item in
   * an array, string or bytestring.
   * See 7.22 of part 4: NumericRange.
   */
  indexRange?: string;
  /**
   * Optional request header
   */
  header?: RequestHeaderApiModel;
}

/**
 * History read results
 */
export interface HistoryReadResponseApiModelHistoricEventApiModel {
  /**
   * History as json encoded extension object
   */
  history?: HistoricEventApiModel[];
  /**
   * Continuation token if more results pending.
   */
  continuationToken?: string;
  /**
   * Service result in case of error
   */
  errorInfo?: ServiceResultApiModel;
}

/**
 * History read continuation result
 */
export interface HistoryReadNextResponseApiModelHistoricEventApiModel {
  /**
   * History as json encoded extension object
   */
  history?: HistoricEventApiModel[];
  /**
   * Continuation token if more results pending.
   */
  continuationToken?: string;
  /**
   * Service result in case of error
   */
  errorInfo?: ServiceResultApiModel;
}

/**
 * Request node history read
 */
export interface HistoryReadRequestApiModelReadValuesDetailsApiModel {
  /**
   * Node to read from (mandatory)
   */
  nodeId?: string;
  /**
   * An optional path from NodeId instance to
   * the actual node.
   */
  browsePath?: string[];
  /**
   * The HistoryReadDetailsType extension object
   * encoded in json and containing the tunneled
   * Historian reader request.
   */
  details?: ReadValuesDetailsApiModel;
  /**
   * Index range to read, e.g. 1:2,0:1 for 2 slices
   * out of a matrix or 0:1 for the first item in
   * an array, string or bytestring.
   * See 7.22 of part 4: NumericRange.
   */
  indexRange?: string;
  /**
   * Optional request header
   */
  header?: RequestHeaderApiModel;
}

/**
 * History read results
 */
export interface HistoryReadResponseApiModelHistoricValueApiModel {
  /**
   * History as json encoded extension object
   */
  history?: HistoricValueApiModel[];
  /**
   * Continuation token if more results pending.
   */
  continuationToken?: string;
  /**
   * Service result in case of error
   */
  errorInfo?: ServiceResultApiModel;
}

/**
 * Request node history read
 */
export interface HistoryReadRequestApiModelReadValuesAtTimesDetailsApiModel {
  /**
   * Node to read from (mandatory)
   */
  nodeId?: string;
  /**
   * An optional path from NodeId instance to
   * the actual node.
   */
  browsePath?: string[];
  /**
   * The HistoryReadDetailsType extension object
   * encoded in json and containing the tunneled
   * Historian reader request.
   */
  details?: ReadValuesAtTimesDetailsApiModel;
  /**
   * Index range to read, e.g. 1:2,0:1 for 2 slices
   * out of a matrix or 0:1 for the first item in
   * an array, string or bytestring.
   * See 7.22 of part 4: NumericRange.
   */
  indexRange?: string;
  /**
   * Optional request header
   */
  header?: RequestHeaderApiModel;
}

/**
 * Request node history read
 */
export interface HistoryReadRequestApiModelReadProcessedValuesDetailsApiModel {
  /**
   * Node to read from (mandatory)
   */
  nodeId?: string;
  /**
   * An optional path from NodeId instance to
   * the actual node.
   */
  browsePath?: string[];
  /**
   * The HistoryReadDetailsType extension object
   * encoded in json and containing the tunneled
   * Historian reader request.
   */
  details?: ReadProcessedValuesDetailsApiModel;
  /**
   * Index range to read, e.g. 1:2,0:1 for 2 slices
   * out of a matrix or 0:1 for the first item in
   * an array, string or bytestring.
   * See 7.22 of part 4: NumericRange.
   */
  indexRange?: string;
  /**
   * Optional request header
   */
  header?: RequestHeaderApiModel;
}

/**
 * Request node history read
 */
export interface HistoryReadRequestApiModelReadModifiedValuesDetailsApiModel {
  /**
   * Node to read from (mandatory)
   */
  nodeId?: string;
  /**
   * An optional path from NodeId instance to
   * the actual node.
   */
  browsePath?: string[];
  /**
   * The HistoryReadDetailsType extension object
   * encoded in json and containing the tunneled
   * Historian reader request.
   */
  details?: ReadModifiedValuesDetailsApiModel;
  /**
   * Index range to read, e.g. 1:2,0:1 for 2 slices
   * out of a matrix or 0:1 for the first item in
   * an array, string or bytestring.
   * See 7.22 of part 4: NumericRange.
   */
  indexRange?: string;
  /**
   * Optional request header
   */
  header?: RequestHeaderApiModel;
}

/**
 * History read continuation result
 */
export interface HistoryReadNextResponseApiModelHistoricValueApiModel {
  /**
   * History as json encoded extension object
   */
  history?: HistoricValueApiModel[];
  /**
   * Continuation token if more results pending.
   */
  continuationToken?: string;
  /**
   * Service result in case of error
   */
  errorInfo?: ServiceResultApiModel;
}

/**
 * Request node history update
 */
export interface HistoryUpdateRequestApiModelReplaceValuesDetailsApiModel {
  /**
   * Node to update
   */
  nodeId?: string;
  /**
   * An optional path from NodeId instance to
   * the actual node.
   */
  browsePath?: string[];
  /**
   * The HistoryUpdateDetailsType extension object
   * encoded as json Variant and containing the tunneled
   * update request for the Historian server. The value
   * is updated at edge using above node address.
   */
  details: ReplaceValuesDetailsApiModel;
  /**
   * Optional request header
   */
  header?: RequestHeaderApiModel;
}

/**
 * Request node history update
 */
export interface HistoryUpdateRequestApiModelReplaceEventsDetailsApiModel {
  /**
   * Node to update
   */
  nodeId?: string;
  /**
   * An optional path from NodeId instance to
   * the actual node.
   */
  browsePath?: string[];
  /**
   * The HistoryUpdateDetailsType extension object
   * encoded as json Variant and containing the tunneled
   * update request for the Historian server. The value
   * is updated at edge using above node address.
   */
  details: ReplaceEventsDetailsApiModel;
  /**
   * Optional request header
   */
  header?: RequestHeaderApiModel;
}
