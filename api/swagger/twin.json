{
  "swagger": "2.0",
  "info": {
    "version": "v2",
    "title": "Opc-Twin-Service",
    "description": "Azure Industrial IoT OPC UA Twin Service"
  },
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/v2/browse/{endpointId}": {
      "get": {
        "tags": [
          "Browse"
        ],
        "summary": "Browse set of unique target nodes",
        "description": "Browse the set of unique hierarchically referenced target nodes on the endpoint.\r\nThe endpoint must be activated and connected and the module client\r\nand server must trust each other.\r\nThe root node id to browse from can be provided as part of the query\r\nparameters.\r\nIf it is not provided, the RootFolder node is browsed. Note that this\r\nis the same as the POST method with the model containing the node id\r\nand the targetNodesOnly flag set to true.",
        "operationId": "GetSetOfUniqueNodes",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "endpointId",
            "in": "path",
            "description": "The identifier of the activated endpoint.",
            "required": true,
            "type": "string"
          },
          {
            "name": "nodeId",
            "in": "query",
            "description": "The node to browse or omit to browse the root node (i=84)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BrowseResponseApiModel"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Browse"
        ],
        "summary": "Browse node references",
        "description": "Browse a node on the specified endpoint.\r\nThe endpoint must be activated and connected and the module client\r\nand server must trust each other.",
        "operationId": "Browse",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "endpointId",
            "in": "path",
            "description": "The identifier of the activated endpoint.",
            "required": true,
            "type": "string"
          },
          {
            "name": "request",
            "in": "body",
            "description": "The browse request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BrowseRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BrowseResponseApiModel"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication"
            ]
          }
        ]
      }
    },
    "/v2/browse/{endpointId}/next": {
      "get": {
        "tags": [
          "Browse"
        ],
        "summary": "Browse next set of unique target nodes",
        "description": "Browse the next set of unique hierarchically referenced target nodes on the\r\nendpoint.\r\nThe endpoint must be activated and connected and the module client\r\nand server must trust each other.\r\nNote that this is the same as the POST method with the model containing\r\nthe continuation token and the targetNodesOnly flag set to true.",
        "operationId": "GetNextSetOfUniqueNodes",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "endpointId",
            "in": "path",
            "description": "The identifier of the activated endpoint.",
            "required": true,
            "type": "string"
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "Continuation token from GetSetOfUniqueNodes operation",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BrowseNextResponseApiModel"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication"
            ]
          }
        ],
        "x-ms-pageable": {
          "nextLinkName": "continuationToken"
        }
      },
      "post": {
        "tags": [
          "Browse"
        ],
        "summary": "Browse next set of references",
        "description": "Browse next set of references on the endpoint.\r\nThe endpoint must be activated and connected and the module client\r\nand server must trust each other.",
        "operationId": "BrowseNext",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "endpointId",
            "in": "path",
            "description": "The identifier of the activated endpoint.",
            "required": true,
            "type": "string"
          },
          {
            "name": "request",
            "in": "body",
            "description": "The request body with continuation token.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BrowseNextRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BrowseNextResponseApiModel"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication"
            ]
          }
        ]
      }
    },
    "/v2/browse/{endpointId}/path": {
      "post": {
        "tags": [
          "Browse"
        ],
        "summary": "Browse using a browse path",
        "description": "Browse using a path from the specified node id.\r\nThis call uses TranslateBrowsePathsToNodeIds service under the hood.\r\nThe endpoint must be activated and connected and the module client\r\nand server must trust each other.",
        "operationId": "BrowseUsingPath",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "endpointId",
            "in": "path",
            "description": "The identifier of the activated endpoint.",
            "required": true,
            "type": "string"
          },
          {
            "name": "request",
            "in": "body",
            "description": "The browse path request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BrowsePathRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BrowsePathResponseApiModel"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication"
            ]
          }
        ]
      }
    },
    "/v2/call/{endpointId}/metadata": {
      "post": {
        "tags": [
          "Call"
        ],
        "summary": "Get method meta data",
        "description": "Return method meta data to support a user interface displaying forms to\r\ninput and output arguments.\r\nThe endpoint must be activated and connected and the module client\r\nand server must trust each other.",
        "operationId": "GetCallMetadata",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "endpointId",
            "in": "path",
            "description": "The identifier of the activated endpoint.",
            "required": true,
            "type": "string"
          },
          {
            "name": "request",
            "in": "body",
            "description": "The method metadata request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MethodMetadataRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/MethodMetadataResponseApiModel"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication"
            ]
          }
        ]
      }
    },
    "/v2/call/{endpointId}": {
      "post": {
        "tags": [
          "Call"
        ],
        "summary": "Call a method",
        "description": "Invoke method node with specified input arguments.\r\nThe endpoint must be activated and connected and the module client\r\nand server must trust each other.",
        "operationId": "CallMethod",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "endpointId",
            "in": "path",
            "description": "The identifier of the activated endpoint.",
            "required": true,
            "type": "string"
          },
          {
            "name": "request",
            "in": "body",
            "description": "The method call request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MethodCallRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/MethodCallResponseApiModel"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication"
            ]
          }
        ]
      }
    },
    "/v2/publish/{endpointId}/start": {
      "post": {
        "tags": [
          "Publish"
        ],
        "summary": "Start publishing node values",
        "description": "Start publishing variable node values to IoT Hub.\r\nThe endpoint must be activated and connected and the module client\r\nand server must trust each other.",
        "operationId": "StartPublishingValues",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "endpointId",
            "in": "path",
            "description": "The identifier of the activated endpoint.",
            "required": true,
            "type": "string"
          },
          {
            "name": "request",
            "in": "body",
            "description": "The publish request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PublishStartRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PublishStartResponseApiModel"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication"
            ]
          }
        ]
      }
    },
    "/v2/publish/{endpointId}/stop": {
      "post": {
        "tags": [
          "Publish"
        ],
        "summary": "Stop publishing node values",
        "description": "Stop publishing variable node values to IoT Hub.\r\nThe endpoint must be activated and connected and the module client\r\nand server must trust each other.",
        "operationId": "StopPublishingValues",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "endpointId",
            "in": "path",
            "description": "The identifier of the activated endpoint.",
            "required": true,
            "type": "string"
          },
          {
            "name": "request",
            "in": "body",
            "description": "The unpublish request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PublishStopRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PublishStopResponseApiModel"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication"
            ]
          }
        ]
      }
    },
    "/v2/publish/{endpointId}": {
      "get": {
        "tags": [
          "Publish"
        ],
        "summary": "Get next set of published nodes",
        "description": "Returns next set of currently published node ids for an endpoint.\r\nThe endpoint must be activated and connected and the module client\r\nand server must trust each other.",
        "operationId": "GetNextListOfPublishedNodes",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "endpointId",
            "in": "path",
            "description": "The identifier of the activated endpoint.",
            "required": true,
            "type": "string"
          },
          {
            "name": "continuationToken",
            "in": "query",
            "description": "The continuation token to continue with",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PublishedItemListResponseApiModel"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication"
            ]
          }
        ],
        "x-ms-pageable": {
          "nextLinkName": "continuationToken"
        }
      },
      "post": {
        "tags": [
          "Publish"
        ],
        "summary": "Get currently published nodes",
        "description": "Returns currently published node ids for an endpoint.\r\nThe endpoint must be activated and connected and the module client\r\nand server must trust each other.",
        "operationId": "GetFirstListOfPublishedNodes",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "endpointId",
            "in": "path",
            "description": "The identifier of the activated endpoint.",
            "required": true,
            "type": "string"
          },
          {
            "name": "request",
            "in": "body",
            "description": "The list request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PublishedItemListRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/PublishedItemListResponseApiModel"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication"
            ]
          }
        ]
      }
    },
    "/v2/read/{endpointId}": {
      "get": {
        "tags": [
          "Read"
        ],
        "summary": "Get variable value",
        "description": "Get a variable node's value using its node id.\r\nThe endpoint must be activated and connected and the module client\r\nand server must trust each other.",
        "operationId": "GetValue",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "endpointId",
            "in": "path",
            "description": "The identifier of the activated endpoint.",
            "required": true,
            "type": "string"
          },
          {
            "name": "nodeId",
            "in": "query",
            "description": "The node to read",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ValueReadResponseApiModel"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Read"
        ],
        "summary": "Read variable value",
        "description": "Read a variable node's value.\r\nThe endpoint must be activated and connected and the module client\r\nand server must trust each other.",
        "operationId": "ReadValue",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "endpointId",
            "in": "path",
            "description": "The identifier of the activated endpoint.",
            "required": true,
            "type": "string"
          },
          {
            "name": "request",
            "in": "body",
            "description": "The read value request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ValueReadRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ValueReadResponseApiModel"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication"
            ]
          }
        ]
      }
    },
    "/v2/read/{endpointId}/attributes": {
      "post": {
        "tags": [
          "Read"
        ],
        "summary": "Read node attributes",
        "description": "Read attributes of a node.\r\nThe endpoint must be activated and connected and the module client\r\nand server must trust each other.",
        "operationId": "ReadAttributes",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "endpointId",
            "in": "path",
            "description": "The identifier of the activated endpoint.",
            "required": true,
            "type": "string"
          },
          {
            "name": "request",
            "in": "body",
            "description": "The read request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReadRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ReadResponseApiModel"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication"
            ]
          }
        ]
      }
    },
    "/v2/status": {
      "get": {
        "tags": [
          "Status"
        ],
        "summary": "Return the service status in the form of the service status\r\napi model.",
        "operationId": "GetStatus",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StatusResponseApiModel"
            }
          }
        }
      }
    },
    "/v2/write/{endpointId}": {
      "post": {
        "tags": [
          "Write"
        ],
        "summary": "Write variable value",
        "description": "Write variable node's value.\r\nThe endpoint must be activated and connected and the module client\r\nand server must trust each other.",
        "operationId": "WriteValue",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "endpointId",
            "in": "path",
            "description": "The identifier of the activated endpoint.",
            "required": true,
            "type": "string"
          },
          {
            "name": "request",
            "in": "body",
            "description": "The write value request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ValueWriteRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ValueWriteResponseApiModel"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication"
            ]
          }
        ]
      }
    },
    "/v2/write/{endpointId}/attributes": {
      "post": {
        "tags": [
          "Write"
        ],
        "summary": "Write node attributes",
        "description": "Write any attribute of a node.\r\nThe endpoint must be activated and connected and the module client\r\nand server must trust each other.",
        "operationId": "WriteAttributes",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "endpointId",
            "in": "path",
            "description": "The identifier of the activated endpoint.",
            "required": true,
            "type": "string"
          },
          {
            "name": "request",
            "in": "body",
            "description": "The batch write request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WriteRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WriteResponseApiModel"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication"
            ]
          }
        ]
      }
    }
  },
  "definitions": {
    "BrowseRequestApiModel": {
      "description": "Browse request model",
      "type": "object",
      "properties": {
        "nodeId": {
          "description": "Node to browse.\r\n(default: RootFolder).",
          "type": "string"
        },
        "direction": {
          "description": "Direction to browse in\r\n(default: forward)",
          "enum": [
            "Forward",
            "Backward",
            "Both"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "BrowseDirection",
            "modelAsString": false
          }
        },
        "view": {
          "$ref": "#/definitions/BrowseViewApiModel",
          "description": "View to browse\r\n(default: null = new view = All nodes)."
        },
        "referenceTypeId": {
          "description": "Reference types to browse.\r\n(default: hierarchical).",
          "type": "string"
        },
        "noSubtypes": {
          "description": "Whether to include subtypes of the reference type.\r\n(default is false)",
          "default": false,
          "type": "boolean"
        },
        "maxReferencesToReturn": {
          "format": "int32",
          "description": "Max number of references to return. There might\r\nbe less returned as this is up to the client\r\nrestrictions.  Set to 0 to return no references\r\nor target nodes.\r\n(default is decided by client e.g. 60)",
          "type": "integer"
        },
        "targetNodesOnly": {
          "description": "Whether to collapse all references into a set of\r\nunique target nodes and not show reference\r\ninformation.\r\n(default is false)",
          "default": false,
          "type": "boolean"
        },
        "readVariableValues": {
          "description": "Whether to read variable values on target nodes.\r\n(default is false)",
          "default": false,
          "type": "boolean"
        },
        "header": {
          "$ref": "#/definitions/RequestHeaderApiModel",
          "description": "Optional request header"
        }
      }
    },
    "BrowseViewApiModel": {
      "description": "browse view model",
      "required": [
        "viewId"
      ],
      "type": "object",
      "properties": {
        "viewId": {
          "description": "Node of the view to browse",
          "type": "string"
        },
        "version": {
          "format": "int32",
          "description": "Browses specific version of the view.",
          "type": "integer"
        },
        "timestamp": {
          "format": "date-time",
          "description": "Browses at or before this timestamp.",
          "type": "string"
        }
      }
    },
    "RequestHeaderApiModel": {
      "description": "Request header model",
      "type": "object",
      "properties": {
        "elevation": {
          "$ref": "#/definitions/CredentialApiModel",
          "description": "Optional User elevation"
        },
        "locales": {
          "description": "Optional list of locales in preference order.",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "diagnostics": {
          "$ref": "#/definitions/DiagnosticsApiModel",
          "description": "Optional diagnostics configuration"
        }
      }
    },
    "CredentialApiModel": {
      "description": "Credential model",
      "type": "object",
      "properties": {
        "type": {
          "description": "Type of credential",
          "default": "None",
          "enum": [
            "None",
            "UserName",
            "X509Certificate",
            "JwtToken"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "CredentialType",
            "modelAsString": false
          }
        },
        "value": {
          "description": "Value to pass to server",
          "type": "object"
        }
      }
    },
    "DiagnosticsApiModel": {
      "description": "Diagnostics configuration",
      "type": "object",
      "properties": {
        "level": {
          "description": "Requested level of response diagnostics.\r\n(default: Status)",
          "enum": [
            "None",
            "Status",
            "Operations",
            "Diagnostics",
            "Verbose"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "DiagnosticsLevel",
            "modelAsString": false
          }
        },
        "auditId": {
          "description": "Client audit log entry.\r\n(default: client generated)",
          "type": "string"
        },
        "timeStamp": {
          "format": "date-time",
          "description": "Timestamp of request.\r\n(default: client generated)",
          "type": "string"
        }
      }
    },
    "BrowseResponseApiModel": {
      "description": "browse response model",
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/NodeApiModel",
          "description": "Node info for the currently browsed node"
        },
        "references": {
          "description": "References, if included, otherwise null.",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodeReferenceApiModel"
          }
        },
        "continuationToken": {
          "description": "Continuation token if more results pending.",
          "type": "string"
        },
        "errorInfo": {
          "$ref": "#/definitions/ServiceResultApiModel",
          "description": "Service result in case of error"
        }
      }
    },
    "NodeApiModel": {
      "description": "Node model",
      "required": [
        "nodeId"
      ],
      "type": "object",
      "properties": {
        "nodeClass": {
          "description": "Type of node",
          "enum": [
            "Object",
            "Variable",
            "Method",
            "ObjectType",
            "VariableType",
            "ReferenceType",
            "DataType",
            "View"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "NodeClass",
            "modelAsString": false
          }
        },
        "displayName": {
          "description": "Display name",
          "type": "string"
        },
        "nodeId": {
          "description": "Id of node.\r\n(Mandatory).",
          "type": "string"
        },
        "description": {
          "description": "Description if any",
          "type": "string"
        },
        "browseName": {
          "description": "Browse name",
          "type": "string"
        },
        "accessRestrictions": {
          "description": "Node access restrictions if any.\r\n(default: none)",
          "enum": [
            "SigningRequired",
            "EncryptionRequired",
            "SessionRequired"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "NodeAccessRestrictions",
            "modelAsString": false
          }
        },
        "writeMask": {
          "format": "int32",
          "description": "Default write mask for the node\r\n(default: 0)",
          "type": "integer"
        },
        "userWriteMask": {
          "format": "int32",
          "description": "User write mask for the node\r\n(default: 0)",
          "type": "integer"
        },
        "isAbstract": {
          "description": "Whether type is abstract, if type can\r\nbe abstract.  Null if not type node.\r\n(default: false)",
          "type": "boolean"
        },
        "containsNoLoops": {
          "description": "Whether a view contains loops. Null if\r\nnot a view.",
          "type": "boolean"
        },
        "eventNotifier": {
          "description": "If object or view and eventing, event notifier\r\nto subscribe to.\r\n(default: no events supported)",
          "enum": [
            "SubscribeToEvents",
            "HistoryRead",
            "HistoryWrite"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "NodeEventNotifier",
            "modelAsString": false
          }
        },
        "executable": {
          "description": "If method node class, whether method can\r\nbe called.",
          "type": "boolean"
        },
        "userExecutable": {
          "description": "If method node class, whether method can\r\nbe called by current user.\r\n(default: false if not executable)",
          "type": "boolean"
        },
        "dataTypeDefinition": {
          "description": "Data type definition in case node is a\r\ndata type node and definition is available,\r\notherwise null.",
          "type": "object"
        },
        "accessLevel": {
          "description": "Default access level for variable node.\r\n(default: 0)",
          "enum": [
            "CurrentRead",
            "CurrentWrite",
            "HistoryRead",
            "HistoryWrite",
            "SemanticChange",
            "StatusWrite",
            "TimestampWrite",
            "NonatomicRead",
            "NonatomicWrite",
            "WriteFullArrayOnly"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "NodeAccessLevel",
            "modelAsString": false
          }
        },
        "userAccessLevel": {
          "description": "User access level for variable node or null.\r\n(default: 0)",
          "enum": [
            "CurrentRead",
            "CurrentWrite",
            "HistoryRead",
            "HistoryWrite",
            "SemanticChange",
            "StatusWrite",
            "TimestampWrite",
            "NonatomicRead",
            "NonatomicWrite",
            "WriteFullArrayOnly"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "NodeAccessLevel",
            "modelAsString": false
          }
        },
        "dataType": {
          "description": "If variable the datatype of the variable.\r\n(default: null)",
          "type": "string"
        },
        "valueRank": {
          "description": "Value rank of the variable data of a variable\r\nor variable type, otherwise null.\r\n(default: scalar = -1)",
          "enum": [
            "ScalarOrOneDimension",
            "Any",
            "Scalar",
            "OneOrMoreDimensions",
            "OneDimension",
            "TwoDimensions"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "NodeValueRank",
            "modelAsString": false
          }
        },
        "arrayDimensions": {
          "description": "Array dimensions of variable or variable type.\r\n(default: empty array)",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        },
        "historizing": {
          "description": "Whether the value of a variable is historizing.\r\n(default: false)",
          "type": "boolean"
        },
        "minimumSamplingInterval": {
          "format": "double",
          "description": "Minimum sampling interval for the variable\r\nvalue, otherwise null if not a variable node.\r\n(default: null)",
          "type": "number"
        },
        "value": {
          "description": "Value of variable or default value of the\r\nsubtyped variable in case node is a variable\r\ntype, otherwise null.",
          "type": "object"
        },
        "inverseName": {
          "description": "Inverse name of the reference if the node is\r\na reference type, otherwise null.",
          "type": "string"
        },
        "symmetric": {
          "description": "Whether the reference is symmetric in case\r\nthe node is a reference type, otherwise\r\nnull.",
          "type": "boolean"
        },
        "rolePermissions": {
          "description": "Role permissions",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/RolePermissionApiModel"
          }
        },
        "userRolePermissions": {
          "description": "User Role permissions",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/RolePermissionApiModel"
          }
        },
        "typeDefinitionId": {
          "description": "Optional type definition of the node",
          "type": "string"
        },
        "children": {
          "description": "Whether node has children which are defined as\r\nany forward hierarchical references.\r\n(default: unknown)",
          "type": "boolean"
        }
      }
    },
    "NodeReferenceApiModel": {
      "description": "reference model",
      "required": [
        "target"
      ],
      "type": "object",
      "properties": {
        "referenceTypeId": {
          "description": "Reference Type identifier",
          "type": "string"
        },
        "direction": {
          "description": "Browse direction of reference",
          "enum": [
            "Forward",
            "Backward",
            "Both"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "BrowseDirection",
            "modelAsString": false
          }
        },
        "target": {
          "$ref": "#/definitions/NodeApiModel",
          "description": "Target node"
        }
      }
    },
    "ServiceResultApiModel": {
      "description": "Service result",
      "type": "object",
      "properties": {
        "statusCode": {
          "format": "int32",
          "description": "Error code - if null operation succeeded.",
          "type": "integer"
        },
        "errorMessage": {
          "description": "Error message in case of error or null.",
          "type": "string"
        },
        "diagnostics": {
          "description": "Additional diagnostics information",
          "type": "object"
        }
      }
    },
    "RolePermissionApiModel": {
      "description": "Role permission model",
      "required": [
        "roleId"
      ],
      "type": "object",
      "properties": {
        "roleId": {
          "description": "Identifier of the role object.",
          "type": "string"
        },
        "permissions": {
          "description": "Permissions assigned for the role.",
          "enum": [
            "Browse",
            "ReadRolePermissions",
            "WriteAttribute",
            "WriteRolePermissions",
            "WriteHistorizing",
            "Read",
            "Write",
            "ReadHistory",
            "InsertHistory",
            "ModifyHistory",
            "DeleteHistory",
            "ReceiveEvents",
            "Call",
            "AddReference",
            "RemoveReference",
            "DeleteNode",
            "AddNode"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "RolePermissions",
            "modelAsString": false
          }
        }
      }
    },
    "BrowseNextRequestApiModel": {
      "description": "Request node browsing continuation",
      "required": [
        "continuationToken"
      ],
      "type": "object",
      "properties": {
        "continuationToken": {
          "description": "Continuation token from previews browse request.\r\n(mandatory)",
          "type": "string"
        },
        "abort": {
          "description": "Whether to abort browse and release.\r\n(default: false)",
          "default": false,
          "type": "boolean"
        },
        "targetNodesOnly": {
          "description": "Whether to collapse all references into a set of\r\nunique target nodes and not show reference\r\ninformation.\r\n(default is false)",
          "default": false,
          "type": "boolean"
        },
        "readVariableValues": {
          "description": "Whether to read variable values on target nodes.\r\n(default is false)",
          "default": false,
          "type": "boolean"
        },
        "header": {
          "$ref": "#/definitions/RequestHeaderApiModel",
          "description": "Optional request header"
        }
      }
    },
    "BrowseNextResponseApiModel": {
      "description": "Result of node browse continuation",
      "type": "object",
      "properties": {
        "references": {
          "description": "References, if included, otherwise null.",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodeReferenceApiModel"
          }
        },
        "continuationToken": {
          "description": "Continuation token if more results pending.",
          "type": "string"
        },
        "errorInfo": {
          "$ref": "#/definitions/ServiceResultApiModel",
          "description": "Service result in case of error"
        }
      }
    },
    "BrowsePathRequestApiModel": {
      "description": "Browse nodes by path",
      "required": [
        "browsePaths"
      ],
      "type": "object",
      "properties": {
        "nodeId": {
          "description": "Node to browse from.\r\n(default: RootFolder).",
          "type": "string"
        },
        "browsePaths": {
          "description": "The paths to browse from node.\r\n(mandatory)",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "readVariableValues": {
          "description": "Whether to read variable values on target nodes.\r\n(default is false)",
          "default": false,
          "type": "boolean"
        },
        "header": {
          "$ref": "#/definitions/RequestHeaderApiModel",
          "description": "Optional request header"
        }
      }
    },
    "BrowsePathResponseApiModel": {
      "description": "Result of node browse continuation",
      "type": "object",
      "properties": {
        "targets": {
          "description": "Targets",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodePathTargetApiModel"
          }
        },
        "errorInfo": {
          "$ref": "#/definitions/ServiceResultApiModel",
          "description": "Service result in case of error"
        }
      }
    },
    "NodePathTargetApiModel": {
      "description": "Node path target",
      "type": "object",
      "properties": {
        "browsePath": {
          "description": "The target browse path",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "target": {
          "$ref": "#/definitions/NodeApiModel",
          "description": "Target node"
        },
        "remainingPathIndex": {
          "format": "int32",
          "description": "Remaining index in path",
          "type": "integer"
        }
      }
    },
    "MethodMetadataRequestApiModel": {
      "description": "Method metadata request model",
      "required": [
        "methodId"
      ],
      "type": "object",
      "properties": {
        "methodId": {
          "description": "Method id of method to call.\r\n(Required)",
          "type": "string"
        },
        "methodBrowsePath": {
          "description": "An optional component path from the node identified by\r\nMethodId to the actual method node.",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "header": {
          "$ref": "#/definitions/RequestHeaderApiModel",
          "description": "Optional request header"
        }
      }
    },
    "MethodMetadataResponseApiModel": {
      "description": "Method metadata query model",
      "type": "object",
      "properties": {
        "objectId": {
          "description": "Id of object that the method is a component of",
          "type": "string"
        },
        "inputArguments": {
          "description": "Input argument meta data",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/MethodMetadataArgumentApiModel"
          }
        },
        "outputArguments": {
          "description": "output argument meta data",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/MethodMetadataArgumentApiModel"
          }
        },
        "errorInfo": {
          "$ref": "#/definitions/ServiceResultApiModel",
          "description": "Service result in case of error"
        }
      }
    },
    "MethodMetadataArgumentApiModel": {
      "description": "Method argument metadata model",
      "type": "object",
      "properties": {
        "name": {
          "description": "Argument name",
          "type": "string"
        },
        "description": {
          "description": "Optional description",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/NodeApiModel",
          "description": "Data type node of the argument"
        },
        "defaultValue": {
          "description": "Default value",
          "type": "object"
        },
        "valueRank": {
          "description": "Optional, scalar if not set",
          "enum": [
            "ScalarOrOneDimension",
            "Any",
            "Scalar",
            "OneOrMoreDimensions",
            "OneDimension",
            "TwoDimensions"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "NodeValueRank",
            "modelAsString": false
          }
        },
        "arrayDimensions": {
          "description": "Optional, array dimension",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "format": "int32",
            "type": "integer"
          }
        }
      }
    },
    "MethodCallRequestApiModel": {
      "description": "Call request model",
      "type": "object",
      "properties": {
        "methodId": {
          "description": "Method id of method to call.",
          "type": "string"
        },
        "objectId": {
          "description": "Context of the method, i.e. an object or object type\r\nnode.",
          "type": "string"
        },
        "arguments": {
          "description": "Arguments for the method - null means no args",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/MethodCallArgumentApiModel"
          }
        },
        "methodBrowsePath": {
          "description": "An optional component path from the node identified by\r\nMethodId or from a resolved objectId to the actual\r\nmethod node.",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "objectBrowsePath": {
          "description": "An optional component path from the node identified by\r\nObjectId to the actual object or objectType node.\r\nIf ObjectId is null, the root node (i=84) is used.",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "header": {
          "$ref": "#/definitions/RequestHeaderApiModel",
          "description": "Optional request header"
        }
      }
    },
    "MethodCallArgumentApiModel": {
      "description": "method arg model",
      "type": "object",
      "properties": {
        "value": {
          "description": "Initial value or value to use",
          "type": "object"
        },
        "dataType": {
          "description": "Data type Id of the value (from meta data)",
          "type": "string"
        }
      }
    },
    "MethodCallResponseApiModel": {
      "description": "Method call response model",
      "type": "object",
      "properties": {
        "results": {
          "description": "Output results",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/MethodCallArgumentApiModel"
          }
        },
        "errorInfo": {
          "$ref": "#/definitions/ServiceResultApiModel",
          "description": "Service result in case of error"
        }
      }
    },
    "PublishStartRequestApiModel": {
      "description": "Publish request",
      "required": [
        "item"
      ],
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/PublishedItemApiModel",
          "description": "Item to publish"
        },
        "header": {
          "$ref": "#/definitions/RequestHeaderApiModel",
          "description": "Optional request header"
        }
      }
    },
    "PublishedItemApiModel": {
      "description": "A monitored and published item",
      "required": [
        "nodeId"
      ],
      "type": "object",
      "properties": {
        "nodeId": {
          "description": "Node to monitor",
          "type": "string"
        },
        "browsePath": {
          "description": "An optional path from NodeId instance to\r\nthe actual node.",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "nodeAttribute": {
          "description": "Attribute to monitor",
          "enum": [
            "NodeClass",
            "BrowseName",
            "DisplayName",
            "Description",
            "WriteMask",
            "UserWriteMask",
            "IsAbstract",
            "Symmetric",
            "InverseName",
            "ContainsNoLoops",
            "EventNotifier",
            "Value",
            "DataType",
            "ValueRank",
            "ArrayDimensions",
            "AccessLevel",
            "UserAccessLevel",
            "MinimumSamplingInterval",
            "Historizing",
            "Executable",
            "UserExecutable",
            "DataTypeDefinition",
            "RolePermissions",
            "UserRolePermissions",
            "AccessRestrictions"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "NodeAttribute",
            "modelAsString": false
          }
        },
        "publishingInterval": {
          "format": "int32",
          "description": "Publishing interval to use",
          "type": "integer"
        },
        "samplingInterval": {
          "format": "int32",
          "description": "Sampling interval to use",
          "type": "integer"
        }
      }
    },
    "PublishStartResponseApiModel": {
      "description": "Result of publish request",
      "type": "object",
      "properties": {
        "errorInfo": {
          "$ref": "#/definitions/ServiceResultApiModel",
          "description": "Service result in case of error"
        }
      }
    },
    "PublishStopRequestApiModel": {
      "description": "Unpublish request",
      "required": [
        "nodeId"
      ],
      "type": "object",
      "properties": {
        "nodeId": {
          "description": "Node of published item to unpublish",
          "type": "string"
        },
        "browsePath": {
          "description": "An optional path from NodeId instance to\r\nthe actual node.",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "nodeAttribute": {
          "description": "Attribute of item to unpublish",
          "enum": [
            "NodeClass",
            "BrowseName",
            "DisplayName",
            "Description",
            "WriteMask",
            "UserWriteMask",
            "IsAbstract",
            "Symmetric",
            "InverseName",
            "ContainsNoLoops",
            "EventNotifier",
            "Value",
            "DataType",
            "ValueRank",
            "ArrayDimensions",
            "AccessLevel",
            "UserAccessLevel",
            "MinimumSamplingInterval",
            "Historizing",
            "Executable",
            "UserExecutable",
            "DataTypeDefinition",
            "RolePermissions",
            "UserRolePermissions",
            "AccessRestrictions"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "NodeAttribute",
            "modelAsString": false
          }
        },
        "diagnostics": {
          "$ref": "#/definitions/DiagnosticsApiModel",
          "description": "Optional diagnostics configuration"
        }
      }
    },
    "PublishStopResponseApiModel": {
      "description": "Result of unpublish request",
      "type": "object",
      "properties": {
        "errorInfo": {
          "$ref": "#/definitions/ServiceResultApiModel",
          "description": "Service result in case of error"
        }
      }
    },
    "PublishedItemListRequestApiModel": {
      "description": "Request list of published items",
      "type": "object",
      "properties": {
        "continuationToken": {
          "description": "Continuation token or null to start",
          "type": "string"
        }
      }
    },
    "PublishedItemListResponseApiModel": {
      "description": "List of published nodes",
      "type": "object",
      "properties": {
        "items": {
          "description": "Monitored items",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/PublishedItemApiModel"
          }
        },
        "continuationToken": {
          "description": "Continuation or null if final",
          "type": "string"
        }
      }
    },
    "ValueReadRequestApiModel": {
      "description": "Node value read request webservice api model",
      "required": [
        "nodeId"
      ],
      "type": "object",
      "properties": {
        "nodeId": {
          "description": "Node to read from (mandatory)",
          "type": "string"
        },
        "browsePath": {
          "description": "An optional path from NodeId instance to\r\nthe actual node.",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "indexRange": {
          "description": "Index range to read, e.g. 1:2,0:1 for 2 slices\r\nout of a matrix or 0:1 for the first item in\r\nan array, string or bytestring.\r\nSee 7.22 of part 4: NumericRange.",
          "type": "string"
        },
        "header": {
          "$ref": "#/definitions/RequestHeaderApiModel",
          "description": "Optional request header"
        }
      }
    },
    "ValueReadResponseApiModel": {
      "description": "Value read response model",
      "type": "object",
      "properties": {
        "value": {
          "description": "Value read",
          "type": "object"
        },
        "dataType": {
          "description": "Built in data type of the value read.",
          "type": "string"
        },
        "sourcePicoseconds": {
          "format": "int32",
          "description": "Pico seconds part of when value was read at source.",
          "type": "integer"
        },
        "sourceTimestamp": {
          "format": "date-time",
          "description": "Timestamp of when value was read at source.",
          "type": "string"
        },
        "serverPicoseconds": {
          "format": "int32",
          "description": "Pico seconds part of when value was read at server.",
          "type": "integer"
        },
        "serverTimestamp": {
          "format": "date-time",
          "description": "Timestamp of when value was read at server.",
          "type": "string"
        },
        "errorInfo": {
          "$ref": "#/definitions/ServiceResultApiModel",
          "description": "Service result in case of error"
        }
      }
    },
    "ReadRequestApiModel": {
      "description": "Request node attribute read",
      "required": [
        "attributes"
      ],
      "type": "object",
      "properties": {
        "attributes": {
          "description": "Attributes to read",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttributeReadRequestApiModel"
          }
        },
        "header": {
          "$ref": "#/definitions/RequestHeaderApiModel",
          "description": "Optional request header"
        }
      }
    },
    "AttributeReadRequestApiModel": {
      "description": "Attribute to read",
      "required": [
        "nodeId",
        "attribute"
      ],
      "type": "object",
      "properties": {
        "nodeId": {
          "description": "Node to read from or write to (mandatory)",
          "type": "string"
        },
        "attribute": {
          "description": "Attribute to read or write",
          "enum": [
            "NodeClass",
            "BrowseName",
            "DisplayName",
            "Description",
            "WriteMask",
            "UserWriteMask",
            "IsAbstract",
            "Symmetric",
            "InverseName",
            "ContainsNoLoops",
            "EventNotifier",
            "Value",
            "DataType",
            "ValueRank",
            "ArrayDimensions",
            "AccessLevel",
            "UserAccessLevel",
            "MinimumSamplingInterval",
            "Historizing",
            "Executable",
            "UserExecutable",
            "DataTypeDefinition",
            "RolePermissions",
            "UserRolePermissions",
            "AccessRestrictions"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "NodeAttribute",
            "modelAsString": false
          }
        }
      }
    },
    "ReadResponseApiModel": {
      "description": "Result of attribute reads",
      "type": "object",
      "properties": {
        "results": {
          "description": "All results of attribute reads",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttributeReadResponseApiModel"
          }
        }
      }
    },
    "AttributeReadResponseApiModel": {
      "description": "Attribute value read",
      "type": "object",
      "properties": {
        "value": {
          "description": "Attribute value",
          "type": "object"
        },
        "errorInfo": {
          "$ref": "#/definitions/ServiceResultApiModel",
          "description": "Service result in case of error"
        }
      }
    },
    "StatusResponseApiModel": {
      "description": "Status response model",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of this service",
          "type": "string"
        },
        "status": {
          "description": "Operational status",
          "type": "string"
        },
        "currentTime": {
          "description": "Current time",
          "type": "string",
          "readOnly": true
        },
        "startTime": {
          "description": "Start time of service",
          "type": "string",
          "readOnly": true
        },
        "upTime": {
          "format": "int64",
          "description": "Up time of service",
          "type": "integer",
          "readOnly": true
        },
        "uid": {
          "description": "Value generated at bootstrap by each instance of the service and\r\nused to correlate logs coming from the same instance. The value\r\nchanges every time the service starts.",
          "type": "string",
          "readOnly": true
        },
        "properties": {
          "description": "A property bag with details about the service",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "readOnly": true
        },
        "dependencies": {
          "description": "A property bag with details about the internal dependencies",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "readOnly": true
        },
        "$metadata": {
          "description": "Optional meta data.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "readOnly": true
        }
      }
    },
    "ValueWriteRequestApiModel": {
      "description": "Value write request model",
      "required": [
        "nodeId",
        "value"
      ],
      "type": "object",
      "properties": {
        "nodeId": {
          "description": "Node id to to write value to.",
          "type": "string"
        },
        "browsePath": {
          "description": "An optional path from NodeId instance to\r\nthe actual node.",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "value": {
          "description": "Value to write. The system tries to convert\r\nthe value according to the data type value,\r\ne.g. convert comma seperated value strings\r\ninto arrays.  (Mandatory)",
          "type": "object"
        },
        "dataType": {
          "description": "A built in datatype for the value. This can\r\nbe a data type from browse, or a built in\r\ntype.\r\n(default: best effort)",
          "type": "string"
        },
        "indexRange": {
          "description": "Index range to write",
          "type": "string"
        },
        "header": {
          "$ref": "#/definitions/RequestHeaderApiModel",
          "description": "Optional request header"
        }
      }
    },
    "ValueWriteResponseApiModel": {
      "description": "Value write response model",
      "type": "object",
      "properties": {
        "errorInfo": {
          "$ref": "#/definitions/ServiceResultApiModel",
          "description": "Service result in case of error"
        }
      }
    },
    "WriteRequestApiModel": {
      "description": "Request node attribute write",
      "required": [
        "attributes"
      ],
      "type": "object",
      "properties": {
        "attributes": {
          "description": "Attributes to update",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttributeWriteRequestApiModel"
          }
        },
        "header": {
          "$ref": "#/definitions/RequestHeaderApiModel",
          "description": "Optional request header"
        }
      }
    },
    "AttributeWriteRequestApiModel": {
      "description": "Attribute and value to write to it",
      "required": [
        "nodeId",
        "attribute",
        "value"
      ],
      "type": "object",
      "properties": {
        "nodeId": {
          "description": "Node to write to (mandatory)",
          "type": "string"
        },
        "attribute": {
          "description": "Attribute to write (mandatory)",
          "enum": [
            "NodeClass",
            "BrowseName",
            "DisplayName",
            "Description",
            "WriteMask",
            "UserWriteMask",
            "IsAbstract",
            "Symmetric",
            "InverseName",
            "ContainsNoLoops",
            "EventNotifier",
            "Value",
            "DataType",
            "ValueRank",
            "ArrayDimensions",
            "AccessLevel",
            "UserAccessLevel",
            "MinimumSamplingInterval",
            "Historizing",
            "Executable",
            "UserExecutable",
            "DataTypeDefinition",
            "RolePermissions",
            "UserRolePermissions",
            "AccessRestrictions"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "NodeAttribute",
            "modelAsString": false
          }
        },
        "value": {
          "description": "Value to write (mandatory)",
          "type": "object"
        }
      }
    },
    "WriteResponseApiModel": {
      "description": "Result of attribute write",
      "type": "object",
      "properties": {
        "results": {
          "description": "All results of attribute writes",
          "uniqueItems": false,
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttributeWriteResponseApiModel"
          }
        }
      }
    },
    "AttributeWriteResponseApiModel": {
      "description": "Attribute write result",
      "type": "object",
      "properties": {
        "errorInfo": {
          "$ref": "#/definitions/ServiceResultApiModel",
          "description": "Service result in case of error"
        }
      }
    }
  },
  "securityDefinitions": {
    "oauth2": {
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/6e660ce4-d51a-4585-80c6-58035e212354/oauth2/authorize",
      "scopes": {
        "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication": "Access http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication operations"
      },
      "type": "oauth2",
      "description": "Implicit oauth2 token flow."
    }
  },
  "tags": [
    {
      "name": "Browse",
      "description": "Browse nodes services"
    },
    {
      "name": "Call",
      "description": "Call node method services"
    },
    {
      "name": "Publish",
      "description": "Value and Event publishing services"
    },
    {
      "name": "Read",
      "description": "Node read services"
    },
    {
      "name": "Status",
      "description": "Status checks"
    },
    {
      "name": "Write",
      "description": "Node writing services"
    }
  ]
}