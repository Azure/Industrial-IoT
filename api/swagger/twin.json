{
  "swagger": "2.0",
  "info": {
    "title": "Opc-Twin-Service",
    "description": "Azure Industrial IoT OPC UA Twin Service",
    "contact": {
      "url": "https://www.github.com/Azure/Industrial-IoT"
    },
    "license": {
      "name": "MIT LICENSE",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "v2"
  },
  "host": "localhost:9080",
  "schemes": [
    "http",
    "https"
  ],
  "paths": {
    "/twin/v2/browse/{endpointId}": {
      "post": {
        "tags": [
          "Browse"
        ],
        "summary": "Browse node references",
        "description": "Browse a node on the specified endpoint. The endpoint must be activated and connected and the module client and server must trust each other.",
        "operationId": "Browse",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json",
          "application/x-msgpack"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json",
          "application/x-msgpack"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "endpointId",
            "description": "The identifier of the activated endpoint.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The browse request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BrowseRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BrowseResponseApiModel"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Browse"
        ],
        "summary": "Browse set of unique target nodes",
        "description": "Browse the set of unique hierarchically referenced target nodes on the endpoint. The endpoint must be activated and connected and the module client and server must trust each other. The root node id to browse from can be provided as part of the query parameters. If it is not provided, the RootFolder node is browsed. Note that this is the same as the POST method with the model containing the node id and the targetNodesOnly flag set to true.",
        "operationId": "GetSetOfUniqueNodes",
        "produces": [
          "text/plain",
          "application/json",
          "text/json",
          "application/x-msgpack"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "endpointId",
            "description": "The identifier of the activated endpoint.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "nodeId",
            "description": "The node to browse or omit to browse the root node (i=84)",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BrowseResponseApiModel"
            }
          }
        }
      }
    },
    "/twin/v2/browse/{endpointId}/next": {
      "post": {
        "tags": [
          "Browse"
        ],
        "summary": "Browse next set of references",
        "description": "Browse next set of references on the endpoint. The endpoint must be activated and connected and the module client and server must trust each other.",
        "operationId": "BrowseNext",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json",
          "application/x-msgpack"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json",
          "application/x-msgpack"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "endpointId",
            "description": "The identifier of the activated endpoint.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The request body with continuation token.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BrowseNextRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BrowseNextResponseApiModel"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Browse"
        ],
        "summary": "Browse next set of unique target nodes",
        "description": "Browse the next set of unique hierarchically referenced target nodes on the endpoint. The endpoint must be activated and connected and the module client and server must trust each other. Note that this is the same as the POST method with the model containing the continuation token and the targetNodesOnly flag set to true.",
        "operationId": "GetNextSetOfUniqueNodes",
        "produces": [
          "text/plain",
          "application/json",
          "text/json",
          "application/x-msgpack"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "endpointId",
            "description": "The identifier of the activated endpoint.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "continuationToken",
            "description": "Continuation token from GetSetOfUniqueNodes operation",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BrowseNextResponseApiModel"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "continuationToken"
        }
      }
    },
    "/twin/v2/browse/{endpointId}/path": {
      "post": {
        "tags": [
          "Browse"
        ],
        "summary": "Browse using a browse path",
        "description": "Browse using a path from the specified node id. This call uses TranslateBrowsePathsToNodeIds service under the hood. The endpoint must be activated and connected and the module client and server must trust each other.",
        "operationId": "BrowseUsingPath",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json",
          "application/x-msgpack"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json",
          "application/x-msgpack"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "endpointId",
            "description": "The identifier of the activated endpoint.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The browse path request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BrowsePathRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BrowsePathResponseApiModel"
            }
          }
        }
      }
    },
    "/twin/v2/call/{endpointId}/metadata": {
      "post": {
        "tags": [
          "Call"
        ],
        "summary": "Get method meta data",
        "description": "Return method meta data to support a user interface displaying forms to input and output arguments. The endpoint must be activated and connected and the module client and server must trust each other.",
        "operationId": "GetCallMetadata",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json",
          "application/x-msgpack"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json",
          "application/x-msgpack"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "endpointId",
            "description": "The identifier of the activated endpoint.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The method metadata request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MethodMetadataRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/MethodMetadataResponseApiModel"
            }
          }
        }
      }
    },
    "/twin/v2/call/{endpointId}": {
      "post": {
        "tags": [
          "Call"
        ],
        "summary": "Call a method",
        "description": "Invoke method node with specified input arguments. The endpoint must be activated and connected and the module client and server must trust each other.",
        "operationId": "CallMethod",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json",
          "application/x-msgpack"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json",
          "application/x-msgpack"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "endpointId",
            "description": "The identifier of the activated endpoint.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The method call request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MethodCallRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/MethodCallResponseApiModel"
            }
          }
        }
      }
    },
    "/twin/v2/read/{endpointId}": {
      "post": {
        "tags": [
          "Read"
        ],
        "summary": "Read variable value",
        "description": "Read a variable node's value. The endpoint must be activated and connected and the module client and server must trust each other.",
        "operationId": "ReadValue",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json",
          "application/x-msgpack"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json",
          "application/x-msgpack"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "endpointId",
            "description": "The identifier of the activated endpoint.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The read value request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ValueReadRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ValueReadResponseApiModel"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Read"
        ],
        "summary": "Get variable value",
        "description": "Get a variable node's value using its node id. The endpoint must be activated and connected and the module client and server must trust each other.",
        "operationId": "GetValue",
        "produces": [
          "text/plain",
          "application/json",
          "text/json",
          "application/x-msgpack"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "endpointId",
            "description": "The identifier of the activated endpoint.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "nodeId",
            "description": "The node to read",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ValueReadResponseApiModel"
            }
          }
        }
      }
    },
    "/twin/v2/read/{endpointId}/attributes": {
      "post": {
        "tags": [
          "Read"
        ],
        "summary": "Read node attributes",
        "description": "Read attributes of a node. The endpoint must be activated and connected and the module client and server must trust each other.",
        "operationId": "ReadAttributes",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json",
          "application/x-msgpack"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json",
          "application/x-msgpack"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "endpointId",
            "description": "The identifier of the activated endpoint.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The read request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReadRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ReadResponseApiModel"
            }
          }
        }
      }
    },
    "/twin/v2/write/{endpointId}": {
      "post": {
        "tags": [
          "Write"
        ],
        "summary": "Write variable value",
        "description": "Write variable node's value. The endpoint must be activated and connected and the module client and server must trust each other.",
        "operationId": "WriteValue",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json",
          "application/x-msgpack"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json",
          "application/x-msgpack"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "endpointId",
            "description": "The identifier of the activated endpoint.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The write value request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ValueWriteRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ValueWriteResponseApiModel"
            }
          }
        }
      }
    },
    "/twin/v2/write/{endpointId}/attributes": {
      "post": {
        "tags": [
          "Write"
        ],
        "summary": "Write node attributes",
        "description": "Write any attribute of a node. The endpoint must be activated and connected and the module client and server must trust each other.",
        "operationId": "WriteAttributes",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json",
          "application/x-msgpack"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json",
          "application/x-msgpack"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "endpointId",
            "description": "The identifier of the activated endpoint.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The batch write request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WriteRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WriteResponseApiModel"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "BrowseDirection": {
      "description": "Direction to browse",
      "enum": [
        "Forward",
        "Backward",
        "Both"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "BrowseDirection",
        "modelAsString": false
      }
    },
    "BrowseViewApiModel": {
      "description": "Browse view model",
      "required": [
        "viewId"
      ],
      "type": "object",
      "properties": {
        "viewId": {
          "description": "Node of the view to browse",
          "type": "string"
        },
        "version": {
          "format": "int64",
          "description": "Browses specific version of the view.",
          "type": "integer"
        },
        "timestamp": {
          "format": "date-time",
          "description": "Browses at or before this timestamp.",
          "type": "string"
        }
      }
    },
    "NodeClass": {
      "description": "Node class",
      "enum": [
        "Object",
        "Variable",
        "Method",
        "ObjectType",
        "VariableType",
        "ReferenceType",
        "DataType",
        "View"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "NodeClass",
        "modelAsString": false
      }
    },
    "CredentialType": {
      "description": "Type of credentials to use for authentication",
      "enum": [
        "None",
        "UserName",
        "X509Certificate",
        "JwtToken"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "CredentialType",
        "modelAsString": false
      }
    },
    "CredentialApiModel": {
      "description": "Credential model",
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/CredentialType"
        },
        "value": {
          "description": "Value to pass to server"
        }
      }
    },
    "DiagnosticsLevel": {
      "description": "Level of diagnostics requested in responses",
      "enum": [
        "None",
        "Status",
        "Operations",
        "Diagnostics",
        "Verbose"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "DiagnosticsLevel",
        "modelAsString": false
      }
    },
    "DiagnosticsApiModel": {
      "description": "Diagnostics configuration",
      "type": "object",
      "properties": {
        "level": {
          "$ref": "#/definitions/DiagnosticsLevel"
        },
        "auditId": {
          "description": "Client audit log entry.\r\n(default: client generated)",
          "type": "string"
        },
        "timeStamp": {
          "format": "date-time",
          "description": "Timestamp of request.\r\n(default: client generated)",
          "type": "string"
        }
      }
    },
    "RequestHeaderApiModel": {
      "description": "Request header model",
      "type": "object",
      "properties": {
        "elevation": {
          "$ref": "#/definitions/CredentialApiModel"
        },
        "locales": {
          "description": "Optional list of locales in preference order.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "diagnostics": {
          "$ref": "#/definitions/DiagnosticsApiModel"
        }
      }
    },
    "BrowseRequestApiModel": {
      "description": "Browse request model",
      "type": "object",
      "properties": {
        "nodeId": {
          "description": "Node to browse.\r\n(defaults to root folder).",
          "type": "string"
        },
        "direction": {
          "$ref": "#/definitions/BrowseDirection"
        },
        "view": {
          "$ref": "#/definitions/BrowseViewApiModel"
        },
        "referenceTypeId": {
          "description": "Reference types to browse.\r\n(default: hierarchical).",
          "type": "string"
        },
        "noSubtypes": {
          "description": "Whether to include subtypes of the reference type.\r\n(default is false)",
          "type": "boolean"
        },
        "maxReferencesToReturn": {
          "format": "int64",
          "description": "Max number of references to return. There might\r\nbe less returned as this is up to the client\r\nrestrictions.  Set to 0 to return no references\r\nor target nodes.\r\n(default is decided by client e.g. 60)",
          "type": "integer"
        },
        "targetNodesOnly": {
          "description": "Whether to collapse all references into a set of\r\nunique target nodes and not show reference\r\ninformation.\r\n(default is false)",
          "type": "boolean"
        },
        "readVariableValues": {
          "description": "Whether to read variable values on target nodes.\r\n(default is false)",
          "type": "boolean"
        },
        "nodeClassFilter": {
          "description": "Filter returned target nodes by only returning\r\nnodes that have classes defined in this array.\r\n(default: null - all targets are returned)",
          "enum": [
            "Object",
            "Variable",
            "Method",
            "ObjectType",
            "VariableType",
            "ReferenceType",
            "DataType",
            "View"
          ],
          "type": "string",
          "items": {
            "$ref": "#/definitions/NodeClass"
          },
          "x-ms-enum": {
            "name": "NodeClass",
            "modelAsString": false
          }
        },
        "header": {
          "$ref": "#/definitions/RequestHeaderApiModel"
        }
      }
    },
    "ServiceResultApiModel": {
      "description": "Service result",
      "type": "object",
      "properties": {
        "statusCode": {
          "format": "int64",
          "description": "Error code - if null operation succeeded.",
          "type": "integer"
        },
        "errorMessage": {
          "description": "Error message in case of error or null.",
          "type": "string"
        },
        "diagnostics": {
          "description": "Additional diagnostics information"
        }
      }
    },
    "NodeAccessRestrictions": {
      "description": "Flags for use with the AccessRestrictions attribute.",
      "enum": [
        "SigningRequired",
        "EncryptionRequired",
        "SessionRequired"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "NodeAccessRestrictions",
        "modelAsString": false
      }
    },
    "NodeEventNotifier": {
      "description": "Flags that can be set for the EventNotifier attribute.",
      "enum": [
        "SubscribeToEvents",
        "HistoryRead",
        "HistoryWrite"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "NodeEventNotifier",
        "modelAsString": false
      }
    },
    "NodeAccessLevel": {
      "description": "Flags that can be set for the AccessLevel attribute.",
      "enum": [
        "CurrentRead",
        "CurrentWrite",
        "HistoryRead",
        "HistoryWrite",
        "SemanticChange",
        "StatusWrite",
        "TimestampWrite",
        "NonatomicRead",
        "NonatomicWrite",
        "WriteFullArrayOnly"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "NodeAccessLevel",
        "modelAsString": false
      }
    },
    "NodeValueRank": {
      "description": "Constants defined for the ValueRank attribute.",
      "enum": [
        "OneOrMoreDimensions",
        "OneDimension",
        "TwoDimensions",
        "ScalarOrOneDimension",
        "Any",
        "Scalar"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "NodeValueRank",
        "modelAsString": false
      }
    },
    "RolePermissions": {
      "description": "Individual permissions assigned to a role",
      "enum": [
        "Browse",
        "ReadRolePermissions",
        "WriteAttribute",
        "WriteRolePermissions",
        "WriteHistorizing",
        "Read",
        "Write",
        "ReadHistory",
        "InsertHistory",
        "ModifyHistory",
        "DeleteHistory",
        "ReceiveEvents",
        "Call",
        "AddReference",
        "RemoveReference",
        "DeleteNode",
        "AddNode"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "RolePermissions",
        "modelAsString": false
      }
    },
    "RolePermissionApiModel": {
      "description": "Role permission model",
      "required": [
        "roleId"
      ],
      "type": "object",
      "properties": {
        "roleId": {
          "description": "Identifier of the role object.",
          "type": "string"
        },
        "permissions": {
          "$ref": "#/definitions/RolePermissions"
        }
      }
    },
    "NodeApiModel": {
      "description": "Node model",
      "required": [
        "nodeId"
      ],
      "type": "object",
      "properties": {
        "nodeClass": {
          "$ref": "#/definitions/NodeClass"
        },
        "displayName": {
          "description": "Display name",
          "type": "string"
        },
        "nodeId": {
          "description": "Id of node.\r\n(Mandatory).",
          "type": "string"
        },
        "description": {
          "description": "Description if any",
          "type": "string"
        },
        "browseName": {
          "description": "Browse name",
          "type": "string"
        },
        "value": {
          "description": "Value of variable or default value of the\r\nsubtyped variable in case node is a variable\r\ntype, otherwise null."
        },
        "sourcePicoseconds": {
          "format": "int32",
          "description": "Pico seconds part of when value was read at source.",
          "type": "integer"
        },
        "sourceTimestamp": {
          "format": "date-time",
          "description": "Timestamp of when value was read at source.",
          "type": "string"
        },
        "serverPicoseconds": {
          "format": "int32",
          "description": "Pico seconds part of when value was read at server.",
          "type": "integer"
        },
        "serverTimestamp": {
          "format": "date-time",
          "description": "Timestamp of when value was read at server.",
          "type": "string"
        },
        "errorInfo": {
          "$ref": "#/definitions/ServiceResultApiModel"
        },
        "accessRestrictions": {
          "$ref": "#/definitions/NodeAccessRestrictions"
        },
        "writeMask": {
          "format": "int64",
          "description": "Default write mask for the node\r\n(default: 0)",
          "type": "integer"
        },
        "userWriteMask": {
          "format": "int64",
          "description": "User write mask for the node\r\n(default: 0)",
          "type": "integer"
        },
        "isAbstract": {
          "description": "Whether type is abstract, if type can\r\nbe abstract.  Null if not type node.\r\n(default: false)",
          "type": "boolean"
        },
        "containsNoLoops": {
          "description": "Whether a view contains loops. Null if\r\nnot a view.",
          "type": "boolean"
        },
        "eventNotifier": {
          "$ref": "#/definitions/NodeEventNotifier"
        },
        "executable": {
          "description": "If method node class, whether method can\r\nbe called.",
          "type": "boolean"
        },
        "userExecutable": {
          "description": "If method node class, whether method can\r\nbe called by current user.\r\n(default: false if not executable)",
          "type": "boolean"
        },
        "dataTypeDefinition": {
          "description": "Data type definition in case node is a\r\ndata type node and definition is available,\r\notherwise null."
        },
        "accessLevel": {
          "$ref": "#/definitions/NodeAccessLevel"
        },
        "userAccessLevel": {
          "$ref": "#/definitions/NodeAccessLevel"
        },
        "dataType": {
          "description": "If variable the datatype of the variable.\r\n(default: null)",
          "type": "string"
        },
        "valueRank": {
          "$ref": "#/definitions/NodeValueRank"
        },
        "arrayDimensions": {
          "description": "Array dimensions of variable or variable type.\r\n(default: empty array)",
          "type": "array",
          "items": {
            "format": "int64",
            "type": "integer"
          }
        },
        "historizing": {
          "description": "Whether the value of a variable is historizing.\r\n(default: false)",
          "type": "boolean"
        },
        "minimumSamplingInterval": {
          "format": "double",
          "description": "Minimum sampling interval for the variable\r\nvalue, otherwise null if not a variable node.\r\n(default: null)",
          "type": "number"
        },
        "inverseName": {
          "description": "Inverse name of the reference if the node is\r\na reference type, otherwise null.",
          "type": "string"
        },
        "symmetric": {
          "description": "Whether the reference is symmetric in case\r\nthe node is a reference type, otherwise\r\nnull.",
          "type": "boolean"
        },
        "rolePermissions": {
          "description": "Role permissions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RolePermissionApiModel"
          }
        },
        "userRolePermissions": {
          "description": "User Role permissions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RolePermissionApiModel"
          }
        },
        "typeDefinitionId": {
          "description": "Optional type definition of the node",
          "type": "string"
        },
        "children": {
          "description": "Whether node has children which are defined as\r\nany forward hierarchical references.\r\n(default: unknown)",
          "type": "boolean"
        }
      }
    },
    "NodeReferenceApiModel": {
      "description": "reference model",
      "required": [
        "target"
      ],
      "type": "object",
      "properties": {
        "referenceTypeId": {
          "description": "Reference Type id",
          "type": "string"
        },
        "direction": {
          "$ref": "#/definitions/BrowseDirection"
        },
        "target": {
          "$ref": "#/definitions/NodeApiModel"
        }
      }
    },
    "BrowseResponseApiModel": {
      "description": "browse response model",
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/NodeApiModel"
        },
        "references": {
          "description": "References, if included, otherwise null.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodeReferenceApiModel"
          }
        },
        "continuationToken": {
          "description": "Continuation token if more results pending.",
          "type": "string"
        },
        "errorInfo": {
          "$ref": "#/definitions/ServiceResultApiModel"
        }
      }
    },
    "BrowseNextRequestApiModel": {
      "description": "Request node browsing continuation",
      "required": [
        "continuationToken"
      ],
      "type": "object",
      "properties": {
        "continuationToken": {
          "description": "Continuation token from previews browse request.\r\n(mandatory)",
          "type": "string"
        },
        "abort": {
          "description": "Whether to abort browse and release.\r\n(default: false)",
          "type": "boolean"
        },
        "targetNodesOnly": {
          "description": "Whether to collapse all references into a set of\r\nunique target nodes and not show reference\r\ninformation.\r\n(default is false)",
          "type": "boolean"
        },
        "readVariableValues": {
          "description": "Whether to read variable values on target nodes.\r\n(default is false)",
          "type": "boolean"
        },
        "header": {
          "$ref": "#/definitions/RequestHeaderApiModel"
        }
      }
    },
    "BrowseNextResponseApiModel": {
      "description": "Result of node browse continuation",
      "type": "object",
      "properties": {
        "references": {
          "description": "References, if included, otherwise null.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodeReferenceApiModel"
          }
        },
        "continuationToken": {
          "description": "Continuation token if more results pending.",
          "type": "string"
        },
        "errorInfo": {
          "$ref": "#/definitions/ServiceResultApiModel"
        }
      }
    },
    "BrowsePathRequestApiModel": {
      "description": "Browse nodes by path",
      "required": [
        "browsePaths"
      ],
      "type": "object",
      "properties": {
        "nodeId": {
          "description": "Node to browse from.\r\n(defaults to root folder).",
          "type": "string"
        },
        "browsePaths": {
          "description": "The paths to browse from node.\r\n(mandatory)",
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "readVariableValues": {
          "description": "Whether to read variable values on target nodes.\r\n(default is false)",
          "type": "boolean"
        },
        "header": {
          "$ref": "#/definitions/RequestHeaderApiModel"
        }
      }
    },
    "NodePathTargetApiModel": {
      "description": "Node path target",
      "type": "object",
      "properties": {
        "browsePath": {
          "description": "The target browse path",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "target": {
          "$ref": "#/definitions/NodeApiModel"
        },
        "remainingPathIndex": {
          "format": "int32",
          "description": "Remaining index in path",
          "type": "integer"
        }
      }
    },
    "BrowsePathResponseApiModel": {
      "description": "Result of node browse continuation",
      "type": "object",
      "properties": {
        "targets": {
          "description": "Targets",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodePathTargetApiModel"
          }
        },
        "errorInfo": {
          "$ref": "#/definitions/ServiceResultApiModel"
        }
      }
    },
    "MethodMetadataRequestApiModel": {
      "description": "Method metadata request model",
      "type": "object",
      "properties": {
        "methodId": {
          "description": "Method id of method to call.\r\n(Required)",
          "type": "string"
        },
        "methodBrowsePath": {
          "description": "An optional component path from the node identified by\r\nMethodId to the actual method node.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "header": {
          "$ref": "#/definitions/RequestHeaderApiModel"
        }
      }
    },
    "MethodMetadataArgumentApiModel": {
      "description": "Method argument metadata model",
      "type": "object",
      "properties": {
        "name": {
          "description": "Argument name",
          "type": "string"
        },
        "description": {
          "description": "Optional description",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/NodeApiModel"
        },
        "defaultValue": {
          "description": "Default value"
        },
        "valueRank": {
          "$ref": "#/definitions/NodeValueRank"
        },
        "arrayDimensions": {
          "description": "Optional, array dimension",
          "type": "array",
          "items": {
            "format": "int64",
            "type": "integer"
          }
        }
      }
    },
    "MethodMetadataResponseApiModel": {
      "description": "Method metadata query model",
      "type": "object",
      "properties": {
        "objectId": {
          "description": "Id of object that the method is a component of",
          "type": "string"
        },
        "inputArguments": {
          "description": "Input argument meta data",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MethodMetadataArgumentApiModel"
          }
        },
        "outputArguments": {
          "description": "output argument meta data",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MethodMetadataArgumentApiModel"
          }
        },
        "errorInfo": {
          "$ref": "#/definitions/ServiceResultApiModel"
        }
      }
    },
    "MethodCallArgumentApiModel": {
      "description": "method arg model",
      "type": "object",
      "properties": {
        "value": {
          "description": "Initial value or value to use"
        },
        "dataType": {
          "description": "Data type Id of the value (from meta data)",
          "type": "string"
        }
      }
    },
    "MethodCallRequestApiModel": {
      "description": "Call request model",
      "type": "object",
      "properties": {
        "methodId": {
          "description": "Method id of method to call.",
          "type": "string"
        },
        "objectId": {
          "description": "Context of the method, i.e. an object or object type\r\nnode.",
          "type": "string"
        },
        "arguments": {
          "description": "Arguments for the method - null means no args",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MethodCallArgumentApiModel"
          }
        },
        "methodBrowsePath": {
          "description": "An optional component path from the node identified by\r\nMethodId or from a resolved objectId to the actual\r\nmethod node.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "objectBrowsePath": {
          "description": "An optional component path from the node identified by\r\nObjectId to the actual object or objectType node.\r\nIf ObjectId == null, the root node (i=84) is used.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "header": {
          "$ref": "#/definitions/RequestHeaderApiModel"
        }
      }
    },
    "MethodCallResponseApiModel": {
      "description": "Method call response model",
      "type": "object",
      "properties": {
        "results": {
          "description": "Output results",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MethodCallArgumentApiModel"
          }
        },
        "errorInfo": {
          "$ref": "#/definitions/ServiceResultApiModel"
        }
      }
    },
    "ValueReadRequestApiModel": {
      "description": "Node value read request webservice api model",
      "type": "object",
      "properties": {
        "nodeId": {
          "description": "Node to read from (mandatory)",
          "type": "string"
        },
        "browsePath": {
          "description": "An optional path from NodeId instance to\r\nthe actual node.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "indexRange": {
          "description": "Index range to read, e.g. 1:2,0:1 for 2 slices\r\nout of a matrix or 0:1 for the first item in\r\nan array, string or bytestring.\r\nSee 7.22 of part 4: NumericRange.",
          "type": "string"
        },
        "header": {
          "$ref": "#/definitions/RequestHeaderApiModel"
        }
      }
    },
    "ValueReadResponseApiModel": {
      "description": "Value read response model",
      "type": "object",
      "properties": {
        "value": {
          "description": "Value read"
        },
        "dataType": {
          "description": "Built in data type of the value read.",
          "type": "string"
        },
        "sourcePicoseconds": {
          "format": "int32",
          "description": "Pico seconds part of when value was read at source.",
          "type": "integer"
        },
        "sourceTimestamp": {
          "format": "date-time",
          "description": "Timestamp of when value was read at source.",
          "type": "string"
        },
        "serverPicoseconds": {
          "format": "int32",
          "description": "Pico seconds part of when value was read at server.",
          "type": "integer"
        },
        "serverTimestamp": {
          "format": "date-time",
          "description": "Timestamp of when value was read at server.",
          "type": "string"
        },
        "errorInfo": {
          "$ref": "#/definitions/ServiceResultApiModel"
        }
      }
    },
    "NodeAttribute": {
      "description": "Node attribute identifiers",
      "enum": [
        "NodeClass",
        "BrowseName",
        "DisplayName",
        "Description",
        "WriteMask",
        "UserWriteMask",
        "IsAbstract",
        "Symmetric",
        "InverseName",
        "ContainsNoLoops",
        "EventNotifier",
        "Value",
        "DataType",
        "ValueRank",
        "ArrayDimensions",
        "AccessLevel",
        "UserAccessLevel",
        "MinimumSamplingInterval",
        "Historizing",
        "Executable",
        "UserExecutable",
        "DataTypeDefinition",
        "RolePermissions",
        "UserRolePermissions",
        "AccessRestrictions"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "NodeAttribute",
        "modelAsString": false
      }
    },
    "AttributeReadRequestApiModel": {
      "description": "Attribute to read",
      "required": [
        "attribute",
        "nodeId"
      ],
      "type": "object",
      "properties": {
        "nodeId": {
          "description": "Node to read from or write to (mandatory)",
          "type": "string"
        },
        "attribute": {
          "$ref": "#/definitions/NodeAttribute"
        }
      }
    },
    "ReadRequestApiModel": {
      "description": "Request node attribute read",
      "required": [
        "attributes"
      ],
      "type": "object",
      "properties": {
        "attributes": {
          "description": "Attributes to read",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttributeReadRequestApiModel"
          }
        },
        "header": {
          "$ref": "#/definitions/RequestHeaderApiModel"
        }
      }
    },
    "AttributeReadResponseApiModel": {
      "description": "Attribute value read",
      "type": "object",
      "properties": {
        "value": {
          "description": "Attribute value"
        },
        "errorInfo": {
          "$ref": "#/definitions/ServiceResultApiModel"
        }
      }
    },
    "ReadResponseApiModel": {
      "description": "Result of attribute reads",
      "type": "object",
      "properties": {
        "results": {
          "description": "All results of attribute reads",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttributeReadResponseApiModel"
          }
        }
      }
    },
    "ValueWriteRequestApiModel": {
      "description": "Value write request model",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "nodeId": {
          "description": "Node id to to write value to.",
          "type": "string"
        },
        "browsePath": {
          "description": "An optional path from NodeId instance to\r\nthe actual node.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "value": {
          "description": "Value to write. The system tries to convert\r\nthe value according to the data type value,\r\ne.g. convert comma seperated value strings\r\ninto arrays.  (Mandatory)"
        },
        "dataType": {
          "description": "A built in datatype for the value. This can\r\nbe a data type from browse, or a built in\r\ntype.\r\n(default: best effort)",
          "type": "string"
        },
        "indexRange": {
          "description": "Index range to write",
          "type": "string"
        },
        "header": {
          "$ref": "#/definitions/RequestHeaderApiModel"
        }
      }
    },
    "ValueWriteResponseApiModel": {
      "description": "Value write response model",
      "type": "object",
      "properties": {
        "errorInfo": {
          "$ref": "#/definitions/ServiceResultApiModel"
        }
      }
    },
    "AttributeWriteRequestApiModel": {
      "description": "Attribute and value to write to it",
      "required": [
        "attribute",
        "nodeId",
        "value"
      ],
      "type": "object",
      "properties": {
        "nodeId": {
          "description": "Node to write to (mandatory)",
          "type": "string"
        },
        "attribute": {
          "$ref": "#/definitions/NodeAttribute"
        },
        "value": {
          "description": "Value to write (mandatory)"
        }
      }
    },
    "WriteRequestApiModel": {
      "description": "Request node attribute write",
      "required": [
        "attributes"
      ],
      "type": "object",
      "properties": {
        "attributes": {
          "description": "Attributes to update",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttributeWriteRequestApiModel"
          }
        },
        "header": {
          "$ref": "#/definitions/RequestHeaderApiModel"
        }
      }
    },
    "AttributeWriteResponseApiModel": {
      "description": "Attribute write result",
      "type": "object",
      "properties": {
        "errorInfo": {
          "$ref": "#/definitions/ServiceResultApiModel"
        }
      }
    },
    "WriteResponseApiModel": {
      "description": "Result of attribute write",
      "type": "object",
      "properties": {
        "results": {
          "description": "All results of attribute writes",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AttributeWriteResponseApiModel"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "Authorization token in the form of 'bearer <token>'"
    }
  },
  "tags": [
    {
      "name": "Browse",
      "description": "Browse nodes services"
    },
    {
      "name": "Call",
      "description": "Call node method services"
    },
    {
      "name": "Read",
      "description": "Node read services"
    },
    {
      "name": "Write",
      "description": "Node writing services"
    }
  ]
}