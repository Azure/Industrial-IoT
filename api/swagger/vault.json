{
  "swagger": "2.0",
  "info": {
    "title": "Opc-Vault-Service",
    "description": "Azure Industrial IoT OPC UA Vault Service",
    "contact": {
      "url": "https://www.github.com/Azure/Industrial-IoT"
    },
    "license": {
      "name": "MIT LICENSE",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "v2"
  },
  "host": "localhost:9080",
  "schemes": [
    "http",
    "https"
  ],
  "paths": {
    "/v2/certificates/{serialNumber}": {
      "get": {
        "tags": [
          "Certificates"
        ],
        "summary": "Get Issuer CA Certificate chain.",
        "operationId": "GetIssuerCertificateChain",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serialNumber",
            "description": "the serial number of the Issuer CA Certificate",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/X509CertificateChainApiModel"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication"
            ]
          }
        ],
        "x-ms-pageable": {
          "nextLinkName": "nextPageLink"
        }
      }
    },
    "/v2/certificates/{serialNumber}/crl": {
      "get": {
        "tags": [
          "Certificates"
        ],
        "summary": "Get Issuer CA CRL chain.",
        "operationId": "GetIssuerCrlChain",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serialNumber",
            "description": "the serial number of the Issuer CA Certificate",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/X509CrlChainApiModel"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication"
            ]
          }
        ]
      }
    },
    "/v2/issuer/{serialNumber}": {
      "get": {
        "tags": [
          "Distribution"
        ],
        "summary": "Get Issuer Certificate for Authority Information\r\nAccess endpoint.",
        "operationId": "GetIssuerCertificateChain",
        "produces": [
          "application/pkix-cert"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serialNumber",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        }
      }
    },
    "/v2/crl/{serialNumber}": {
      "get": {
        "tags": [
          "Distribution"
        ],
        "summary": "Get Issuer CRL in CRL Distribution Endpoint.",
        "operationId": "GetIssuerCrlChain",
        "produces": [
          "application/pkix-crl"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serialNumber",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "format": "binary",
              "type": "string"
            }
          }
        }
      }
    },
    "/v2/requests/sign": {
      "put": {
        "tags": [
          "Requests"
        ],
        "summary": "Create a certificate request with a certificate signing request (CSR).",
        "description": "The request is in the 'New' state after this call. Requires Writer or Manager role.",
        "operationId": "StartSigningRequest",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The signing request parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartSigningRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StartSigningRequestResponseApiModel"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication"
            ]
          }
        ]
      }
    },
    "/v2/requests/sign/{requestId}": {
      "get": {
        "tags": [
          "Requests"
        ],
        "summary": "Fetch signing request results.",
        "description": "Can be called in any state. After a successful fetch in 'Completed' state, the request is moved into 'Accepted' state. Requires Writer role.",
        "operationId": "FinishSigningRequest",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "requestId",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/FinishSigningRequestResponseApiModel"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication"
            ]
          }
        ]
      }
    },
    "/v2/requests/keypair": {
      "put": {
        "tags": [
          "Requests"
        ],
        "summary": "Create a certificate request with a new key pair.",
        "description": "The request is in the 'New' state after this call. Requires Writer or Manager role.",
        "operationId": "StartNewKeyPairRequest",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The new key pair request parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartNewKeyPairRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StartNewKeyPairRequestResponseApiModel"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication"
            ]
          }
        ]
      }
    },
    "/v2/requests/keypair/{requestId}": {
      "get": {
        "tags": [
          "Requests"
        ],
        "summary": "Fetch certificate request result.",
        "description": "Can be called in any state. Fetches private key in 'Completed' state. After a successful fetch in 'Completed' state, the request is moved into 'Accepted' state. Requires Writer role.",
        "operationId": "FinishNewKeyPairRequest",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "requestId",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/FinishNewKeyPairRequestResponseApiModel"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication"
            ]
          }
        ]
      }
    },
    "/v2/requests/{requestId}/approve": {
      "post": {
        "tags": [
          "Requests"
        ],
        "summary": "Approve the certificate request.",
        "description": " Validates the request with the application database. - If Approved: - New Key Pair request: Creates the new key pair in the requested format, signs the certificate and stores the private key for later securely in KeyVault. - Cert Signing Request: Creates and signs the certificate. Deletes the CSR from the database. Stores the signed certificate for later use in the Database. The request is in the 'Approved' or 'Rejected' state after this call. Requires Approver role. Approver needs signing rights in KeyVault.",
        "operationId": "ApproveRequest",
        "parameters": [
          {
            "in": "path",
            "name": "requestId",
            "description": "The certificate request id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": [
              "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication"
            ]
          }
        ]
      }
    },
    "/v2/requests/{requestId}/reject": {
      "post": {
        "tags": [
          "Requests"
        ],
        "summary": "Reject the certificate request.",
        "description": "The request is in the 'Rejected' state after this call. Requires Approver role. Approver needs signing rights in KeyVault.",
        "operationId": "RejectRequest",
        "parameters": [
          {
            "in": "path",
            "name": "requestId",
            "description": "The certificate request id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": [
              "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication"
            ]
          }
        ]
      }
    },
    "/v2/requests/{requestId}/accept": {
      "post": {
        "tags": [
          "Requests"
        ],
        "summary": "Cancel request",
        "description": "The request is in the 'Accepted' state after this call. Requires Writer role.",
        "operationId": "AcceptRequest",
        "parameters": [
          {
            "in": "path",
            "name": "requestId",
            "description": "The certificate request id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": [
              "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication"
            ]
          }
        ]
      }
    },
    "/v2/requests/{requestId}": {
      "delete": {
        "tags": [
          "Requests"
        ],
        "summary": "Delete request. Physically delete the request.",
        "description": "By purging the request it is actually physically deleted from the database, including the public key and other information. Requires Manager role.",
        "operationId": "DeleteRequest",
        "parameters": [
          {
            "in": "path",
            "name": "requestId",
            "description": "The certificate request id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": [
              "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Requests"
        ],
        "summary": "Get a specific certificate request.",
        "operationId": "GetRequest",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "requestId",
            "description": "The certificate request id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CertificateRequestRecordApiModel"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication"
            ]
          }
        ]
      }
    },
    "/v2/requests/query": {
      "post": {
        "tags": [
          "Requests"
        ],
        "summary": "Query for certificate requests.",
        "description": "Get all certificate requests in paged form. The returned model can contain a link to the next page if more results are available. Use ListRequests to continue.",
        "operationId": "QueryRequests",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "pageSize",
            "description": "optional, the maximum number of result per page",
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "optional, query filter",
            "schema": {
              "$ref": "#/definitions/CertificateRequestQueryRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CertificateRequestQueryResponseApiModel"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication"
            ]
          }
        ]
      }
    },
    "/v2/requests": {
      "get": {
        "tags": [
          "Requests"
        ],
        "summary": "Lists certificate requests.",
        "description": "Get all certificate requests in paged form or continue a current listing or query. The returned model can contain a link to the next page if more results are available.",
        "operationId": "ListRequests",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "nextPageLink",
            "description": "optional, link to next page",
            "type": "string"
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "optional, the maximum number of result per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/CertificateRequestQueryResponseApiModel"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication"
            ]
          }
        ],
        "x-ms-pageable": {
          "nextLinkName": "nextPageLink"
        }
      }
    },
    "/v2/groups": {
      "get": {
        "tags": [
          "TrustGroups"
        ],
        "summary": "Get information about all groups.",
        "description": "A trust group has a root certificate which issues certificates to entities. Entities can be part of a trust group and thus trust the root certificate and all entities that the root has issued certificates for.",
        "operationId": "ListGroups",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "nextPageLink",
            "description": "optional, link to next page",
            "type": "string"
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "optional, the maximum number of result per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TrustGroupRegistrationListApiModel"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication"
            ]
          }
        ],
        "x-ms-pageable": {
          "nextLinkName": "nextPageLink"
        }
      },
      "put": {
        "tags": [
          "TrustGroups"
        ],
        "summary": "Create new sub-group of an existing group.",
        "description": "Requires manager role.",
        "operationId": "CreateGroup",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The create request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TrustGroupRegistrationRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TrustGroupRegistrationResponseApiModel"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication"
            ]
          }
        ]
      }
    },
    "/v2/groups/{groupId}": {
      "get": {
        "tags": [
          "TrustGroups"
        ],
        "summary": "Get group information.",
        "description": "A trust group has a root certificate which issues certificates to entities. Entities can be part of a trust group and thus trust the root certificate and all entities that the root has issued certificates for.",
        "operationId": "GetGroup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TrustGroupRegistrationApiModel"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "TrustGroups"
        ],
        "summary": "Update group registration.",
        "description": "Use this function with care and only if you are aware of the security implications. Requires manager role.",
        "operationId": "UpdateGroup",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The group configuration",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TrustGroupUpdateRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": [
              "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "TrustGroups"
        ],
        "summary": "Delete a group.",
        "description": "After this operation the Issuer CA, CRLs and keys become inaccessible. Use this function with extreme caution. Requires manager role.",
        "operationId": "DeleteGroup",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "The group id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": [
              "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication"
            ]
          }
        ]
      }
    },
    "/v2/groups/root": {
      "put": {
        "tags": [
          "TrustGroups"
        ],
        "summary": "Create new root group.",
        "description": "Requires manager role.",
        "operationId": "CreateRoot",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The create request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TrustGroupRootCreateRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TrustGroupRegistrationResponseApiModel"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication"
            ]
          }
        ]
      }
    },
    "/v2/groups/{groupId}/renew": {
      "post": {
        "tags": [
          "TrustGroups"
        ],
        "summary": "Renew a group CA Certificate.",
        "operationId": "RenewIssuerCertificate",
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": [
              "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication"
            ]
          }
        ]
      }
    },
    "/v2/trustlists/{entityId}/{trustedEntityId}": {
      "put": {
        "tags": [
          "TrustLists"
        ],
        "summary": "Add trust relationship",
        "description": "Define trust between two entities. The entities are identifiers of application, groups, or endpoints.",
        "operationId": "AddTrustRelationship",
        "parameters": [
          {
            "in": "path",
            "name": "entityId",
            "description": "The entity identifier, e.g. group, etc.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "trustedEntityId",
            "description": "The trusted entity identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": [
              "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication"
            ]
          }
        ]
      }
    },
    "/v2/trustlists/{entityId}": {
      "get": {
        "tags": [
          "TrustLists"
        ],
        "summary": "List trusted certificates",
        "description": "Returns all certificates the entity should trust based on the applied trust configuration.",
        "operationId": "ListTrustedCertificates",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entityId",
            "description": "",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "nextPageLink",
            "description": "optional, link to next page",
            "type": "string"
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "optional, the maximum number of result per page",
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/X509CertificateListApiModel"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication"
            ]
          }
        ],
        "x-ms-pageable": {
          "nextLinkName": "nextPageLink"
        }
      }
    },
    "/v2/trustlists/{entityId}/{untrustedEntityId}": {
      "delete": {
        "tags": [
          "TrustLists"
        ],
        "summary": "Remove a trust relationship",
        "description": "Removes trust between two entities. The entities are identifiers of application, groups, or endpoints.",
        "operationId": "RemoveTrustRelationship",
        "parameters": [
          {
            "in": "path",
            "name": "entityId",
            "description": "The entity identifier, e.g. group, etc.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "untrustedEntityId",
            "description": "The trusted entity identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": [
              "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication"
            ]
          }
        ]
      }
    }
  },
  "definitions": {
    "X509CertificateApiModel": {
      "description": "Certificate model",
      "type": "object",
      "properties": {
        "subject": {
          "description": "Subject",
          "type": "string"
        },
        "thumbprint": {
          "description": "Thumbprint",
          "type": "string"
        },
        "serialNumber": {
          "description": "Serial number",
          "type": "string"
        },
        "notBeforeUtc": {
          "format": "date-time",
          "description": "Not before validity",
          "type": "string"
        },
        "notAfterUtc": {
          "format": "date-time",
          "description": "Not after validity",
          "type": "string"
        },
        "certificate": {
          "description": "Raw data",
          "type": "object"
        }
      }
    },
    "X509CertificateChainApiModel": {
      "description": "Certificate chain",
      "type": "object",
      "properties": {
        "chain": {
          "description": "Chain",
          "type": "array",
          "items": {
            "$ref": "#/definitions/X509CertificateApiModel"
          }
        }
      }
    },
    "X509CrlApiModel": {
      "description": "A X509 certificate revocation list.",
      "type": "object",
      "properties": {
        "issuer": {
          "description": "The Issuer name of the revocation list.",
          "type": "string"
        },
        "crl": {
          "description": "The certificate revocation list.",
          "type": "object"
        }
      }
    },
    "X509CrlChainApiModel": {
      "description": "Crl chain model",
      "type": "object",
      "properties": {
        "chain": {
          "description": "Chain",
          "type": "array",
          "items": {
            "$ref": "#/definitions/X509CrlApiModel"
          }
        }
      }
    },
    "NotFoundResult": {
      "type": "object",
      "properties": {
        "statusCode": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "StartSigningRequestApiModel": {
      "description": "Signing request",
      "type": "object",
      "properties": {
        "entityId": {
          "description": "Id of entity to sign a certificate for",
          "type": "string"
        },
        "groupId": {
          "description": "Certificate group id",
          "type": "string"
        },
        "certificateRequest": {
          "description": "Request",
          "type": "object"
        }
      }
    },
    "StartSigningRequestResponseApiModel": {
      "description": "Signing request response",
      "type": "object",
      "properties": {
        "requestId": {
          "description": "Request id",
          "type": "string"
        }
      }
    },
    "CertificateRequestState": {
      "description": "The certificate request states.",
      "enum": [
        "New",
        "Approved",
        "Rejected",
        "Failure",
        "Completed",
        "Accepted"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "CertificateRequestState",
        "modelAsString": false
      }
    },
    "CertificateRequestType": {
      "description": "The certificate request type.",
      "enum": [
        "SigningRequest",
        "KeyPairRequest"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "CertificateRequestType",
        "modelAsString": false
      }
    },
    "VaultOperationContextApiModel": {
      "description": "Vault operation log model",
      "type": "object",
      "properties": {
        "authorityId": {
          "description": "User",
          "type": "string"
        },
        "time": {
          "format": "date-time",
          "description": "Operation time",
          "type": "string"
        }
      }
    },
    "CertificateRequestRecordApiModel": {
      "description": "Certificate request record model",
      "type": "object",
      "properties": {
        "requestId": {
          "description": "Request id",
          "type": "string"
        },
        "entityId": {
          "description": "Application id",
          "type": "string"
        },
        "groupId": {
          "description": "Trust group",
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/CertificateRequestState"
        },
        "type": {
          "$ref": "#/definitions/CertificateRequestType"
        },
        "errorInfo": {
          "description": "Error diagnostics",
          "type": "object"
        },
        "submitted": {
          "$ref": "#/definitions/VaultOperationContextApiModel"
        },
        "approved": {
          "$ref": "#/definitions/VaultOperationContextApiModel"
        },
        "accepted": {
          "$ref": "#/definitions/VaultOperationContextApiModel"
        }
      }
    },
    "FinishSigningRequestResponseApiModel": {
      "description": "Finish request results",
      "type": "object",
      "properties": {
        "request": {
          "$ref": "#/definitions/CertificateRequestRecordApiModel"
        },
        "certificate": {
          "$ref": "#/definitions/X509CertificateApiModel"
        }
      }
    },
    "TrustGroupType": {
      "description": "Trust group types",
      "enum": [
        "ApplicationInstanceCertificate",
        "HttpsCertificate",
        "UserCredentialCertificate"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "TrustGroupType",
        "modelAsString": false
      }
    },
    "StartNewKeyPairRequestApiModel": {
      "description": "New key pair request",
      "type": "object",
      "properties": {
        "entityId": {
          "description": "Entity id",
          "type": "string"
        },
        "groupId": {
          "description": "Certificate group",
          "type": "string"
        },
        "certificateType": {
          "$ref": "#/definitions/TrustGroupType"
        },
        "subjectName": {
          "description": "Subject name",
          "type": "string"
        },
        "domainNames": {
          "description": "Domain names",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "StartNewKeyPairRequestResponseApiModel": {
      "description": "New key pair response",
      "type": "object",
      "properties": {
        "requestId": {
          "description": "Request id",
          "type": "string"
        }
      }
    },
    "PrivateKeyType": {
      "description": "Key type",
      "enum": [
        "RSA",
        "ECC",
        "AES"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "PrivateKeyType",
        "modelAsString": false
      }
    },
    "PrivateKeyApiModel": {
      "description": "Private key",
      "type": "object",
      "properties": {
        "kty": {
          "$ref": "#/definitions/PrivateKeyType"
        },
        "n": {
          "format": "byte",
          "description": "RSA modulus.",
          "type": "string"
        },
        "e": {
          "format": "byte",
          "description": "RSA public exponent, in Base64.",
          "type": "string"
        },
        "dp": {
          "format": "byte",
          "description": "RSA Private Key Parameter",
          "type": "string"
        },
        "dq": {
          "format": "byte",
          "description": "RSA Private Key Parameter",
          "type": "string"
        },
        "qi": {
          "format": "byte",
          "description": "RSA Private Key Parameter",
          "type": "string"
        },
        "p": {
          "format": "byte",
          "description": "RSA secret prime",
          "type": "string"
        },
        "q": {
          "format": "byte",
          "description": "RSA secret prime, with p < q",
          "type": "string"
        },
        "crv": {
          "type": "string"
        },
        "x": {
          "format": "byte",
          "description": "X coordinate for the Elliptic Curve point.",
          "type": "string"
        },
        "y": {
          "format": "byte",
          "description": "Y coordinate for the Elliptic Curve point.",
          "type": "string"
        },
        "d": {
          "format": "byte",
          "description": "RSA private exponent or ECC private key.",
          "type": "string"
        },
        "k": {
          "format": "byte",
          "description": "Symmetric key",
          "type": "string"
        },
        "key_hsm": {
          "format": "byte",
          "type": "string"
        }
      }
    },
    "FinishNewKeyPairRequestResponseApiModel": {
      "description": "Finish request results",
      "type": "object",
      "properties": {
        "request": {
          "$ref": "#/definitions/CertificateRequestRecordApiModel"
        },
        "certificate": {
          "$ref": "#/definitions/X509CertificateApiModel"
        },
        "privateKey": {
          "$ref": "#/definitions/PrivateKeyApiModel"
        }
      }
    },
    "CertificateRequestStateNullable": {
      "enum": [
        "New",
        "Approved",
        "Rejected",
        "Failure",
        "Completed",
        "Accepted"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "CertificateRequestState",
        "modelAsString": false
      }
    },
    "CertificateRequestQueryRequestApiModel": {
      "description": "Certificate request query model",
      "type": "object",
      "properties": {
        "entityId": {
          "description": "The entity id to filter with",
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/CertificateRequestStateNullable"
        }
      }
    },
    "CertificateRequestQueryResponseApiModel": {
      "description": "Response model",
      "type": "object",
      "properties": {
        "requests": {
          "description": "The query result.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CertificateRequestRecordApiModel"
          }
        },
        "nextPageLink": {
          "description": "Link to the next page of results.",
          "type": "string"
        }
      }
    },
    "SignatureAlgorithm": {
      "description": "Signature algorithm",
      "enum": [
        "Rsa256",
        "Rsa384",
        "Rsa512",
        "Rsa256Pss",
        "Rsa384Pss",
        "Rsa512Pss"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "SignatureAlgorithm",
        "modelAsString": false
      }
    },
    "TrustGroupApiModel": {
      "description": "Trust group model",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the trust group.",
          "type": "string"
        },
        "parentId": {
          "description": "The identifer of the parent trust group.",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/TrustGroupType"
        },
        "subjectName": {
          "description": "The subject name of the group as distinguished name.",
          "type": "string"
        },
        "lifetime": {
          "format": "date-span",
          "description": "The lifetime of the trust group certificate.",
          "type": "string"
        },
        "keySize": {
          "format": "int32",
          "description": "The trust group certificate key size in bits.",
          "type": "integer"
        },
        "signatureAlgorithm": {
          "$ref": "#/definitions/SignatureAlgorithm"
        },
        "issuedLifetime": {
          "format": "date-span",
          "description": "The issued certificate lifetime in months.",
          "type": "string"
        },
        "issuedKeySize": {
          "format": "int32",
          "description": "The issued certificate key size in bits.",
          "type": "integer"
        },
        "issuedSignatureAlgorithm": {
          "$ref": "#/definitions/SignatureAlgorithm"
        }
      }
    },
    "TrustGroupRegistrationApiModel": {
      "description": "Trust group registration model",
      "type": "object",
      "properties": {
        "id": {
          "description": "The registered id of the trust group",
          "type": "string"
        },
        "group": {
          "$ref": "#/definitions/TrustGroupApiModel"
        }
      }
    },
    "TrustGroupRegistrationListApiModel": {
      "description": "Trust group registration collection model",
      "type": "object",
      "properties": {
        "registrations": {
          "description": "Group registrations",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TrustGroupRegistrationApiModel"
          }
        },
        "nextPageLink": {
          "description": "Next link",
          "type": "string"
        }
      }
    },
    "SignatureAlgorithmNullable": {
      "enum": [
        "Rsa256",
        "Rsa384",
        "Rsa512",
        "Rsa256Pss",
        "Rsa384Pss",
        "Rsa512Pss"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "SignatureAlgorithm",
        "modelAsString": false
      }
    },
    "TrustGroupRegistrationRequestApiModel": {
      "description": "Trust group registration request model",
      "type": "object",
      "properties": {
        "name": {
          "description": "The new name of the trust group",
          "type": "string"
        },
        "parentId": {
          "description": "The identifer of the parent trust group.",
          "type": "string"
        },
        "subjectName": {
          "description": "The subject name of the group as distinguished name.",
          "type": "string"
        },
        "issuedLifetime": {
          "format": "date-span",
          "description": "The lifetime of certificates issued in the group.",
          "type": "string"
        },
        "issuedKeySize": {
          "format": "int32",
          "description": "The issued certificate key size in bits.",
          "type": "integer"
        },
        "issuedSignatureAlgorithm": {
          "$ref": "#/definitions/SignatureAlgorithmNullable"
        }
      }
    },
    "TrustGroupRegistrationResponseApiModel": {
      "description": "Trust group registration response model",
      "type": "object",
      "properties": {
        "id": {
          "description": "The id of the trust group",
          "type": "string"
        }
      }
    },
    "TrustGroupUpdateRequestApiModel": {
      "description": "Trust group update model",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the trust group",
          "type": "string"
        },
        "issuedLifetime": {
          "format": "date-span",
          "description": "The issued certificate lifetime.",
          "type": "string"
        },
        "issuedKeySize": {
          "format": "int32",
          "description": "The issued certificate key size in bits.",
          "type": "integer"
        },
        "issuedSignatureAlgorithm": {
          "$ref": "#/definitions/SignatureAlgorithmNullable"
        }
      }
    },
    "TrustGroupRootCreateRequestApiModel": {
      "description": "Trust group root registration model",
      "type": "object",
      "properties": {
        "name": {
          "description": "The new name of the trust group root",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/TrustGroupType"
        },
        "subjectName": {
          "description": "The subject name of the group as distinguished name.",
          "type": "string"
        },
        "lifetime": {
          "format": "date-span",
          "description": "The lifetime of the trust group root certificate.",
          "type": "string"
        },
        "keySize": {
          "format": "int32",
          "description": "The certificate key size in bits.",
          "type": "integer"
        },
        "signatureAlgorithm": {
          "$ref": "#/definitions/SignatureAlgorithmNullable"
        },
        "issuedLifetime": {
          "format": "date-span",
          "description": "The issued certificate lifetime.",
          "type": "string"
        },
        "issuedKeySize": {
          "format": "int32",
          "description": "The issued certificate key size in bits.",
          "type": "integer"
        },
        "issuedSignatureAlgorithm": {
          "$ref": "#/definitions/SignatureAlgorithmNullable"
        }
      }
    },
    "X509CertificateListApiModel": {
      "description": "Certificate list",
      "type": "object",
      "properties": {
        "certificates": {
          "description": "Certificates",
          "type": "array",
          "items": {
            "$ref": "#/definitions/X509CertificateApiModel"
          }
        },
        "nextPageLink": {
          "description": "Next link",
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "oauth2": {
      "type": "oauth2",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/6e660ce4-d51a-4585-80c6-58035e212354/oauth2/authorize",
      "scopes": {
        "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication": "Access http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication operations"
      },
      "description": "Implicit oauth2 token flow."
    }
  },
  "tags": [
    {
      "name": "Certificates",
      "description": "Certificate services."
    },
    {
      "name": "Distribution",
      "description": "Certificate CRL Distribution Point and Authority\r\nInformation Access\r\nservices."
    },
    {
      "name": "Requests",
      "description": "Certificate request services."
    },
    {
      "name": "TrustGroups",
      "description": "Trust group services."
    },
    {
      "name": "TrustLists",
      "description": "Trust lists services."
    }
  ]
}