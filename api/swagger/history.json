{
  "swagger": "2.0",
  "info": {
    "title": "Opc-History-Service",
    "description": "Azure Industrial IoT OPC UA Historic Access Service",
    "contact": {
      "url": "https://www.github.com/Azure/Industrial-IoT"
    },
    "license": {
      "name": "MIT LICENSE",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "v2"
  },
  "host": "localhost:9080",
  "schemes": [
    "http",
    "https"
  ],
  "paths": {
    "/history/v2/delete/{endpointId}/values/pick": {
      "post": {
        "tags": [
          "Delete"
        ],
        "summary": "Delete value history at specified times",
        "description": "Delete value history using historic access. The endpoint must be activated and connected and the module client and server must trust each other.",
        "operationId": "HistoryDeleteValuesAtTimes",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json",
          "application/x-msgpack"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json",
          "application/x-msgpack"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "endpointId",
            "description": "The identifier of the activated endpoint.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The history update request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteValuesAtTimesDetailsApiModelHistoryUpdateRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/HistoryUpdateResponseApiModel"
            }
          }
        }
      }
    },
    "/history/v2/delete/{endpointId}/values": {
      "post": {
        "tags": [
          "Delete"
        ],
        "summary": "Delete historic values",
        "description": "Delete historic values using historic access. The endpoint must be activated and connected and the module client and server must trust each other.",
        "operationId": "HistoryDeleteValues",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json",
          "application/x-msgpack"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json",
          "application/x-msgpack"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "endpointId",
            "description": "The identifier of the activated endpoint.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The history update request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteValuesDetailsApiModelHistoryUpdateRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/HistoryUpdateResponseApiModel"
            }
          }
        }
      }
    },
    "/history/v2/delete/{endpointId}/values/modified": {
      "post": {
        "tags": [
          "Delete"
        ],
        "summary": "Delete historic values",
        "description": "Delete historic values using historic access. The endpoint must be activated and connected and the module client and server must trust each other.",
        "operationId": "HistoryDeleteModifiedValues",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json",
          "application/x-msgpack"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json",
          "application/x-msgpack"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "endpointId",
            "description": "The identifier of the activated endpoint.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The history update request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteModifiedValuesDetailsApiModelHistoryUpdateRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/HistoryUpdateResponseApiModel"
            }
          }
        }
      }
    },
    "/history/v2/delete/{endpointId}/events": {
      "post": {
        "tags": [
          "Delete"
        ],
        "summary": "Delete historic events",
        "description": "Delete historic events using historic access. The endpoint must be activated and connected and the module client and server must trust each other.",
        "operationId": "HistoryDeleteEvents",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json",
          "application/x-msgpack"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json",
          "application/x-msgpack"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "endpointId",
            "description": "The identifier of the activated endpoint.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The history update request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteEventsDetailsApiModelHistoryUpdateRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/HistoryUpdateResponseApiModel"
            }
          }
        }
      }
    },
    "/history/v2/history/read/{endpointId}": {
      "post": {
        "tags": [
          "History"
        ],
        "summary": "Read history using json details",
        "description": "Read node history if available using historic access. The endpoint must be activated and connected and the module client and server must trust each other.",
        "operationId": "HistoryReadRaw",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json",
          "application/x-msgpack"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json",
          "application/x-msgpack"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "endpointId",
            "description": "The identifier of the activated endpoint.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The history read request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VariantValueHistoryReadRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VariantValueHistoryReadResponseApiModel"
            }
          }
        }
      }
    },
    "/history/v2/history/read/{endpointId}/next": {
      "post": {
        "tags": [
          "History"
        ],
        "summary": "Read next batch of history as json",
        "description": "Read next batch of node history values using historic access. The endpoint must be activated and connected and the module client and server must trust each other.",
        "operationId": "HistoryReadRawNext",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json",
          "application/x-msgpack"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json",
          "application/x-msgpack"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "endpointId",
            "description": "The identifier of the activated endpoint.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The history read next request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HistoryReadNextRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/VariantValueHistoryReadNextResponseApiModel"
            }
          }
        }
      }
    },
    "/history/v2/history/update/{endpointId}": {
      "post": {
        "tags": [
          "History"
        ],
        "summary": "Update node history using raw json",
        "description": "Update node history using historic access. The endpoint must be activated and connected and the module client and server must trust each other.",
        "operationId": "HistoryUpdateRaw",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json",
          "application/x-msgpack"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json",
          "application/x-msgpack"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "endpointId",
            "description": "The identifier of the activated endpoint.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The history update request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VariantValueHistoryUpdateRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/HistoryUpdateResponseApiModel"
            }
          }
        }
      }
    },
    "/history/v2/insert/{endpointId}/values": {
      "post": {
        "tags": [
          "Insert"
        ],
        "summary": "Insert historic values",
        "description": "Insert historic values using historic access. The endpoint must be activated and connected and the module client and server must trust each other.",
        "operationId": "HistoryInsertValues",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json",
          "application/x-msgpack"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json",
          "application/x-msgpack"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "endpointId",
            "description": "The identifier of the activated endpoint.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The history insert request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InsertValuesDetailsApiModelHistoryUpdateRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/HistoryUpdateResponseApiModel"
            }
          }
        }
      }
    },
    "/history/v2/insert/{endpointId}/events": {
      "post": {
        "tags": [
          "Insert"
        ],
        "summary": "Insert historic events",
        "description": "Insert historic events using historic access. The endpoint must be activated and connected and the module client and server must trust each other.",
        "operationId": "HistoryInsertEvents",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json",
          "application/x-msgpack"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json",
          "application/x-msgpack"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "endpointId",
            "description": "The identifier of the activated endpoint.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The history insert request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InsertEventsDetailsApiModelHistoryUpdateRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/HistoryUpdateResponseApiModel"
            }
          }
        }
      }
    },
    "/history/v2/read/{endpointId}/events": {
      "post": {
        "tags": [
          "Read"
        ],
        "summary": "Read historic events",
        "description": "Read historic events of a node if available using historic access. The endpoint must be activated and connected and the module client and server must trust each other.",
        "operationId": "HistoryReadEvents",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json",
          "application/x-msgpack"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json",
          "application/x-msgpack"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "endpointId",
            "description": "The identifier of the activated endpoint.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The history read request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReadEventsDetailsApiModelHistoryReadRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/HistoricEventApiModelArrayHistoryReadResponseApiModel"
            }
          }
        }
      }
    },
    "/history/v2/read/{endpointId}/events/next": {
      "post": {
        "tags": [
          "Read"
        ],
        "summary": "Read next batch of historic events",
        "description": "Read next batch of historic events of a node using historic access. The endpoint must be activated and connected and the module client and server must trust each other.",
        "operationId": "HistoryReadEventsNext",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json",
          "application/x-msgpack"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json",
          "application/x-msgpack"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "endpointId",
            "description": "The identifier of the activated endpoint.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The history read next request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HistoryReadNextRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/HistoricEventApiModelArrayHistoryReadNextResponseApiModel"
            }
          }
        }
      }
    },
    "/history/v2/read/{endpointId}/values": {
      "post": {
        "tags": [
          "Read"
        ],
        "summary": "Read historic processed values at specified times",
        "description": "Read processed history values of a node if available using historic access. The endpoint must be activated and connected and the module client and server must trust each other.",
        "operationId": "HistoryReadValues",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json",
          "application/x-msgpack"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json",
          "application/x-msgpack"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "endpointId",
            "description": "The identifier of the activated endpoint.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The history read request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReadValuesDetailsApiModelHistoryReadRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/HistoricValueApiModelArrayHistoryReadResponseApiModel"
            }
          }
        }
      }
    },
    "/history/v2/read/{endpointId}/values/pick": {
      "post": {
        "tags": [
          "Read"
        ],
        "summary": "Read historic values at specified times",
        "description": "Read historic values of a node if available using historic access. The endpoint must be activated and connected and the module client and server must trust each other.",
        "operationId": "HistoryReadValuesAtTimes",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json",
          "application/x-msgpack"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json",
          "application/x-msgpack"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "endpointId",
            "description": "The identifier of the activated endpoint.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The history read request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReadValuesAtTimesDetailsApiModelHistoryReadRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/HistoricValueApiModelArrayHistoryReadResponseApiModel"
            }
          }
        }
      }
    },
    "/history/v2/read/{endpointId}/values/processed": {
      "post": {
        "tags": [
          "Read"
        ],
        "summary": "Read historic processed values at specified times",
        "description": "Read processed history values of a node if available using historic access. The endpoint must be activated and connected and the module client and server must trust each other.",
        "operationId": "HistoryReadProcessedValues",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json",
          "application/x-msgpack"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json",
          "application/x-msgpack"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "endpointId",
            "description": "The identifier of the activated endpoint.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The history read request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReadProcessedValuesDetailsApiModelHistoryReadRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/HistoricValueApiModelArrayHistoryReadResponseApiModel"
            }
          }
        }
      }
    },
    "/history/v2/read/{endpointId}/values/modified": {
      "post": {
        "tags": [
          "Read"
        ],
        "summary": "Read historic modified values at specified times",
        "description": "Read processed history values of a node if available using historic access. The endpoint must be activated and connected and the module client and server must trust each other.",
        "operationId": "HistoryReadModifiedValues",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json",
          "application/x-msgpack"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json",
          "application/x-msgpack"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "endpointId",
            "description": "The identifier of the activated endpoint.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The history read request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReadModifiedValuesDetailsApiModelHistoryReadRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/HistoricValueApiModelArrayHistoryReadResponseApiModel"
            }
          }
        }
      }
    },
    "/history/v2/read/{endpointId}/values/next": {
      "post": {
        "tags": [
          "Read"
        ],
        "summary": "Read next batch of historic values",
        "description": "Read next batch of historic values of a node using historic access. The endpoint must be activated and connected and the module client and server must trust each other.",
        "operationId": "HistoryReadValueNext",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json",
          "application/x-msgpack"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json",
          "application/x-msgpack"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "endpointId",
            "description": "The identifier of the activated endpoint.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The history read next request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HistoryReadNextRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/HistoricValueApiModelArrayHistoryReadNextResponseApiModel"
            }
          }
        }
      }
    },
    "/history/v2/replace/{endpointId}/values": {
      "post": {
        "tags": [
          "Replace"
        ],
        "summary": "Replace historic values",
        "description": "Replace historic values using historic access. The endpoint must be activated and connected and the module client and server must trust each other.",
        "operationId": "HistoryReplaceValues",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json",
          "application/x-msgpack"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json",
          "application/x-msgpack"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "endpointId",
            "description": "The identifier of the activated endpoint.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The history replace request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReplaceValuesDetailsApiModelHistoryUpdateRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/HistoryUpdateResponseApiModel"
            }
          }
        }
      }
    },
    "/history/v2/replace/{endpointId}/events": {
      "post": {
        "tags": [
          "Replace"
        ],
        "summary": "Replace historic events",
        "description": "Replace historic events using historic access. The endpoint must be activated and connected and the module client and server must trust each other.",
        "operationId": "HistoryReplaceEvents",
        "consumes": [
          "application/json-patch+json",
          "application/json",
          "text/json",
          "application/*+json",
          "application/x-msgpack"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "text/json",
          "application/x-msgpack"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "endpointId",
            "description": "The identifier of the activated endpoint.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "The history replace request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReplaceEventsDetailsApiModelHistoryUpdateRequestApiModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/HistoryUpdateResponseApiModel"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "DeleteValuesAtTimesDetailsApiModel": {
      "description": "Deletes data at times",
      "required": [
        "reqTimes"
      ],
      "type": "object",
      "properties": {
        "reqTimes": {
          "description": "The timestamps to delete",
          "type": "array",
          "items": {
            "format": "date-time",
            "type": "string"
          }
        }
      }
    },
    "CredentialType": {
      "description": "Type of credentials to use for authentication",
      "enum": [
        "None",
        "UserName",
        "X509Certificate",
        "JwtToken"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "CredentialType",
        "modelAsString": false
      }
    },
    "CredentialApiModel": {
      "description": "Credential model",
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/CredentialType"
        },
        "value": {
          "description": "Value to pass to server"
        }
      }
    },
    "DiagnosticsLevel": {
      "description": "Level of diagnostics requested in responses",
      "enum": [
        "None",
        "Status",
        "Operations",
        "Diagnostics",
        "Verbose"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "DiagnosticsLevel",
        "modelAsString": false
      }
    },
    "DiagnosticsApiModel": {
      "description": "Diagnostics configuration",
      "type": "object",
      "properties": {
        "level": {
          "$ref": "#/definitions/DiagnosticsLevel"
        },
        "auditId": {
          "description": "Client audit log entry.\r\n(default: client generated)",
          "type": "string"
        },
        "timeStamp": {
          "format": "date-time",
          "description": "Timestamp of request.\r\n(default: client generated)",
          "type": "string"
        }
      }
    },
    "RequestHeaderApiModel": {
      "description": "Request header model",
      "type": "object",
      "properties": {
        "elevation": {
          "$ref": "#/definitions/CredentialApiModel"
        },
        "locales": {
          "description": "Optional list of locales in preference order.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "diagnostics": {
          "$ref": "#/definitions/DiagnosticsApiModel"
        }
      }
    },
    "DeleteValuesAtTimesDetailsApiModelHistoryUpdateRequestApiModel": {
      "description": "Request node history update",
      "required": [
        "details"
      ],
      "type": "object",
      "properties": {
        "nodeId": {
          "description": "Node to update",
          "type": "string"
        },
        "browsePath": {
          "description": "An optional path from NodeId instance to\r\nthe actual node.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "details": {
          "$ref": "#/definitions/DeleteValuesAtTimesDetailsApiModel"
        },
        "header": {
          "$ref": "#/definitions/RequestHeaderApiModel"
        }
      }
    },
    "ServiceResultApiModel": {
      "description": "Service result",
      "type": "object",
      "properties": {
        "statusCode": {
          "format": "int64",
          "description": "Error code - if null operation succeeded.",
          "type": "integer"
        },
        "errorMessage": {
          "description": "Error message in case of error or null.",
          "type": "string"
        },
        "diagnostics": {
          "description": "Additional diagnostics information"
        }
      }
    },
    "HistoryUpdateResponseApiModel": {
      "description": "History update results",
      "type": "object",
      "properties": {
        "results": {
          "description": "List of results from the update operation",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceResultApiModel"
          }
        },
        "errorInfo": {
          "$ref": "#/definitions/ServiceResultApiModel"
        }
      }
    },
    "DeleteValuesDetailsApiModel": {
      "description": "Delete raw modified data",
      "type": "object",
      "properties": {
        "startTime": {
          "format": "date-time",
          "description": "Start time",
          "type": "string"
        },
        "endTime": {
          "format": "date-time",
          "description": "End time to delete until",
          "type": "string"
        }
      }
    },
    "DeleteValuesDetailsApiModelHistoryUpdateRequestApiModel": {
      "description": "Request node history update",
      "required": [
        "details"
      ],
      "type": "object",
      "properties": {
        "nodeId": {
          "description": "Node to update",
          "type": "string"
        },
        "browsePath": {
          "description": "An optional path from NodeId instance to\r\nthe actual node.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "details": {
          "$ref": "#/definitions/DeleteValuesDetailsApiModel"
        },
        "header": {
          "$ref": "#/definitions/RequestHeaderApiModel"
        }
      }
    },
    "DeleteModifiedValuesDetailsApiModel": {
      "description": "Delete raw modified data",
      "type": "object",
      "properties": {
        "startTime": {
          "format": "date-time",
          "description": "Start time",
          "type": "string"
        },
        "endTime": {
          "format": "date-time",
          "description": "End time to delete until",
          "type": "string"
        }
      }
    },
    "DeleteModifiedValuesDetailsApiModelHistoryUpdateRequestApiModel": {
      "description": "Request node history update",
      "required": [
        "details"
      ],
      "type": "object",
      "properties": {
        "nodeId": {
          "description": "Node to update",
          "type": "string"
        },
        "browsePath": {
          "description": "An optional path from NodeId instance to\r\nthe actual node.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "details": {
          "$ref": "#/definitions/DeleteModifiedValuesDetailsApiModel"
        },
        "header": {
          "$ref": "#/definitions/RequestHeaderApiModel"
        }
      }
    },
    "DeleteEventsDetailsApiModel": {
      "description": "The events to delete",
      "required": [
        "eventIds"
      ],
      "type": "object",
      "properties": {
        "eventIds": {
          "description": "Events to delete",
          "type": "array",
          "items": {
            "format": "byte",
            "type": "string"
          }
        }
      }
    },
    "DeleteEventsDetailsApiModelHistoryUpdateRequestApiModel": {
      "description": "Request node history update",
      "required": [
        "details"
      ],
      "type": "object",
      "properties": {
        "nodeId": {
          "description": "Node to update",
          "type": "string"
        },
        "browsePath": {
          "description": "An optional path from NodeId instance to\r\nthe actual node.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "details": {
          "$ref": "#/definitions/DeleteEventsDetailsApiModel"
        },
        "header": {
          "$ref": "#/definitions/RequestHeaderApiModel"
        }
      }
    },
    "VariantValueHistoryReadRequestApiModel": {
      "description": "Request node history read",
      "properties": {
        "nodeId": {
          "description": "Node to read from (mandatory)",
          "type": "string"
        },
        "browsePath": {
          "description": "An optional path from NodeId instance to\r\nthe actual node.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "details": {
          "description": "The HistoryReadDetailsType extension object\r\nencoded in json and containing the tunneled\r\nHistorian reader request."
        },
        "indexRange": {
          "description": "Index range to read, e.g. 1:2,0:1 for 2 slices\r\nout of a matrix or 0:1 for the first item in\r\nan array, string or bytestring.\r\nSee 7.22 of part 4: NumericRange.",
          "type": "string"
        },
        "header": {
          "$ref": "#/definitions/RequestHeaderApiModel"
        }
      }
    },
    "VariantValueHistoryReadResponseApiModel": {
      "description": "History read results",
      "properties": {
        "history": {
          "description": "History as json encoded extension object"
        },
        "continuationToken": {
          "description": "Continuation token if more results pending.",
          "type": "string"
        },
        "errorInfo": {
          "$ref": "#/definitions/ServiceResultApiModel"
        }
      }
    },
    "HistoryReadNextRequestApiModel": {
      "description": "Request node history read continuation",
      "required": [
        "continuationToken"
      ],
      "type": "object",
      "properties": {
        "continuationToken": {
          "description": "Continuation token to continue reading more\r\nresults.",
          "type": "string"
        },
        "abort": {
          "description": "Abort reading after this read",
          "type": "boolean"
        },
        "header": {
          "$ref": "#/definitions/RequestHeaderApiModel"
        }
      }
    },
    "VariantValueHistoryReadNextResponseApiModel": {
      "description": "History read continuation result",
      "properties": {
        "history": {
          "description": "History as json encoded extension object"
        },
        "continuationToken": {
          "description": "Continuation token if more results pending.",
          "type": "string"
        },
        "errorInfo": {
          "$ref": "#/definitions/ServiceResultApiModel"
        }
      }
    },
    "VariantValueHistoryUpdateRequestApiModel": {
      "description": "Request node history update",
      "required": [
        "details"
      ],
      "properties": {
        "nodeId": {
          "description": "Node to update",
          "type": "string"
        },
        "browsePath": {
          "description": "An optional path from NodeId instance to\r\nthe actual node.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "details": {
          "description": "The HistoryUpdateDetailsType extension object\r\nencoded as json Variant and containing the tunneled\r\nupdate request for the Historian server. The value\r\nis updated at edge using above node address."
        },
        "header": {
          "$ref": "#/definitions/RequestHeaderApiModel"
        }
      }
    },
    "HistoryUpdateOperation": {
      "description": "History update type",
      "enum": [
        "Insert",
        "Replace",
        "Update",
        "Delete"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "HistoryUpdateOperation",
        "modelAsString": false
      }
    },
    "ModificationInfoApiModel": {
      "description": "Modification information",
      "type": "object",
      "properties": {
        "modificationTime": {
          "format": "date-time",
          "description": "Modification time",
          "type": "string"
        },
        "updateType": {
          "$ref": "#/definitions/HistoryUpdateOperation"
        },
        "userName": {
          "description": "User who made the change",
          "type": "string"
        }
      }
    },
    "HistoricValueApiModel": {
      "description": "Historic data",
      "type": "object",
      "properties": {
        "value": {
          "description": ",\r\n            The value of data value."
        },
        "statusCode": {
          "format": "int64",
          "description": "The status code associated with the value.",
          "type": "integer"
        },
        "sourceTimestamp": {
          "format": "date-time",
          "description": "The source timestamp associated with the value.",
          "type": "string"
        },
        "sourcePicoseconds": {
          "format": "int32",
          "description": "Additional resolution for the source timestamp.",
          "type": "integer"
        },
        "serverTimestamp": {
          "format": "date-time",
          "description": "The server timestamp associated with the value.",
          "type": "string"
        },
        "serverPicoseconds": {
          "format": "int32",
          "description": "Additional resolution for the server timestamp.",
          "type": "integer"
        },
        "modificationInfo": {
          "$ref": "#/definitions/ModificationInfoApiModel"
        }
      }
    },
    "InsertValuesDetailsApiModel": {
      "description": "Insert historic data",
      "required": [
        "values"
      ],
      "type": "object",
      "properties": {
        "values": {
          "description": "Values to insert",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HistoricValueApiModel"
          }
        }
      }
    },
    "InsertValuesDetailsApiModelHistoryUpdateRequestApiModel": {
      "description": "Request node history update",
      "required": [
        "details"
      ],
      "type": "object",
      "properties": {
        "nodeId": {
          "description": "Node to update",
          "type": "string"
        },
        "browsePath": {
          "description": "An optional path from NodeId instance to\r\nthe actual node.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "details": {
          "$ref": "#/definitions/InsertValuesDetailsApiModel"
        },
        "header": {
          "$ref": "#/definitions/RequestHeaderApiModel"
        }
      }
    },
    "NodeAttribute": {
      "description": "Node attribute identifiers",
      "enum": [
        "NodeClass",
        "BrowseName",
        "DisplayName",
        "Description",
        "WriteMask",
        "UserWriteMask",
        "IsAbstract",
        "Symmetric",
        "InverseName",
        "ContainsNoLoops",
        "EventNotifier",
        "Value",
        "DataType",
        "ValueRank",
        "ArrayDimensions",
        "AccessLevel",
        "UserAccessLevel",
        "MinimumSamplingInterval",
        "Historizing",
        "Executable",
        "UserExecutable",
        "DataTypeDefinition",
        "RolePermissions",
        "UserRolePermissions",
        "AccessRestrictions"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "NodeAttribute",
        "modelAsString": false
      }
    },
    "SimpleAttributeOperandApiModel": {
      "description": "Simple attribute operand model",
      "type": "object",
      "properties": {
        "nodeId": {
          "description": "Type definition node id if operand is\r\nsimple or full attribute operand.",
          "type": "string"
        },
        "browsePath": {
          "description": "Browse path of attribute operand",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "attributeId": {
          "$ref": "#/definitions/NodeAttribute"
        },
        "indexRange": {
          "description": "Index range of attribute operand",
          "type": "string"
        }
      }
    },
    "FilterOperatorType": {
      "description": "Filter operator type",
      "enum": [
        "Equals",
        "IsNull",
        "GreaterThan",
        "LessThan",
        "GreaterThanOrEqual",
        "LessThanOrEqual",
        "Like",
        "Not",
        "Between",
        "InList",
        "And",
        "Or",
        "Cast",
        "InView",
        "OfType",
        "RelatedTo",
        "BitwiseAnd",
        "BitwiseOr"
      ],
      "type": "string",
      "x-ms-enum": {
        "name": "FilterOperatorType",
        "modelAsString": false
      }
    },
    "FilterOperandApiModel": {
      "description": "Filter operand",
      "type": "object",
      "properties": {
        "index": {
          "format": "int64",
          "description": "Element reference in the outer list if\r\noperand is an element operand",
          "type": "integer"
        },
        "value": {
          "description": "Variant value if operand is a literal"
        },
        "nodeId": {
          "description": "Type definition node id if operand is\r\nsimple or full attribute operand.",
          "type": "string"
        },
        "browsePath": {
          "description": "Browse path of attribute operand",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "attributeId": {
          "$ref": "#/definitions/NodeAttribute"
        },
        "indexRange": {
          "description": "Index range of attribute operand",
          "type": "string"
        },
        "alias": {
          "description": "Optional alias to refer to it makeing it a\r\nfull blown attribute operand",
          "type": "string"
        }
      }
    },
    "ContentFilterElementApiModel": {
      "description": "An expression element in the filter ast",
      "type": "object",
      "properties": {
        "filterOperator": {
          "$ref": "#/definitions/FilterOperatorType"
        },
        "filterOperands": {
          "description": "The operands in the element for the operator",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FilterOperandApiModel"
          }
        }
      }
    },
    "ContentFilterApiModel": {
      "description": "Content filter",
      "type": "object",
      "properties": {
        "elements": {
          "description": "The flat list of elements in the filter AST",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContentFilterElementApiModel"
          }
        }
      }
    },
    "EventFilterApiModel": {
      "description": "Event filter",
      "type": "object",
      "properties": {
        "selectClauses": {
          "description": "Select statements",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SimpleAttributeOperandApiModel"
          }
        },
        "whereClause": {
          "$ref": "#/definitions/ContentFilterApiModel"
        }
      }
    },
    "HistoricEventApiModel": {
      "description": "Historic event",
      "type": "object",
      "properties": {
        "eventFields": {
          "description": "The selected fields of the event",
          "items": {
            "description": "Represents primitive or structurally complex value"
          }
        }
      }
    },
    "InsertEventsDetailsApiModel": {
      "description": "Insert historic events",
      "required": [
        "events"
      ],
      "type": "object",
      "properties": {
        "filter": {
          "$ref": "#/definitions/EventFilterApiModel"
        },
        "events": {
          "description": "The new events to insert",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HistoricEventApiModel"
          }
        }
      }
    },
    "InsertEventsDetailsApiModelHistoryUpdateRequestApiModel": {
      "description": "Request node history update",
      "required": [
        "details"
      ],
      "type": "object",
      "properties": {
        "nodeId": {
          "description": "Node to update",
          "type": "string"
        },
        "browsePath": {
          "description": "An optional path from NodeId instance to\r\nthe actual node.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "details": {
          "$ref": "#/definitions/InsertEventsDetailsApiModel"
        },
        "header": {
          "$ref": "#/definitions/RequestHeaderApiModel"
        }
      }
    },
    "ReadEventsDetailsApiModel": {
      "description": "Read event data",
      "type": "object",
      "properties": {
        "startTime": {
          "format": "date-time",
          "description": "Start time to read from",
          "type": "string"
        },
        "endTime": {
          "format": "date-time",
          "description": "End time to read to",
          "type": "string"
        },
        "numEvents": {
          "format": "int64",
          "description": "Number of events to read",
          "type": "integer"
        },
        "filter": {
          "$ref": "#/definitions/EventFilterApiModel"
        }
      }
    },
    "ReadEventsDetailsApiModelHistoryReadRequestApiModel": {
      "description": "Request node history read",
      "type": "object",
      "properties": {
        "nodeId": {
          "description": "Node to read from (mandatory)",
          "type": "string"
        },
        "browsePath": {
          "description": "An optional path from NodeId instance to\r\nthe actual node.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "details": {
          "$ref": "#/definitions/ReadEventsDetailsApiModel"
        },
        "indexRange": {
          "description": "Index range to read, e.g. 1:2,0:1 for 2 slices\r\nout of a matrix or 0:1 for the first item in\r\nan array, string or bytestring.\r\nSee 7.22 of part 4: NumericRange.",
          "type": "string"
        },
        "header": {
          "$ref": "#/definitions/RequestHeaderApiModel"
        }
      }
    },
    "HistoricEventApiModelArrayHistoryReadResponseApiModel": {
      "description": "History read results",
      "type": "object",
      "properties": {
        "history": {
          "description": "History as json encoded extension object",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HistoricEventApiModel"
          }
        },
        "continuationToken": {
          "description": "Continuation token if more results pending.",
          "type": "string"
        },
        "errorInfo": {
          "$ref": "#/definitions/ServiceResultApiModel"
        }
      }
    },
    "HistoricEventApiModelArrayHistoryReadNextResponseApiModel": {
      "description": "History read continuation result",
      "type": "object",
      "properties": {
        "history": {
          "description": "History as json encoded extension object",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HistoricEventApiModel"
          }
        },
        "continuationToken": {
          "description": "Continuation token if more results pending.",
          "type": "string"
        },
        "errorInfo": {
          "$ref": "#/definitions/ServiceResultApiModel"
        }
      }
    },
    "ReadValuesDetailsApiModel": {
      "description": "Read historic values",
      "type": "object",
      "properties": {
        "startTime": {
          "format": "date-time",
          "description": "Beginning of period to read. Set to null\r\nif no specific start time is specified.",
          "type": "string"
        },
        "endTime": {
          "format": "date-time",
          "description": "End of period to read. Set to null if no\r\nspecific end time is specified.",
          "type": "string"
        },
        "numValues": {
          "format": "int64",
          "description": "The maximum number of values returned for any Node\r\nover the time range. If only one time is specified,\r\nthe time range shall extend to return this number\r\nof values. 0 or null indicates that there is no\r\nmaximum.",
          "type": "integer"
        },
        "returnBounds": {
          "description": "Whether to return the bounding values or not.",
          "type": "boolean"
        }
      }
    },
    "ReadValuesDetailsApiModelHistoryReadRequestApiModel": {
      "description": "Request node history read",
      "type": "object",
      "properties": {
        "nodeId": {
          "description": "Node to read from (mandatory)",
          "type": "string"
        },
        "browsePath": {
          "description": "An optional path from NodeId instance to\r\nthe actual node.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "details": {
          "$ref": "#/definitions/ReadValuesDetailsApiModel"
        },
        "indexRange": {
          "description": "Index range to read, e.g. 1:2,0:1 for 2 slices\r\nout of a matrix or 0:1 for the first item in\r\nan array, string or bytestring.\r\nSee 7.22 of part 4: NumericRange.",
          "type": "string"
        },
        "header": {
          "$ref": "#/definitions/RequestHeaderApiModel"
        }
      }
    },
    "HistoricValueApiModelArrayHistoryReadResponseApiModel": {
      "description": "History read results",
      "type": "object",
      "properties": {
        "history": {
          "description": "History as json encoded extension object",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HistoricValueApiModel"
          }
        },
        "continuationToken": {
          "description": "Continuation token if more results pending.",
          "type": "string"
        },
        "errorInfo": {
          "$ref": "#/definitions/ServiceResultApiModel"
        }
      }
    },
    "ReadValuesAtTimesDetailsApiModel": {
      "description": "Read data at specified times",
      "required": [
        "reqTimes"
      ],
      "type": "object",
      "properties": {
        "reqTimes": {
          "description": "Requested datums",
          "type": "array",
          "items": {
            "format": "date-time",
            "type": "string"
          }
        },
        "useSimpleBounds": {
          "description": "Whether to use simple bounds",
          "type": "boolean"
        }
      }
    },
    "ReadValuesAtTimesDetailsApiModelHistoryReadRequestApiModel": {
      "description": "Request node history read",
      "type": "object",
      "properties": {
        "nodeId": {
          "description": "Node to read from (mandatory)",
          "type": "string"
        },
        "browsePath": {
          "description": "An optional path from NodeId instance to\r\nthe actual node.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "details": {
          "$ref": "#/definitions/ReadValuesAtTimesDetailsApiModel"
        },
        "indexRange": {
          "description": "Index range to read, e.g. 1:2,0:1 for 2 slices\r\nout of a matrix or 0:1 for the first item in\r\nan array, string or bytestring.\r\nSee 7.22 of part 4: NumericRange.",
          "type": "string"
        },
        "header": {
          "$ref": "#/definitions/RequestHeaderApiModel"
        }
      }
    },
    "AggregateConfigurationApiModel": {
      "description": "Aggregate configuration",
      "type": "object",
      "properties": {
        "useServerCapabilitiesDefaults": {
          "description": "Whether to use the default server caps",
          "type": "boolean"
        },
        "treatUncertainAsBad": {
          "description": "Whether to treat uncertain as bad",
          "type": "boolean"
        },
        "percentDataBad": {
          "format": "int32",
          "description": "Percent of data that is bad",
          "type": "integer"
        },
        "percentDataGood": {
          "format": "int32",
          "description": "Percent of data that is good",
          "type": "integer"
        },
        "useSlopedExtrapolation": {
          "description": "Whether to use sloped extrapolation.",
          "type": "boolean"
        }
      }
    },
    "ReadProcessedValuesDetailsApiModel": {
      "description": "Read processed historic data",
      "type": "object",
      "properties": {
        "startTime": {
          "format": "date-time",
          "description": "Start time to read from.",
          "type": "string"
        },
        "endTime": {
          "format": "date-time",
          "description": "End time to read until",
          "type": "string"
        },
        "processingInterval": {
          "format": "double",
          "description": "Interval to process",
          "type": "number"
        },
        "aggregateTypeId": {
          "description": "The aggregate type node ids",
          "type": "string"
        },
        "aggregateConfiguration": {
          "$ref": "#/definitions/AggregateConfigurationApiModel"
        }
      }
    },
    "ReadProcessedValuesDetailsApiModelHistoryReadRequestApiModel": {
      "description": "Request node history read",
      "type": "object",
      "properties": {
        "nodeId": {
          "description": "Node to read from (mandatory)",
          "type": "string"
        },
        "browsePath": {
          "description": "An optional path from NodeId instance to\r\nthe actual node.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "details": {
          "$ref": "#/definitions/ReadProcessedValuesDetailsApiModel"
        },
        "indexRange": {
          "description": "Index range to read, e.g. 1:2,0:1 for 2 slices\r\nout of a matrix or 0:1 for the first item in\r\nan array, string or bytestring.\r\nSee 7.22 of part 4: NumericRange.",
          "type": "string"
        },
        "header": {
          "$ref": "#/definitions/RequestHeaderApiModel"
        }
      }
    },
    "ReadModifiedValuesDetailsApiModel": {
      "description": "Read modified data",
      "type": "object",
      "properties": {
        "startTime": {
          "format": "date-time",
          "description": "The start time to read from",
          "type": "string"
        },
        "endTime": {
          "format": "date-time",
          "description": "The end time to read to",
          "type": "string"
        },
        "numValues": {
          "format": "int64",
          "description": "The number of values to read",
          "type": "integer"
        }
      }
    },
    "ReadModifiedValuesDetailsApiModelHistoryReadRequestApiModel": {
      "description": "Request node history read",
      "type": "object",
      "properties": {
        "nodeId": {
          "description": "Node to read from (mandatory)",
          "type": "string"
        },
        "browsePath": {
          "description": "An optional path from NodeId instance to\r\nthe actual node.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "details": {
          "$ref": "#/definitions/ReadModifiedValuesDetailsApiModel"
        },
        "indexRange": {
          "description": "Index range to read, e.g. 1:2,0:1 for 2 slices\r\nout of a matrix or 0:1 for the first item in\r\nan array, string or bytestring.\r\nSee 7.22 of part 4: NumericRange.",
          "type": "string"
        },
        "header": {
          "$ref": "#/definitions/RequestHeaderApiModel"
        }
      }
    },
    "HistoricValueApiModelArrayHistoryReadNextResponseApiModel": {
      "description": "History read continuation result",
      "type": "object",
      "properties": {
        "history": {
          "description": "History as json encoded extension object",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HistoricValueApiModel"
          }
        },
        "continuationToken": {
          "description": "Continuation token if more results pending.",
          "type": "string"
        },
        "errorInfo": {
          "$ref": "#/definitions/ServiceResultApiModel"
        }
      }
    },
    "ReplaceValuesDetailsApiModel": {
      "description": "Replace historic data",
      "required": [
        "values"
      ],
      "type": "object",
      "properties": {
        "values": {
          "description": "Values to replace",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HistoricValueApiModel"
          }
        }
      }
    },
    "ReplaceValuesDetailsApiModelHistoryUpdateRequestApiModel": {
      "description": "Request node history update",
      "required": [
        "details"
      ],
      "type": "object",
      "properties": {
        "nodeId": {
          "description": "Node to update",
          "type": "string"
        },
        "browsePath": {
          "description": "An optional path from NodeId instance to\r\nthe actual node.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "details": {
          "$ref": "#/definitions/ReplaceValuesDetailsApiModel"
        },
        "header": {
          "$ref": "#/definitions/RequestHeaderApiModel"
        }
      }
    },
    "ReplaceEventsDetailsApiModel": {
      "description": "Replace historic events",
      "required": [
        "events"
      ],
      "type": "object",
      "properties": {
        "filter": {
          "$ref": "#/definitions/EventFilterApiModel"
        },
        "events": {
          "description": "The events to replace",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HistoricEventApiModel"
          }
        }
      }
    },
    "ReplaceEventsDetailsApiModelHistoryUpdateRequestApiModel": {
      "description": "Request node history update",
      "required": [
        "details"
      ],
      "type": "object",
      "properties": {
        "nodeId": {
          "description": "Node to update",
          "type": "string"
        },
        "browsePath": {
          "description": "An optional path from NodeId instance to\r\nthe actual node.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "details": {
          "$ref": "#/definitions/ReplaceEventsDetailsApiModel"
        },
        "header": {
          "$ref": "#/definitions/RequestHeaderApiModel"
        }
      }
    }
  },
  "securityDefinitions": {
    "bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "Authorization token in the form of 'bearer <token>'"
    }
  },
  "tags": [
    {
      "name": "Delete",
      "description": "Services to delete history"
    },
    {
      "name": "History",
      "description": "History raw access services"
    },
    {
      "name": "Insert",
      "description": "History insert services"
    },
    {
      "name": "Read",
      "description": "Historic access read services"
    },
    {
      "name": "Replace",
      "description": "History replace services"
    }
  ]
}