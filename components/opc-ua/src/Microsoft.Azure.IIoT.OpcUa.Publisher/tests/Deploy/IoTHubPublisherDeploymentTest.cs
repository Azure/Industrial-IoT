// ------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All rights reserved.
//  Licensed under the MIT License (MIT). See License.txt in the repo root for license information.
// ------------------------------------------------------------

namespace Microsoft.Azure.IIoT.OpcUa.Publisher.Tests.Deploy {
    using Autofac;
    using Autofac.Extras.Moq;
    using Microsoft.Azure.IIoT.Deploy.Runtime;
    using Microsoft.Azure.IIoT.Hub;
    using Microsoft.Azure.IIoT.Hub.Models;
    using Microsoft.Azure.IIoT.OpcUa.Publisher.Deploy;
    using Microsoft.Azure.IIoT.Serializers;
    using Microsoft.Azure.IIoT.Serializers.NewtonSoft;
    using Microsoft.Extensions.Configuration;
    using Moq;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Xunit;

    /// <summary>
    /// Test to check layered deployments that are generated by IoTHubPublisherDeployment
    /// </summary>
    public class IoTHubPublisherDeploymentTest {

        [Fact]
        public async Task PublisherDeploymentRoutesTestAsync() {

            IList<ConfigurationModel> configurationModelList = new List<ConfigurationModel>();

            var ioTHubConfigurationServicesMock = new Mock<IIoTHubConfigurationServices>();
            ioTHubConfigurationServicesMock
                .Setup(e => e.CreateOrUpdateConfigurationAsync(It.IsAny<ConfigurationModel>(), true, CancellationToken.None))
                .Callback<ConfigurationModel, bool, CancellationToken>(
                    (confModel, forceUpdate, ct) => configurationModelList.Add(confModel))
                .Returns((ConfigurationModel configuration, bool forceUpdate, CancellationToken ct) => Task.FromResult(configuration));

            using (var mock = Setup(ioTHubConfigurationServicesMock)) {
                var publisherDeploymentService = mock.Create<IoTHubPublisherDeployment>();
                await publisherDeploymentService.StartAsync();

                Assert.Equal(2, configurationModelList.Count);

                {
                    var configurationModel = configurationModelList[0];
                    Assert.Equal("__default-opcpublisher", configurationModel.Id);
                    Assert.Equal(2, configurationModel.Content.ModulesContent.Count);
                    Assert.Equal("FROM /messages/modules/publisher/* INTO $upstream",
                        configurationModel.Content.ModulesContent["$edgeHub"]["properties.desired.routes.publisherToUpstream"]);
                    Assert.Equal("FROM /messages/* WHERE NOT IS_DEFINED($connectionModuleId) INTO $upstream",
                        configurationModel.Content.ModulesContent["$edgeHub"]["properties.desired.routes.leafToUpstream"]);
                }
                {
                    var configurationModel = configurationModelList[1];
                    Assert.Equal("__default-opcpublisher-windows", configurationModel.Id);
                    Assert.Equal(2, configurationModel.Content.ModulesContent.Count);
                    Assert.Equal("FROM /messages/modules/publisher/* INTO $upstream",
                        configurationModel.Content.ModulesContent["$edgeHub"]["properties.desired.routes.publisherToUpstream"]);
                    Assert.Equal("FROM /messages/* WHERE NOT IS_DEFINED($connectionModuleId) INTO $upstream",
                        configurationModel.Content.ModulesContent["$edgeHub"]["properties.desired.routes.leafToUpstream"]);
                }
            }
        }

        /// <summary>
        /// Setup mock
        /// </summary>
        /// <param name="ioTHubConfigurationServicesMock"></param>
        /// <param name="configuration"></param>
        private static AutoMock Setup(
            Mock<IIoTHubConfigurationServices> ioTHubConfigurationServicesMock = null,
            IConfiguration configuration = null
        ) {
            var mock = AutoMock.GetLoose(builder => {
                // Use empty configuration root if one is not passed.
                var conf = configuration ?? new ConfigurationBuilder()
                    .AddInMemoryCollection()
                    .Build();

                // Setup configuration
                builder.RegisterInstance(conf)
                    .As<IConfiguration>()
                    .SingleInstance();

                var containerRegistryConfig = new ContainerRegistryConfig(conf);
                builder.RegisterInstance(containerRegistryConfig)
                    .AsImplementedInterfaces()
                    .SingleInstance();

                // Setup JSON serializer
                builder.RegisterType<NewtonSoftJsonConverters>()
                    .As<IJsonSerializerConverterProvider>();
                builder.RegisterType<NewtonSoftJsonSerializer>()
                    .As<IJsonSerializer>();

                // Setup IIoTHubConfigurationServices mock
                if (ioTHubConfigurationServicesMock is null) {
                    var ioTHubConfigurationServices = new Mock<IIoTHubConfigurationServices>();
                    ioTHubConfigurationServices
                        .Setup(e => e.CreateOrUpdateConfigurationAsync(It.IsAny<ConfigurationModel>(), true, CancellationToken.None))
                        .Returns((ConfigurationModel configuration, bool forceUpdate, CancellationToken ct) => Task.FromResult(configuration));
                    builder.RegisterMock(ioTHubConfigurationServices);
                } else {
                    builder.RegisterMock(ioTHubConfigurationServicesMock);
                }

                builder.RegisterType<IoTHubPublisherDeployment>()
                    .AsSelf();;
            });
            return mock;
        }
    }
}
