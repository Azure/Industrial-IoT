{
    "swagger": "2.0",
    "info": {
        "title": "Opc-Publisher-Service",
        "description": "Azure Industrial IoT OPC UA Publisher Service",
        "contact": {
            "url": "https://www.github.com/Azure/Industrial-IoT"
        },
        "license": {
            "name": "MIT LICENSE",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "v2"
    },
    "host": "localhost:9080",
    "schemes": [
        "https",
        "http"
    ],
    "paths": {
        "/registry/v2/applications": {
            "post": {
                "tags": [
                    "Applications"
                ],
                "summary": "Register new server",
                "description": "Registers a server solely using a discovery url. Requires that the onboarding agent service is running and the server can be located by a supervisor in its network using the discovery url.",
                "operationId": "RegisterServer",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Server registration request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ServerRegistrationRequestModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            },
            "put": {
                "tags": [
                    "Applications"
                ],
                "summary": "Create new application",
                "description": "The application is registered using the provided information, but it is not associated with a publisher. This is useful for when you need to register clients or you want to register a server that is located in a network not reachable through a publisher module.",
                "operationId": "CreateApplication",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Application registration request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ApplicationRegistrationRequestModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApplicationRegistrationResponseModel"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Applications"
                ],
                "summary": "Purge applications",
                "description": "Purges all applications that have not been seen for a specified amount of time.",
                "operationId": "DeleteAllDisabledApplications",
                "parameters": [
                    {
                        "in": "query",
                        "name": "notSeenFor",
                        "description": "A duration in milliseconds",
                        "type": "string",
                        "format": "date-span"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            },
            "get": {
                "tags": [
                    "Applications"
                ],
                "summary": "Get list of applications",
                "description": "Get all registered applications in paged form. The returned model can contain a continuation token if more results are available. Call this operation again using the token to retrieve more results.",
                "operationId": "GetListOfApplications",
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "continuationToken",
                        "description": "Optional Continuation token",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "Optional number of results to return",
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApplicationInfoListModel"
                        }
                    }
                },
                "x-ms-pageable": {
                    "nextLinkName": "continuationToken"
                }
            }
        },
        "/registry/v2/applications/{applicationId}/disable": {
            "post": {
                "tags": [
                    "Applications"
                ],
                "summary": "Disable an enabled application.",
                "description": "A manager can disable an application.",
                "operationId": "DisableApplication",
                "parameters": [
                    {
                        "in": "path",
                        "name": "applicationId",
                        "description": "The application id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/registry/v2/applications/{applicationId}/enable": {
            "post": {
                "tags": [
                    "Applications"
                ],
                "summary": "Re-enable a disabled application.",
                "description": "A manager can enable an application.",
                "operationId": "EnableApplication",
                "parameters": [
                    {
                        "in": "path",
                        "name": "applicationId",
                        "description": "The application id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/registry/v2/applications/discover": {
            "post": {
                "tags": [
                    "Applications"
                ],
                "summary": "Discover servers",
                "description": "Registers servers by running a discovery scan in a supervisor's network. Requires that the onboarding agent service is running.",
                "operationId": "DiscoverServer",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Discovery request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DiscoveryRequestModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/registry/v2/applications/discover/{requestId}": {
            "delete": {
                "tags": [
                    "Applications"
                ],
                "summary": "Cancel discovery",
                "description": "Cancels a discovery request using the request identifier.",
                "operationId": "Cancel",
                "parameters": [
                    {
                        "in": "path",
                        "name": "requestId",
                        "description": "Discovery request",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/registry/v2/applications/{applicationId}": {
            "get": {
                "tags": [
                    "Applications"
                ],
                "summary": "Get application registration",
                "operationId": "GetApplicationRegistration",
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "applicationId",
                        "description": "Application id for the server",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApplicationRegistrationModel"
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Applications"
                ],
                "summary": "Update application registration",
                "description": "The application information is updated with new properties. Note that this information might be overridden if the application is re-discovered during a discovery run (recurring or one-time).",
                "operationId": "UpdateApplicationRegistration",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "applicationId",
                        "description": "The identifier of the application",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Application update request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ApplicationRegistrationUpdateModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Applications"
                ],
                "summary": "Unregister application",
                "description": "Unregisters and deletes application and all its associated endpoints.",
                "operationId": "DeleteApplication",
                "parameters": [
                    {
                        "in": "path",
                        "name": "applicationId",
                        "description": "The identifier of the application",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/registry/v2/applications/sites": {
            "get": {
                "tags": [
                    "Applications"
                ],
                "summary": "Get list of sites",
                "description": "List all sites applications are registered in.",
                "operationId": "GetListOfSites",
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "continuationToken",
                        "description": "Optional Continuation token",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "Optional number of results to return",
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApplicationSiteListModel"
                        }
                    }
                },
                "x-ms-pageable": {
                    "nextLinkName": "continuationToken"
                }
            }
        },
        "/registry/v2/applications/query": {
            "post": {
                "tags": [
                    "Applications"
                ],
                "summary": "Query applications",
                "description": "List applications that match a query model. The returned model can contain a continuation token if more results are available. Call the GetListOfApplications operation using the token to retrieve more results.",
                "operationId": "QueryApplications",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "Optional number of results to return",
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Application query",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ApplicationRegistrationQueryModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApplicationInfoListModel"
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Applications"
                ],
                "summary": "Get filtered list of applications",
                "description": "Get a list of applications filtered using the specified query parameters. The returned model can contain a continuation token if more results are available. Call the GetListOfApplications operation using the token to retrieve more results.",
                "operationId": "GetFilteredListOfApplications",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "Number of results to return",
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Applications Query model",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ApplicationRegistrationQueryModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ApplicationInfoListModel"
                        }
                    }
                }
            }
        },
        "/registry/v2/discovery/{discovererId}": {
            "get": {
                "tags": [
                    "Discovery"
                ],
                "summary": "Get discoverer registration information",
                "description": "Returns a discoverer's registration and connectivity information. A discoverer id corresponds to the twin modules module identity.",
                "operationId": "GetDiscoverer",
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "discovererId",
                        "description": "Discoverer identifier",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/DiscovererModel"
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Discovery"
                ],
                "summary": "Update discoverer information",
                "description": "Allows a caller to configure recurring discovery runs on the twin module identified by the discoverer id or update site information.",
                "operationId": "UpdateDiscoverer",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "discovererId",
                        "description": "discoverer identifier",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Patch request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DiscovererUpdateModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            },
            "post": {
                "tags": [
                    "Discovery"
                ],
                "summary": "Enable server discovery",
                "description": "Allows a caller to configure recurring discovery runs on the discovery module identified by the module id.",
                "operationId": "SetDiscoveryMode",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "discovererId",
                        "description": "discoverer identifier",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "mode",
                        "description": "Discovery mode",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "Off",
                            "Local",
                            "Network",
                            "Fast",
                            "Scan"
                        ],
                        "x-ms-enum": {
                            "name": "DiscoveryMode",
                            "modelAsString": false
                        }
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Discovery configuration",
                        "schema": {
                            "$ref": "#/definitions/DiscoveryConfigModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/registry/v2/discovery": {
            "get": {
                "tags": [
                    "Discovery"
                ],
                "summary": "Get list of discoverers",
                "description": "Get all registered discoverers and therefore twin modules in paged form. The returned model can contain a continuation token if more results are available. Call this operation again using the token to retrieve more results.",
                "operationId": "GetListOfDiscoverers",
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "continuationToken",
                        "description": "Optional Continuation token",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "Optional number of results to return",
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/DiscovererListModel"
                        }
                    }
                },
                "x-ms-pageable": {
                    "nextLinkName": "continuationToken"
                }
            }
        },
        "/registry/v2/discovery/query": {
            "post": {
                "tags": [
                    "Discovery"
                ],
                "summary": "Query discoverers",
                "description": "Get all discoverers that match a specified query. The returned model can contain a continuation token if more results are available. Call the GetListOfDiscoverers operation using the token to retrieve more results.",
                "operationId": "QueryDiscoverers",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "Number of results to return",
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Discoverers query model",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DiscovererQueryModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/DiscovererListModel"
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Discovery"
                ],
                "summary": "Get filtered list of discoverers",
                "description": "Get a list of discoverers filtered using the specified query parameters. The returned model can contain a continuation token if more results are available. Call the GetListOfDiscoverers operation using the token to retrieve more results.",
                "operationId": "GetFilteredListOfDiscoverers",
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "siteId",
                        "description": "Site of the discoverer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "discovery",
                        "description": "Discovery mode of discoverer",
                        "type": "string",
                        "enum": [
                            "Off",
                            "Local",
                            "Network",
                            "Fast",
                            "Scan"
                        ],
                        "x-ms-enum": {
                            "name": "DiscoveryMode",
                            "modelAsString": false
                        }
                    },
                    {
                        "in": "query",
                        "name": "connected",
                        "description": "Included connected or disconnected",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "Number of results to return",
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/DiscovererListModel"
                        }
                    }
                }
            }
        },
        "/registry/v2/endpoints": {
            "put": {
                "tags": [
                    "Endpoints"
                ],
                "summary": "Register endpoint",
                "description": "Adds an endpoint. This will onboard the endpoint and the associated application but no other endpoints. This call is synchronous and will return successful if endpoint is found. Otherwise the call will fail with error not found.",
                "operationId": "RegisterEndpoint",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Query for the endpoint to register. This must have at least the discovery url. If more information is specified it is used to validate that the application has such endpoint and if not the call will fail.",
                        "schema": {
                            "$ref": "#/definitions/ServerEndpointQueryModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Endpoints"
                ],
                "summary": "Get list of endpoints",
                "description": "Get all registered endpoints in paged form. The returned model can contain a continuation token if more results are available. Call this operation again using the token to retrieve more results.",
                "operationId": "GetListOfEndpoints",
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "onlyServerState",
                        "description": "Whether to include only server state, or display current client state of the endpoint if available",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "continuationToken",
                        "description": "Optional Continuation token",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "Optional number of results to return",
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/EndpointInfoListModel"
                        }
                    }
                },
                "x-ms-pageable": {
                    "nextLinkName": "continuationToken"
                }
            }
        },
        "/registry/v2/endpoints/{endpointId}": {
            "get": {
                "tags": [
                    "Endpoints"
                ],
                "summary": "Get endpoint information",
                "description": "Gets information about an endpoint.",
                "operationId": "GetEndpoint",
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "endpoint identifier",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "onlyServerState",
                        "description": "Whether to include only server state, or display current client state of the endpoint if available",
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/EndpointInfoModel"
                        }
                    }
                }
            }
        },
        "/registry/v2/endpoints/query": {
            "post": {
                "tags": [
                    "Endpoints"
                ],
                "summary": "Query endpoints",
                "description": "Return endpoints that match the specified query. The returned model can contain a continuation token if more results are available. Call the GetListOfEndpoints operation using the token to retrieve more results.",
                "operationId": "QueryEndpoints",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "onlyServerState",
                        "description": "Whether to include only server state, or display current client state of the endpoint if available",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "Optional number of results to return",
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Query to match",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EndpointRegistrationQueryModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/EndpointInfoListModel"
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Endpoints"
                ],
                "summary": "Get filtered list of endpoints",
                "description": "Get a list of endpoints filtered using the specified query parameters. The returned model can contain a continuation token if more results are available. Call the GetListOfEndpoints operation using the token to retrieve more results.",
                "operationId": "GetFilteredListOfEndpoints",
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "url",
                        "description": "Endoint url for direct server access",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "certificate",
                        "description": "Certificate thumbprint of the endpoint",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "securityMode",
                        "description": "Security mode to use for communication - null = Best",
                        "type": "string",
                        "enum": [
                            "Best",
                            "Sign",
                            "SignAndEncrypt",
                            "None"
                        ],
                        "x-ms-enum": {
                            "name": "SecurityMode",
                            "modelAsString": false
                        }
                    },
                    {
                        "in": "query",
                        "name": "securityPolicy",
                        "description": "Endpoint security policy to use - null = Best.",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "endpointState",
                        "description": "The last state of the activated endpoint",
                        "type": "string",
                        "enum": [
                            "Connecting",
                            "NotReachable",
                            "Busy",
                            "NoTrust",
                            "CertificateInvalid",
                            "Ready",
                            "Error",
                            "Disconnected",
                            "Unauthorized"
                        ],
                        "x-ms-enum": {
                            "name": "EndpointConnectivityState",
                            "modelAsString": false
                        }
                    },
                    {
                        "in": "query",
                        "name": "includeNotSeenSince",
                        "description": "Whether to include endpoints that were soft deleted",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "discovererId",
                        "description": "Discoverer id to filter with",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "applicationId",
                        "description": "Application id to filter",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "siteOrGatewayId",
                        "description": "Site or gateway id to filter with",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "onlyServerState",
                        "description": "Whether to include only server state, or display current client state of the endpoint if available",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "Optional number of results to return",
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/EndpointInfoListModel"
                        }
                    }
                }
            }
        },
        "/registry/v2/endpoints/{endpointId}/test": {
            "post": {
                "tags": [
                    "Endpoints"
                ],
                "summary": "Test endpoint is accessible",
                "description": "Test an endpoint can be connected to. Returns error information if connecting fails.",
                "operationId": "TestConnection",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "endpoint identifier",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TestConnectionRequestModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/TestConnectionResponseModel"
                        }
                    }
                }
            }
        },
        "/registry/v2/endpoints/{endpointId}/connect": {
            "post": {
                "tags": [
                    "Endpoints"
                ],
                "summary": "Connect endpoint",
                "description": "Connect an endpoint for subsequent use in twin service calls. This call keeps the connection until it expires based on the expiration requested or when disconnected.",
                "operationId": "Connect",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "endpoint identifier",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ConnectRequestModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ConnectResponseModel"
                        }
                    }
                }
            }
        },
        "/registry/v2/endpoints/{endpointId}/certificate": {
            "get": {
                "tags": [
                    "Endpoints"
                ],
                "summary": "Get endpoint certificate chain",
                "description": "Gets current certificate of the endpoint.",
                "operationId": "GetEndpointCertificate",
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "endpoint identifier",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/X509CertificateChainModel"
                        }
                    }
                }
            }
        },
        "/registry/v2/endpoints/{endpointId}/disconnect": {
            "post": {
                "tags": [
                    "Endpoints"
                ],
                "summary": "Disconnect endpoint",
                "description": "Disconnects the endpoint on the publisher.",
                "operationId": "Disconnect",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "endpoint identifier",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DisconnectRequestModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/events/v2/discovery/{discovererId}/events": {
            "put": {
                "tags": [
                    "Events"
                ],
                "summary": "Subscribe to discovery progress from discoverer",
                "description": "Register a client to receive discovery progress events through SignalR from a particular discoverer.",
                "operationId": "SubscribeByDiscovererId",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "discovererId",
                        "description": "The discoverer to subscribe to",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The connection that will receive discovery events.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/events/v2/discovery/requests/{requestId}/events": {
            "put": {
                "tags": [
                    "Events"
                ],
                "summary": "Subscribe to discovery progress for a request",
                "description": "Register a client to receive discovery progress events through SignalR for a particular request.",
                "operationId": "SubscribeByRequestId",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "requestId",
                        "description": "The request to monitor",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The connection that will receive discovery events.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/events/v2/discovery/requests/{requestId}/events/{connectionId}": {
            "delete": {
                "tags": [
                    "Events"
                ],
                "summary": "Unsubscribe from discovery progress for a request.",
                "description": "Unregister a client and stop it from receiving discovery events for a particular request.",
                "operationId": "UnsubscribeByRequestId",
                "parameters": [
                    {
                        "in": "path",
                        "name": "requestId",
                        "description": "The request to unsubscribe from",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "connectionId",
                        "description": "The connection that will not receive any more discovery progress",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/events/v2/discovery/{discovererId}/events/{connectionId}": {
            "delete": {
                "tags": [
                    "Events"
                ],
                "summary": "Unsubscribe from discovery progress from discoverer.",
                "description": "Unregister a client and stop it from receiving discovery events.",
                "operationId": "UnsubscribeByDiscovererId",
                "parameters": [
                    {
                        "in": "path",
                        "name": "discovererId",
                        "description": "The discoverer to unsubscribe from",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "connectionId",
                        "description": "The connection that will not receive any more discovery progress",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/registry/v2/gateways/{GatewayId}": {
            "get": {
                "tags": [
                    "Gateways"
                ],
                "summary": "Get Gateway registration information",
                "description": "Returns a Gateway's registration and connectivity information. A Gateway id corresponds to the twin modules module identity.",
                "operationId": "GetGateway",
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "GatewayId",
                        "description": "Gateway identifier",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/GatewayInfoModel"
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Gateways"
                ],
                "summary": "Update Gateway configuration",
                "description": "Allows a caller to configure operations on the Gateway module identified by the Gateway id.",
                "operationId": "UpdateGateway",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "GatewayId",
                        "description": "Gateway identifier",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Patch request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GatewayUpdateModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/registry/v2/gateways": {
            "get": {
                "tags": [
                    "Gateways"
                ],
                "summary": "Get list of Gateways",
                "description": "Get all registered Gateways and therefore twin modules in paged form. The returned model can contain a continuation token if more results are available. Call this operation again using the token to retrieve more results.",
                "operationId": "GetListOfGateway",
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "continuationToken",
                        "description": "Optional Continuation token",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "Optional number of results to return",
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/GatewayListModel"
                        }
                    }
                },
                "x-ms-pageable": {
                    "nextLinkName": "continuationToken"
                }
            }
        },
        "/registry/v2/gateways/query": {
            "post": {
                "tags": [
                    "Gateways"
                ],
                "summary": "Query Gateways",
                "description": "Get all Gateways that match a specified query. The returned model can contain a continuation token if more results are available. Call the GetListOfGateway operation using the token to retrieve more results.",
                "operationId": "QueryGateway",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "Number of results to return",
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Gateway query model",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GatewayQueryModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/GatewayListModel"
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Gateways"
                ],
                "summary": "Get filtered list of Gateways",
                "description": "Get a list of Gateways filtered using the specified query parameters. The returned model can contain a continuation token if more results are available. Call the GetListOfGateway operation using the token to retrieve more results.",
                "operationId": "GetFilteredListOfGateway",
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "siteId",
                        "description": "Site of the Gateway",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "connected",
                        "description": "Included connected or disconnected",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "Number of results to return",
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/GatewayListModel"
                        }
                    }
                }
            }
        },
        "/history/v2/capabilities/{endpointId}": {
            "get": {
                "tags": [
                    "History"
                ],
                "summary": "Get the history server capabilities",
                "description": "Gets the capabilities of the connected historian server. The endpoint must be in the registry and the module client and server must trust each other.",
                "operationId": "GetHistoryServerCapabilities",
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "The identifier of the activated endpoint.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "namespaceFormat",
                        "description": "",
                        "type": "string",
                        "enum": [
                            "Uri",
                            "Index",
                            "Expanded"
                        ],
                        "x-ms-enum": {
                            "name": "NamespaceFormat",
                            "modelAsString": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/HistoryServerCapabilitiesModel"
                        }
                    }
                }
            }
        },
        "/history/v2/history/read/{endpointId}": {
            "post": {
                "tags": [
                    "History"
                ],
                "summary": "Read history using json details",
                "description": "Read node history if available using historic access. The endpoint must be in the registry and the module client and server must trust each other.",
                "operationId": "HistoryReadRaw",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "The identifier of the activated endpoint.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The history read request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VariantValueHistoryReadRequestModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/VariantValueHistoryReadResponseModel"
                        }
                    }
                }
            }
        },
        "/history/v2/history/read/{endpointId}/next": {
            "post": {
                "tags": [
                    "History"
                ],
                "summary": "Read next batch of history as json",
                "description": "Read next batch of node history values using historic access. The endpoint must be in the registry and the module client and server must trust each other.",
                "operationId": "HistoryReadRawNext",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "The identifier of the activated endpoint.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The history read next request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/HistoryReadNextRequestModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/VariantValueHistoryReadNextResponseModel"
                        }
                    }
                }
            }
        },
        "/history/v2/history/update/{endpointId}": {
            "post": {
                "tags": [
                    "History"
                ],
                "summary": "Update node history using raw json",
                "description": "Update node history using historic access. The endpoint must be in the registry and the module client and server must trust each other.",
                "operationId": "HistoryUpdateRaw",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "The identifier of the activated endpoint.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The history update request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/VariantValueHistoryUpdateRequestModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/HistoryUpdateResponseModel"
                        }
                    }
                }
            }
        },
        "/history/v2/read/{endpointId}/configuration": {
            "post": {
                "tags": [
                    "History"
                ],
                "summary": "Get history node configuration",
                "description": "Read history node configuration if available. The endpoint must be in the registry and the module client and server must trust each other.",
                "operationId": "HistoryGetConfiguration",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "The identifier of the activated endpoint.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The history configuration read request",
                        "schema": {
                            "$ref": "#/definitions/HistoryConfigurationRequestModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/HistoryConfigurationResponseModel"
                        }
                    }
                }
            }
        },
        "/history/v2/read/{endpointId}/events": {
            "post": {
                "tags": [
                    "History"
                ],
                "summary": "Read historic events",
                "description": "Read historic events of a node if available using historic access. The endpoint must be in the registry and the module client and server must trust each other.",
                "operationId": "HistoryReadEvents",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "The identifier of the activated endpoint.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The history read request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ReadEventsDetailsModelHistoryReadRequestModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/HistoricEventModelArrayHistoryReadResponseModel"
                        }
                    }
                }
            }
        },
        "/history/v2/read/{endpointId}/events/next": {
            "post": {
                "tags": [
                    "History"
                ],
                "summary": "Read next batch of historic events",
                "description": "Read next batch of historic events of a node using historic access. The endpoint must be in the registry and the module client and server must trust each other.",
                "operationId": "HistoryReadEventsNext",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "The identifier of the activated endpoint.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The history read next request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/HistoryReadNextRequestModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/HistoricEventModelArrayHistoryReadNextResponseModel"
                        }
                    }
                }
            }
        },
        "/history/v2/read/{endpointId}/values": {
            "post": {
                "tags": [
                    "History"
                ],
                "summary": "Read historic processed values at specified times",
                "description": "Read processed history values of a node if available using historic access. The endpoint must be in the registry and the module client and server must trust each other.",
                "operationId": "HistoryReadValues",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "The identifier of the activated endpoint.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The history read request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ReadValuesDetailsModelHistoryReadRequestModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/HistoricValueModelArrayHistoryReadResponseModel"
                        }
                    }
                }
            }
        },
        "/history/v2/read/{endpointId}/values/pick": {
            "post": {
                "tags": [
                    "History"
                ],
                "summary": "Read historic values at specified times",
                "description": "Read historic values of a node if available using historic access. The endpoint must be in the registry and the module client and server must trust each other.",
                "operationId": "HistoryReadValuesAtTimes",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "The identifier of the activated endpoint.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The history read request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ReadValuesAtTimesDetailsModelHistoryReadRequestModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/HistoricValueModelArrayHistoryReadResponseModel"
                        }
                    }
                }
            }
        },
        "/history/v2/read/{endpointId}/values/processed": {
            "post": {
                "tags": [
                    "History"
                ],
                "summary": "Read historic processed values at specified times",
                "description": "Read processed history values of a node if available using historic access. The endpoint must be in the registry and the module client and server must trust each other.",
                "operationId": "HistoryReadProcessedValues",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "The identifier of the activated endpoint.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The history read request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ReadProcessedValuesDetailsModelHistoryReadRequestModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/HistoricValueModelArrayHistoryReadResponseModel"
                        }
                    }
                }
            }
        },
        "/history/v2/read/{endpointId}/values/modified": {
            "post": {
                "tags": [
                    "History"
                ],
                "summary": "Read historic modified values at specified times",
                "description": "Read processed history values of a node if available using historic access. The endpoint must be in the registry and the module client and server must trust each other.",
                "operationId": "HistoryReadModifiedValues",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "The identifier of the activated endpoint.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The history read request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ReadModifiedValuesDetailsModelHistoryReadRequestModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/HistoricValueModelArrayHistoryReadResponseModel"
                        }
                    }
                }
            }
        },
        "/history/v2/read/{endpointId}/values/next": {
            "post": {
                "tags": [
                    "History"
                ],
                "summary": "Read next batch of historic values",
                "description": "Read next batch of historic values of a node using historic access. The endpoint must be in the registry and the module client and server must trust each other.",
                "operationId": "HistoryReadValueNext",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "The identifier of the activated endpoint.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The history read next request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/HistoryReadNextRequestModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/HistoricValueModelArrayHistoryReadNextResponseModel"
                        }
                    }
                }
            }
        },
        "/history/v2/replace/{endpointId}/values": {
            "post": {
                "tags": [
                    "History"
                ],
                "summary": "Replace historic values",
                "description": "Replace historic values using historic access. The endpoint must be in the registry and the server accessible.",
                "operationId": "HistoryReplaceValues",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "The identifier of the activated endpoint.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The history replace request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateValuesDetailsModelHistoryUpdateRequestModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/HistoryUpdateResponseModel"
                        }
                    }
                }
            }
        },
        "/history/v2/replace/{endpointId}/events": {
            "post": {
                "tags": [
                    "History"
                ],
                "summary": "Replace historic events",
                "description": "Replace historic events using historic access. The endpoint must be in the registry and the server accessible.",
                "operationId": "HistoryReplaceEvents",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "The identifier of the activated endpoint.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The history replace request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateEventsDetailsModelHistoryUpdateRequestModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/HistoryUpdateResponseModel"
                        }
                    }
                }
            }
        },
        "/history/v2/insert/{endpointId}/values": {
            "post": {
                "tags": [
                    "History"
                ],
                "summary": "Insert historic values",
                "description": "Insert historic values using historic access. The endpoint must be in the registry and the server accessible.",
                "operationId": "HistoryInsertValues",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "The identifier of the activated endpoint.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The history insert request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateValuesDetailsModelHistoryUpdateRequestModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/HistoryUpdateResponseModel"
                        }
                    }
                }
            }
        },
        "/history/v2/insert/{endpointId}/events": {
            "post": {
                "tags": [
                    "History"
                ],
                "summary": "Insert historic events",
                "description": "Insert historic events using historic access. The endpoint must be in the registry and the server accessible.",
                "operationId": "HistoryInsertEvents",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "The identifier of the activated endpoint.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The history insert request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateEventsDetailsModelHistoryUpdateRequestModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/HistoryUpdateResponseModel"
                        }
                    }
                }
            }
        },
        "/history/v2/upsert/{endpointId}/values": {
            "post": {
                "tags": [
                    "History"
                ],
                "summary": "Upsert historic values",
                "description": "Upsert historic values using historic access. The endpoint must be in the registry and the server accessible.",
                "operationId": "HistoryUpsertValues",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "The identifier of the activated endpoint.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The history upsert request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateValuesDetailsModelHistoryUpdateRequestModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/HistoryUpdateResponseModel"
                        }
                    }
                }
            }
        },
        "/history/v2/upsert/{endpointId}/events": {
            "post": {
                "tags": [
                    "History"
                ],
                "summary": "Upsert historic events",
                "description": "Upsert historic events using historic access. The endpoint must be in the registry and the server accessible.",
                "operationId": "HistoryUpsertEvents",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "The identifier of the activated endpoint.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The history upsert request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateEventsDetailsModelHistoryUpdateRequestModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/HistoryUpdateResponseModel"
                        }
                    }
                }
            }
        },
        "/history/v2/delete/{endpointId}/values/pick": {
            "post": {
                "tags": [
                    "History"
                ],
                "summary": "Delete value history at specified times",
                "description": "Delete value history using historic access. The endpoint must be in the registry and the server accessible.",
                "operationId": "HistoryDeleteValuesAtTimes",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "The identifier of the activated endpoint.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The history update request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DeleteValuesAtTimesDetailsModelHistoryUpdateRequestModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/HistoryUpdateResponseModel"
                        }
                    }
                }
            }
        },
        "/history/v2/delete/{endpointId}/values": {
            "post": {
                "tags": [
                    "History"
                ],
                "summary": "Delete historic values",
                "description": "Delete historic values using historic access. The endpoint must be in the registry and the server accessible.",
                "operationId": "HistoryDeleteValues",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "The identifier of the activated endpoint.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The history update request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DeleteValuesDetailsModelHistoryUpdateRequestModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/HistoryUpdateResponseModel"
                        }
                    }
                }
            }
        },
        "/history/v2/delete/{endpointId}/values/modified": {
            "post": {
                "tags": [
                    "History"
                ],
                "summary": "Delete historic values",
                "description": "Delete historic values using historic access. The endpoint must be in the registry and the server accessible.",
                "operationId": "HistoryDeleteModifiedValues",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "The identifier of the activated endpoint.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The history update request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DeleteValuesDetailsModelHistoryUpdateRequestModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/HistoryUpdateResponseModel"
                        }
                    }
                }
            }
        },
        "/history/v2/delete/{endpointId}/events": {
            "post": {
                "tags": [
                    "History"
                ],
                "summary": "Delete historic events",
                "description": "Delete historic events using historic access. The endpoint must be in the registry and the server accessible.",
                "operationId": "HistoryDeleteEvents",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "The identifier of the activated endpoint.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The history update request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DeleteEventsDetailsModelHistoryUpdateRequestModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/HistoryUpdateResponseModel"
                        }
                    }
                }
            }
        },
        "/publisher/v2/publish/{endpointId}/start": {
            "post": {
                "tags": [
                    "Publish"
                ],
                "summary": "Start publishing node values",
                "description": "Start publishing variable node values to IoT Hub. The endpoint must be in the registry and the module client and server must trust each other.",
                "operationId": "StartPublishingValues",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "The identifier of the activated endpoint.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The publish request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PublishStartRequestModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PublishStartResponseModel"
                        }
                    }
                }
            }
        },
        "/publisher/v2/publish/{endpointId}/bulk": {
            "post": {
                "tags": [
                    "Publish"
                ],
                "summary": "Bulk publish node values",
                "description": "Adds or removes in bulk values that should be published from a particular endpoint.",
                "operationId": "BulkPublishValues",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "The identifier of a registered endpoint.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The bulk publish request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PublishBulkRequestModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PublishBulkResponseModel"
                        }
                    }
                }
            }
        },
        "/publisher/v2/publish/{endpointId}/stop": {
            "post": {
                "tags": [
                    "Publish"
                ],
                "summary": "Stop publishing node values",
                "description": "Stop publishing variable node values to IoT Hub. The endpoint must be in the registry and the module client and server must trust each other.",
                "operationId": "StopPublishingValues",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "The identifier of the activated endpoint.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The unpublish request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PublishStopRequestModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PublishStopResponseModel"
                        }
                    }
                }
            }
        },
        "/publisher/v2/publish/{endpointId}": {
            "post": {
                "tags": [
                    "Publish"
                ],
                "summary": "Get currently published nodes",
                "description": "Returns currently published node ids for an endpoint. The endpoint must be in the registry and the module client and server must trust each other.",
                "operationId": "GetFirstListOfPublishedNodes",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "The identifier of the activated endpoint.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The list request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PublishedItemListRequestModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PublishedItemListResponseModel"
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Publish"
                ],
                "summary": "Get next set of published nodes",
                "description": "Returns next set of currently published node ids for an endpoint. The endpoint must be in the registry and the module client and server must trust each other.",
                "operationId": "GetNextListOfPublishedNodes",
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "The identifier of the activated endpoint.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "continuationToken",
                        "description": "The continuation token to continue with",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PublishedItemListResponseModel"
                        }
                    }
                },
                "x-ms-pageable": {
                    "nextLinkName": "continuationToken"
                }
            }
        },
        "/registry/v2/publishers/{publisherId}": {
            "get": {
                "tags": [
                    "Publishers"
                ],
                "summary": "Get publisher registration information",
                "description": "Returns a publisher's registration and connectivity information. A publisher id corresponds to the twin modules module identity.",
                "operationId": "GetPublisher",
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "publisherId",
                        "description": "Publisher identifier",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "onlyServerState",
                        "description": "Whether to include only server state, or display current client state of the endpoint if available",
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PublisherModel"
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Publishers"
                ],
                "summary": "Update publisher configuration",
                "description": "Allows a caller to configure operations on the publisher module identified by the publisher id.",
                "operationId": "UpdatePublisher",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "publisherId",
                        "description": "Publisher identifier",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Patch request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PublisherUpdateModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/registry/v2/publishers": {
            "get": {
                "tags": [
                    "Publishers"
                ],
                "summary": "Get list of publishers",
                "description": "Get all registered publishers and therefore twin modules in paged form. The returned model can contain a continuation token if more results are available. Call this operation again using the token to retrieve more results.",
                "operationId": "GetListOfPublisher",
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "onlyServerState",
                        "description": "Whether to include only server state, or display current client state of the endpoint if available",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "continuationToken",
                        "description": "Optional Continuation token",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "Optional number of results to return",
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PublisherListModel"
                        }
                    }
                },
                "x-ms-pageable": {
                    "nextLinkName": "continuationToken"
                }
            }
        },
        "/registry/v2/publishers/query": {
            "post": {
                "tags": [
                    "Publishers"
                ],
                "summary": "Query publishers",
                "description": "Get all publishers that match a specified query. The returned model can contain a continuation token if more results are available. Call the GetListOfPublisher operation using the token to retrieve more results.",
                "operationId": "QueryPublisher",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "onlyServerState",
                        "description": "Whether to include only server state, or display current client state of the endpoint if available",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "Number of results to return",
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Publisher query model",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PublisherQueryModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PublisherListModel"
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Publishers"
                ],
                "summary": "Get filtered list of publishers",
                "description": "Get a list of publishers filtered using the specified query parameters. The returned model can contain a continuation token if more results are available. Call the GetListOfPublisher operation using the token to retrieve more results.",
                "operationId": "GetFilteredListOfPublisher",
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "siteId",
                        "description": "Site for the supervisors",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "connected",
                        "description": "Included connected or disconnected",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "onlyServerState",
                        "description": "Whether to include only server state, or display current client state of the endpoint if available",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "Number of results to return",
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PublisherListModel"
                        }
                    }
                }
            }
        },
        "/registry/v2/publishers/{publisherId}/endpoints": {
            "get": {
                "tags": [
                    "Publishers"
                ],
                "summary": "Get configured endpoints",
                "description": "Get all configured endpoints on the publisher. These are the ones configured in the local storage of the publisher.",
                "operationId": "GetConfiguredEndpoints",
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "publisherId",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "IncludeNodes",
                        "description": "Include nodes that make up the configuration",
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/PublishedNodesEntryModelIAsyncEnumerable"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Publishers"
                ],
                "summary": "Set configured endpoints",
                "description": "Set all configured endpoints on the publisher. These are the ones that will be written to local storage of the publisher.",
                "operationId": "SetConfiguredEndpoints",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "publisherId",
                        "description": "",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SetConfiguredEndpointsRequestModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/registry/v2/supervisors/{supervisorId}": {
            "get": {
                "tags": [
                    "Supervisors"
                ],
                "summary": "Get supervisor registration information",
                "description": "Returns a supervisor's registration and connectivity information. A supervisor id corresponds to the twin modules module identity.",
                "operationId": "GetSupervisor",
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "supervisorId",
                        "description": "Supervisor identifier",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "onlyServerState",
                        "description": "Whether to include only server state, or display current client state of the endpoint if available",
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/SupervisorModel"
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Supervisors"
                ],
                "summary": "Update supervisor information",
                "description": "Allows a caller to configure recurring discovery runs on the twin module identified by the supervisor id or update site information.",
                "operationId": "UpdateSupervisor",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "supervisorId",
                        "description": "supervisor identifier",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Patch request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SupervisorUpdateModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/registry/v2/supervisors": {
            "get": {
                "tags": [
                    "Supervisors"
                ],
                "summary": "Get list of supervisors",
                "description": "Get all registered supervisors and therefore twin modules in paged form. The returned model can contain a continuation token if more results are available. Call this operation again using the token to retrieve more results.",
                "operationId": "GetListOfSupervisors",
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "onlyServerState",
                        "description": "Whether to include only server state, or display current client state of the endpoint if available",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "continuationToken",
                        "description": "Optional Continuation token",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "Optional number of results to return",
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/SupervisorListModel"
                        }
                    }
                },
                "x-ms-pageable": {
                    "nextLinkName": "continuationToken"
                }
            }
        },
        "/registry/v2/supervisors/query": {
            "post": {
                "tags": [
                    "Supervisors"
                ],
                "summary": "Query supervisors",
                "description": "Get all supervisors that match a specified query. The returned model can contain a continuation token if more results are available. Call the GetListOfSupervisors operation using the token to retrieve more results.",
                "operationId": "QuerySupervisors",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "onlyServerState",
                        "description": "Whether to include only server state, or display current client state of the endpoint if available",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "Number of results to return",
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Supervisors query model",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SupervisorQueryModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/SupervisorListModel"
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Supervisors"
                ],
                "summary": "Get filtered list of supervisors",
                "description": "Get a list of supervisors filtered using the specified query parameters. The returned model can contain a continuation token if more results are available. Call the GetListOfSupervisors operation using the token to retrieve more results.",
                "operationId": "GetFilteredListOfSupervisors",
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "siteId",
                        "description": "Site for the supervisors",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "endpointId",
                        "description": "Managing provided endpoint twin",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "connected",
                        "description": "Included connected or disconnected",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "onlyServerState",
                        "description": "Whether to include only server state, or display current client state of the endpoint if available",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "pageSize",
                        "description": "Number of results to return",
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/SupervisorListModel"
                        }
                    }
                }
            }
        },
        "/events/v2/telemetry/{endpointId}/samples": {
            "put": {
                "tags": [
                    "Telemetry"
                ],
                "summary": "Subscribe to receive samples",
                "description": "Register a client to receive publisher samples through SignalR.",
                "operationId": "Subscribe",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "The endpoint to subscribe to",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The connection that will receive publisher samples.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/events/v2/telemetry/{endpointId}/samples/{connectionId}": {
            "delete": {
                "tags": [
                    "Telemetry"
                ],
                "summary": "Unsubscribe from receiving samples.",
                "description": "Unregister a client and stop it from receiving samples.",
                "operationId": "Unsubscribe",
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "The endpoint to unsubscribe from",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "connectionId",
                        "description": "The connection that will not receive any more published samples",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                }
            }
        },
        "/twin/v2/capabilities/{endpointId}": {
            "get": {
                "tags": [
                    "Twin"
                ],
                "summary": "Get the server capabilities",
                "description": "Gets the capabilities of the connected server. The endpoint must be in the registry and the module client and server must trust each other.",
                "operationId": "GetServerCapabilities",
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "The identifier of the activated endpoint.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "namespaceFormat",
                        "description": "",
                        "type": "string",
                        "enum": [
                            "Uri",
                            "Index",
                            "Expanded"
                        ],
                        "x-ms-enum": {
                            "name": "NamespaceFormat",
                            "modelAsString": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ServerCapabilitiesModel"
                        }
                    }
                }
            }
        },
        "/twin/v2/browse/{endpointId}": {
            "post": {
                "tags": [
                    "Twin"
                ],
                "summary": "Browse node references",
                "description": "Browse a node on the specified endpoint. The endpoint must be in the registry and the server accessible.",
                "operationId": "Browse",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "The identifier of the activated endpoint.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The browse request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BrowseFirstRequestModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/BrowseFirstResponseModel"
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Twin"
                ],
                "summary": "Browse set of unique target nodes",
                "description": "Browse the set of unique hierarchically referenced target nodes on the endpoint. The endpoint must be in the registry and the server accessible. The root node id to browse from can be provided as part of the query parameters. If it is not provided, the RootFolder node is browsed. Note that this is the same as the POST method with the model containing the node id and the targetNodesOnly flag set to true.",
                "operationId": "GetSetOfUniqueNodes",
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "The identifier of the activated endpoint.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "nodeId",
                        "description": "The node to browse or omit to browse the root node (i=84)",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/BrowseFirstResponseModel"
                        }
                    }
                }
            }
        },
        "/twin/v2/browse/{endpointId}/next": {
            "post": {
                "tags": [
                    "Twin"
                ],
                "summary": "Browse next set of references",
                "description": "Browse next set of references on the endpoint. The endpoint must be in the registry and the server accessible.",
                "operationId": "BrowseNext",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "The identifier of the activated endpoint.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The request body with continuation token.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BrowseNextRequestModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/BrowseNextResponseModel"
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Twin"
                ],
                "summary": "Browse next set of unique target nodes",
                "description": "Browse the next set of unique hierarchically referenced target nodes on the endpoint. The endpoint must be in the registry and the server accessible. Note that this is the same as the POST method with the model containing the continuation token and the targetNodesOnly flag set to true.",
                "operationId": "GetNextSetOfUniqueNodes",
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "The identifier of the activated endpoint.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "continuationToken",
                        "description": "Continuation token from GetSetOfUniqueNodes operation",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/BrowseNextResponseModel"
                        }
                    }
                },
                "x-ms-pageable": {
                    "nextLinkName": "continuationToken"
                }
            }
        },
        "/twin/v2/browse/{endpointId}/path": {
            "post": {
                "tags": [
                    "Twin"
                ],
                "summary": "Browse using a browse path",
                "description": "Browse using a path from the specified node id. This call uses TranslateBrowsePathsToNodeIds service under the hood. The endpoint must be in the registry and the server accessible.",
                "operationId": "BrowseUsingPath",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "The identifier of the activated endpoint.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The browse path request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BrowsePathRequestModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/BrowsePathResponseModel"
                        }
                    }
                }
            }
        },
        "/twin/v2/read/{endpointId}": {
            "post": {
                "tags": [
                    "Twin"
                ],
                "summary": "Read variable value",
                "description": "Read a variable node's value. The endpoint must be in the registry and the server accessible.",
                "operationId": "ReadValue",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "The identifier of the activated endpoint.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The read value request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ValueReadRequestModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ValueReadResponseModel"
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Twin"
                ],
                "summary": "Get variable value",
                "description": "Get a variable node's value using its node id. The endpoint must be in the registry and the server accessible.",
                "operationId": "GetValue",
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "The identifier of the activated endpoint.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "nodeId",
                        "description": "The node to read",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ValueReadResponseModel"
                        }
                    }
                }
            }
        },
        "/twin/v2/read/{endpointId}/attributes": {
            "post": {
                "tags": [
                    "Twin"
                ],
                "summary": "Read node attributes",
                "description": "Read attributes of a node. The endpoint must be in the registry and the server accessible.",
                "operationId": "ReadAttributes",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "The identifier of the activated endpoint.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The read request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ReadRequestModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ReadResponseModel"
                        }
                    }
                }
            }
        },
        "/twin/v2/write/{endpointId}": {
            "post": {
                "tags": [
                    "Twin"
                ],
                "summary": "Write variable value",
                "description": "Write variable node's value. The endpoint must be in the registry and the server accessible.",
                "operationId": "WriteValue",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "The identifier of the activated endpoint.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The write value request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ValueWriteRequestModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/ValueWriteResponseModel"
                        }
                    }
                }
            }
        },
        "/twin/v2/write/{endpointId}/attributes": {
            "post": {
                "tags": [
                    "Twin"
                ],
                "summary": "Write node attributes",
                "description": "Write any attribute of a node. The endpoint must be in the registry and the server accessible.",
                "operationId": "WriteAttributes",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "The identifier of the activated endpoint.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The batch write request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/WriteRequestModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/WriteResponseModel"
                        }
                    }
                }
            }
        },
        "/twin/v2/metadata/{endpointId}/node": {
            "post": {
                "tags": [
                    "Twin"
                ],
                "summary": "Get metadata of a node",
                "description": "Get the node metadata which includes the fields and meta data of the type and can be used when constructing event filters or calling methods to pass the correct arguments. The endpoint must be in the registry and the server accessible.",
                "operationId": "GetMetadata",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "The identifier of the activated endpoint.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The metadata request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/NodeMetadataRequestModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/NodeMetadataResponseModel"
                        }
                    }
                }
            }
        },
        "/twin/v2/call/{endpointId}/metadata": {
            "post": {
                "tags": [
                    "Twin"
                ],
                "summary": "Get method meta data",
                "description": "(Obsolete - use GetMetadata API) Return method meta data to support a user interface displaying forms to input and output arguments. The endpoint must be in the registry and the server accessible.",
                "operationId": "GetCallMetadata",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "The identifier of the activated endpoint.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The method metadata request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/MethodMetadataRequestModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/MethodMetadataResponseModel"
                        }
                    }
                }
            }
        },
        "/twin/v2/call/{endpointId}": {
            "post": {
                "tags": [
                    "Twin"
                ],
                "summary": "Call a method",
                "description": "Invoke method node with specified input arguments. The endpoint must be in the registry and the server accessible.",
                "operationId": "CallMethod",
                "consumes": [
                    "application/json-patch+json",
                    "application/json",
                    "text/json",
                    "application/*+json",
                    "application/x-msgpack"
                ],
                "produces": [
                    "text/plain",
                    "application/json",
                    "text/json",
                    "application/x-msgpack"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "endpointId",
                        "description": "The identifier of the activated endpoint.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "The method call request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/MethodCallRequestModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/MethodCallResponseModel"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "AdditionalData": {
            "description": "Flags that are set by the historian when\r\nreturning archived values.",
            "enum": [
                "None",
                "Partial",
                "ExtraData",
                "MultipleValues"
            ],
            "type": "string",
            "x-ms-enum": {
                "name": "AdditionalData",
                "modelAsString": false
            }
        },
        "AggregateConfigurationModel": {
            "description": "Aggregate configuration",
            "type": "object",
            "properties": {
                "treatUncertainAsBad": {
                    "description": "Whether to treat uncertain as bad",
                    "type": "boolean"
                },
                "percentDataBad": {
                    "format": "int32",
                    "description": "Percent of data that is bad",
                    "type": "integer"
                },
                "percentDataGood": {
                    "format": "int32",
                    "description": "Percent of data that is good",
                    "type": "integer"
                },
                "useSlopedExtrapolation": {
                    "description": "Whether to use sloped extrapolation.",
                    "type": "boolean"
                }
            }
        },
        "ApplicationInfoListModel": {
            "description": "List of registered applications",
            "type": "object",
            "properties": {
                "items": {
                    "description": "Application infos",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ApplicationInfoModel"
                    }
                },
                "continuationToken": {
                    "description": "Continuation or null if final",
                    "type": "string"
                }
            }
        },
        "ApplicationInfoModel": {
            "description": "Application info model",
            "type": "object",
            "properties": {
                "applicationId": {
                    "description": "Unique application id",
                    "type": "string"
                },
                "applicationType": {
                    "$ref": "#/definitions/ApplicationType"
                },
                "applicationUri": {
                    "description": "Unique application uri",
                    "type": "string"
                },
                "productUri": {
                    "description": "Product uri",
                    "type": "string"
                },
                "applicationName": {
                    "description": "Default name of application",
                    "type": "string"
                },
                "locale": {
                    "description": "Locale of default name - defaults to \"en\"",
                    "type": "string"
                },
                "localizedNames": {
                    "description": "Localized Names of application keyed on locale",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "capabilities": {
                    "description": "The capabilities advertised by the server.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "discoveryUrls": {
                    "description": "Discovery urls of the server",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "discoveryProfileUri": {
                    "description": "Discovery profile uri",
                    "type": "string"
                },
                "gatewayServerUri": {
                    "description": "Gateway server uri",
                    "type": "string"
                },
                "hostAddresses": {
                    "description": "Host addresses of server application or null",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "siteId": {
                    "description": "Site of the application",
                    "type": "string",
                    "example": "productionlineA"
                },
                "discovererId": {
                    "description": "Discoverer that registered the application",
                    "type": "string"
                },
                "notSeenSince": {
                    "format": "date-time",
                    "description": "Last time application was seen if not visible",
                    "type": "string"
                },
                "created": {
                    "$ref": "#/definitions/OperationContextModel"
                },
                "updated": {
                    "$ref": "#/definitions/OperationContextModel"
                }
            }
        },
        "ApplicationRegistrationModel": {
            "description": "Application with optional list of endpoints",
            "required": [
                "application"
            ],
            "type": "object",
            "properties": {
                "application": {
                    "$ref": "#/definitions/ApplicationInfoModel"
                },
                "endpoints": {
                    "description": "List of endpoints for it",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EndpointRegistrationModel"
                    }
                }
            }
        },
        "ApplicationRegistrationQueryModel": {
            "description": "Application information",
            "type": "object",
            "properties": {
                "applicationType": {
                    "$ref": "#/definitions/ApplicationType"
                },
                "applicationUri": {
                    "description": "Application uri",
                    "type": "string"
                },
                "productUri": {
                    "description": "Product uri",
                    "type": "string"
                },
                "applicationName": {
                    "description": "Name of application",
                    "type": "string"
                },
                "locale": {
                    "description": "Locale of application name - default is \"en\"",
                    "type": "string"
                },
                "capability": {
                    "description": "Application capability to query with",
                    "type": "string"
                },
                "discoveryProfileUri": {
                    "description": "Discovery profile uri",
                    "type": "string"
                },
                "gatewayServerUri": {
                    "description": "Gateway server uri",
                    "type": "string"
                },
                "siteOrGatewayId": {
                    "description": "Supervisor or site the application belongs to.",
                    "type": "string"
                },
                "includeNotSeenSince": {
                    "description": "Whether to include apps that were soft deleted",
                    "type": "boolean"
                },
                "discovererId": {
                    "description": "Discoverer id to filter with",
                    "type": "string"
                }
            }
        },
        "ApplicationRegistrationRequestModel": {
            "description": "Application information",
            "required": [
                "applicationUri"
            ],
            "type": "object",
            "properties": {
                "applicationUri": {
                    "description": "Unique application uri",
                    "minLength": 1,
                    "type": "string"
                },
                "applicationType": {
                    "$ref": "#/definitions/ApplicationType"
                },
                "productUri": {
                    "description": "Product uri of the application.",
                    "type": "string",
                    "example": "http://contoso.com/fridge/1.0"
                },
                "applicationName": {
                    "description": "Default name of the server or client.",
                    "type": "string"
                },
                "locale": {
                    "description": "Locale of default name",
                    "type": "string"
                },
                "siteId": {
                    "description": "Site of the application",
                    "type": "string"
                },
                "localizedNames": {
                    "description": "Localized names key off locale id.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "capabilities": {
                    "description": "The OPC UA defined capabilities of the server.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "discoveryUrls": {
                    "description": "Discovery urls of the server.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "discoveryProfileUri": {
                    "description": "The discovery profile uri of the server.",
                    "type": "string"
                },
                "gatewayServerUri": {
                    "description": "Gateway server uri",
                    "type": "string"
                },
                "context": {
                    "$ref": "#/definitions/OperationContextModel"
                }
            }
        },
        "ApplicationRegistrationResponseModel": {
            "description": "Result of an application registration",
            "type": "object",
            "properties": {
                "id": {
                    "description": "New id application was registered under",
                    "type": "string"
                }
            }
        },
        "ApplicationRegistrationUpdateModel": {
            "description": "Application registration update request",
            "type": "object",
            "properties": {
                "productUri": {
                    "description": "Product uri",
                    "type": "string"
                },
                "applicationName": {
                    "description": "Default name of the server or client.",
                    "type": "string"
                },
                "locale": {
                    "description": "Locale of default name - defaults to \"en\"",
                    "type": "string"
                },
                "localizedNames": {
                    "description": "Localized names keyed off locale id.\r\nTo remove entry, set value for locale id to null.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "capabilities": {
                    "description": "Capabilities of the application",
                    "uniqueItems": true,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "discoveryUrls": {
                    "description": "Discovery urls of the application",
                    "uniqueItems": true,
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "discoveryProfileUri": {
                    "description": "Discovery profile uri",
                    "type": "string"
                },
                "gatewayServerUri": {
                    "description": "Gateway server uri",
                    "type": "string"
                },
                "context": {
                    "$ref": "#/definitions/OperationContextModel"
                }
            }
        },
        "ApplicationSiteListModel": {
            "description": "List of application sites",
            "type": "object",
            "properties": {
                "sites": {
                    "description": "Sites",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "continuationToken": {
                    "description": "Continuation or null if final",
                    "type": "string"
                }
            }
        },
        "ApplicationType": {
            "description": "Application type",
            "enum": [
                "Server",
                "Client",
                "ClientAndServer",
                "DiscoveryServer"
            ],
            "type": "string",
            "x-ms-enum": {
                "name": "ApplicationType",
                "modelAsString": false
            }
        },
        "AttributeReadRequestModel": {
            "description": "Attribute to read",
            "required": [
                "attribute",
                "nodeId"
            ],
            "type": "object",
            "properties": {
                "nodeId": {
                    "description": "Node to read from or write to (mandatory)",
                    "minLength": 1,
                    "type": "string"
                },
                "attribute": {
                    "$ref": "#/definitions/NodeAttribute"
                }
            }
        },
        "AttributeReadResponseModel": {
            "description": "Attribute value read",
            "type": "object",
            "properties": {
                "value": {
                    "description": "Attribute value"
                },
                "errorInfo": {
                    "$ref": "#/definitions/ServiceResultModel"
                }
            }
        },
        "AttributeWriteRequestModel": {
            "description": "Attribute and value to write to it",
            "required": [
                "attribute",
                "nodeId",
                "value"
            ],
            "type": "object",
            "properties": {
                "nodeId": {
                    "description": "Node to write to (mandatory)",
                    "minLength": 1,
                    "type": "string"
                },
                "attribute": {
                    "$ref": "#/definitions/NodeAttribute"
                },
                "value": {
                    "description": "Value to write (mandatory)"
                }
            }
        },
        "AttributeWriteResponseModel": {
            "description": "Attribute write result",
            "type": "object",
            "properties": {
                "errorInfo": {
                    "$ref": "#/definitions/ServiceResultModel"
                }
            }
        },
        "AuthenticationMethodModel": {
            "description": "Authentication Method model",
            "required": [
                "id"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "description": "Method id",
                    "minLength": 1,
                    "type": "string"
                },
                "credentialType": {
                    "$ref": "#/definitions/CredentialType"
                },
                "securityPolicy": {
                    "description": "Security policy to use when passing credential.",
                    "type": "string"
                },
                "configuration": {
                    "description": "Method specific configuration"
                }
            }
        },
        "BrowseDirection": {
            "description": "Direction to browse",
            "enum": [
                "Forward",
                "Backward",
                "Both"
            ],
            "type": "string",
            "x-ms-enum": {
                "name": "BrowseDirection",
                "modelAsString": false
            }
        },
        "BrowseFirstRequestModel": {
            "description": "Browse request model",
            "type": "object",
            "properties": {
                "nodeId": {
                    "description": "Node to browse.\r\n(defaults to root folder).",
                    "type": "string"
                },
                "direction": {
                    "$ref": "#/definitions/BrowseDirection"
                },
                "view": {
                    "$ref": "#/definitions/BrowseViewModel"
                },
                "referenceTypeId": {
                    "description": "Reference types to browse.\r\n(default: hierarchical).",
                    "type": "string"
                },
                "noSubtypes": {
                    "description": "Whether to include subtypes of the reference type.\r\n(default is false)",
                    "type": "boolean"
                },
                "maxReferencesToReturn": {
                    "format": "int64",
                    "description": "Max number of references to return. There might\r\nbe less returned as this is up to the client\r\nrestrictions.  Set to 0 to return no references\r\nor target nodes.\r\n(default is decided by client e.g. 60)",
                    "type": "integer"
                },
                "targetNodesOnly": {
                    "description": "Whether to collapse all references into a set of\r\nunique target nodes and not show reference\r\ninformation.\r\n(default is false)",
                    "type": "boolean"
                },
                "readVariableValues": {
                    "description": "Whether to read variable values on target nodes.\r\n(default is false)",
                    "type": "boolean"
                },
                "nodeClassFilter": {
                    "description": "Filter returned target nodes by only returning\r\nnodes that have classes defined in this array.\r\n(default: null - all targets are returned)",
                    "enum": [
                        "Object",
                        "Variable",
                        "Method",
                        "ObjectType",
                        "VariableType",
                        "ReferenceType",
                        "DataType",
                        "View"
                    ],
                    "type": "string",
                    "items": {
                        "$ref": "#/definitions/NodeClass"
                    },
                    "x-ms-enum": {
                        "name": "NodeClass",
                        "modelAsString": false
                    }
                },
                "header": {
                    "$ref": "#/definitions/RequestHeaderModel"
                },
                "nodeIdsOnly": {
                    "description": "Whether to only return the raw node id\r\ninformation and not read the target node.\r\n(default is false)",
                    "type": "boolean"
                }
            }
        },
        "BrowseFirstResponseModel": {
            "description": "Browse response model",
            "type": "object",
            "properties": {
                "node": {
                    "$ref": "#/definitions/NodeModel"
                },
                "references": {
                    "description": "References, if included, otherwise null.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NodeReferenceModel"
                    }
                },
                "continuationToken": {
                    "description": "Continuation token if more results pending.",
                    "type": "string"
                },
                "errorInfo": {
                    "$ref": "#/definitions/ServiceResultModel"
                }
            }
        },
        "BrowseNextRequestModel": {
            "description": "Request node browsing continuation",
            "required": [
                "continuationToken"
            ],
            "type": "object",
            "properties": {
                "continuationToken": {
                    "description": "Continuation token from previews browse request.\r\n(mandatory)",
                    "minLength": 1,
                    "type": "string"
                },
                "abort": {
                    "description": "Whether to abort browse and release.\r\n(default: false)",
                    "type": "boolean"
                },
                "targetNodesOnly": {
                    "description": "Whether to collapse all references into a set of\r\nunique target nodes and not show reference\r\ninformation.\r\n(default is false)",
                    "type": "boolean"
                },
                "readVariableValues": {
                    "description": "Whether to read variable values on target nodes.\r\n(default is false)",
                    "type": "boolean"
                },
                "header": {
                    "$ref": "#/definitions/RequestHeaderModel"
                },
                "nodeIdsOnly": {
                    "description": "Whether to only return the raw node id\r\ninformation and not read the target node.\r\n(default is false)",
                    "type": "boolean"
                }
            }
        },
        "BrowseNextResponseModel": {
            "description": "Result of node browse continuation",
            "type": "object",
            "properties": {
                "references": {
                    "description": "References, if included, otherwise null.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NodeReferenceModel"
                    }
                },
                "continuationToken": {
                    "description": "Continuation token if more results pending.",
                    "type": "string"
                },
                "errorInfo": {
                    "$ref": "#/definitions/ServiceResultModel"
                }
            }
        },
        "BrowsePathRequestModel": {
            "description": "Browse nodes by path",
            "required": [
                "browsePaths"
            ],
            "type": "object",
            "properties": {
                "nodeId": {
                    "description": "Node to browse from.\r\n(defaults to root folder).",
                    "type": "string"
                },
                "browsePaths": {
                    "description": "The paths to browse from node.\r\n(mandatory)",
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "readVariableValues": {
                    "description": "Whether to read variable values on target nodes.\r\n(default is false)",
                    "type": "boolean"
                },
                "header": {
                    "$ref": "#/definitions/RequestHeaderModel"
                },
                "nodeIdsOnly": {
                    "description": "Whether to only return the raw node id\r\ninformation and not read the target node.\r\n(default is false)",
                    "type": "boolean"
                }
            }
        },
        "BrowsePathResponseModel": {
            "description": "Result of node browse continuation",
            "type": "object",
            "properties": {
                "targets": {
                    "description": "Targets",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NodePathTargetModel"
                    }
                },
                "errorInfo": {
                    "$ref": "#/definitions/ServiceResultModel"
                }
            }
        },
        "BrowseViewModel": {
            "description": "View to browse",
            "required": [
                "viewId"
            ],
            "type": "object",
            "properties": {
                "viewId": {
                    "description": "Node of the view to browse",
                    "minLength": 1,
                    "type": "string"
                },
                "version": {
                    "format": "int64",
                    "description": "Browses specific version of the view.",
                    "type": "integer"
                },
                "timestamp": {
                    "format": "date-time",
                    "description": "Browses at or before this timestamp.",
                    "type": "string"
                }
            }
        },
        "ConditionHandlingOptionsModel": {
            "description": "Condition handling options model",
            "type": "object",
            "properties": {
                "updateInterval": {
                    "format": "int32",
                    "description": "Time interval for sending pending interval updates in seconds.",
                    "type": "integer"
                },
                "snapshotInterval": {
                    "format": "int32",
                    "description": "Time interval for sending pending interval snapshot in seconds.",
                    "type": "integer"
                }
            }
        },
        "ConnectRequestModel": {
            "description": "Connect request",
            "type": "object",
            "properties": {
                "expiresAfter": {
                    "format": "date-span",
                    "description": "Connection automatically closes after a\r\nspecified duration.",
                    "type": "string"
                },
                "header": {
                    "$ref": "#/definitions/RequestHeaderModel"
                }
            }
        },
        "ConnectResponseModel": {
            "description": "Connect response",
            "type": "object",
            "properties": {
                "connectionHandle": {
                    "description": "This handle can be used to disconnect the\r\nconnection ahead of expiration.",
                    "type": "string"
                }
            }
        },
        "ContentFilterElementModel": {
            "description": "An expression element in the filter ast",
            "type": "object",
            "properties": {
                "filterOperator": {
                    "$ref": "#/definitions/FilterOperatorType"
                },
                "filterOperands": {
                    "description": "The operands in the element for the operator",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FilterOperandModel"
                    }
                }
            }
        },
        "ContentFilterModel": {
            "description": "Content filter",
            "type": "object",
            "properties": {
                "elements": {
                    "description": "The flat list of elements in the filter AST",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ContentFilterElementModel"
                    }
                }
            }
        },
        "CredentialModel": {
            "description": "Credential model. For backwards compatibility\r\nthe actual credentials to pass to the server is set\r\nthrough the value property.",
            "type": "object",
            "properties": {
                "type": {
                    "$ref": "#/definitions/CredentialType"
                },
                "value": {
                    "$ref": "#/definitions/UserIdentityModel"
                }
            }
        },
        "CredentialType": {
            "description": "Type of credentials to use for authentication",
            "enum": [
                "None",
                "UserName",
                "X509Certificate",
                "JwtToken"
            ],
            "type": "string",
            "x-ms-enum": {
                "name": "CredentialType",
                "modelAsString": false
            }
        },
        "DataChangeTriggerType": {
            "description": "Data change trigger",
            "enum": [
                "Status",
                "StatusValue",
                "StatusValueTimestamp"
            ],
            "type": "string",
            "x-ms-enum": {
                "name": "DataChangeTriggerType",
                "modelAsString": false
            }
        },
        "DataLocation": {
            "description": "Indicate the data location",
            "enum": [
                "Raw",
                "Calculated",
                "Interpolated"
            ],
            "type": "string",
            "x-ms-enum": {
                "name": "DataLocation",
                "modelAsString": false
            }
        },
        "DataTypeMetadataModel": {
            "description": "Data type metadata model",
            "type": "object",
            "properties": {
                "dataType": {
                    "description": "The data type for the instance declaration.",
                    "type": "string"
                }
            }
        },
        "DeadbandType": {
            "description": "Deadband type",
            "enum": [
                "Absolute",
                "Percent"
            ],
            "type": "string",
            "x-ms-enum": {
                "name": "DeadbandType",
                "modelAsString": false
            }
        },
        "DeleteEventsDetailsModel": {
            "description": "The events to delete",
            "required": [
                "eventIds"
            ],
            "type": "object",
            "properties": {
                "eventIds": {
                    "description": "Events to delete",
                    "type": "array",
                    "items": {
                        "format": "byte",
                        "type": "string"
                    }
                }
            }
        },
        "DeleteEventsDetailsModelHistoryUpdateRequestModel": {
            "description": "Request node history update",
            "required": [
                "details",
                "nodeId"
            ],
            "type": "object",
            "properties": {
                "nodeId": {
                    "description": "Node to update",
                    "minLength": 1,
                    "type": "string"
                },
                "browsePath": {
                    "description": "An optional path from NodeId instance to\r\nthe actual node.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "details": {
                    "$ref": "#/definitions/DeleteEventsDetailsModel"
                },
                "header": {
                    "$ref": "#/definitions/RequestHeaderModel"
                }
            }
        },
        "DeleteValuesAtTimesDetailsModel": {
            "description": "Deletes data at times",
            "required": [
                "reqTimes"
            ],
            "type": "object",
            "properties": {
                "reqTimes": {
                    "description": "The timestamps to delete",
                    "type": "array",
                    "items": {
                        "format": "date-time",
                        "type": "string"
                    }
                }
            }
        },
        "DeleteValuesAtTimesDetailsModelHistoryUpdateRequestModel": {
            "description": "Request node history update",
            "required": [
                "details",
                "nodeId"
            ],
            "type": "object",
            "properties": {
                "nodeId": {
                    "description": "Node to update",
                    "minLength": 1,
                    "type": "string"
                },
                "browsePath": {
                    "description": "An optional path from NodeId instance to\r\nthe actual node.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "details": {
                    "$ref": "#/definitions/DeleteValuesAtTimesDetailsModel"
                },
                "header": {
                    "$ref": "#/definitions/RequestHeaderModel"
                }
            }
        },
        "DeleteValuesDetailsModel": {
            "description": "Delete values",
            "type": "object",
            "properties": {
                "startTime": {
                    "format": "date-time",
                    "description": "Start time",
                    "type": "string"
                },
                "endTime": {
                    "format": "date-time",
                    "description": "End time to delete until",
                    "type": "string"
                }
            }
        },
        "DeleteValuesDetailsModelHistoryUpdateRequestModel": {
            "description": "Request node history update",
            "required": [
                "details",
                "nodeId"
            ],
            "type": "object",
            "properties": {
                "nodeId": {
                    "description": "Node to update",
                    "minLength": 1,
                    "type": "string"
                },
                "browsePath": {
                    "description": "An optional path from NodeId instance to\r\nthe actual node.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "details": {
                    "$ref": "#/definitions/DeleteValuesDetailsModel"
                },
                "header": {
                    "$ref": "#/definitions/RequestHeaderModel"
                }
            }
        },
        "DiagnosticsLevel": {
            "description": "Level of diagnostics requested in responses",
            "enum": [
                "None",
                "Status",
                "Information",
                "Debug",
                "Verbose"
            ],
            "type": "string",
            "x-ms-enum": {
                "name": "DiagnosticsLevel",
                "modelAsString": false
            }
        },
        "DiagnosticsModel": {
            "description": "Diagnostics configuration",
            "type": "object",
            "properties": {
                "level": {
                    "$ref": "#/definitions/DiagnosticsLevel"
                },
                "auditId": {
                    "description": "Client audit log entry.\r\n(default: client generated)",
                    "type": "string"
                },
                "timeStamp": {
                    "format": "date-time",
                    "description": "Timestamp of request.\r\n(default: client generated)",
                    "type": "string"
                }
            }
        },
        "DisconnectRequestModel": {
            "description": "Disconnect request",
            "required": [
                "connectionHandle"
            ],
            "type": "object",
            "properties": {
                "connectionHandle": {
                    "description": "This handle can be used to disconnect the\r\nconnection ahead of expiration.",
                    "minLength": 1,
                    "type": "string"
                },
                "header": {
                    "$ref": "#/definitions/RequestHeaderModel"
                }
            }
        },
        "DiscovererListModel": {
            "description": "Discoverer registration list",
            "type": "object",
            "properties": {
                "items": {
                    "description": "Registrations",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DiscovererModel"
                    }
                },
                "continuationToken": {
                    "description": "Continuation or null if final",
                    "type": "string"
                }
            }
        },
        "DiscovererModel": {
            "description": "Discoverer registration",
            "required": [
                "id"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "description": "Discoverer id",
                    "minLength": 1,
                    "type": "string"
                },
                "siteId": {
                    "description": "Site of the discoverer",
                    "type": "string"
                },
                "discovery": {
                    "$ref": "#/definitions/DiscoveryMode"
                },
                "discoveryConfig": {
                    "$ref": "#/definitions/DiscoveryConfigModel"
                },
                "requestedMode": {
                    "$ref": "#/definitions/DiscoveryMode"
                },
                "requestedConfig": {
                    "$ref": "#/definitions/DiscoveryConfigModel"
                },
                "outOfSync": {
                    "description": "Whether the registration is out of sync between\r\nclient (module) and server (service) (default: false).",
                    "type": "boolean"
                },
                "connected": {
                    "description": "Whether discoverer is connected on this registration",
                    "type": "boolean"
                },
                "version": {
                    "description": "The reported version of the discovery module",
                    "type": "string"
                },
                "apiKey": {
                    "description": "Current api key",
                    "type": "string"
                }
            }
        },
        "DiscovererQueryModel": {
            "description": "Discoverer registration query",
            "type": "object",
            "properties": {
                "siteId": {
                    "description": "Site of the discoverer",
                    "type": "string"
                },
                "discovery": {
                    "$ref": "#/definitions/DiscoveryMode"
                },
                "connected": {
                    "description": "Included connected or disconnected",
                    "type": "boolean"
                }
            }
        },
        "DiscovererUpdateModel": {
            "description": "Discoverer update request",
            "type": "object",
            "properties": {
                "siteId": {
                    "description": "Site the discoverer is part of",
                    "type": "string"
                },
                "discovery": {
                    "$ref": "#/definitions/DiscoveryMode"
                },
                "discoveryConfig": {
                    "$ref": "#/definitions/DiscoveryConfigModel"
                }
            }
        },
        "DiscoveryConfigModel": {
            "description": "Discovery configuration api model",
            "type": "object",
            "properties": {
                "addressRangesToScan": {
                    "description": "Address ranges to scan (null == all wired nics)",
                    "type": "string"
                },
                "networkProbeTimeout": {
                    "format": "date-span",
                    "description": "Network probe timeout",
                    "type": "string"
                },
                "maxNetworkProbes": {
                    "format": "int32",
                    "description": "Max network probes that should ever run.",
                    "type": "integer"
                },
                "portRangesToScan": {
                    "description": "Port ranges to scan (null == all unassigned)",
                    "type": "string"
                },
                "portProbeTimeout": {
                    "format": "date-span",
                    "description": "Port probe timeout",
                    "type": "string"
                },
                "maxPortProbes": {
                    "format": "int32",
                    "description": "Max port probes that should ever run.",
                    "type": "integer"
                },
                "minPortProbesPercent": {
                    "format": "int32",
                    "description": "Probes that must always be there as percent of max.",
                    "type": "integer"
                },
                "idleTimeBetweenScans": {
                    "format": "date-span",
                    "description": "Delay time between discovery sweeps",
                    "type": "string"
                },
                "discoveryUrls": {
                    "description": "List of preset discovery urls to use",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "locales": {
                    "description": "List of locales to filter with during discovery",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "DiscoveryMode": {
            "description": "Discovery mode to use",
            "enum": [
                "Off",
                "Local",
                "Network",
                "Fast",
                "Scan"
            ],
            "type": "string",
            "x-ms-enum": {
                "name": "DiscoveryMode",
                "modelAsString": false
            }
        },
        "DiscoveryRequestModel": {
            "description": "Discovery request",
            "type": "object",
            "properties": {
                "id": {
                    "description": "Id of discovery request",
                    "type": "string"
                },
                "discovery": {
                    "$ref": "#/definitions/DiscoveryMode"
                },
                "configuration": {
                    "$ref": "#/definitions/DiscoveryConfigModel"
                },
                "context": {
                    "$ref": "#/definitions/OperationContextModel"
                }
            }
        },
        "EndpointConnectivityState": {
            "description": "State of the endpoint after activation",
            "enum": [
                "Connecting",
                "NotReachable",
                "Busy",
                "NoTrust",
                "CertificateInvalid",
                "Ready",
                "Error",
                "Disconnected",
                "Unauthorized"
            ],
            "type": "string",
            "x-ms-enum": {
                "name": "EndpointConnectivityState",
                "modelAsString": false
            }
        },
        "EndpointInfoListModel": {
            "description": "Endpoint info list",
            "type": "object",
            "properties": {
                "items": {
                    "description": "Endpoint infos",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/EndpointInfoModel"
                    }
                },
                "continuationToken": {
                    "description": "Continuation or null if final",
                    "type": "string"
                }
            }
        },
        "EndpointInfoModel": {
            "description": "Endpoint info",
            "required": [
                "applicationId",
                "registration"
            ],
            "type": "object",
            "properties": {
                "registration": {
                    "$ref": "#/definitions/EndpointRegistrationModel"
                },
                "applicationId": {
                    "description": "Application id endpoint is registered under.",
                    "minLength": 1,
                    "type": "string"
                },
                "endpointState": {
                    "$ref": "#/definitions/EndpointConnectivityState"
                },
                "notSeenSince": {
                    "format": "date-time",
                    "description": "Last time endpoint was seen",
                    "type": "string"
                }
            }
        },
        "EndpointModel": {
            "description": "Endpoint model",
            "type": "object",
            "properties": {
                "url": {
                    "description": "Endpoint url to use to connect with",
                    "type": "string"
                },
                "alternativeUrls": {
                    "description": "Alternative endpoint urls that can be used for\r\naccessing and validating the server",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "securityMode": {
                    "$ref": "#/definitions/SecurityMode"
                },
                "securityPolicy": {
                    "description": "Security policy uri to use for communication.\r\ndefault to best.",
                    "type": "string"
                },
                "certificate": {
                    "description": "Endpoint certificate thumbprint",
                    "type": "string"
                }
            }
        },
        "EndpointRegistrationModel": {
            "description": "Endpoint registration",
            "required": [
                "id"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "description": "Endpoint identifier which is hashed from\r\nthe supervisor, site and url.",
                    "minLength": 1,
                    "type": "string"
                },
                "endpointUrl": {
                    "description": "Original endpoint url of the endpoint",
                    "type": "string"
                },
                "siteId": {
                    "description": "Registered site of the endpoint",
                    "type": "string"
                },
                "discovererId": {
                    "description": "Entity that registered and can access the endpoint",
                    "type": "string"
                },
                "endpoint": {
                    "$ref": "#/definitions/EndpointModel"
                },
                "securityLevel": {
                    "format": "int32",
                    "description": "Security level of the endpoint",
                    "type": "integer"
                },
                "authenticationMethods": {
                    "description": "Supported authentication methods that can be selected to\r\nobtain a credential and used to interact with the endpoint.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AuthenticationMethodModel"
                    }
                }
            }
        },
        "EndpointRegistrationQueryModel": {
            "description": "Endpoint query",
            "type": "object",
            "properties": {
                "url": {
                    "description": "Endoint url for direct server access",
                    "type": "string"
                },
                "certificate": {
                    "description": "Certificate thumbprint of the endpoint",
                    "type": "string"
                },
                "securityMode": {
                    "$ref": "#/definitions/SecurityMode"
                },
                "securityPolicy": {
                    "description": "Endpoint security policy to use - null = Best.",
                    "type": "string"
                },
                "endpointState": {
                    "$ref": "#/definitions/EndpointConnectivityState"
                },
                "includeNotSeenSince": {
                    "description": "Whether to include endpoints that were soft deleted",
                    "type": "boolean"
                },
                "discovererId": {
                    "description": "Discoverer id to filter with",
                    "type": "string"
                },
                "applicationId": {
                    "description": "Application id to filter",
                    "type": "string"
                },
                "siteOrGatewayId": {
                    "description": "Site or gateway id to filter with",
                    "type": "string"
                }
            }
        },
        "EventFilterModel": {
            "description": "Event filter",
            "required": [
                "selectClauses",
                "whereClause"
            ],
            "type": "object",
            "properties": {
                "selectClauses": {
                    "description": "Select clauses",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SimpleAttributeOperandModel"
                    }
                },
                "whereClause": {
                    "$ref": "#/definitions/ContentFilterModel"
                },
                "typeDefinitionId": {
                    "description": "Simple event Type definition node id",
                    "type": "string"
                }
            }
        },
        "ExceptionDeviationType": {
            "description": "Exception deviation type",
            "enum": [
                "AbsoluteValue",
                "PercentOfValue",
                "PercentOfRange",
                "PercentOfEURange"
            ],
            "type": "string",
            "x-ms-enum": {
                "name": "ExceptionDeviationType",
                "modelAsString": false
            }
        },
        "FilterOperandModel": {
            "description": "Filter operand",
            "type": "object",
            "properties": {
                "index": {
                    "format": "int64",
                    "description": "Element reference in the outer list if\r\noperand is an element operand",
                    "type": "integer"
                },
                "value": {
                    "description": "Variant value if operand is a literal"
                },
                "nodeId": {
                    "description": "Type definition node id if operand is\r\nsimple or full attribute operand.",
                    "type": "string"
                },
                "browsePath": {
                    "description": "Browse path of attribute operand",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "attributeId": {
                    "$ref": "#/definitions/NodeAttribute"
                },
                "indexRange": {
                    "description": "Index range of attribute operand",
                    "type": "string"
                },
                "alias": {
                    "description": "Optional alias to refer to it makeing it a\r\nfull blown attribute operand",
                    "type": "string"
                },
                "dataType": {
                    "description": "Data type if operand is a literal",
                    "type": "string"
                }
            }
        },
        "FilterOperatorType": {
            "description": "Filter operator type",
            "enum": [
                "Equals",
                "IsNull",
                "GreaterThan",
                "LessThan",
                "GreaterThanOrEqual",
                "LessThanOrEqual",
                "Like",
                "Not",
                "Between",
                "InList",
                "And",
                "Or",
                "Cast",
                "InView",
                "OfType",
                "RelatedTo",
                "BitwiseAnd",
                "BitwiseOr"
            ],
            "type": "string",
            "x-ms-enum": {
                "name": "FilterOperatorType",
                "modelAsString": false
            }
        },
        "GatewayInfoModel": {
            "description": "Gateway info model",
            "required": [
                "gateway"
            ],
            "type": "object",
            "properties": {
                "gateway": {
                    "$ref": "#/definitions/GatewayModel"
                },
                "modules": {
                    "$ref": "#/definitions/GatewayModulesModel"
                }
            }
        },
        "GatewayListModel": {
            "description": "Gateway registration list",
            "type": "object",
            "properties": {
                "items": {
                    "description": "Registrations",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GatewayModel"
                    }
                },
                "continuationToken": {
                    "description": "Continuation or null if final",
                    "type": "string"
                }
            }
        },
        "GatewayModel": {
            "description": "Gateway registration model",
            "required": [
                "id"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "description": "Gateway id",
                    "minLength": 1,
                    "type": "string"
                },
                "siteId": {
                    "description": "Site of the Gateway",
                    "type": "string"
                },
                "connected": {
                    "description": "Whether gateway is connected",
                    "type": "boolean"
                }
            }
        },
        "GatewayModulesModel": {
            "description": "Gateway modules",
            "type": "object",
            "properties": {
                "supervisor": {
                    "$ref": "#/definitions/SupervisorModel"
                },
                "publisher": {
                    "$ref": "#/definitions/PublisherModel"
                },
                "discoverer": {
                    "$ref": "#/definitions/DiscovererModel"
                }
            }
        },
        "GatewayQueryModel": {
            "description": "Gateway registration query",
            "type": "object",
            "properties": {
                "siteId": {
                    "description": "Site of the Gateway",
                    "type": "string"
                },
                "connected": {
                    "description": "Included connected or disconnected",
                    "type": "boolean"
                }
            }
        },
        "GatewayUpdateModel": {
            "description": "Gateway registration update request",
            "type": "object",
            "properties": {
                "siteId": {
                    "description": "Site of the Gateway",
                    "type": "string"
                }
            }
        },
        "HeartbeatBehavior": {
            "description": "Heartbeat behavior",
            "enum": [
                "WatchdogLKV",
                "WatchdogLKG",
                "PeriodicLKV",
                "PeriodicLKG",
                "WatchdogLKVWithUpdatedTimestamps",
                "WatchdogLKVDiagnosticsOnly"
            ],
            "type": "string",
            "x-ms-enum": {
                "name": "HeartbeatBehavior",
                "modelAsString": false
            }
        },
        "HistoricEventModel": {
            "description": "Historic event",
            "type": "object",
            "properties": {
                "eventFields": {
                    "description": "The selected fields of the event",
                    "items": {
                        "description": "A variant which can be represented by any value including null."
                    }
                }
            }
        },
        "HistoricEventModelArrayHistoryReadNextResponseModel": {
            "description": "History read continuation result",
            "type": "object",
            "properties": {
                "history": {
                    "description": "History as json encoded extension object",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/HistoricEventModel"
                    }
                },
                "continuationToken": {
                    "description": "Continuation token if more results pending.",
                    "type": "string"
                },
                "errorInfo": {
                    "$ref": "#/definitions/ServiceResultModel"
                }
            }
        },
        "HistoricEventModelArrayHistoryReadResponseModel": {
            "description": "History read results",
            "type": "object",
            "properties": {
                "history": {
                    "description": "History as json encoded extension object",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/HistoricEventModel"
                    }
                },
                "continuationToken": {
                    "description": "Continuation token if more results pending.",
                    "type": "string"
                },
                "errorInfo": {
                    "$ref": "#/definitions/ServiceResultModel"
                }
            }
        },
        "HistoricValueModel": {
            "description": "Historic data",
            "type": "object",
            "properties": {
                "value": {
                    "description": ",\r\n            The value of data value."
                },
                "dataType": {
                    "description": "Built in data type of the updated values",
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/ServiceResultModel"
                },
                "sourceTimestamp": {
                    "format": "date-time",
                    "description": "The source timestamp associated with the value.",
                    "type": "string"
                },
                "sourcePicoseconds": {
                    "format": "int32",
                    "description": "Additional resolution for the source timestamp.",
                    "type": "integer"
                },
                "serverTimestamp": {
                    "format": "date-time",
                    "description": "The server timestamp associated with the value.",
                    "type": "string"
                },
                "serverPicoseconds": {
                    "format": "int32",
                    "description": "Additional resolution for the server timestamp.",
                    "type": "integer"
                },
                "dataLocation": {
                    "$ref": "#/definitions/DataLocation"
                },
                "modificationInfo": {
                    "$ref": "#/definitions/ModificationInfoModel"
                },
                "additionalData": {
                    "$ref": "#/definitions/AdditionalData"
                }
            }
        },
        "HistoricValueModelArrayHistoryReadNextResponseModel": {
            "description": "History read continuation result",
            "type": "object",
            "properties": {
                "history": {
                    "description": "History as json encoded extension object",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/HistoricValueModel"
                    }
                },
                "continuationToken": {
                    "description": "Continuation token if more results pending.",
                    "type": "string"
                },
                "errorInfo": {
                    "$ref": "#/definitions/ServiceResultModel"
                }
            }
        },
        "HistoricValueModelArrayHistoryReadResponseModel": {
            "description": "History read results",
            "type": "object",
            "properties": {
                "history": {
                    "description": "History as json encoded extension object",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/HistoricValueModel"
                    }
                },
                "continuationToken": {
                    "description": "Continuation token if more results pending.",
                    "type": "string"
                },
                "errorInfo": {
                    "$ref": "#/definitions/ServiceResultModel"
                }
            }
        },
        "HistoryConfigurationModel": {
            "description": "History configuration",
            "type": "object",
            "properties": {
                "stepped": {
                    "description": "specifies whether the historical data was\r\ncollected in such a manner that it should\r\nbe displayed as SlopedInterpolation (sloped\r\nline between points) or as SteppedInterpolation\r\n(vertically-connected horizontal lines\r\nbetween points) when raw data is examined.\r\nThis Property also effects how some\r\nAggregates are calculated",
                    "type": "boolean"
                },
                "definition": {
                    "description": "Human readable string that specifies how\r\nthe value of this HistoricalDataNode is\r\ncalculated",
                    "type": "string"
                },
                "maxTimeInterval": {
                    "format": "date-span",
                    "description": "Specifies the maximum interval between data\r\npoints in the history repository\r\nregardless of their value change",
                    "type": "string"
                },
                "minTimeInterval": {
                    "format": "date-span",
                    "description": "Specifies the minimum interval between\r\ndata points in the history repository\r\nregardless of their value change",
                    "type": "string"
                },
                "exceptionDeviation": {
                    "format": "double",
                    "description": "Minimum amount that the data for the\r\nNode shall change in order for the change\r\nto be reported to the history database",
                    "type": "number"
                },
                "exceptionDeviationType": {
                    "$ref": "#/definitions/ExceptionDeviationType"
                },
                "startOfArchive": {
                    "format": "date-time",
                    "description": "The date before which there is no data in the\r\narchive either online or offline",
                    "type": "string"
                },
                "endOfArchive": {
                    "format": "date-time",
                    "description": "The last date of the archive",
                    "type": "string"
                },
                "startOfOnlineArchive": {
                    "format": "date-time",
                    "description": "Date of the earliest data in the online archive",
                    "type": "string"
                },
                "serverTimestampSupported": {
                    "description": "Server supports ServerTimestamps in addition\r\nto SourceTimestamp",
                    "type": "boolean"
                },
                "aggregateConfiguration": {
                    "$ref": "#/definitions/AggregateConfigurationModel"
                },
                "aggregateFunctions": {
                    "description": "Allowed aggregate functions",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "HistoryConfigurationRequestModel": {
            "description": "Request history configuration",
            "required": [
                "nodeId"
            ],
            "type": "object",
            "properties": {
                "header": {
                    "$ref": "#/definitions/RequestHeaderModel"
                },
                "nodeId": {
                    "description": "Continuation token to continue reading more\r\nresults.",
                    "minLength": 1,
                    "type": "string"
                }
            }
        },
        "HistoryConfigurationResponseModel": {
            "description": "Response with history configuration",
            "type": "object",
            "properties": {
                "configuration": {
                    "$ref": "#/definitions/HistoryConfigurationModel"
                },
                "errorInfo": {
                    "$ref": "#/definitions/ServiceResultModel"
                }
            }
        },
        "HistoryReadNextRequestModel": {
            "description": "Request node history read continuation",
            "required": [
                "continuationToken"
            ],
            "type": "object",
            "properties": {
                "continuationToken": {
                    "description": "Continuation token to continue reading more\r\nresults.",
                    "minLength": 1,
                    "type": "string"
                },
                "abort": {
                    "description": "Abort reading after this read",
                    "type": "boolean"
                },
                "header": {
                    "$ref": "#/definitions/RequestHeaderModel"
                }
            }
        },
        "HistoryServerCapabilitiesModel": {
            "description": "History Server capabilities",
            "type": "object",
            "properties": {
                "supportsHistoricData": {
                    "description": "Server supports historic data access",
                    "type": "boolean"
                },
                "supportsHistoricEvents": {
                    "description": "Server supports historic event access",
                    "type": "boolean"
                },
                "maxReturnDataValues": {
                    "format": "int64",
                    "description": "Maximum number of historic data values that will\r\nbe returned in a single read.",
                    "type": "integer"
                },
                "maxReturnEventValues": {
                    "format": "int64",
                    "description": "Maximum number of events that will be returned\r\nin a single read.",
                    "type": "integer"
                },
                "insertDataCapability": {
                    "description": "Server supports inserting data",
                    "type": "boolean"
                },
                "replaceDataCapability": {
                    "description": "Server supports replacing historic data",
                    "type": "boolean"
                },
                "updateDataCapability": {
                    "description": "Server supports updating historic data",
                    "type": "boolean"
                },
                "deleteRawCapability": {
                    "description": "Server supports deleting raw data",
                    "type": "boolean"
                },
                "deleteAtTimeCapability": {
                    "description": "Server support deleting data at times",
                    "type": "boolean"
                },
                "insertEventCapability": {
                    "description": "Server supports inserting events",
                    "type": "boolean"
                },
                "replaceEventCapability": {
                    "description": "Server supports replacing events",
                    "type": "boolean"
                },
                "updateEventCapability": {
                    "description": "Server supports updating events",
                    "type": "boolean"
                },
                "deleteEventCapability": {
                    "description": "Server supports deleting events",
                    "type": "boolean"
                },
                "insertAnnotationCapability": {
                    "description": "Allows inserting annotations",
                    "type": "boolean"
                },
                "serverTimestampSupported": {
                    "description": "Server supports ServerTimestamps in addition\r\nto SourceTimestamp",
                    "type": "boolean"
                },
                "aggregateFunctions": {
                    "description": "Supported aggregate functions",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "HistoryUpdateOperation": {
            "description": "History update type",
            "enum": [
                "Insert",
                "Replace",
                "Update",
                "Delete"
            ],
            "type": "string",
            "x-ms-enum": {
                "name": "HistoryUpdateOperation",
                "modelAsString": false
            }
        },
        "HistoryUpdateResponseModel": {
            "description": "History update results",
            "type": "object",
            "properties": {
                "results": {
                    "description": "List of results from the update operation",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceResultModel"
                    }
                },
                "errorInfo": {
                    "$ref": "#/definitions/ServiceResultModel"
                }
            }
        },
        "InstanceDeclarationModel": {
            "description": "Instance declaration meta data",
            "type": "object",
            "properties": {
                "rootTypeId": {
                    "description": "The type that the declaration belongs to.",
                    "type": "string"
                },
                "browsePath": {
                    "description": "The browse path",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "displayPath": {
                    "description": "A localized path to the instance declaration.",
                    "type": "string"
                },
                "modellingRule": {
                    "description": "The modelling rule for the instance\r\ndeclaration (i.e. Mandatory or Optional).",
                    "type": "string"
                },
                "nodeId": {
                    "description": "The node id for the instance.",
                    "type": "string"
                },
                "nodeClass": {
                    "$ref": "#/definitions/NodeClass"
                },
                "browseName": {
                    "description": "The browse name for the instance declaration.",
                    "type": "string"
                },
                "displayName": {
                    "description": "The display name for the instance declaration.",
                    "type": "string"
                },
                "description": {
                    "description": "The description for the instance declaration.",
                    "type": "string"
                },
                "variable": {
                    "$ref": "#/definitions/VariableMetadataModel"
                },
                "method": {
                    "$ref": "#/definitions/MethodMetadataModel"
                },
                "overriddenDeclaration": {
                    "$ref": "#/definitions/InstanceDeclarationModel"
                },
                "modellingRuleId": {
                    "description": "The modelling rule node id.",
                    "type": "string"
                }
            }
        },
        "MessageEncoding": {
            "description": "Message encoding",
            "enum": [
                "Binary",
                "Json",
                "Xml",
                "IsReversible",
                "Uadp",
                "JsonReversible",
                "IsGzipCompressed",
                "JsonGzip",
                "JsonReversibleGzip"
            ],
            "type": "string",
            "x-ms-enum": {
                "name": "MessageEncoding",
                "modelAsString": false
            }
        },
        "MessagingMode": {
            "description": "Message modes",
            "enum": [
                "PubSub",
                "Samples",
                "FullNetworkMessages",
                "FullSamples",
                "DataSetMessages",
                "RawDataSets"
            ],
            "type": "string",
            "x-ms-enum": {
                "name": "MessagingMode",
                "modelAsString": false
            }
        },
        "MethodCallArgumentModel": {
            "description": "Method argument model",
            "type": "object",
            "properties": {
                "value": {
                    "description": "Initial value or value to use"
                },
                "dataType": {
                    "description": "Data type Id of the value (from meta data)",
                    "type": "string"
                }
            }
        },
        "MethodCallRequestModel": {
            "description": "Call request model",
            "type": "object",
            "properties": {
                "methodId": {
                    "description": "Method id of method to call.",
                    "type": "string"
                },
                "objectId": {
                    "description": "Context of the method, i.e. an object or object type\r\nnode.  If null then the method is called in the context\r\nof the inverse HasComponent reference of the MethodId\r\nif it exists.",
                    "type": "string"
                },
                "arguments": {
                    "description": "Arguments for the method - null means no args",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MethodCallArgumentModel"
                    }
                },
                "methodBrowsePath": {
                    "description": "An optional component path from the node identified by\r\nMethodId or from a resolved objectId to the actual\r\nmethod node.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "objectBrowsePath": {
                    "description": "An optional component path from the node identified by\r\nObjectId to the actual object or objectType node.\r\nIf ObjectId is null, the root node (i=84) is used",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "header": {
                    "$ref": "#/definitions/RequestHeaderModel"
                }
            }
        },
        "MethodCallResponseModel": {
            "description": "Method call response model",
            "type": "object",
            "properties": {
                "results": {
                    "description": "Resulting output values of method call",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MethodCallArgumentModel"
                    }
                },
                "errorInfo": {
                    "$ref": "#/definitions/ServiceResultModel"
                }
            }
        },
        "MethodMetadataArgumentModel": {
            "description": "Method argument metadata model",
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the argument",
                    "type": "string"
                },
                "description": {
                    "description": "Optional description of argument",
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/NodeModel"
                },
                "defaultValue": {
                    "description": "Default value for the argument"
                },
                "valueRank": {
                    "$ref": "#/definitions/NodeValueRank"
                },
                "arrayDimensions": {
                    "format": "int64",
                    "description": "Optional Array dimension of argument",
                    "type": "integer",
                    "items": {
                        "format": "int64",
                        "type": "integer"
                    }
                },
                "errorInfo": {
                    "$ref": "#/definitions/ServiceResultModel"
                }
            }
        },
        "MethodMetadataModel": {
            "description": "Method metadata model",
            "type": "object",
            "properties": {
                "objectId": {
                    "description": "Id of object that the method is a component of",
                    "type": "string"
                },
                "inputArguments": {
                    "description": "Input argument meta data",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MethodMetadataArgumentModel"
                    }
                },
                "outputArguments": {
                    "description": "output argument meta data",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MethodMetadataArgumentModel"
                    }
                }
            }
        },
        "MethodMetadataRequestModel": {
            "description": "Method metadata request model",
            "type": "object",
            "properties": {
                "methodId": {
                    "description": "Method id of method to call.\r\n(Required)",
                    "type": "string"
                },
                "methodBrowsePath": {
                    "description": "An optional component path from the node identified by\r\nMethodId to the actual method node.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "header": {
                    "$ref": "#/definitions/RequestHeaderModel"
                }
            }
        },
        "MethodMetadataResponseModel": {
            "description": "Result of method metadata query",
            "type": "object",
            "properties": {
                "objectId": {
                    "description": "Id of object that the method is a component of",
                    "type": "string"
                },
                "inputArguments": {
                    "description": "Input argument meta data",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MethodMetadataArgumentModel"
                    }
                },
                "outputArguments": {
                    "description": "output argument meta data",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/MethodMetadataArgumentModel"
                    }
                },
                "errorInfo": {
                    "$ref": "#/definitions/ServiceResultModel"
                }
            }
        },
        "ModificationInfoModel": {
            "description": "Modification information",
            "type": "object",
            "properties": {
                "modificationTime": {
                    "format": "date-time",
                    "description": "Modification time",
                    "type": "string"
                },
                "updateType": {
                    "$ref": "#/definitions/HistoryUpdateOperation"
                },
                "userName": {
                    "description": "User who made the change",
                    "type": "string"
                }
            }
        },
        "NamespaceFormat": {
            "description": "Namespace serialization format for node ids\r\nand qualified names.",
            "enum": [
                "Uri",
                "Index",
                "Expanded"
            ],
            "type": "string",
            "x-ms-enum": {
                "name": "NamespaceFormat",
                "modelAsString": false
            }
        },
        "NodeAccessLevel": {
            "description": "Flags that can be set for the AccessLevel attribute.",
            "enum": [
                "None",
                "CurrentRead",
                "CurrentWrite",
                "HistoryRead",
                "HistoryWrite",
                "SemanticChange",
                "StatusWrite",
                "TimestampWrite",
                "NonatomicRead",
                "NonatomicWrite",
                "WriteFullArrayOnly"
            ],
            "type": "string",
            "x-ms-enum": {
                "name": "NodeAccessLevel",
                "modelAsString": false
            }
        },
        "NodeAccessRestrictions": {
            "description": "Flags that can be read or written in the\r\nAccessRestrictions attribute.",
            "enum": [
                "None",
                "SigningRequired",
                "EncryptionRequired",
                "SessionRequired"
            ],
            "type": "string",
            "x-ms-enum": {
                "name": "NodeAccessRestrictions",
                "modelAsString": false
            }
        },
        "NodeAttribute": {
            "description": "Node attribute identifiers",
            "enum": [
                "NodeId",
                "NodeClass",
                "BrowseName",
                "DisplayName",
                "Description",
                "WriteMask",
                "UserWriteMask",
                "IsAbstract",
                "Symmetric",
                "InverseName",
                "ContainsNoLoops",
                "EventNotifier",
                "Value",
                "DataType",
                "ValueRank",
                "ArrayDimensions",
                "AccessLevel",
                "UserAccessLevel",
                "MinimumSamplingInterval",
                "Historizing",
                "Executable",
                "UserExecutable",
                "DataTypeDefinition",
                "RolePermissions",
                "UserRolePermissions",
                "AccessRestrictions"
            ],
            "type": "string",
            "x-ms-enum": {
                "name": "NodeAttribute",
                "modelAsString": false
            }
        },
        "NodeClass": {
            "description": "Node class",
            "enum": [
                "Object",
                "Variable",
                "Method",
                "ObjectType",
                "VariableType",
                "ReferenceType",
                "DataType",
                "View"
            ],
            "type": "string",
            "x-ms-enum": {
                "name": "NodeClass",
                "modelAsString": false
            }
        },
        "NodeEventNotifier": {
            "description": "Flags that can be set for the EventNotifier attribute.",
            "enum": [
                "SubscribeToEvents",
                "HistoryRead",
                "HistoryWrite"
            ],
            "type": "string",
            "x-ms-enum": {
                "name": "NodeEventNotifier",
                "modelAsString": false
            }
        },
        "NodeIdModel": {
            "description": "Node id serialized as object",
            "type": "object",
            "properties": {
                "Identifier": {
                    "description": "Identifier",
                    "type": "string"
                }
            }
        },
        "NodeMetadataRequestModel": {
            "description": "Node metadata request model",
            "type": "object",
            "properties": {
                "header": {
                    "$ref": "#/definitions/RequestHeaderModel"
                },
                "nodeId": {
                    "description": "Node id of the type.\r\n(Required)",
                    "type": "string"
                },
                "browsePath": {
                    "description": "An optional component path from the node identified by\r\nNodeId to the actual node.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "NodeMetadataResponseModel": {
            "description": "Node metadata model",
            "type": "object",
            "properties": {
                "nodeId": {
                    "description": "The node id of the node",
                    "type": "string"
                },
                "nodeClass": {
                    "$ref": "#/definitions/NodeClass"
                },
                "displayName": {
                    "description": "The display name of the node.",
                    "type": "string"
                },
                "description": {
                    "description": "The description for the node.",
                    "type": "string"
                },
                "variableMetadata": {
                    "$ref": "#/definitions/VariableMetadataModel"
                },
                "dataTypeMetadata": {
                    "$ref": "#/definitions/DataTypeMetadataModel"
                },
                "nethodMetadata": {
                    "$ref": "#/definitions/MethodMetadataModel"
                },
                "typeDefinition": {
                    "$ref": "#/definitions/TypeDefinitionModel"
                },
                "errorInfo": {
                    "$ref": "#/definitions/ServiceResultModel"
                }
            }
        },
        "NodeModel": {
            "description": "Node model",
            "required": [
                "nodeId"
            ],
            "type": "object",
            "properties": {
                "nodeClass": {
                    "$ref": "#/definitions/NodeClass"
                },
                "displayName": {
                    "description": "Display name",
                    "type": "string"
                },
                "nodeId": {
                    "description": "Id of node.\r\n(Mandatory).",
                    "minLength": 1,
                    "type": "string"
                },
                "description": {
                    "description": "Description if any",
                    "type": "string"
                },
                "browseName": {
                    "description": "Browse name",
                    "type": "string"
                },
                "value": {
                    "description": "Value of variable or default value of the\r\nsubtyped variable in case node is a variable\r\ntype, otherwise null."
                },
                "sourcePicoseconds": {
                    "format": "int32",
                    "description": "Pico seconds part of when value was read at source.",
                    "type": "integer"
                },
                "sourceTimestamp": {
                    "format": "date-time",
                    "description": "Timestamp of when value was read at source.",
                    "type": "string"
                },
                "serverPicoseconds": {
                    "format": "int32",
                    "description": "Pico seconds part of when value was read at server.",
                    "type": "integer"
                },
                "serverTimestamp": {
                    "format": "date-time",
                    "description": "Timestamp of when value was read at server.",
                    "type": "string"
                },
                "errorInfo": {
                    "$ref": "#/definitions/ServiceResultModel"
                },
                "accessRestrictions": {
                    "$ref": "#/definitions/NodeAccessRestrictions"
                },
                "writeMask": {
                    "format": "int64",
                    "description": "Default write mask for the node\r\n(default: 0)",
                    "type": "integer"
                },
                "userWriteMask": {
                    "format": "int64",
                    "description": "User write mask for the node\r\n(default: 0)",
                    "type": "integer"
                },
                "isAbstract": {
                    "description": "Whether type is abstract, if type can\r\nbe abstract.  Null if not type node.\r\n(default: false)",
                    "type": "boolean"
                },
                "containsNoLoops": {
                    "description": "Whether a view contains loops. Null if\r\nnot a view.",
                    "type": "boolean"
                },
                "eventNotifier": {
                    "$ref": "#/definitions/NodeEventNotifier"
                },
                "executable": {
                    "description": "If method node class, whether method can\r\nbe called.",
                    "type": "boolean"
                },
                "userExecutable": {
                    "description": "If method node class, whether method can\r\nbe called by current user.\r\n(default: false if not executable)",
                    "type": "boolean"
                },
                "dataTypeDefinition": {
                    "description": "Data type definition in case node is a\r\ndata type node and definition is available,\r\notherwise null."
                },
                "accessLevel": {
                    "$ref": "#/definitions/NodeAccessLevel"
                },
                "userAccessLevel": {
                    "$ref": "#/definitions/NodeAccessLevel"
                },
                "dataType": {
                    "description": "If variable the datatype of the variable.\r\n(default: null)",
                    "type": "string"
                },
                "valueRank": {
                    "$ref": "#/definitions/NodeValueRank"
                },
                "arrayDimensions": {
                    "format": "int64",
                    "description": "Array dimensions of variable or variable type.\r\n(default: empty array)",
                    "type": "integer",
                    "items": {
                        "format": "int64",
                        "type": "integer"
                    }
                },
                "historizing": {
                    "description": "Whether the value of a variable is historizing.\r\n(default: false)",
                    "type": "boolean"
                },
                "minimumSamplingInterval": {
                    "format": "double",
                    "description": "Minimum sampling interval for the variable\r\nvalue, otherwise null if not a variable node.\r\n(default: null)",
                    "type": "number"
                },
                "inverseName": {
                    "description": "Inverse name of the reference if the node is\r\na reference type, otherwise null.",
                    "type": "string"
                },
                "symmetric": {
                    "description": "Whether the reference is symmetric in case\r\nthe node is a reference type, otherwise\r\nnull.",
                    "type": "boolean"
                },
                "rolePermissions": {
                    "description": "Role permissions",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RolePermissionModel"
                    }
                },
                "userRolePermissions": {
                    "description": "User Role permissions",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RolePermissionModel"
                    }
                },
                "typeDefinitionId": {
                    "description": "Optional type definition of the node",
                    "type": "string"
                },
                "children": {
                    "description": "Whether node has children which are defined as\r\nany forward hierarchical references.\r\n(default: unknown)",
                    "type": "boolean"
                }
            }
        },
        "NodePathTargetModel": {
            "description": "Node path target",
            "type": "object",
            "properties": {
                "browsePath": {
                    "description": "The target browse path",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "target": {
                    "$ref": "#/definitions/NodeModel"
                },
                "remainingPathIndex": {
                    "format": "int32",
                    "description": "Remaining index in path",
                    "type": "integer"
                }
            }
        },
        "NodeReferenceModel": {
            "description": "Reference model",
            "required": [
                "target"
            ],
            "type": "object",
            "properties": {
                "referenceTypeId": {
                    "description": "Reference Type id",
                    "type": "string"
                },
                "direction": {
                    "$ref": "#/definitions/BrowseDirection"
                },
                "target": {
                    "$ref": "#/definitions/NodeModel"
                },
                "errorInfo": {
                    "$ref": "#/definitions/ServiceResultModel"
                }
            }
        },
        "NodeType": {
            "description": "The node type",
            "enum": [
                "Unknown",
                "Variable",
                "DataVariable",
                "Property",
                "DataType",
                "View",
                "Object",
                "Event",
                "Interface"
            ],
            "type": "string",
            "x-ms-enum": {
                "name": "NodeType",
                "modelAsString": false
            }
        },
        "NodeValueRank": {
            "description": "Constants defined for the ValueRank attribute.",
            "enum": [
                "OneOrMoreDimensions",
                "OneDimension",
                "TwoDimensions",
                "ScalarOrOneDimension",
                "Any",
                "Scalar"
            ],
            "type": "string",
            "x-ms-enum": {
                "name": "NodeValueRank",
                "modelAsString": false
            }
        },
        "OpcAuthenticationMode": {
            "description": "Enum that defines the authentication method",
            "enum": [
                "Anonymous",
                "UsernamePassword",
                "Certificate"
            ],
            "type": "string",
            "x-ms-enum": {
                "name": "OpcAuthenticationMode",
                "modelAsString": false
            }
        },
        "OpcNodeModel": {
            "description": "Describing an entry in the node list",
            "type": "object",
            "properties": {
                "Id": {
                    "description": "Node Identifier",
                    "type": "string"
                },
                "OpcSamplingInterval": {
                    "format": "int32",
                    "description": "Sampling interval in milliseconds",
                    "type": "integer"
                },
                "OpcSamplingIntervalTimespan": {
                    "format": "date-span",
                    "description": "OpcSamplingInterval as TimeSpan.",
                    "type": "string"
                },
                "DataSetFieldId": {
                    "description": "The identifier of the field in the dataset message.\r\nIf not provided Azure.IIoT.OpcUa.Publisher.Models.OpcNodeModel.DisplayName is used.",
                    "type": "string"
                },
                "DataSetClassFieldId": {
                    "format": "uuid",
                    "description": "The identifier of the field in the dataset class.\r\nAllows correlation to the data set class.",
                    "type": "string"
                },
                "DisplayName": {
                    "description": "Display name",
                    "type": "string"
                },
                "QueueSize": {
                    "format": "int64",
                    "description": "Queue Size for the monitored item on the server.\r\nSpecifies how many values are queued on the server\r\nbefore undelivered ones are discarded.",
                    "type": "integer"
                },
                "DiscardNew": {
                    "description": "Discard new values in the server queue instead of\r\nold values when no more room in queue.",
                    "type": "boolean"
                },
                "DataChangeTrigger": {
                    "$ref": "#/definitions/DataChangeTriggerType"
                },
                "DeadbandType": {
                    "$ref": "#/definitions/DeadbandType"
                },
                "DeadbandValue": {
                    "format": "double",
                    "description": "Deadband value of the data change filter to apply.\r\nDoes not apply to events",
                    "type": "number"
                },
                "EventFilter": {
                    "$ref": "#/definitions/EventFilterModel"
                },
                "ConditionHandling": {
                    "$ref": "#/definitions/ConditionHandlingOptionsModel"
                },
                "BrowsePath": {
                    "description": "Browse path from the node to reach the actual node\r\nto monitor.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "AttributeId": {
                    "$ref": "#/definitions/NodeAttribute"
                },
                "IndexRange": {
                    "description": "Index range to read, default to null.",
                    "type": "string"
                },
                "HeartbeatBehavior": {
                    "$ref": "#/definitions/HeartbeatBehavior"
                },
                "HeartbeatInterval": {
                    "format": "int32",
                    "description": "Heartbeat interval in seconds",
                    "type": "integer"
                },
                "HeartbeatIntervalTimespan": {
                    "format": "date-span",
                    "description": "Heartbeat interval as TimeSpan.",
                    "type": "string"
                },
                "SkipFirst": {
                    "description": "Do not send the first value that is always provided\r\nby the server when the monitored item is created.",
                    "type": "boolean"
                },
                "OpcPublishingInterval": {
                    "format": "int32",
                    "description": "Publishing interval in milliseconds",
                    "type": "integer"
                },
                "OpcPublishingIntervalTimespan": {
                    "format": "date-span",
                    "description": "OpcPublishingInterval as TimeSpan.",
                    "type": "string"
                },
                "UseCyclicRead": {
                    "description": "Use cyclic read to sample.",
                    "type": "boolean"
                },
                "RegisterNode": {
                    "description": "Register node for reading before sampling.",
                    "type": "boolean"
                },
                "FetchDisplayName": {
                    "description": "Fetch display name from the node",
                    "type": "boolean"
                },
                "ExpandedNodeId": {
                    "description": "Expanded Node identifier (same as Azure.IIoT.OpcUa.Publisher.Models.OpcNodeModel.Id)",
                    "type": "string"
                }
            }
        },
        "OperationContextModel": {
            "description": "Operation log model",
            "type": "object",
            "properties": {
                "AuthorityId": {
                    "description": "User",
                    "type": "string"
                },
                "Time": {
                    "format": "date-time",
                    "description": "Operation time",
                    "type": "string"
                }
            }
        },
        "OperationLimitsModel": {
            "description": "Server limits",
            "type": "object",
            "properties": {
                "minSupportedSampleRate": {
                    "format": "double",
                    "description": "Min supported sampling rate",
                    "type": "number"
                },
                "maxBrowseContinuationPoints": {
                    "format": "int32",
                    "description": "Max browse continuation points",
                    "type": "integer"
                },
                "maxQueryContinuationPoints": {
                    "format": "int32",
                    "description": "Max query continuation points",
                    "type": "integer"
                },
                "maxHistoryContinuationPoints": {
                    "format": "int32",
                    "description": "Max history continuation points",
                    "type": "integer"
                },
                "maxArrayLength": {
                    "format": "int64",
                    "description": "Max array length supported",
                    "type": "integer"
                },
                "maxStringLength": {
                    "format": "int64",
                    "description": "Max string length supported",
                    "type": "integer"
                },
                "maxByteStringLength": {
                    "format": "int64",
                    "description": "Max byte buffer length supported",
                    "type": "integer"
                },
                "maxNodesPerBrowse": {
                    "format": "int64",
                    "description": "Max nodes that can be part of a single browse call.",
                    "type": "integer"
                },
                "maxNodesPerRead": {
                    "format": "int64",
                    "description": "Max nodes that can be read in single read call",
                    "type": "integer"
                },
                "maxNodesPerWrite": {
                    "format": "int64",
                    "description": "Max nodes that can be read in single write call",
                    "type": "integer"
                },
                "maxNodesPerMethodCall": {
                    "format": "int64",
                    "description": "Max nodes that can be read in single method call",
                    "type": "integer"
                },
                "maxNodesPerHistoryReadData": {
                    "format": "int64",
                    "description": "Number of nodes that can be in a History Read value call",
                    "type": "integer"
                },
                "maxNodesPerHistoryReadEvents": {
                    "format": "int64",
                    "description": "Number of nodes that can be in a History Read events call",
                    "type": "integer"
                },
                "maxNodesPerHistoryUpdateData": {
                    "format": "int64",
                    "description": "Number of nodes that can be in a History Update call",
                    "type": "integer"
                },
                "maxNodesPerHistoryUpdateEvents": {
                    "format": "int64",
                    "description": "Number of nodes that can be in a History events update call",
                    "type": "integer"
                },
                "maxNodesPerRegisterNodes": {
                    "format": "int64",
                    "description": "Max nodes that can be registered at once",
                    "type": "integer"
                },
                "maxNodesPerTranslatePathsToNodeIds": {
                    "format": "int64",
                    "description": "Max nodes that can be part of a browse path",
                    "type": "integer"
                },
                "maxNodesPerNodeManagement": {
                    "format": "int64",
                    "description": "Max nodes that can be added or removed in a single call.",
                    "type": "integer"
                },
                "maxMonitoredItemsPerCall": {
                    "format": "int64",
                    "description": "Max monitored items that can be updated at once.",
                    "type": "integer"
                }
            }
        },
        "PublishBulkRequestModel": {
            "description": "Publish in bulk request",
            "type": "object",
            "properties": {
                "nodesToAdd": {
                    "description": "Node to add",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PublishedItemModel"
                    }
                },
                "nodesToRemove": {
                    "description": "Node to remove",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "header": {
                    "$ref": "#/definitions/RequestHeaderModel"
                }
            }
        },
        "PublishBulkResponseModel": {
            "description": "Result of bulk request",
            "type": "object",
            "properties": {
                "nodesToAdd": {
                    "description": "Node to add",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceResultModel"
                    }
                },
                "nodesToRemove": {
                    "description": "Node to remove",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ServiceResultModel"
                    }
                }
            }
        },
        "PublishStartRequestModel": {
            "description": "Publish request",
            "required": [
                "item"
            ],
            "type": "object",
            "properties": {
                "item": {
                    "$ref": "#/definitions/PublishedItemModel"
                },
                "header": {
                    "$ref": "#/definitions/RequestHeaderModel"
                }
            }
        },
        "PublishStartResponseModel": {
            "description": "Result of publish request",
            "type": "object",
            "properties": {
                "errorInfo": {
                    "$ref": "#/definitions/ServiceResultModel"
                }
            }
        },
        "PublishStopRequestModel": {
            "description": "Unpublish request",
            "required": [
                "nodeId"
            ],
            "type": "object",
            "properties": {
                "nodeId": {
                    "description": "Node of published item to unpublish",
                    "minLength": 1,
                    "type": "string"
                },
                "header": {
                    "$ref": "#/definitions/RequestHeaderModel"
                }
            }
        },
        "PublishStopResponseModel": {
            "description": "Result of publish stop request",
            "type": "object",
            "properties": {
                "errorInfo": {
                    "$ref": "#/definitions/ServiceResultModel"
                }
            }
        },
        "PublishedItemListRequestModel": {
            "description": "Request list of published items",
            "type": "object",
            "properties": {
                "continuationToken": {
                    "description": "Continuation token or null to start",
                    "type": "string"
                },
                "header": {
                    "$ref": "#/definitions/RequestHeaderModel"
                }
            }
        },
        "PublishedItemListResponseModel": {
            "description": "List of published nodes",
            "type": "object",
            "properties": {
                "items": {
                    "description": "Monitored items",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PublishedItemModel"
                    }
                },
                "continuationToken": {
                    "description": "Continuation or null if final",
                    "type": "string"
                }
            }
        },
        "PublishedItemModel": {
            "description": "A monitored and published item",
            "required": [
                "nodeId"
            ],
            "type": "object",
            "properties": {
                "nodeId": {
                    "description": "Variable node monitored",
                    "minLength": 1,
                    "type": "string"
                },
                "displayName": {
                    "description": "Display name of the variable node monitored",
                    "type": "string"
                },
                "publishingInterval": {
                    "format": "date-span",
                    "description": "Publishing interval to use",
                    "type": "string"
                },
                "samplingInterval": {
                    "format": "date-span",
                    "description": "Sampling interval to use",
                    "type": "string"
                },
                "heartbeatInterval": {
                    "format": "date-span",
                    "description": "Heartbeat interval to use",
                    "type": "string"
                }
            }
        },
        "PublishedNodesEntryModel": {
            "description": "Contains the nodes which should be published",
            "required": [
                "EndpointUrl"
            ],
            "type": "object",
            "properties": {
                "Version": {
                    "format": "int32",
                    "description": "Version number of the entry",
                    "type": "integer"
                },
                "LastChangeTimespan": {
                    "format": "date-time",
                    "description": "Last change to the entry",
                    "type": "string"
                },
                "DataSetWriterId": {
                    "description": "Name of the data set writer.",
                    "type": "string"
                },
                "DataSetWriterGroup": {
                    "description": "The Group the writer belongs to.",
                    "type": "string"
                },
                "OpcNodes": {
                    "description": "Nodes defined in the collection.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OpcNodeModel"
                    }
                },
                "DataSetClassId": {
                    "format": "uuid",
                    "description": "A dataset class id.",
                    "type": "string"
                },
                "DataSetName": {
                    "description": "The optional short name of the dataset.",
                    "type": "string"
                },
                "DataSetPublishingInterval": {
                    "format": "int32",
                    "description": "The Publishing interval for a dataset writer\r\nin miliseconds.",
                    "type": "integer"
                },
                "DataSetPublishingIntervalTimespan": {
                    "format": "date-span",
                    "description": "The Publishing interval for a dataset writer\r\nin timespan format. Takes precedence over\r\nAzure.IIoT.OpcUa.Publisher.Models.PublishedNodesEntryModel.DataSetPublishingInterval if defined.",
                    "type": "string"
                },
                "DataSetKeyFrameCount": {
                    "format": "int64",
                    "description": "Insert a key frame every x messages",
                    "type": "integer"
                },
                "MetaDataUpdateTime": {
                    "format": "int32",
                    "description": "Send metadata at the configured interval\r\neven when not changing expressed in milliseconds.",
                    "type": "integer"
                },
                "MetaDataUpdateTimeTimespan": {
                    "format": "date-span",
                    "description": "Send metadata at the configured interval even when not\r\nchanging expressed as duration. Takes precedence over\r\nAzure.IIoT.OpcUa.Publisher.Models.PublishedNodesEntryModel.MetaDataUpdateTimeif defined.",
                    "type": "string"
                },
                "SendKeepAliveDataSetMessages": {
                    "description": "Send a keep alive message when a subscription keep\r\nalive notification is received inside the writer. If keep\r\nalive messages are not supported by the messaging\r\nprofile chosen this value is ignored.",
                    "type": "boolean"
                },
                "EndpointUrl": {
                    "description": "The endpoint URL of the OPC UA server.",
                    "minLength": 1,
                    "type": "string"
                },
                "MaxKeepAliveCount": {
                    "format": "int64",
                    "description": "When the publishing timer has expired this number of\r\ntimes without requiring any Notification to be sent,\r\nto the writer a keep-alive message is sent.",
                    "type": "integer"
                },
                "DataSetDescription": {
                    "description": "The optional description of the dataset.",
                    "type": "string"
                },
                "Priority": {
                    "format": "int32",
                    "description": "Priority of the writer subscription.",
                    "type": "integer"
                },
                "DataSetExtensionFields": {
                    "description": "Optional field and value pairs to insert into the\r\ndata sets emitted by data set writer.",
                    "type": "object",
                    "additionalProperties": {
                        "description": "A variant which can be represented by any value including null."
                    }
                },
                "EndpointSecurityMode": {
                    "$ref": "#/definitions/SecurityMode"
                },
                "EndpointSecurityPolicy": {
                    "description": "The specific security policy to use for the specified\r\nendpoint. Overrides Azure.IIoT.OpcUa.Publisher.Models.PublishedNodesEntryModel.UseSecurity setting.\r\nIf the security policy is not available with the\r\nspecified security mode connectivity will fail.",
                    "type": "string"
                },
                "MessagingMode": {
                    "$ref": "#/definitions/MessagingMode"
                },
                "MessageEncoding": {
                    "$ref": "#/definitions/MessageEncoding"
                },
                "BatchSize": {
                    "format": "int64",
                    "description": "Send network messages when the notification queue\r\nexceeds this number. Causes this many notifications\r\nto be added to network messages",
                    "type": "integer"
                },
                "BatchTriggerInterval": {
                    "format": "int32",
                    "description": "Send network messages at the specified publishing\r\ninterval.",
                    "type": "integer"
                },
                "BatchTriggerIntervalTimespan": {
                    "format": "date-span",
                    "description": "Send network messages at the specified publishing\r\ninterval.\r\nTakes precedence over Azure.IIoT.OpcUa.Publisher.Models.PublishedNodesEntryModel.BatchTriggerInterval\r\nif defined.",
                    "type": "string"
                },
                "UseReverseConnect": {
                    "description": "Use reverse connect to connect ot the endpoint",
                    "type": "boolean"
                },
                "WriterGroupQualityOfService": {
                    "$ref": "#/definitions/QoS"
                },
                "WriterGroupTransport": {
                    "$ref": "#/definitions/WriterGroupTransport"
                },
                "UseSecurity": {
                    "description": "Secure transport should be used to connect to\r\nthe opc server.",
                    "type": "boolean"
                },
                "OpcAuthenticationMode": {
                    "$ref": "#/definitions/OpcAuthenticationMode"
                },
                "EncryptedAuthUsername": {
                    "description": "encrypted username",
                    "type": "string"
                },
                "EncryptedAuthPassword": {
                    "description": "encrypted password",
                    "type": "string"
                },
                "OpcAuthenticationUsername": {
                    "description": "plain username",
                    "type": "string"
                },
                "OpcAuthenticationPassword": {
                    "description": "plain password",
                    "type": "string"
                },
                "NodeId": {
                    "$ref": "#/definitions/NodeIdModel"
                }
            }
        },
        "PublishedNodesEntryModelIAsyncEnumerable": {
            "type": "object"
        },
        "PublisherListModel": {
            "description": "Publisher list",
            "type": "object",
            "properties": {
                "items": {
                    "description": "Registrations",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PublisherModel"
                    }
                },
                "continuationToken": {
                    "description": "Continuation or null if final",
                    "type": "string"
                }
            }
        },
        "PublisherModel": {
            "description": "Publisher registration",
            "required": [
                "id"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "description": "Identifier of the publisher",
                    "minLength": 1,
                    "type": "string"
                },
                "siteId": {
                    "description": "Site of the publisher",
                    "type": "string"
                },
                "outOfSync": {
                    "description": "Whether the registration is out of sync between\r\nclient (module) and server (service) (default: false).",
                    "type": "boolean"
                },
                "connected": {
                    "description": "Whether publisher is connected",
                    "type": "boolean"
                },
                "version": {
                    "description": "The reported version of the publisher",
                    "type": "string"
                },
                "apiKey": {
                    "description": "Current api key",
                    "type": "string"
                }
            }
        },
        "PublisherQueryModel": {
            "description": "Publisher registration query request",
            "type": "object",
            "properties": {
                "siteId": {
                    "description": "Site for the supervisors",
                    "type": "string"
                },
                "connected": {
                    "description": "Included connected or disconnected",
                    "type": "boolean"
                }
            }
        },
        "PublisherUpdateModel": {
            "description": "Publisher registration update request",
            "type": "object",
            "properties": {
                "siteId": {
                    "description": "Site of the publisher",
                    "type": "string"
                },
                "apiKey": {
                    "description": "New api key",
                    "type": "string"
                }
            }
        },
        "QoS": {
            "enum": [
                "AtMostOnce",
                "AtLeastOnce",
                "ExactlyOnce"
            ],
            "type": "string",
            "x-ms-enum": {
                "name": "QoS",
                "modelAsString": false
            }
        },
        "ReadEventsDetailsModel": {
            "description": "Read event data",
            "type": "object",
            "properties": {
                "startTime": {
                    "format": "date-time",
                    "description": "Start time to read from",
                    "type": "string"
                },
                "endTime": {
                    "format": "date-time",
                    "description": "End time to read to",
                    "type": "string"
                },
                "numEvents": {
                    "format": "int64",
                    "description": "Number of events to read",
                    "type": "integer"
                },
                "filter": {
                    "$ref": "#/definitions/EventFilterModel"
                }
            }
        },
        "ReadEventsDetailsModelHistoryReadRequestModel": {
            "description": "Request node history read",
            "required": [
                "details",
                "nodeId"
            ],
            "type": "object",
            "properties": {
                "nodeId": {
                    "description": "Node to read from (mandatory)",
                    "minLength": 1,
                    "type": "string"
                },
                "browsePath": {
                    "description": "An optional path from NodeId instance to\r\nthe actual node.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "details": {
                    "$ref": "#/definitions/ReadEventsDetailsModel"
                },
                "indexRange": {
                    "description": "Index range to read, e.g. 1:2,0:1 for 2 slices\r\nout of a matrix or 0:1 for the first item in\r\nan array, string or bytestring.\r\nSee 7.22 of part 4: NumericRange.",
                    "type": "string"
                },
                "header": {
                    "$ref": "#/definitions/RequestHeaderModel"
                },
                "timestampsToReturn": {
                    "$ref": "#/definitions/TimestampsToReturn"
                }
            }
        },
        "ReadModifiedValuesDetailsModel": {
            "description": "Read modified data",
            "type": "object",
            "properties": {
                "startTime": {
                    "format": "date-time",
                    "description": "The start time to read from",
                    "type": "string"
                },
                "endTime": {
                    "format": "date-time",
                    "description": "The end time to read to",
                    "type": "string"
                },
                "numValues": {
                    "format": "int64",
                    "description": "The number of values to read",
                    "type": "integer"
                }
            }
        },
        "ReadModifiedValuesDetailsModelHistoryReadRequestModel": {
            "description": "Request node history read",
            "required": [
                "details",
                "nodeId"
            ],
            "type": "object",
            "properties": {
                "nodeId": {
                    "description": "Node to read from (mandatory)",
                    "minLength": 1,
                    "type": "string"
                },
                "browsePath": {
                    "description": "An optional path from NodeId instance to\r\nthe actual node.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "details": {
                    "$ref": "#/definitions/ReadModifiedValuesDetailsModel"
                },
                "indexRange": {
                    "description": "Index range to read, e.g. 1:2,0:1 for 2 slices\r\nout of a matrix or 0:1 for the first item in\r\nan array, string or bytestring.\r\nSee 7.22 of part 4: NumericRange.",
                    "type": "string"
                },
                "header": {
                    "$ref": "#/definitions/RequestHeaderModel"
                },
                "timestampsToReturn": {
                    "$ref": "#/definitions/TimestampsToReturn"
                }
            }
        },
        "ReadProcessedValuesDetailsModel": {
            "description": "Read processed historic data",
            "type": "object",
            "properties": {
                "startTime": {
                    "format": "date-time",
                    "description": "Start time to read from.",
                    "type": "string"
                },
                "endTime": {
                    "format": "date-time",
                    "description": "End time to read until",
                    "type": "string"
                },
                "processingInterval": {
                    "format": "date-span",
                    "description": "Interval to process",
                    "type": "string"
                },
                "aggregateType": {
                    "description": "The aggregate type to apply. Can be the name of\r\nthe aggregate if available in the history server\r\ncapabilities, or otherwise will be used as a node\r\nid referring to the aggregate.",
                    "type": "string"
                },
                "aggregateConfiguration": {
                    "$ref": "#/definitions/AggregateConfigurationModel"
                }
            }
        },
        "ReadProcessedValuesDetailsModelHistoryReadRequestModel": {
            "description": "Request node history read",
            "required": [
                "details",
                "nodeId"
            ],
            "type": "object",
            "properties": {
                "nodeId": {
                    "description": "Node to read from (mandatory)",
                    "minLength": 1,
                    "type": "string"
                },
                "browsePath": {
                    "description": "An optional path from NodeId instance to\r\nthe actual node.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "details": {
                    "$ref": "#/definitions/ReadProcessedValuesDetailsModel"
                },
                "indexRange": {
                    "description": "Index range to read, e.g. 1:2,0:1 for 2 slices\r\nout of a matrix or 0:1 for the first item in\r\nan array, string or bytestring.\r\nSee 7.22 of part 4: NumericRange.",
                    "type": "string"
                },
                "header": {
                    "$ref": "#/definitions/RequestHeaderModel"
                },
                "timestampsToReturn": {
                    "$ref": "#/definitions/TimestampsToReturn"
                }
            }
        },
        "ReadRequestModel": {
            "description": "Request node attribute read",
            "required": [
                "attributes"
            ],
            "type": "object",
            "properties": {
                "attributes": {
                    "description": "Attributes to read",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeReadRequestModel"
                    }
                },
                "header": {
                    "$ref": "#/definitions/RequestHeaderModel"
                }
            }
        },
        "ReadResponseModel": {
            "description": "Result of attribute reads",
            "type": "object",
            "properties": {
                "results": {
                    "description": "All results of attribute reads",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeReadResponseModel"
                    }
                },
                "errorInfo": {
                    "$ref": "#/definitions/ServiceResultModel"
                }
            }
        },
        "ReadValuesAtTimesDetailsModel": {
            "description": "Read data at specified times",
            "required": [
                "reqTimes"
            ],
            "type": "object",
            "properties": {
                "reqTimes": {
                    "description": "Requested datums",
                    "type": "array",
                    "items": {
                        "format": "date-time",
                        "type": "string"
                    }
                },
                "useSimpleBounds": {
                    "description": "Whether to use simple bounds",
                    "type": "boolean"
                }
            }
        },
        "ReadValuesAtTimesDetailsModelHistoryReadRequestModel": {
            "description": "Request node history read",
            "required": [
                "details",
                "nodeId"
            ],
            "type": "object",
            "properties": {
                "nodeId": {
                    "description": "Node to read from (mandatory)",
                    "minLength": 1,
                    "type": "string"
                },
                "browsePath": {
                    "description": "An optional path from NodeId instance to\r\nthe actual node.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "details": {
                    "$ref": "#/definitions/ReadValuesAtTimesDetailsModel"
                },
                "indexRange": {
                    "description": "Index range to read, e.g. 1:2,0:1 for 2 slices\r\nout of a matrix or 0:1 for the first item in\r\nan array, string or bytestring.\r\nSee 7.22 of part 4: NumericRange.",
                    "type": "string"
                },
                "header": {
                    "$ref": "#/definitions/RequestHeaderModel"
                },
                "timestampsToReturn": {
                    "$ref": "#/definitions/TimestampsToReturn"
                }
            }
        },
        "ReadValuesDetailsModel": {
            "description": "Read historic values",
            "type": "object",
            "properties": {
                "startTime": {
                    "format": "date-time",
                    "description": "Beginning of period to read. Set to null\r\nif no specific start time is specified.",
                    "type": "string"
                },
                "endTime": {
                    "format": "date-time",
                    "description": "End of period to read. Set to null if no\r\nspecific end time is specified.",
                    "type": "string"
                },
                "numValues": {
                    "format": "int64",
                    "description": "The maximum number of values returned for any Node\r\nover the time range. If only one time is specified,\r\nthe time range shall extend to return this number\r\nof values. 0 or null indicates that there is no\r\nmaximum.",
                    "type": "integer"
                },
                "returnBounds": {
                    "description": "Whether to return the bounding values or not.",
                    "type": "boolean"
                }
            }
        },
        "ReadValuesDetailsModelHistoryReadRequestModel": {
            "description": "Request node history read",
            "required": [
                "details",
                "nodeId"
            ],
            "type": "object",
            "properties": {
                "nodeId": {
                    "description": "Node to read from (mandatory)",
                    "minLength": 1,
                    "type": "string"
                },
                "browsePath": {
                    "description": "An optional path from NodeId instance to\r\nthe actual node.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "details": {
                    "$ref": "#/definitions/ReadValuesDetailsModel"
                },
                "indexRange": {
                    "description": "Index range to read, e.g. 1:2,0:1 for 2 slices\r\nout of a matrix or 0:1 for the first item in\r\nan array, string or bytestring.\r\nSee 7.22 of part 4: NumericRange.",
                    "type": "string"
                },
                "header": {
                    "$ref": "#/definitions/RequestHeaderModel"
                },
                "timestampsToReturn": {
                    "$ref": "#/definitions/TimestampsToReturn"
                }
            }
        },
        "RequestHeaderModel": {
            "description": "Request header model",
            "type": "object",
            "properties": {
                "elevation": {
                    "$ref": "#/definitions/CredentialModel"
                },
                "locales": {
                    "description": "Optional list of locales in preference order.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "diagnostics": {
                    "$ref": "#/definitions/DiagnosticsModel"
                },
                "namespaceFormat": {
                    "$ref": "#/definitions/NamespaceFormat"
                }
            }
        },
        "RolePermissionModel": {
            "description": "Role permission model",
            "required": [
                "roleId"
            ],
            "type": "object",
            "properties": {
                "roleId": {
                    "description": "Identifier of the role object.",
                    "minLength": 1,
                    "type": "string"
                },
                "permissions": {
                    "$ref": "#/definitions/RolePermissions"
                }
            }
        },
        "RolePermissions": {
            "description": "Individual permissions assigned to a role",
            "enum": [
                "None",
                "Browse",
                "ReadRolePermissions",
                "WriteAttribute",
                "WriteRolePermissions",
                "WriteHistorizing",
                "Read",
                "Write",
                "ReadHistory",
                "InsertHistory",
                "ModifyHistory",
                "DeleteHistory",
                "ReceiveEvents",
                "Call",
                "AddReference",
                "RemoveReference",
                "DeleteNode",
                "AddNode"
            ],
            "type": "string",
            "x-ms-enum": {
                "name": "RolePermissions",
                "modelAsString": false
            }
        },
        "SecurityMode": {
            "description": "Security mode of endpoint",
            "enum": [
                "Best",
                "Sign",
                "SignAndEncrypt",
                "None"
            ],
            "type": "string",
            "x-ms-enum": {
                "name": "SecurityMode",
                "modelAsString": false
            }
        },
        "ServerCapabilitiesModel": {
            "description": "Server capabilities",
            "type": "object",
            "properties": {
                "operationLimits": {
                    "$ref": "#/definitions/OperationLimitsModel"
                },
                "supportedLocales": {
                    "description": "Supported locales",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "serverProfileArray": {
                    "description": "Server profiles",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "modellingRules": {
                    "description": "Supported modelling rules",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "aggregateFunctions": {
                    "description": "Supported aggregate functions",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "ServerEndpointQueryModel": {
            "description": "Endpoint model",
            "type": "object",
            "properties": {
                "discoveryUrl": {
                    "description": "Discovery url to use to query",
                    "type": "string"
                },
                "url": {
                    "description": "Endpoint url that should match the found endpoint",
                    "type": "string"
                },
                "securityMode": {
                    "$ref": "#/definitions/SecurityMode"
                },
                "securityPolicy": {
                    "description": "Endpoint must support this Security policy.",
                    "type": "string"
                },
                "certificate": {
                    "description": "Endpoint must match with this certificate thumbprint",
                    "type": "string"
                }
            }
        },
        "ServerRegistrationRequestModel": {
            "description": "Server registration request",
            "required": [
                "discoveryUrl"
            ],
            "type": "object",
            "properties": {
                "discoveryUrl": {
                    "description": "Discovery url to use for registration",
                    "minLength": 1,
                    "type": "string"
                },
                "id": {
                    "description": "User defined request id",
                    "type": "string"
                },
                "context": {
                    "$ref": "#/definitions/OperationContextModel"
                }
            }
        },
        "ServiceResultModel": {
            "description": "Service result",
            "type": "object",
            "properties": {
                "statusCode": {
                    "format": "int64",
                    "description": "Error code - if null operation succeeded.",
                    "type": "integer"
                },
                "errorMessage": {
                    "description": "Error message in case of error or null.",
                    "type": "string"
                },
                "symbolicId": {
                    "description": "Symbolic identifier",
                    "type": "string"
                },
                "locale": {
                    "description": "Locale of the error message",
                    "type": "string"
                },
                "additionalInfo": {
                    "description": "Additional information if available",
                    "type": "string"
                },
                "namespaceUri": {
                    "description": "Namespace uri",
                    "type": "string"
                },
                "inner": {
                    "$ref": "#/definitions/ServiceResultModel"
                }
            }
        },
        "SetConfiguredEndpointsRequestModel": {
            "description": "Set configured endpoints request call",
            "type": "object",
            "properties": {
                "endpoints": {
                    "description": "Endpoints and nodes that make up the configuration",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PublishedNodesEntryModel"
                    }
                }
            }
        },
        "SimpleAttributeOperandModel": {
            "description": "Simple attribute operand model",
            "type": "object",
            "properties": {
                "typeDefinitionId": {
                    "description": "Type definition node id if operand is\r\nsimple or full attribute operand.",
                    "type": "string"
                },
                "browsePath": {
                    "description": "Browse path of attribute operand",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "attributeId": {
                    "$ref": "#/definitions/NodeAttribute"
                },
                "indexRange": {
                    "description": "Index range of attribute operand",
                    "type": "string"
                },
                "displayName": {
                    "description": "Optional display name",
                    "type": "string"
                },
                "dataSetClassFieldId": {
                    "format": "uuid",
                    "description": "Optional data set class field id (Publisher extension)",
                    "type": "string"
                }
            }
        },
        "SupervisorListModel": {
            "description": "Supervisor list",
            "type": "object",
            "properties": {
                "items": {
                    "description": "Registrations",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SupervisorModel"
                    }
                },
                "continuationToken": {
                    "description": "Continuation or null if final",
                    "type": "string"
                }
            }
        },
        "SupervisorModel": {
            "description": "Supervisor registration",
            "required": [
                "id"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "description": "Identifier of the supervisor",
                    "minLength": 1,
                    "type": "string"
                },
                "siteId": {
                    "description": "Site of the supervisor",
                    "type": "string"
                },
                "outOfSync": {
                    "description": "Whether the registration is out of sync between\r\nclient (module) and server (service) (default: false).",
                    "type": "boolean"
                },
                "connected": {
                    "description": "Whether supervisor is connected",
                    "type": "boolean"
                },
                "version": {
                    "description": "The reported version of the supervisor",
                    "type": "string"
                },
                "apiKey": {
                    "description": "Api key of the module",
                    "type": "string"
                }
            }
        },
        "SupervisorQueryModel": {
            "description": "Supervisor registration query",
            "type": "object",
            "properties": {
                "siteId": {
                    "description": "Site for the supervisors",
                    "type": "string"
                },
                "endpointId": {
                    "description": "Managing provided endpoint twin",
                    "type": "string"
                },
                "connected": {
                    "description": "Included connected or disconnected",
                    "type": "boolean"
                }
            }
        },
        "SupervisorUpdateModel": {
            "description": "Supervisor update request",
            "type": "object",
            "properties": {
                "siteId": {
                    "description": "Site the supervisor is part of",
                    "type": "string"
                }
            }
        },
        "TestConnectionRequestModel": {
            "description": "Test connection request",
            "type": "object",
            "properties": {
                "header": {
                    "$ref": "#/definitions/RequestHeaderModel"
                }
            }
        },
        "TestConnectionResponseModel": {
            "description": "Test connection response",
            "type": "object",
            "properties": {
                "errorInfo": {
                    "$ref": "#/definitions/ServiceResultModel"
                }
            }
        },
        "TimestampsToReturn": {
            "description": "Timestamps",
            "enum": [
                "Both",
                "Source",
                "Server",
                "None"
            ],
            "type": "string",
            "x-ms-enum": {
                "name": "TimestampsToReturn",
                "modelAsString": false
            }
        },
        "TypeDefinitionModel": {
            "description": "Type definition",
            "required": [
                "typeDefinitionId"
            ],
            "type": "object",
            "properties": {
                "typeDefinitionId": {
                    "description": "The node id of the type of the node",
                    "minLength": 1,
                    "type": "string"
                },
                "nodeType": {
                    "$ref": "#/definitions/NodeType"
                },
                "displayName": {
                    "description": "Display name",
                    "type": "string"
                },
                "browseName": {
                    "description": "Browse name",
                    "type": "string"
                },
                "description": {
                    "description": "Description if any",
                    "type": "string"
                },
                "typeHierarchy": {
                    "description": "Super types hierarchy starting from base type\r\nup to Azure.IIoT.OpcUa.Publisher.Models.TypeDefinitionModel.TypeDefinitionId which is\r\nnot included.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/NodeModel"
                    }
                },
                "typeMembers": {
                    "description": "Fully inherited instance declarations of the type\r\nof the node.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/InstanceDeclarationModel"
                    }
                }
            }
        },
        "UpdateEventsDetailsModel": {
            "description": "Insert, upsert or replace historic events",
            "required": [
                "events"
            ],
            "type": "object",
            "properties": {
                "filter": {
                    "$ref": "#/definitions/EventFilterModel"
                },
                "events": {
                    "description": "The new events to insert",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/HistoricEventModel"
                    }
                }
            }
        },
        "UpdateEventsDetailsModelHistoryUpdateRequestModel": {
            "description": "Request node history update",
            "required": [
                "details",
                "nodeId"
            ],
            "type": "object",
            "properties": {
                "nodeId": {
                    "description": "Node to update",
                    "minLength": 1,
                    "type": "string"
                },
                "browsePath": {
                    "description": "An optional path from NodeId instance to\r\nthe actual node.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "details": {
                    "$ref": "#/definitions/UpdateEventsDetailsModel"
                },
                "header": {
                    "$ref": "#/definitions/RequestHeaderModel"
                }
            }
        },
        "UpdateValuesDetailsModel": {
            "description": "Insert, upsert, or update historic values",
            "required": [
                "values"
            ],
            "type": "object",
            "properties": {
                "values": {
                    "description": "Values to insert",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/HistoricValueModel"
                    }
                }
            }
        },
        "UpdateValuesDetailsModelHistoryUpdateRequestModel": {
            "description": "Request node history update",
            "required": [
                "details",
                "nodeId"
            ],
            "type": "object",
            "properties": {
                "nodeId": {
                    "description": "Node to update",
                    "minLength": 1,
                    "type": "string"
                },
                "browsePath": {
                    "description": "An optional path from NodeId instance to\r\nthe actual node.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "details": {
                    "$ref": "#/definitions/UpdateValuesDetailsModel"
                },
                "header": {
                    "$ref": "#/definitions/RequestHeaderModel"
                }
            }
        },
        "UserIdentityModel": {
            "description": "User identity model",
            "type": "object",
            "properties": {
                "user": {
                    "description": "<br>\r\n            For Azure.IIoT.OpcUa.Publisher.Models.CredentialType.UserName authentication\r\n            this is the name of the user.\r\n            \r\n<br>\r\n            For Azure.IIoT.OpcUa.Publisher.Models.CredentialType.X509Certificate authentication\r\n            this is the subject name of the certificate that has been\r\n            configured.\r\n            Either Azure.IIoT.OpcUa.Publisher.Models.UserIdentityModel.User or Azure.IIoT.OpcUa.Publisher.Models.UserIdentityModel.Thumbprint must be\r\n            used to select the certificate in the user certificate store.\r\n            \r\n<br>\r\n            Not used for the other authentication types.\r\n            ",
                    "type": "string"
                },
                "password": {
                    "description": "<br>\r\n            For Azure.IIoT.OpcUa.Publisher.Models.CredentialType.UserName authentication\r\n            this is the password of the user.\r\n            \r\n<br>\r\n            For Azure.IIoT.OpcUa.Publisher.Models.CredentialType.X509Certificate authentication\r\n            this is the passcode to export the configured certificate's\r\n            private key.\r\n            \r\n<br>\r\n            Not used for the other authentication types.\r\n            ",
                    "type": "string"
                },
                "thumbprint": {
                    "description": "<br>\r\n            For Azure.IIoT.OpcUa.Publisher.Models.CredentialType.X509Certificate authentication\r\n            this is the thumbprint of the configured certificate to use.\r\n            Either Azure.IIoT.OpcUa.Publisher.Models.UserIdentityModel.User or Azure.IIoT.OpcUa.Publisher.Models.UserIdentityModel.Thumbprint must be\r\n            used to select the certificate in the user certificate store.\r\n            \r\n<br>\r\n            Not used for the other authentication types.\r\n            ",
                    "type": "string"
                }
            }
        },
        "ValueReadRequestModel": {
            "description": "Request node value read",
            "type": "object",
            "properties": {
                "nodeId": {
                    "description": "Node to read from (mandatory)",
                    "type": "string"
                },
                "browsePath": {
                    "description": "An optional path from NodeId instance to\r\nan actual node.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "indexRange": {
                    "description": "Index range to read, e.g. 1:2,0:1 for 2 slices\r\nout of a matrix or 0:1 for the first item in\r\nan array, string or bytestring.\r\nSee 7.22 of part 4: NumericRange.",
                    "type": "string"
                },
                "header": {
                    "$ref": "#/definitions/RequestHeaderModel"
                },
                "maxAge": {
                    "format": "date-span",
                    "description": "Maximum age of the value to be read in milliseconds.\r\nThe age of the value is based on the difference\r\nbetween the ServerTimestamp and the time when\r\nthe Server starts processing the request.\r\nIf not supplied, the Server shall attempt to read\r\na new value from the data source.",
                    "type": "string"
                },
                "timestampsToReturn": {
                    "$ref": "#/definitions/TimestampsToReturn"
                }
            }
        },
        "ValueReadResponseModel": {
            "description": "Value read response model",
            "type": "object",
            "properties": {
                "value": {
                    "description": "Value read"
                },
                "dataType": {
                    "description": "Built in data type of the value read.",
                    "type": "string"
                },
                "sourcePicoseconds": {
                    "format": "int32",
                    "description": "Pico seconds part of when value was read at source.",
                    "type": "integer"
                },
                "sourceTimestamp": {
                    "format": "date-time",
                    "description": "Timestamp of when value was read at source.",
                    "type": "string"
                },
                "serverPicoseconds": {
                    "format": "int32",
                    "description": "Pico seconds part of when value was read at server.",
                    "type": "integer"
                },
                "serverTimestamp": {
                    "format": "date-time",
                    "description": "Timestamp of when value was read at server.",
                    "type": "string"
                },
                "errorInfo": {
                    "$ref": "#/definitions/ServiceResultModel"
                }
            }
        },
        "ValueWriteRequestModel": {
            "description": "Value write request model",
            "required": [
                "value"
            ],
            "type": "object",
            "properties": {
                "nodeId": {
                    "description": "Node id to write value to.",
                    "type": "string"
                },
                "browsePath": {
                    "description": "An optional path from NodeId instance to\r\nthe actual node.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "value": {
                    "description": "Value to write. The system tries to convert\r\nthe value according to the data type value,\r\ne.g. convert comma seperated value strings\r\ninto arrays.  (Mandatory)"
                },
                "dataType": {
                    "description": "A built in datatype for the value. This can\r\nbe a data type from browse, or a built in\r\ntype.\r\n(default: best effort)",
                    "type": "string"
                },
                "indexRange": {
                    "description": "Index range to write",
                    "type": "string"
                },
                "header": {
                    "$ref": "#/definitions/RequestHeaderModel"
                }
            }
        },
        "ValueWriteResponseModel": {
            "description": "Value write response model",
            "type": "object",
            "properties": {
                "errorInfo": {
                    "$ref": "#/definitions/ServiceResultModel"
                }
            }
        },
        "VariableMetadataModel": {
            "description": "Variable metadata model",
            "type": "object",
            "properties": {
                "dataType": {
                    "$ref": "#/definitions/DataTypeMetadataModel"
                },
                "valueRank": {
                    "$ref": "#/definitions/NodeValueRank"
                },
                "arrayDimensions": {
                    "format": "int64",
                    "description": "Array dimensions of the variable.",
                    "type": "integer",
                    "items": {
                        "format": "int64",
                        "type": "integer"
                    }
                }
            }
        },
        "VariantValueHistoryReadNextResponseModel": {
            "description": "History read continuation result",
            "properties": {
                "history": {
                    "description": "History as json encoded extension object"
                },
                "continuationToken": {
                    "description": "Continuation token if more results pending.",
                    "type": "string"
                },
                "errorInfo": {
                    "$ref": "#/definitions/ServiceResultModel"
                }
            }
        },
        "VariantValueHistoryReadRequestModel": {
            "description": "Request node history read",
            "required": [
                "details",
                "nodeId"
            ],
            "properties": {
                "nodeId": {
                    "description": "Node to read from (mandatory)",
                    "minLength": 1,
                    "type": "string"
                },
                "browsePath": {
                    "description": "An optional path from NodeId instance to\r\nthe actual node.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "details": {
                    "description": "The HistoryReadDetailsType extension object\r\nencoded in json and containing the tunneled\r\nHistorian reader request."
                },
                "indexRange": {
                    "description": "Index range to read, e.g. 1:2,0:1 for 2 slices\r\nout of a matrix or 0:1 for the first item in\r\nan array, string or bytestring.\r\nSee 7.22 of part 4: NumericRange.",
                    "type": "string"
                },
                "header": {
                    "$ref": "#/definitions/RequestHeaderModel"
                },
                "timestampsToReturn": {
                    "$ref": "#/definitions/TimestampsToReturn"
                }
            }
        },
        "VariantValueHistoryReadResponseModel": {
            "description": "History read results",
            "properties": {
                "history": {
                    "description": "History as json encoded extension object"
                },
                "continuationToken": {
                    "description": "Continuation token if more results pending.",
                    "type": "string"
                },
                "errorInfo": {
                    "$ref": "#/definitions/ServiceResultModel"
                }
            }
        },
        "VariantValueHistoryUpdateRequestModel": {
            "description": "Request node history update",
            "required": [
                "details",
                "nodeId"
            ],
            "properties": {
                "nodeId": {
                    "description": "Node to update",
                    "minLength": 1,
                    "type": "string"
                },
                "browsePath": {
                    "description": "An optional path from NodeId instance to\r\nthe actual node.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "details": {
                    "description": "The HistoryUpdateDetailsType extension object\r\nencoded as json Variant and containing the tunneled\r\nupdate request for the Historian server. The value\r\nis updated at edge using above node address."
                },
                "header": {
                    "$ref": "#/definitions/RequestHeaderModel"
                }
            }
        },
        "WriteRequestModel": {
            "description": "Request node attribute write",
            "required": [
                "attributes"
            ],
            "type": "object",
            "properties": {
                "attributes": {
                    "description": "Attributes to update",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeWriteRequestModel"
                    }
                },
                "header": {
                    "$ref": "#/definitions/RequestHeaderModel"
                }
            }
        },
        "WriteResponseModel": {
            "description": "Result of attribute write",
            "type": "object",
            "properties": {
                "results": {
                    "description": "All results of attribute writes",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeWriteResponseModel"
                    }
                },
                "errorInfo": {
                    "$ref": "#/definitions/ServiceResultModel"
                }
            }
        },
        "WriterGroupTransport": {
            "description": "Desired writer group transport",
            "enum": [
                "IoTHub",
                "Mqtt",
                "Dapr",
                "Http",
                "FileSystem",
                "Null"
            ],
            "type": "string",
            "x-ms-enum": {
                "name": "WriterGroupTransport",
                "modelAsString": false
            }
        },
        "X509CertificateChainModel": {
            "description": "Certificate chain",
            "type": "object",
            "properties": {
                "chain": {
                    "description": "Chain",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/X509CertificateModel"
                    }
                },
                "status": {
                    "description": "Chain validation status if validated",
                    "enum": [
                        "NotTimeValid",
                        "Revoked",
                        "NotSignatureValid",
                        "NotValidForUsage",
                        "UntrustedRoot",
                        "RevocationStatusUnknown",
                        "Cyclic",
                        "InvalidExtension",
                        "InvalidPolicyConstraints",
                        "InvalidBasicConstraints",
                        "InvalidNameConstraints",
                        "HasNotSupportedNameConstraint",
                        "HasNotDefinedNameConstraint",
                        "HasNotPermittedNameConstraint",
                        "HasExcludedNameConstraint",
                        "PartialChain",
                        "CtlNotTimeValid",
                        "CtlNotSignatureValid",
                        "CtlNotValidForUsage",
                        "HasWeakSignature",
                        "OfflineRevocation",
                        "NoIssuanceChainPolicy",
                        "ExplicitDistrust",
                        "HasNotSupportedCriticalExtension"
                    ],
                    "type": "string",
                    "items": {
                        "$ref": "#/definitions/X509ChainStatus"
                    },
                    "x-ms-enum": {
                        "name": "X509ChainStatus",
                        "modelAsString": false
                    }
                }
            }
        },
        "X509CertificateModel": {
            "description": "Certificate model",
            "type": "object",
            "properties": {
                "subject": {
                    "description": "Subject",
                    "type": "string"
                },
                "thumbprint": {
                    "description": "Thumbprint",
                    "type": "string"
                },
                "serialNumber": {
                    "description": "Serial number",
                    "type": "string"
                },
                "notBeforeUtc": {
                    "format": "date-time",
                    "description": "Not before validity",
                    "type": "string"
                },
                "notAfterUtc": {
                    "format": "date-time",
                    "description": "Not after validity",
                    "type": "string"
                },
                "selfSigned": {
                    "description": "Self signed certificate",
                    "type": "boolean"
                },
                "pfx": {
                    "description": "Certificate as Pkcs12",
                    "type": "array",
                    "items": {
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "hasPrivateKey": {
                    "description": "Contains private key",
                    "type": "boolean"
                }
            }
        },
        "X509ChainStatus": {
            "description": "Status of x509 chain",
            "enum": [
                "NotTimeValid",
                "Revoked",
                "NotSignatureValid",
                "NotValidForUsage",
                "UntrustedRoot",
                "RevocationStatusUnknown",
                "Cyclic",
                "InvalidExtension",
                "InvalidPolicyConstraints",
                "InvalidBasicConstraints",
                "InvalidNameConstraints",
                "HasNotSupportedNameConstraint",
                "HasNotDefinedNameConstraint",
                "HasNotPermittedNameConstraint",
                "HasExcludedNameConstraint",
                "PartialChain",
                "CtlNotTimeValid",
                "CtlNotSignatureValid",
                "CtlNotValidForUsage",
                "HasWeakSignature",
                "OfflineRevocation",
                "NoIssuanceChainPolicy",
                "ExplicitDistrust",
                "HasNotSupportedCriticalExtension"
            ],
            "type": "string",
            "x-ms-enum": {
                "name": "X509ChainStatus",
                "modelAsString": false
            }
        }
    },
    "tags": [
        {
            "name": "Applications",
            "description": "CRUD and Query application resources"
        },
        {
            "name": "Discovery",
            "description": "Discovery"
        },
        {
            "name": "Endpoints",
            "description": "Activate, Deactivate and Query endpoint resources"
        },
        {
            "name": "Events",
            "description": "Configure discovery events"
        },
        {
            "name": "Gateways",
            "description": "Read, Update and Query Gateway resources"
        },
        {
            "name": "History",
            "description": "History raw access services"
        },
        {
            "name": "Publish",
            "description": "Value and Event publishing services"
        },
        {
            "name": "Publishers",
            "description": "Read, Update and Query publisher resources"
        },
        {
            "name": "Supervisors",
            "description": "Read, Update and Query publisher resources"
        },
        {
            "name": "Telemetry",
            "description": "Value and Event monitoring services"
        },
        {
            "name": "Twin",
            "description": "Node access read services"
        }
    ]
}
